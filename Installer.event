

#ifndef FreeSpace 
	#ifdef _FE6_
		#define FreeSpace 0x830000
	#endif
	#ifdef _FE7_
		#define FreeSpace 0x1000000
	#endif
	#ifdef _FE8_
		#define FreeSpace 0x1000000
	#endif 
	ORG FreeSpace 
#endif 
#ifndef callHackNew 
	#define callHackNew(offset) 		"BYTE $01 $4B $9E $46 $00 $F8 $01 $E0; POIN (offset|0x1)"
#endif 

#include "Extensions/Hack Installation.txt" 
#include "Extensions/ProcDefinitions.txt" 

#ifdef _FE6_ 
	#include "Patches/FE6.lyn.event" 
	#include "Patches/FE6_AsmHooks.lyn.event" 
#endif 

#ifdef _FE7_ 
	#include "Patches/FE7.lyn.event" 
	#include "Patches/FE7_AsmHooks.lyn.event" 
#endif 


// in A200B8 fe8 / CE3C54 fe7 / 
//a20164
//8CE4930
PUSH 
#ifdef _FE6_ 
ORG $8874C; SHORT $46C0 // hard selectable from new game by 7743 

// Antihuffman 
ORG 0x384c;  BYTE $03 $B5 $02 $B0 $C2 $0F $00 $2A $01 $D0 $05 $4A $97 $46 $03 $4A $12 $68 $9A $F0 $5B $FB $01 $BC $00 $47 $00 $00 $80 $37 $00 $03 $60 $C4 $2D $08
ORG $2dc460; BYTE $80 $23 $1B $06 $C0 $1A $02 $78 $0A $70 $01 $31 $01 $30 $00 $2A $F9 $D1 $01 $4A $97 $46 $00 $00 $62 $38 $00 $08

ORG $68A08C//$68C30C //68A09C
PROC_CALL_ROUTINE_2(FE6_StartDifficultySelection)
#endif 
#ifdef _FE7_ 
ORG $CE45EC // in CE45E4 //B9395C //CE49D8
PROC_CALL_ROUTINE_2(FE7_StartDifficultySelection)
#endif 
#ifdef _FE8 
ORG $A20A18
PROC_CALL_ROUTINE_2(FE8_StartDifficultySelection)
#endif 

POP 



#ifdef _FE6_ 
ALIGN 4 
CasualModeFlag:
WORD 0x8C 
MaxItems:
WORD 0x7F
MaxClasses:
WORD 0x43 

ALIGN 4 
InvalidClassesList: 	// 4, 5, 6 are duplicate promoted lords 
BYTE 3 5 7 9 0xD 0xF 0x11 0x13 0x15 0x1B 0x1D 0x1F 0x21 0x23 0x27 0x29 0x2D 0x2F 0x35 
BYTE 0 // Terminator 

ALIGN 4 
VarianceText: 
BYTE 0x5D 0x8F 0x9C 0x2D 0xC8 0x7C 0x2F 00 0 0 
BaseStatsText: 
BYTE 0x3D 0x64 0x7D 0x9A 0xB9 0xF8 0xEA 0x05 0x00 0x00
GrowthsText: 
BYTE 0x5D 0x1C 0xB5 0x7D 0xAC 0x5E 0x00 0x00
StatCapsText: 
BYTE 0xCD 0x5C 0x3C 0x2C 0x4A 0x67 0xF5 0x02 0x00 0x00
ClassText: 
BYTE 0x2C 0x16 0x59 0xAB 0x17 0x00 0x00 0x00
ItemsText: 
BYTE 0x6D 0xFF 0x7A 0xF5 0x02 0x00 0x00
EnemyDiffBonusText: 
BYTE 0xA4 0xF0 0x6B 0x10 0x6B 0x9B 0x20 0x6E 0x7A 0x28 0xF2 0xD5 0x0B 0x00 0x00 0x00
ModeText: 
BYTE 0x64 0x14 0x7E 0x2F 0x00 0x00 0x00 0x00
SeedText: 
BYTE 0xCD 0xFE 0x61 0x2F 0x00 0x00 00 00 00 00 

VanillaText:
BYTE 0x5D 0x8F 0xE0 0x2E 0x45 0x7A 0x01 0x00 0x00 0x00 0x00 0x00 0x00 
RandomText:
BYTE 0xFD 0x09 0x42 0xAD 0x7B 0x01 0x00 0x00 0x00 0x00 0x00 0x00 
ZeroPercentText: 
BYTE 0xC6 0xA1 0x7F 0x2F 0x98 0xEB 0x05 0x00 0x00 0x00 0x00 0x00 0x00 
OneHundredPercentText:
BYTE 0x2C 0xA8 0x71 0x30 0x0E 0xFD 0x7B 0xC1 0x5C 0x2F 0x00 0x00 0x00 0x00 0x00 0x00 
Always30Text: 
BYTE 0x24 0xC5 0x16 0xB0 0x62 0x3D 0x33 0x0E 0xBD 0x00 0x00 0x00 0x00 0x00 0x00 0x00 
FounditemsonlyText:
BYTE 0xA4 0x29 0x47 0x98 0xED 0x5F 0xAF 0x28 0x16 0xD0 0x0B 0x00 0x00 0x00 0x00 0x00
ItemstatsonlyText:
BYTE 0x6D 0xFF 0x3A 0xCB 0xC5 0x57 0x14 0x0B 0xE8 0x05 0x00 0x00
ClassicText:
BYTE 0x2C 0x16 0x59 0x6B 0x33 0xBD 0x00 0x00 0x00 0x00 0x00 0x00
CasualText:
BYTE 0x2C 0xCA 0xE2 0x52 0x7A 0x01 0x00 0x00 0x00 0x00 0x00 0x00


#define TextTable 0xF635C
#define setText(textID, offset) "PUSH; ORG (TextTable+4*textID); POIN (offset|0x80000000); POP"
#define setTextWithHuffman(textID, offset) "PUSH; ORG (TextTable+4*textID); POIN (offset); POP"
ALIGN 4 
setTextWithHuffman(0xB6E, VarianceText)
setTextWithHuffman(0xB6F, BaseStatsText)
setTextWithHuffman(0xB70, GrowthsText)
setTextWithHuffman(0xB71, StatCapsText)
setTextWithHuffman(0xB72, ClassText)
setTextWithHuffman(0xB73, ItemsText)
setTextWithHuffman(0xB74, EnemyDiffBonusText)
setTextWithHuffman(0xB75, ModeText)
setTextWithHuffman(0xB76, SeedText)
setTextWithHuffman(0xB77, VanillaText)
setTextWithHuffman(0xB78, RandomText)
setTextWithHuffman(0xB79, ZeroPercentText)
setTextWithHuffman(0xB7A, OneHundredPercentText)
setTextWithHuffman(0xB7B, Always30Text)
setTextWithHuffman(0xB7C, FounditemsonlyText)
setTextWithHuffman(0xB7D, ItemstatsonlyText)
setTextWithHuffman(0xB7E, ClassicText)
setTextWithHuffman(0xB7F, CasualText)

ALIGN 4 



#endif 


#ifdef _FE7_ 
ALIGN 4 
CasualModeFlag:
WORD 0xA0 
MaxItems:
WORD 0x9E 
MaxClasses:
WORD 0x63 


ALIGN 4 
InvalidClassesList: 	// 4, 5, 6 are duplicate promoted lords 
BYTE 0x4 0x5 0x6 0xB 0xF 0x11 0x15 0x17 0x19 0x1B 0x1F 0x25 0x29 0x2B 0x2f 0x31 0x35 0x37 0x3D 0x4D 0x52 0x53 0x56
BYTE 0 // Terminator 


PUSH 
ORG $CA7A44
//BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN LynModeEvent // CALL 

//ORG $C9A9AB; BYTE 1 // Start ch as dark 
ORG $CAE038
//BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN EliwoodModeEvent  
//BYTE 0x89 0 0 0 // allow skipping 

ORG $CAE610
//BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN HectorModeEvent 
//ORG $CAE920
//BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN HectorModeUnlockDoor
ORG $CC8156; BYTE 0x69 0x6b // matthew gets door key and vuln 
ORG $CC8136; BYTE 0x6b // hector gets vuln 
ORG $CC8089; BYTE 3 // hector ch 11 enemies have ai2 of "do not move" 
ORG $CC8099; BYTE 3
ORG $CC80A9; BYTE 3
ORG $CC80B9; BYTE 3
ORG $CC80C9; BYTE 3
ORG $CC80D9; BYTE 3
ORG $CC80E9; BYTE 3


ORG $CABF64
BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN LynModeUnlockDoor

//ORG $CAD43C
//BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN UnlockDoor7x
//ORG $CB6388
//BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN UnlockDoor22x


ORG $CC5B75
BYTE 3 // Batta y coord 
ORG $CC5B77
BYTE 3

ORG $CC5D5F // Ch 2 boss not on throne 
BYTE 3 
ORG $CC5D7F
BYTE 4 
ORG $CA91CE 
BYTE 2 

//Unit Placer  (EventUnitFE7Form) @Pent(Sage)  Lv:62024-04-03 10:32:41 AM
ORG $CD22FC
BYTE  $15 $22 $00 $32 $10 $05 $10 $05 $39 $38 $6C $00 $00 $03 $0E $00;
//Unit Placer  (EventUnitFE7Form) @Pent(Sage)  Lv:62024-04-03 10:32:58 AM
ORG $CD231C
BYTE  $15 $22 $00 $32 $10 $05 $10 $05 $39 $38 $6C $00 $00 $03 $00 $00;
//Unit Placer  (EventUnitFE7Form) @Hawkeye(Berserker)  Lv:42024-04-03 10:33:54 AM
ORG $CD233C
BYTE  $22 $3B $00 $22 $12 $09 $11 $09 $24 $00 $00 $00 $00 $21 $02 $00;
//Unit Placer  (EventUnitFE7Form) @Hawkeye(Berserker)  Lv:42024-04-03 10:34:23 AM
ORG $CD235C
BYTE  $22 $3B $00 $22 $12 $09 $11 $09 $24 $00 $00 $00 $00 $22 $02 $00;


// swap athos / archsage bases 
//Class Editor  (ClassForm) @42 Archsage2024-03-22 11:10:21 AM
ORG $BE1704
BYTE  $CE $04 $4F $02 $42 $20 $38 $00 $C9 $00 $38 $14 $07 $04 $05 $05 $08 $09 $06 $3C $1E $1E $19 $14 $1E $14 $03 $2D $2D $1E $19 $0A $23 $0F $00 $00 $00 $00 $00 $00 $00 $01 $00 $80 $00 $00 $00 $00 $FB $FB $FB $FB $F0 $94 $C9 $08 $90 $3A $BE $08 $E1 $3E $BE $08 $F1 $42 $BE $08 $F9 $44 $BE $08 $3A $45 $BE $08 $7B $45 $BE $08 $00 $00 $00 $00;
//Character Editor  (UnitFE7Form) @27 Athos2024-03-22 11:10:27 AM
ORG $BDD604
BYTE  $01 $05 $D5 $01 $27 $42 $1B $00 $00 $07 $26 $14 $14 $17 $14 $0F $0F $14 $19 $00 $00 $00 $00 $00 $FB $FB $FB $FB $00 $00 $00 $00 $00 $00 $00 $65 $65 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $00 $04 $00 $00 $00;

// swap nergal / dark druid bases 
//Class Editor  (ClassForm) @45 Dark Druid2024-03-22 11:45:15 AM
ORG $BE1800
BYTE  $B2 $04 $49 $02 $45 $24 $3B $01 $CB $00 $1E $14 $08 $04 $05 $08 $0A $0A $06 $50 $1E $19 $19 $1E $1E $19 $03 $2D $37 $1E $19 $0A $23 $14 $00 $00 $00 $00 $00 $00 $00 $01 $00 $00 $00 $00 $00 $00 $FB $FB $FB $FB $10 $95 $C9 $08 $90 $3A $BE $08 $E1 $3E $BE $08 $F1 $42 $BE $08 $F9 $44 $BE $08 $3A $45 $BE $08 $7B $45 $BE $08 $00 $00 $00 $00;
//Character Editor  (UnitFE7Form) @44 Nergal2024-03-22 11:45:25 AM
ORG $BDDBE8
BYTE  $17 $05 $F0 $01 $44 $45 $61 $00 $00 $00 $00 $14 $37 $16 $0E $0A $14 $14 $14 $00 $00 $00 $00 $00 $FB $FB $FB $FB $55 $32 $0A $0A $0A $0F $1E $28 $00 $00 $00 $00 $00 $80 $00 $00 $00 $00 $00 $00 $04 $00 $00 $00;

// move some bases from hector lord to hector 
//Class Editor  (ClassForm) @03 Lord2024-03-29 9:21:58 PM
ORG $BE0258
BYTE  $8F $04 $2C $02 $03 $09 $02 $00 $D7 $00 $01 $10 $05 $02 $03 $06 $00 $0D $05 $3C $14 $14 $14 $14 $14 $14 $03 $5A $2D $28 $2D $0F $0C $28 $00 $00 $00 $00 $00 $00 $00 $20 $00 $20 $00 $00 $1F $00 $00 $00 $00 $00 $70 $90 $C9 $08 $88 $38 $BE $08 $D9 $3C $BE $08 $E9 $40 $BE $08 $F9 $44 $BE $08 $3A $45 $BE $08 $7B $45 $BE $08 $00 $00 $00 $00;
//Character Editor  (UnitFE7Form) @02 Hector2024-03-29 9:22:16 PM
ORG $BDCE80
BYTE  $DD $04 $B0 $01 $02 $03 $0C $00 $00 $02 $02 $01 $03 $02 $02 $02 $02 $00 $03 $00 $00 $00 $47 $00 $00 $00 $00 $00 $5A $3C $2D $23 $32 $19 $1E $37 $36 $00 $00 $00 $00 $00 $00 $00 $30 $8B $C9 $08 $02 $00 $00 $00;

//Character Editor  (UnitFE7Form) @01 Eliwood2024-03-30 10:43:00 AM
ORG $BDCE4C
BYTE  $DC $04 $AF $01 $01 $01 $02 $00 $00 $07 $01 $01 $03 $02 $02 $02 $02 $00 $07 $00 $47 $00 $00 $00 $00 $00 $00 $00 $50 $2D $32 $28 $1E $23 $2D $2B $38 $00 $00 $00 $00 $00 $00 $00 $18 $8B $C9 $08 $00 $00 $00 $00;
//Character Editor  (UnitFE7Form) @03 Lyn2024-03-30 10:43:13 AM
ORG $BDCEB4
BYTE  $DE $04 $B1 $01 $03 $02 $16 $00 $00 $03 $03 $01 $03 $02 $02 $02 $02 $00 $05 $00 $1F $00 $00 $00 $00 $00 $00 $00 $46 $28 $3C $3C $14 $1E $37 $01 $1B $00 $00 $00 $00 $40 $00 $00 $00 $00 $00 $00 $07 $00 $00 $00;
//Class Editor  (ClassForm) @01 Lord2024-03-30 10:44:11 AM
ORG $BE01B0
BYTE  $8F $04 $2C $02 $01 $07 $00 $00 $D7 $00 $01 $0F $03 $03 $05 $03 $00 $07 $05 $3C $14 $14 $14 $14 $14 $14 $03 $5A $2D $28 $2D $0F $0F $28 $00 $00 $00 $00 $00 $00 $00 $20 $00 $10 $1F $00 $00 $00 $00 $00 $00 $00 $58 $90 $C9 $08 $88 $38 $BE $08 $D9 $3C $BE $08 $E9 $40 $BE $08 $F9 $44 $BE $08 $3A $45 $BE $08 $7B $45 $BE $08 $00 $00 $00 $00;
//Class Editor  (ClassForm) @02 Lord2024-03-30 10:44:32 AM
ORG $BE0204
BYTE  $90 $04 $2C $02 $02 $08 $01 $00 $D7 $00 $01 $0D $02 $05 $07 $00 $00 $05 $05 $3C $14 $14 $14 $14 $14 $14 $03 $5A $2D $28 $2D $0F $14 $28 $00 $00 $00 $00 $00 $00 $00 $20 $02 $40 $1F $00 $00 $00 $00 $00 $00 $00 $64 $90 $C9 $08 $88 $38 $BE $08 $D9 $3C $BE $08 $E9 $40 $BE $08 $F9 $44 $BE $08 $3A $45 $BE $08 $7B $45 $BE $08 $00 $00 $00 $00;



POP 

ALIGN 4 
LynModeEvent: 
//BYTE 0xC 0 0 0 // Don't start from black 
BYTE 0x87 0 0 0 // No skipping 
//BYTE 0x8F 0 16 0 // fadu 
//BYTE 0x93 0 0 0 // showmap 
WORD 0x3E; POIN StartConfigMenu // asmc 
//BYTE 0x8E 0 16 0 // fadi 
BYTE 0x89 0 0 0 // allow skipping 
BYTE 0x32 0 0 0 // LOAD 
WORD 0x8CC5B70 // unit group 
BYTE 0x3B 0 0 0 // ENUN 
BYTE 0xA 0 0 0; WORD 0 // ENDA 

EliwoodModeEvent: 
//BYTE 0xC 0 0 0 // Don't start from black 
BYTE 0x87 0 0 0 // No skipping 
//BYTE 0x8F 0 16 0 // fadu 
//BYTE 0x93 0 0 0 // showmap 
WORD 0x3E; POIN StartConfigMenu // asmc 
//BYTE 0x8E 0 16 0 // fadi 
BYTE 0x89 0 0 0 // allow skipping 

//BYTE 0x8E 0 16 0 // fadi 
//BYTE 0xD5 0 2 0 // FADUCG 
//BYTE 0x93 0 0 0 // showmap 
//BYTE 0x02 0 20 0 // STAL 32 
//BYTE 0x3E 0 0 0; BYTE 0xE5 0xCF 7 8 // Map display command (slow) 

BYTE 0x3E 00 00 00 ; BYTE 0x5D 0xA9 0x07 0x08 // map display fast 
BYTE 0x32 0 0 0 // LOAD 
WORD 0x8CC7DDC // unit group 
//BYTE 0x3B 0 0 0 // ENUN 
BYTE 0xA 0 0 0; WORD 0 // ENDA 

HectorModeEvent: 
//BYTE 0xC 0 0 0 // Don't start from black 
BYTE 0x87 0 0 0 // No skipping 
//BYTE 0x8F 0 16 0 // fadu 
//BYTE 0x93 0 0 0 // showmap 
WORD 0x3E; POIN StartConfigMenu // asmc 
//BYTE 0x8E 0 16 0 // fadi 
BYTE 0x89 0 0 0 // allow skipping 
BYTE 0xD6 0 0 0 // vanilla 
BYTE 0x92 0 0 0 
BYTE 0xD3 0 0x33 0 
BYTE 0xA 0 0 0; WORD 0 // ENDA 

HectorModeUnlockDoor:
BYTE 0x34 0 0 0; BYTE 0x3 0 0x1 0; WORD 0x8CC810C // Hard mode exclusive Load Units
BYTE 0x5F 00 05 00 // Tile change 5: Open door
BYTE 0xA 0 0 0; WORD 0 // ENDA 

LynModeUnlockDoor:
BYTE 0x33 0 0 0; WORD 0x8CC6560; BYTE 0x3b 0 0 0 // Load Units
BYTE 0x5F 00 1 00 // Tile change 0: Open door
BYTE 0x5F 00 5 00 // Tile change 0xB: Open door
BYTE 0xA 0 0 0; WORD 0 // ENDA 

UnlockDoor7x:
BYTE $36 00 00 00 $B8 $6D $CC $08; BYTE $3B 00 00 00 // load + enun 
BYTE 0x5F 00 1 00 // Tile change 0: Open door
BYTE 0xA 0 0 0; WORD 0 // ENDA 

UnlockDoor22x:
BYTE $0F $00 $00 $00 $53 $0C $00 $00 $60 $0C $00 $00 // vanilla 
BYTE 0x5F 00 4 00 // Tile change 0: Open door
BYTE 0x5F 00 5 00 // Tile change 0: Open door
BYTE 0x5F 00 6 00 // Tile change 0: Open door
BYTE 0xA 0 0 0; WORD 0 // ENDA 

 // Pale flower ch 25 hhm softlock possible 

// [8BE38C9..8BE3909]?



ALIGN 4
CasualMode:
BYTE $10 $B4 $14 $1C $00 $F0 $13 $F8 $00 $28 $01 $D1 $05 $23 $00 $E0 $09 $23 $E0 $68 $05 $21 $C9 $43 $08 $40 $19 $1C $08 $43 $E0 $60 $20 $1C $06 $4B $00 $F0 $02 $F8 $10 $BC $05 $4B $18 $47 $00 $B5 $A0 $20 $04 $4B $FF $F7 $FA $FF $00 $BD $00 $00 $45 $68 $02 $08 $B3 $7E $01 $08 $F9 $98 $07 $08

#endif // fe7 

#ifdef _FE6_ 
ALIGN 4 
CasualMode: 
BYTE $10 $B4 $0C $1C $00 $F0 $13 $F8 $00 $28 $01 $D1 $05 $23 $00 $E0 $09 $23 $E0 $68 $05 $21 $C9 $43 $08 $40 $19 $1C $08 $43 $E0 $60 $20 $1C $06 $4B $00 $F0 $02 $F8 $10 $BC $05 $4B $18 $47 $00 $B5 $8C $20 $04 $4B $FF $F7 $FA $FF $00 $BD $00 $00 $61 $2C $02 $08 $FF $7B $01 $08 $5D $BA $06 $08
#endif 

PUSH 

#ifdef _FE7_ 
// Nils min level for 19xx by Satel 
ORG $7D252 
BYTE 0 

ORG $4F40 
SHORT $46C0 $46C0 // don't erase bg when setting up debug font 
#endif // FE7 



#ifdef _FE6_ 

ORG $4EC4 
SHORT $46C0 $46C0 // don't erase bg when setting up debug font 

ORG $17BEC
  jumpToHack(CasualMode)
  
ORG $28f72 // in 28ef0
SHORT $22c0 $4311 // default game/text speed fast 
  
// in 8019600 BuildBestMovementScript 
// Fix REDA / MOVE from crashing on impassible terrain 
// by 7743 - ported to fe6 by Vesly 
//ORG 0x01A77E; // fe8 version 
ORG 0x19738 // fe6 
// looks like code is the same except it uses r6 instead of r5 for something (so we do byte 0x2E instead of 0x2D below) 
// branch is also 3 lines later, so 0xDA2C 
BYTE 0xFF 0x2E 0x2C 0xDA 0x02 0x99 0x08 0x70 0x04 0x9B 0x02 0x93
SHORT $4667 $46c0 $46c0 // I think this is right but I'm not 100% convinced, oh well 
POP 
#endif 

#ifdef _FE7_
ORG $17E9E // by Circles 
byte 0x00 0x00
jumpToHack(CasualMode)


ORG $9E9FC // Select any mode on new game 
// by Doesnt 
BYTE $1F $20 $70 $47 


ORG $2FA48 // fe7 
callHackNew(DroppableItemHook) // enemies in fe6 do not drop items, so unnecessary there 

ORG $2DFCA // Default game speed option to fast by 7743 ported by Vesly  
BYTE $d0 $22
/*
OFF:0x02DFCA=0x02 0x40
FAST_A:0x02DFCA=0xd0 0x22
FAST_CURSOL_A:0x02DFCA=0xc0 0x22
FAST_A_TERRAINOFF:0x02DFCA=0xd2 0x22
FAST_CURSOL_A_TERRAINOFF:0x02DFCA=0xc2 0x22
*/

// Merlinus can use supply on maps 
// by Gryz / Vesly 
ORG $22D60; SHORT $2800 $D023 // if no Merlinus unit found, exit 
SHORT $1C03 $6818 $2800 $D01F 
ORG $22D94; SHORT $DD08 
// Merlinus no autopromote 
//ORG $8F082; BYTE level 
ORG $21E3E; BYTE 0xC0 0x46 0xC0 0x46 // Merlinus can trade 
ORG $23D08; BYTE 0xC0 0x46 0xC0 0x46 // Units can trade Merlinus 
ORG $CC905C; BYTE 1 // Merlinus starts with an iron sword 
ORG $CC907C; BYTE 1 // Merlinus starts with an iron sword 
ORG $CCB748; BYTE 1 // Merlinus starts with an iron sword 

ORG $4049F0 // Don't draw "mov" 
BYTE $94 $31 $00 $02 $0E $35 $00 $02 $03 $00 $00 $00 $24 $27 $CC $08
ORG $404a40; WORD 0 0 0 0


ORG $7FE78 
FILL($7FFDC - $7FE78) // nop out the vanilla draw bar stuff 
ORG $7FFD0 // our new version 
callHackNew(DrawBarsOrGrowths) 

ORG $813E0
FILL($81400 - $813E0)

ORG $813E2
SHORT $1C28
callHackNew(StatScreenSelectLoop)


ORG $53242 
SHORT $2000 // always use generic palette (by Vesly) 

// in 8019E5C BuildBestMovementScript 
// Fix REDA / MOVE from crashing on impassible terrain 
// by 7743 - ported to fe7 by Vesly 
//ORG 0x01A77E; // fe8 version 
ORG 0x19F9A // fe7u 
// looks like code is the same 
BYTE 0xFF 0x2D 0x29 0xDA 0x02 0x99 0x08 0x70 0x04 0x9B 0x02 0x93

// Zero out movement if ai4 
ORG $19BE4
jumpToHack(NullifyMov)


// QoL for testing 
// by Gryz 
ORG $BC58E 
SHORT 0x46C0 
ORG $BC580 
SHORT $46C0 
ORG $BAA25 
BYTE 0xE0 


//Patches Tutorial Disabler (PatchForm) Tutorial Disabler2024-03-13 6:22:07 PM
ORG $D7C6
BYTE  $00 $00;
ORG $D842
BYTE  $04 $E0;
ORG $02DF06
BYTE  $07 $E0;
ORG $078FC8
BYTE  $00 $20 $70 $47;
ORG $079004
BYTE  $00 $20 $70 $47;
ORG $07905C
BYTE  $00 $20 $70 $47;
ORG $0790C4
BYTE  $00 $20 $70 $47;
ORG $079104
BYTE  $00 $20 $70 $47;



ORG $25C0C
jumpToHack(HP_Bars) // by Tequila 

ORG $155A0 //fe6-15B54 //load more graphics
BYTE 0x18
//ORG $2CB22 //force subtitles on (not necessary, we're not using this anymore)
//SHORT 0x46C0
ORG $155BC //fe6-15B70
POIN HPBarGraphic


// DangerZone by Circles 
ORG 0x1c3e0
BYTE 0x69 0xf0 0x4c 0xfc 0x2 0x4a 0x91 0x69 0x50 0x69 0x2 0x4b 0x4 0xe0 0xc0 0x46 0xb8 0xbb 0x2 0x2 0x23 0x60 0x2 0x8 0x0 0xf0 0x1 0xf8 0x1 0xe0 0x10 0xb5 0x18 0x47 0x5 0xf0 0xe7 0xf8 0x19 0xe0 0xc0 0x46 0x4 0x1c 0x0 0x2c
ORG 0x1c40f
BYTE 0xd0 0x50 0xf0 0x50 0xfc 0x20 0x1c 0xa 0xf0 0xbd 0xf8 0x69
ORG 0x1c41c
BYTE 0x2d 0xfc 0x30 0x1c 0x16 0xf0 0xa4 0xf9 0x2d 0xe0 0x0 0x0 0xf8 0x57 0xb8 0x8
ORG 0x1c8ab
BYTE 0xe0


// 92220
// Shop in fe7 by Vesly 
// 922FC as nop = can always sell 
//ORG $922FC; SHORT $46C0 

// 9230E as nop: can use sell/shop if no items 
ORG $9230E; SHORT $46C0 
// goes to label B in CC4448

ORG $B7CF2A; BYTE $7E $1A $64 $12 // rename "Sell" into "Shop" 
//ORG $91FBE; SHORT $2400 // make "Shop" white 

// Enable Trnsfr always 
//ORG $9177C; SHORT $2100 // make "Trnsfr" white 

// enable give all 
//ORG $92344; SHORT $46C0 // skip first branch 
//ORG $92358; SHORT $E008 // always branch 
//ORG $92378; SHORT $46C0 // skip 3rd branch 
// enable trnsfr 
//ORG $92330; SHORT $46C0 
// 91354 - [20252cc+0x2B]!!
ORG $8EF16
#define SupplyUnitID 0x28 // Merlinus //0x3 Lyn  
SHORT $6800 $7900 $46c0 $46c0 $46c0 $46c0 $46c0; BYTE SupplyUnitID $28; SHORT $D003 
// search for unit id instead of "supply" 0x200 bitflag 


// Anti-Huffman by Hextator & ported by 7743
ORG 0x4364; BYTE $00 $B5 $C2 $0F $00 $2A $02 $D0 $0E $F0 $86 $FC $03 $E0 $02 $4A $12 $68 $BB $F0 $6D $FC $00 $BD $40 $39 $00 $03
ORG 0x12C6C; BYTE $02 $49 $28 $1C $00 $F0 $14 $F8 $35 $60 $0C $E0 $B4 $A5 $02 $02 $80 $23 $1B $06 $C0 $1A $02 $78 $0A $70 $01 $31 $01 $30 $00 $2A $F9 $D1 $70 $47

ORG $3BB9C; SHORT $46C0 // any ai can use lockpick 

POP 

ALIGN 4 
NullifyMov:
BYTE $0C $06 $24 $16 $EB $7A $40 $2B $11 $DB $44 $23 $EB $5C $03 $2B $0D $D1 $42 $23 $EB $5C $03 $2B $07 $D0 $42 $23 $EB $5C $06 $2B $03 $D0 $41 $23 $EB $5C $20 $2B $01 $D1 $03 $48 $02 $E0 $03 $4B $9E $46 $00 $F8 $02 $4B $18 $47 $44 $19 $8F $08 $D4 $87 $01 $08 $ED $9B $01 $08 $C0 $46 $C0 $46 $C0 $46 $C0 $46 $C0 $46 $C0 $46


ALIGN 4
HP_Bars:
BYTE $F0 $B4 $84 $B0 $6A $48 $00 $78 $20 $21 $08 $42 $00 $D0 $AD $E0 $00 $20 $00 $90 $10 $21 $61 $56 $09 $01 $66 $4A $0C $23 $D0 $5E $0B $1A $11 $20 $20 $56 $00 $01 $0E $21 $51 $5E $42 $1A $19 $1C $10 $31 $80 $20 $40 $00 $81 $42 $24 $D8 $10 $1C $10 $30 $B0 $28 $20 $D8 $01 $21 $00 $91 $01 $93 $02 $92 $5B $49 $03 $91 $13 $20 $20 $56 $12 $21 $61 $56 $88 $42 $14 $DA $08 $1A $0B $22 $50 $43 $06 $DF $56 $49 $8E $46 $82 $00 $62 $4B $D2 $18 $12 $68 $03 $99 $01 $9B $58 $18 $02 $39 $08 $40 $02 $99 $FB $31 $FF $23 $19 $40 $00 $23 $00 $F8 $4E $4E $36 $68 $00 $2E $07 $D0 $F0 $7A $C0 $21 $08 $42 $03 $D1 $30 $7B $01 $21 $08 $42 $03 $D1 $49 $48 $00 $21 $01 $60 $63 $E0 $47 $48 $01 $78 $02 $29 $44 $D0 $41 $78 $E2 $7A $8A $42 $02 $DC $02 $21 $01 $70 $3D $E0 $42 $70 $01 $21 $01 $70 $00 $27 $3B $48 $00 $78 $10 $21 $08 $42 $23 $D1 $E0 $7A $80 $21 $08 $42 $1F $D0 $1E $25 $61 $5B $00 $29 $1B $D0 $20 $1C $3A $4A $96 $46 $00 $F8 $00 $28 $0C $D0 $60 $5B $31 $1C $37 $4A $96 $46 $00 $F8 $00 $28 $09 $D1 $60 $5B $35 $49 $8E $46 $00 $F8 $18 $28 $06 $DC $02 $35 $26 $2D $E6 $DD $04 $E0 $01 $20 $07 $43 $01 $E0 $02 $20 $07 $43 $30 $68 $00 $79 $21 $68 $09 $79 $2D $4A $96 $46 $00 $F8 $00 $28 $01 $D0 $04 $20 $07 $43 $26 $48 $02 $30 $E1 $7A $40 $18 $07 $70 $1A $E0 $23 $4D $02 $35 $E0 $7A $2D $5C $00 $2D $14 $D0 $01 $20 $28 $42 $03 $D0 $00 $20 $69 $46 $00 $F0 $16 $F8 $02 $20 $28 $42 $03 $D0 $08 $20 $69 $46 $00 $F0 $0F $F8 $04 $20 $28 $42 $03 $D0 $10 $20 $69 $46 $00 $F0 $08 $F8 $04 $B0 $F0 $BC $30 $20 $20 $5C $00 $07 $00 $0F $17 $49 $08 $47 $30 $B5 $0A $68 $00 $2A $12 $D0 $04 $1C $0D $1C $0C $49 $8E $46 $E9 $68 $68 $68 $40 $18 $0B $30 $02 $39 $08 $40 $A9 $68 $EE $31 $FF $22 $11 $40 $36 $22 $7A $44 $12 $19 $00 $23 $00 $F8 $30 $BC $01 $BC $00 $47 $39 $BC $02 $02 $B8 $BB $02 $02 $01 $02 $00 $00 $88 $43 $00 $08 $90 $46 $00 $03 $C0 $AC $03 $02 $A4 $61 $01 $08 $20 $68 $01 $08 $28 $73 $01 $08 $FC $89 $07 $08 $17 $5C $02 $08 $01 $00 $0F $00 $FF $01 $76 $08 $01 $00 $0F $00 $FF $01 $77 $08 $01 $00 $0F $40 $EE $01 $70 $08
POIN HPFramePointers

ALIGN 4
HPFrames:
BYTE $01 $00 $0F $40 $FF $01 $12 $08 $01 $00 $0F $40 $FF $01 $14 $08 $01 $00 $0F $40 $FF $01 $16 $08 $01 $00 $0F $40 $FF $01 $32 $08 $01 $00 $0F $40 $FF $01 $34 $08 $01 $00 $0F $40 $FF $01 $36 $08 $01 $00 $0F $40 $FF $01 $52 $08 $01 $00 $0F $40 $FF $01 $54 $08 $01 $00 $0F $40 $FF $01 $56 $08 $01 $00 $0F $40 $FF $01 $72 $08 $01 $00 $0F $40 $FF $01 $74 $08 $01 $00 $0F $40 $FF $01 $76 $08

ALIGN 4
HPFramePointers: //HINT=POINTER_ARRAY
POIN HPFrames
POIN HPFrames+8
POIN HPFrames+16
POIN HPFrames+24
POIN HPFrames+32
POIN HPFrames+40
POIN HPFrames+48
POIN HPFrames+56
POIN HPFrames+64
POIN HPFrames+72
POIN HPFrames+80
POIN HPFrames+88

ALIGN 4
HPBarGraphic:
BYTE $10 $00 $0C $00 $28 $00 $00 $60 $01 $F0 $00 $02 $3F $F0 $FF $00 $3F $33 $EF $F3 $25 $EE $FF $5E $02 $E2 $EE $FF $2E $EE $EE $10 $18 $FF $82 $00 $03 $E3 $0F $00 $00 $3E $00 $03 $F4 $80 $00 $0B $43 $FF $FF $00 $EE $EE $2E $02 $0F $EE $2E $22 $0F $00 $00 $0B $F0 $00 $33 $F3 $00 $2F $22 $F2 $00 $EF $3C $FE $FF $00 $03 $00 $2F $10 $30 $40 $01 $FF $7F $00 $F7 $FF $7F $A7 $79 $F7 $7F $87 $00 $78 $F7 $8F $A9 $AA $F8 $AF $98 $03 $89 $FA $7F $A7 $7A $F7 $10 $03 $10 $1B $00 $77 $77 $77 $77 $97 $99 $99 $D9 $00 $90 $BB $BB $07 $70 $BB $9B $0D $00 $00 $67 $7B $00 $00 $67 $DB $00 $01 $00 $B0 $07 $00 $00 $70 $0D $10 $4C $00 $FF $F0 $33 $33 $33 $3F $F3 $FF $37 $FF $1F $00 $7F $10 $03 $EF $80 $03 $00 $B3 $00 $6D $52 $EF $00 $03 $3F $00 $AB $FF $25 $20 $07 $F0 $55 $E3 $00 $03 $E2 $20 $03 $FF $00 $23 $FF $00 $93 $04 $EE $F3 $00 $00 $52 $00 $25 $2E $F5 $84 $00 $0B $32 $0F $00 $EE $00 $CC $EE $3E $C0 $00 $14 $10 $01 $10 $01 $00 $00 $11 $11 $07 $00 $10 $11 $11 $01 $10 $03 $10 $0B $20 $13 $E6 $90 $01 $40 $23 $F0 $1B $00 $00 $10 $0D $50 $03 $10 $FF $80 $03 $20 $10 $F0 $02 $81 $1C $91 $29 $F0 $2B $00 $1E $F0 $1F $FA $C0 $22 $F0 $61 $90 $3F $F0 $7F $D0 $1F $F0 $11 $5F $E6 $22 $EC $F6 $20 $03 $C5 $CC $F5 $50 $0B $00 $14 $6F $6C $0F $21 $5A $D0 $01 $83 $ED $F7 $00 $00 $D0 $EE $77 $0F $ED $EE $77 $00 $F7 $7F $77 $66 $D6 $F0 $77 $66 $0F $0D $00 $7F $D6 $00 $3C $00 $1B $C0 $01 $20 $4F $1C $BB $BB $BB $10 $07 $F0 $FD $20 $D3 $0F $BB $1F $BB $DB $0F $10 $07 $F1 $1D $F0 $3F $F1 $32 $10 $3F $7B $DD $F0 $3F $F0 $7F $F1 $5B $50 $3F $DB $70 $3F $12 $E3 $00 $FF $5E $EE $EE $EF $F3 $E3 $EE $B3 $02 $FB $22 $32 $4F $70 $01 $EE $F2 $02 $EB $02 $26 $58 $2E $00 $2D $42 $12 $4B $F1 $C3 $00 $F0 $BB $11 $FB $00 $BF $00 $03 $AF $FA $FF $00 $03 $C1 $C1 $77 $10 $1F $77 $F7 $00 $7F $66 $01 $52 $61 $F6 $F3 $1F $20 $1F $CC $FC $00 $CF $00 $03 $E0 $02 $E3 $F0 $1F $52 $FF $C3 $F5 $FF $1F $CC $04 $05 $00 $2F $55 $5C $02 $F7 $C5 $05 $0A $EF $0F $50 $5C $02 $FF $C5 $32 $E7 $24 $BC $12 $FB $23 $42 $0F $03 $C7 $20 $03 $30 $BF $43 $3E $00 $0F $EE $F4 $E3 $0F $EE $0F $FF $3C $00 $E2 $00 $BF $10 $03 $03 $B5 $60 $C7 $EE $EE $1F $EE $EE $0E $00 $07 $F0 $03 $30 $03 $E3 $03 $D3 $17 $C2 $F2 $F8 $A3 $11 $F0 $34 $23 $22 $03 $8E $55 $D4 $00 $A6 $10 $03 $FF $20 $03 $E3 $00 $03 $34 $33 $40 $33 $10 $DB $22 $22 $32 $53 $55 $35 $08 $EE $4E $EE $55 $00 $03 $FF $EE $4E $36 $FF $3F $30 $07 $00 $F2 $53 $12 $FF $43 $E6 $5F $00 $0F $F5 $05 $F0 $0F $EF $0F $F0 $AA $00 $07 $FF $00 $07 $EF $00 $07 $5F $10 $EF $EE $00 $F4 $00 $F0 $4E $F5 $FF $FF $4E $00 $EF $4E $E5 $4E $EF $E4 $54 $4E $00 $EF $E5 $F4 $EE $E4 $E5 $F4 $44 $23 $45 $45 $00 $15 $FF $FF $E3 $04 $B0 $10 $1F $00 $EE $34 $3E $F5 $4E $E5 $E5 $F4 $80 $10 $1F $4E $3F $3E $F4 $54 $5F $44 $80 $10 $1F $0F $00 $CC $CC $CC $C0 $23 $00 $22 $32 $3C $22 $A2 $25 $2C $22 $20 $A2 $AA $00 $03 $A2 $2C $D2 $AA $32 $0C $3C $A2 $DA $22 $00 $17 $02 $0F $00 $00 $57 $0C $00 $03 $C3 $00 $03 $C2 $C0 $03 $10 $17 $F2 $FF $8C $01 $AF $11 $11 $11 $F2 $FF $72 $7F $11 $DD $F7 $F2 $BF $F0 $3F $F4 $1B $50 $3F $D1 $F0 $3F $B0 $3F $01 $3C $D4 $F3 $7F $70 $3F $DD $80 $3F $CD $03 $C2 $BC $0C $02 $70 $0C $CD $0D $57 $CB $00 $09 $CB $00 $00 $77 $C0 $0C $70 $BB $0C $00 $01 $BC $51 $CB $00 $BC $B5 $CA $20 $33 $52 $70 $00 $E8 $17 $30 $1D $00 $C0 $10 $F4 $D0 $64 $D7 $00 $14 $00 $0C $D0 $DC $00 $10 $66 $66 $00 $C0 $5C $55 $F5 $FC $55 $FF $55 $08 $5C $F5 $55 $55 $00 $07 $FF $40 $F4 $02 $55 $55 $00 $C0 $C4 $CC $50 $73 $66 $B7 $10 $77 $06 $01 $C4 $00 $03 $F5 $00 $03 $10 $0F $60 $01 $48 $60 $00 $3F $F6 $5F $00 $37 $F5 $5F $5C $59 $55 $20 $47 $5F $00 $4F $00 $3F $CC $C4 $90 $3F $B4 $10 $37 $55 $10 $3F $00 $7F $44 $D0 $D4 $C0 $CC $02 $CC $00 $1C $11 $11 $C0 $01 $37 $C0 $1F $41 $41 $41 $10 $07 $10 $0F $20 $17 $40 $22 $10 $B6 $56 $C1 $40 $03 $11 $00 $0C $C1 $00 $03 $21 $BF $CC $20 $CC $0C $00 $2F $C1 $1C $96 $91 $16 $00 $1C $61 $66 $11 $1C $11 $16 $11 $FE $20 $07 $00 $0F $20 $47 $80 $3F $90 $03 $10 $47 $10 $5C $AA $00 $AA $AA $00 $1A $11 $C1 $00 $CC $41 $AC $00 $11 $1A $0C $00 $A0 $C1 $20 $0F $6F $AA $02 $56 $10 $3B $1A $F6 $01 $00 $33 $40 $3F $F2 $3F $FF $D1 $CC $F6 $3F $A0 $1B $37 $00 $F5 $83 $44 $53 $10 $03 $F6 $81 $F8 $C0 $1F $00 $A8 $F6 $A5 $91 $5B $00 $A5 $1C $51 $00 $00 $C0 $CE $34 $05 $EC $CC $4C $F3 $43 $55 $01 $A3 $EC $11 $11 $F3 $10 $0B $13 $40 $DE $F5 $FF $22 $7F $D3 $F5 $FF $F2 $7F $F7 $1D $40 $3F $44 $3D $44 $DD $F6 $3F $F2 $BF $F7 $5D $50 $3F $D4 $F0 $3F $CF $F2 $FF $20 $3F $C0 $AA $00 $DF $F1 $01 $70 $FE $00 $03 $78 $BC $00 $22 $10 $07 $F7 $CD $32 $BF $60 $56 $55 $20 $55 $F6 $02 $B7 $56 $F5 $55 $F5 $F6 $01 $55 $5F $55 $60 $FC $F5 $FF $92 $7B $EB $A2 $BF $00 $03 $D0 $6E $A0 $02 $43 $A0 $02 $43 $32 $3F $78 $0A $20 $0B $80 $3E $F8 $44 $E0 $01 $CC $0C $00 $63 $C0 $00 $34 $12 $F3 $1C $14 $14 $32 $FB $12 $BB $FF $B0 $44 $D2 $BB $30 $3A $F1 $FF $F8 $B5 $F8 $C7 $80 $BD $00 $4E $5B $A0 $00 $6B $C0 $F2 $47 $00 $01 $0A $D0 $6F $D0 $01 $81 $02 $C3 $F0 $EE $FE $00 $EF $EE $06 $A1 $03 $AA $FA $0F $F0 $AA $FA $27 $4F $12 $A3 $E0 $21 $CF $F0 $1B $A0 $1F $FF $33 $F3 $0F $3F $07 $33 $33 $0F $F0 $31 $07 $A4 $1A $1C $C3 $33 $E0 $12 $E3 $F0 $23 $F4 $3B $C0 $11 $88 $18 $C0 $1F $81 $88 $88 $20 $03 $00 $0B $94 $3F $94 $3B $E4 $3F $87 $F8 $FF $FF $F0 $CC $DD $F2 $BF $F5 $7F $F8 $FF $B8 $50 $3F $DC $F0 $3F $F5 $BF $40 $3F $43 $54 $00 $00 $30 $CE $EC $05 $E3 $CE $EC $FE $42 $E4 $10 $03 $EE $EE $FE $E5 $00 $07 $50 $A0 $01 $33 $00 $02 $86 $00 $42 $44 $00 $20 $00 $D3 $3D $04 $32 $D3 $3D $53 $34 $E0 $10 $03 $07 $57 $10 $07 $40 $33 $33 $05 $00 $00 $54 $55 $00 $00


#include "Patches/BattleStatsAnimsOff/Installer.event" 
#include "Patches/RNGRandomizer/Installer.event" 

#endif // _FE7_ 

ALIGN 32 
WORD 0 0 0 0 0 0 0 0 





