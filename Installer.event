
#ifndef FreeSpace 
#define FreeSpace 0x1000000
ORG FreeSpace 
#endif 


#include "Extensions/Hack Installation.txt" 
#include "C_code.lyn.event" 

ALIGN 4 
NewSomeProc: // doesn't work atm 
WORD 2; POIN StartConfigMenu|1
WORD 0xE 0 // sleep 
WORD 2 0x801F2E1 
WORD 3 0x801F2F1 

WORD 0 0 

PUSH 
ORG $B93950 
//POIN NewSomeProc
ORG $CA7A44
BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN LynModeEvent // CALL 

ORG $C9A9AB; BYTE 1 // Start ch as dark 
ORG $CAE038
BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN EliwoodModeEvent  
BYTE 0x89 0 0 0 // allow skipping 

ORG $CAE610
BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN HectorModeEvent 
ORG $CAE920
BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN HectorModeUnlockDoor

ORG $CABF64
BYTE 0x9A 0 0 0; BYTE 0xCB 0 0 0; POIN LynModeUnlockDoor


POP 

ALIGN 4 
LynModeEvent: 
//BYTE 0xC 0 0 0 // Don't start from black 
BYTE 0x87 0 0 0 // No skipping 
//BYTE 0x8F 0 16 0 // fadu 
//BYTE 0x93 0 0 0 // showmap 
WORD 0x3E; POIN StartConfigMenu // asmc 
//BYTE 0x8E 0 16 0 // fadi 
BYTE 0x89 0 0 0 // allow skipping 
BYTE 0x32 0 0 0 // LOAD 
WORD 0x8CC5B70 // unit group 
BYTE 0x3B 0 0 0 // ENUN 
BYTE 0xA 0 0 0; WORD 0 // ENDA 

EliwoodModeEvent: 
//BYTE 0xC 0 0 0 // Don't start from black 
BYTE 0x87 0 0 0 // No skipping 
//BYTE 0x8F 0 16 0 // fadu 
//BYTE 0x93 0 0 0 // showmap 
WORD 0x3E; POIN StartConfigMenu // asmc 
//BYTE 0x8E 0 16 0 // fadi 
BYTE 0x89 0 0 0 // allow skipping 

//BYTE 0x8E 0 16 0 // fadi 
//BYTE 0xD5 0 2 0 // FADUCG 
//BYTE 0x93 0 0 0 // showmap 
//BYTE 0x02 0 20 0 // STAL 32 
//BYTE 0x3E 0 0 0; BYTE 0xE5 0xCF 7 8 // Map display command (slow) 

BYTE 0x3E 00 00 00 ; BYTE 0x5D 0xA9 0x07 0x08 // map display fast 
BYTE 0x32 0 0 0 // LOAD 
WORD 0x8CC7DDC // unit group 
//BYTE 0x3B 0 0 0 // ENUN 
BYTE 0xA 0 0 0; WORD 0 // ENDA 

HectorModeEvent: 
//BYTE 0xC 0 0 0 // Don't start from black 
BYTE 0x87 0 0 0 // No skipping 
//BYTE 0x8F 0 16 0 // fadu 
//BYTE 0x93 0 0 0 // showmap 
WORD 0x3E; POIN StartConfigMenu // asmc 
//BYTE 0x8E 0 16 0 // fadi 
BYTE 0x89 0 0 0 // allow skipping 
BYTE 0xD6 0 0 0 // vanilla 
BYTE 0x92 0 0 0 
BYTE 0xD3 0 0x33 0 
BYTE 0xA 0 0 0; WORD 0 // ENDA 

HectorModeUnlockDoor:
BYTE 0x34 0 0 0; BYTE 0x3 0 0x1 0; WORD 0x8CC810C // Hard mode exclusive Load Units
BYTE 0x5F 00 05 00 // Tile change 5: Open door
BYTE 0xA 0 0 0; WORD 0 // ENDA 

LynModeUnlockDoor:
BYTE 0x33 0 0 0; WORD 0x8CC6560; BYTE 0x3b 0 0 0 // Load Units
BYTE 0x5F 00 1 00 // Tile change 0: Open door
BYTE 0x5F 00 5 00 // Tile change 0xB: Open door
BYTE 0xA 0 0 0; WORD 0 // ENDA 



ALIGN 4 
CasualModeFlag:
WORD 0xA0 
MaxItems:
WORD 0x9E 
MaxClasses:
WORD 0x63 

ALIGN 4
CasualMode:
BYTE $10 $B4 $14 $1C $00 $F0 $13 $F8 $00 $28 $01 $D1 $05 $23 $00 $E0 $09 $23 $E0 $68 $05 $21 $C9 $43 $08 $40 $19 $1C $08 $43 $E0 $60 $20 $1C $06 $4B $00 $F0 $02 $F8 $10 $BC $05 $4B $18 $47 $00 $B5 $A0 $20 $04 $4B $FF $F7 $FA $FF $00 $BD $00 $00 $45 $68 $02 $08 $B3 $7E $01 $08 $F9 $98 $07 $08


PUSH 

ORG $17E9E // by Circles 
byte 0x00 0x00
jumpToHack(CasualMode)


ORG $9E9FC // Select any mode on new game 
// by Doesnt 
BYTE $1F $20 $70 $47 


#ifndef callHackNew 
	#define callHackNew(offset) 		"BYTE $01 $4B $9E $46 $00 $F8 $01 $E0; POIN (offset|0x1)"
#endif 

ORG $4049F0 // Don't draw "mov" 
BYTE $94 $31 $00 $02 $0E $35 $00 $02 $03 $00 $00 $00 $24 $27 $CC $08
ORG $404a40; WORD 0 0 0 0


ORG $7FE78 
FILL($7FFDC - $7FE78) // nop out the vanilla draw bar stuff 
ORG $7FFD0 // our new version 
callHackNew(DrawBarsOrGrowths) 

ORG $813E0
FILL($81400 - $813E0)
ORG $813E2
SHORT $1C28
callHackNew(StatScreenSelectLoop)


ORG $53242 
SHORT $2000 // always use generic palette (by Vesly) 

// in 8019E5C BuildBestMovementScript 
// Fix REDA / MOVE from crashing on impassible terrain 
// by 7743 - ported to fe7 by Vesly 
//ORG 0x01A77E; // fe8 version 
ORG 0x19F9A // fe7u 
// looks like code is the same 
BYTE 0xFF 0x2D 0x29 0xDA 0x02 0x99 0x08 0x70 0x04 0x9B 0x02 0x93


// QoL for testing 
// by Gryz 
ORG $BC58E 
SHORT 0x46C0 
ORG $BC580 
SHORT $46C0 
ORG $BAA25 
BYTE 0xE0 


//Patches Tutorial Disabler (PatchForm) Tutorial Disabler2024-03-13 6:22:07 PM
ORG $D7C6
BYTE  $00 $00;
ORG $D842
BYTE  $04 $E0;
ORG $02DF06
BYTE  $07 $E0;
ORG $078FC8
BYTE  $00 $20 $70 $47;
ORG $079004
BYTE  $00 $20 $70 $47;
ORG $07905C
BYTE  $00 $20 $70 $47;
ORG $0790C4
BYTE  $00 $20 $70 $47;
ORG $079104
BYTE  $00 $20 $70 $47;

POP 












