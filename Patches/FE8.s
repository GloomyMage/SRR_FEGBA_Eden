	.cpu arm7tdmi
	.arch armv4t
	.fpu softvfp
	.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
	.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
	.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
	.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
	.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
	.eabi_attribute 26, 1	@ Tag_ABI_enum_size
	.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
	.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
	.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
	.file	"FE8.c"
@ GNU C17 (devkitARM release 63) version 13.2.0 (arm-none-eabi)
@	compiled by GNU C version 10.3.0, GMP version 6.2.1, MPFR version 4.1.0, MPC version 1.2.1, isl version isl-0.18-GMP

@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
@ options passed: -mcpu=arm7tdmi -mthumb -mthumb-interwork -mtune=arm7tdmi -mlong-calls -march=armv4t -O2
	.text
	.align	1
	.p2align 2,,3
	.global	LoopRandomRecruitmentProc
	.syntax unified
	.code	16
	.thumb_func
	.type	LoopRandomRecruitmentProc, %function
LoopRandomRecruitmentProc:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:114: void LoopRandomRecruitmentProc(RecruitmentProc* proc) { return; } 
	@ sp needed	@
	bx	lr
	.size	LoopRandomRecruitmentProc, .-LoopRandomRecruitmentProc
	.align	1
	.p2align 2,,3
	.global	EnableBG0Display
	.syntax unified
	.code	16
	.thumb_func
	.type	EnableBG0Display, %function
EnableBG0Display:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:3902: 	gLCDControlBuffer.dispcnt.bg0_on = 1;
	movs	r1, #1	@ tmp119,
@ Patches/../C_code.c:3903: } 
	@ sp needed	@
@ Patches/../C_code.c:3902: 	gLCDControlBuffer.dispcnt.bg0_on = 1;
	ldr	r2, .L4	@ tmp114,
	ldrb	r3, [r2, #1]	@ gLCDControlBuffer.dispcnt.bg0_on, gLCDControlBuffer.dispcnt.bg0_on
	orrs	r3, r1	@ tmp121, tmp119
	strb	r3, [r2, #1]	@ tmp121, gLCDControlBuffer.dispcnt.bg0_on
@ Patches/../C_code.c:3903: } 
	bx	lr
.L5:
	.align	2
.L4:
	.word	gLCDControlBuffer
	.size	EnableBG0Display, .-EnableBG0Display
	.align	1
	.p2align 2,,3
	.global	RestoreBackgrounds
	.syntax unified
	.code	16
	.thumb_func
	.type	RestoreBackgrounds, %function
RestoreBackgrounds:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:3884: 	if (proc->calledFromChapter) { 
	movs	r3, #53	@ tmp116,
@ Patches/../C_code.c:3883: void RestoreBackgrounds(ConfigMenuProc* proc) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:3884: 	if (proc->calledFromChapter) { 
	ldrb	r3, [r0, r3]	@ tmp117,
	cmp	r3, #0	@ tmp117,
	bne	.L11		@,
.L6:
@ Patches/../C_code.c:3897: } 
	@ sp needed	@
	pop	{r4}
	pop	{r0}
	bx	r0
.L11:
@ Patches/../C_code.c:3885: 		RefreshBMapGraphics(); 
	ldr	r3, .L12	@ tmp118,
	bl	.L14		@
@ Patches/../C_code.c:3897: } 
	b	.L6		@
.L13:
	.align	2
.L12:
	.word	RefreshBMapGraphics
	.size	RestoreBackgrounds, .-RestoreBackgrounds
	.align	1
	.p2align 2,,3
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitListToUse.part.0, %function
GetUnitListToUse.part.0:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:347: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	ldr	r3, .L34	@ tmp127,
	ldr	r2, [r3]	@ pretmp_34, RecruitValues
@ Patches/../C_code.c:347: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	movs	r3, #7	@ tmp133,
@ Patches/../C_code.c:380: int GetUnitListToUse(const struct CharacterData* table, int boss, int excludeNoSupports) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:347: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	ldrb	r4, [r2]	@ MEM[(struct RecruitmentValues *)pretmp_34], MEM[(struct RecruitmentValues *)pretmp_34]
	ands	r3, r4	@ _36, MEM[(struct RecruitmentValues *)pretmp_34]
@ Patches/../C_code.c:392: 	if (boss && (MustCharacterBecomeBoss(table))) { result = 2; } 
	cmp	r1, #0	@ tmp168,
	beq	.L16		@,
@ Patches/../C_code.c:350: 	if (boss) { return true; } 
	ldr	r1, [r0, #40]	@ table_2(D)->attributes, table_2(D)->attributes
	lsls	r1, r1, #16	@ tmp169, table_2(D)->attributes,
	bpl	.L16		@,
	cmp	r3, #5	@ _36,
	bne	.L17		@,
.L16:
@ Patches/../C_code.c:393: 	if (result == 1) { if (RecruitValues->recruitment == 2) { result = 0; } } 
	cmp	r3, #2	@ _36,
	beq	.L25		@,
@ Patches/../C_code.c:395: 	if (RecruitValues->recruitment < 4) { 
	ldrb	r3, [r2]	@ *pretmp_34, *pretmp_34
	lsls	r3, r3, #29	@ tmp155, *pretmp_34,
@ Patches/../C_code.c:395: 	if (RecruitValues->recruitment < 4) { 
	lsrs	r3, r3, #29	@ tmp158, tmp155,
	cmp	r3, #3	@ tmp158,
	bls	.L20		@,
.L21:
@ Patches/../C_code.c:409: 	if (RecruitValues->recruitment == 5) { result = 1; } 
	movs	r0, #1	@ <retval>,
.L15:
@ Patches/../C_code.c:413: }  
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L20:
@ Patches/../C_code.c:405: 			if (table->number > 0x2c) { return 0; } 
	ldrb	r3, [r0, #4]	@ tmp162,
	cmp	r3, #44	@ tmp162,
	bls	.L21		@,
.L25:
@ Patches/../C_code.c:383: 	if (!table->portraitId) { return result; } 
	movs	r0, #0	@ <retval>,
	b	.L15		@
.L17:
	subs	r3, r3, #1	@ tmp165,
	subs	r2, r3, #1	@ tmp166, tmp165
	sbcs	r3, r3, r2	@ tmp164, tmp165, tmp166
	lsls	r0, r3, #1	@ <retval>, tmp164,
	b	.L15		@
.L35:
	.align	2
.L34:
	.word	RecruitValues
	.size	GetUnitListToUse.part.0, .-GetUnitListToUse.part.0
	.align	1
	.p2align 2,,3
	.syntax unified
	.code	16
	.thumb_func
	.type	ShiftDataInBuffer.part.0, %function
ShiftDataInBuffer.part.0:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:4362: 	int length = usedBufferLength[0]; 
	ldr	r5, [r3]	@ length, *usedBufferLength_1(D)
@ Patches/../C_code.c:4365: 	if (amount < 0) { 
	cmp	r1, #0	@ amount,
	blt	.L37		@,
@ Patches/../C_code.c:4372: 		for (i = length; i >= offset; --i) { 
	cmp	r5, r2	@ length, offset
	blt	.L42		@,
	subs	r2, r2, #1	@ tmp145,
	adds	r4, r0, r5	@ ivtmp.670, buffer, length
	adds	r0, r0, r2	@ _61, buffer, tmp145
.L43:
@ Patches/../C_code.c:4373: 			buffer[i+amount] = buffer[i]; 
	ldrb	r2, [r4]	@ _20, MEM[(char *)_55]
@ Patches/../C_code.c:4373: 			buffer[i+amount] = buffer[i]; 
	strb	r2, [r4, r1]	@ _20, MEM[(char *)_55 + _57 * 1]
@ Patches/../C_code.c:4372: 		for (i = length; i >= offset; --i) { 
	subs	r4, r4, #1	@ ivtmp.670,
	cmp	r4, r0	@ ivtmp.670, _61
	bne	.L43		@,
.L42:
@ Patches/../C_code.c:4379: } 
	@ sp needed	@
@ Patches/../C_code.c:4377: 	usedBufferLength[0] = length + amount; 
	adds	r1, r5, r1	@ tmp147, length, amount
@ Patches/../C_code.c:4377: 	usedBufferLength[0] = length + amount; 
	str	r1, [r3]	@ tmp147, *usedBufferLength_1(D)
@ Patches/../C_code.c:4379: } 
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L37:
@ Patches/../C_code.c:4366: 		amount = ABS(amount); 
	rsbs	r6, r1, #0	@ amount, amount
@ Patches/../C_code.c:4367: 		for (i = offset; i < length; ++i) { 
	cmp	r5, r2	@ length, offset
	ble	.L40		@,
	subs	r2, r2, r1	@ tmp142, offset, amount
	adds	r2, r0, r2	@ ivtmp.663, buffer, tmp142
	subs	r0, r0, r1	@ tmp143, buffer, amount
	adds	r0, r0, r5	@ _49, tmp143, length
.L41:
@ Patches/../C_code.c:4368: 			buffer[i] = buffer[i + amount]; 
	ldrb	r4, [r2]	@ _12, MEM[(char *)_34]
@ Patches/../C_code.c:4368: 			buffer[i] = buffer[i + amount]; 
	strb	r4, [r2, r1]	@ _12, MEM[(char *)_34 + _5 * 1]
@ Patches/../C_code.c:4367: 		for (i = offset; i < length; ++i) { 
	adds	r2, r2, #1	@ ivtmp.663,
	cmp	r2, r0	@ ivtmp.663, _49
	bne	.L41		@,
.L40:
@ Patches/../C_code.c:4366: 		amount = ABS(amount); 
	movs	r1, r6	@ amount, amount
	b	.L42		@
	.size	ShiftDataInBuffer.part.0, .-ShiftDataInBuffer.part.0
	.align	1
	.p2align 2,,3
	.global	MaybeForceHardModeFE8
	.syntax unified
	.code	16
	.thumb_func
	.type	MaybeForceHardModeFE8, %function
MaybeForceHardModeFE8:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:149: 	ForceHardModeFE8(); 
	ldr	r3, .L47	@ tmp114,
@ Patches/../C_code.c:150: } 
	@ sp needed	@
@ Patches/../C_code.c:149: 	ForceHardModeFE8(); 
	bl	.L14		@
@ Patches/../C_code.c:150: } 
	pop	{r4}
	pop	{r0}
	bx	r0
.L48:
	.align	2
.L47:
	.word	ForceHardModeFE8
	.size	MaybeForceHardModeFE8, .-MaybeForceHardModeFE8
	.align	1
	.p2align 2,,3
	.global	ShouldRandomizeRecruitment
	.syntax unified
	.code	16
	.thumb_func
	.type	ShouldRandomizeRecruitment, %function
ShouldRandomizeRecruitment:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L50	@ tmp119,
@ Patches/../C_code.c:154: }
	@ sp needed	@
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r0, [r3]	@ *RecruitValues.0_1, *RecruitValues.0_1
	lsls	r0, r0, #29	@ tmp124, *RecruitValues.0_1,
	lsrs	r0, r0, #29	@ tmp117, tmp124,
@ Patches/../C_code.c:154: }
	bx	lr
.L51:
	.align	2
.L50:
	.word	RecruitValues
	.size	ShouldRandomizeRecruitment, .-ShouldRandomizeRecruitment
	.align	1
	.p2align 2,,3
	.global	ShouldRandomizeRecruitmentForUnitID
	.syntax unified
	.code	16
	.thumb_func
	.type	ShouldRandomizeRecruitmentForUnitID, %function
ShouldRandomizeRecruitmentForUnitID:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldr	r3, .L55	@ tmp120,
@ Patches/../C_code.c:155: int ShouldRandomizeRecruitmentForUnitID(int id) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	bl	.L14		@
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldrh	r3, [r0, #6]	@ tmp121,
	cmp	r3, #0	@ tmp121,
	beq	.L54		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L55+4	@ tmp123,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r0, [r3]	@ *RecruitValues.0_7, *RecruitValues.0_7
	lsls	r0, r0, #29	@ tmp128, *RecruitValues.0_7,
	lsrs	r0, r0, #29	@ <retval>, tmp128,
.L52:
@ Patches/../C_code.c:158: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L54:
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	movs	r0, #0	@ <retval>,
	b	.L52		@
.L56:
	.align	2
.L55:
	.word	GetCharacterData
	.word	RecruitValues
	.size	ShouldRandomizeRecruitmentForUnitID, .-ShouldRandomizeRecruitmentForUnitID
	.align	1
	.p2align 2,,3
	.global	ShouldRandomizeRecruitmentForPortraitID
	.syntax unified
	.code	16
	.thumb_func
	.type	ShouldRandomizeRecruitmentForPortraitID, %function
ShouldRandomizeRecruitmentForPortraitID:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:161: 	if (!id) { return false; } 
	cmp	r0, #0	@ tmp127,
	beq	.L59		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L60	@ tmp119,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r0, [r3]	@ *RecruitValues.0_4, *RecruitValues.0_4
	lsls	r0, r0, #29	@ tmp124, *RecruitValues.0_4,
	lsrs	r0, r0, #29	@ <retval>, tmp124,
.L57:
@ Patches/../C_code.c:164: }
	@ sp needed	@
	bx	lr
.L59:
@ Patches/../C_code.c:161: 	if (!id) { return false; } 
	movs	r0, #0	@ <retval>,
	b	.L57		@
.L61:
	.align	2
.L60:
	.word	RecruitValues
	.size	ShouldRandomizeRecruitmentForPortraitID, .-ShouldRandomizeRecruitmentForPortraitID
	.align	1
	.p2align 2,,3
	.global	HashByte_Simple
	.syntax unified
	.code	16
	.thumb_func
	.type	HashByte_Simple, %function
HashByte_Simple:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:169: 	if (max==0) return 0;
	cmp	r1, #0	@ max,
	beq	.L64		@,
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	ldr	r3, .L65	@ tmp121,
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	lsrs	r0, r0, #3	@ tmp120, rn,
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	bl	.L14		@
.L62:
@ Patches/../C_code.c:171: }; 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L64:
@ Patches/../C_code.c:169: 	if (max==0) return 0;
	movs	r0, #0	@ <retval>,
	b	.L62		@
.L66:
	.align	2
.L65:
	.word	Mod
	.size	HashByte_Simple, .-HashByte_Simple
	.align	1
	.p2align 2,,3
	.global	GetAlwaysSkill
	.syntax unified
	.code	16
	.thumb_func
	.type	GetAlwaysSkill, %function
GetAlwaysSkill:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:191: 	if (RandValues->skills != 3) { return 0; } 
	movs	r2, #63	@ tmp126,
@ Patches/../C_code.c:191: 	if (RandValues->skills != 3) { return 0; } 
	ldr	r3, .L70	@ tmp122,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldrb	r3, [r3, #3]	@ *RandValues.4_1, *RandValues.4_1
@ Patches/../C_code.c:191: 	if (RandValues->skills != 3) { return 0; } 
	movs	r0, #0	@ <retval>,
@ Patches/../C_code.c:191: 	if (RandValues->skills != 3) { return 0; } 
	bics	r3, r2	@ tmp127, tmp126
	cmp	r3, #192	@ tmp127,
	bne	.L67		@,
@ Patches/../C_code.c:192: 	return *AlwaysSkill; 
	ldr	r3, .L70+4	@ tmp130,
	ldr	r3, [r3]	@ AlwaysSkill, AlwaysSkill
	ldrb	r0, [r3]	@ <retval>, *AlwaysSkill.5_4
.L67:
@ Patches/../C_code.c:193: } 
	@ sp needed	@
	bx	lr
.L71:
	.align	2
.L70:
	.word	RandValues
	.word	AlwaysSkill
	.size	GetAlwaysSkill, .-GetAlwaysSkill
	.align	1
	.p2align 2,,3
	.global	GetNextAlwaysSkill
	.syntax unified
	.code	16
	.thumb_func
	.type	GetNextAlwaysSkill, %function
GetNextAlwaysSkill:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	ldr	r3, .L83	@ tmp121,
	ldr	r2, [r3]	@ NumberOfSkills.6_10, NumberOfSkills
@ Patches/../C_code.c:197: 	id++; 
	adds	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	cmp	r0, r2	@ <retval>, NumberOfSkills.6_10
	bge	.L73		@,
	ldr	r1, .L83+4	@ tmp129,
	b	.L75		@
.L80:
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	adds	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	cmp	r2, r0	@ NumberOfSkills.6_10, <retval>
	beq	.L73		@,
.L75:
@ Patches/../C_code.c:199: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r3, [r1, r0]	@ MEM[(unsigned char *)&AlwaysSkillTable + _5 * 1], MEM[(unsigned char *)&AlwaysSkillTable + _5 * 1]
	cmp	r3, #0	@ MEM[(unsigned char *)&AlwaysSkillTable + _5 * 1],
	beq	.L80		@,
.L72:
@ Patches/../C_code.c:205: } 
	@ sp needed	@
	bx	lr
.L73:
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	movs	r0, #0	@ <retval>,
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	cmp	r2, #0	@ NumberOfSkills.6_10,
	ble	.L72		@,
	ldr	r1, .L83+4	@ tmp129,
	b	.L76		@
.L82:
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	adds	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	cmp	r2, r0	@ NumberOfSkills.6_10, <retval>
	beq	.L81		@,
.L76:
@ Patches/../C_code.c:202: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r3, [r1, r0]	@ MEM[(unsigned char *)&AlwaysSkillTable + _6 * 1], MEM[(unsigned char *)&AlwaysSkillTable + _6 * 1]
	cmp	r3, #0	@ MEM[(unsigned char *)&AlwaysSkillTable + _6 * 1],
	beq	.L82		@,
	b	.L72		@
.L81:
@ Patches/../C_code.c:204: 	return 0; 
	movs	r0, #0	@ <retval>,
	b	.L72		@
.L84:
	.align	2
.L83:
	.word	NumberOfSkills
	.word	AlwaysSkillTable
	.size	GetNextAlwaysSkill, .-GetNextAlwaysSkill
	.align	1
	.p2align 2,,3
	.global	GetPreviousAlwaysSkill
	.syntax unified
	.code	16
	.thumb_func
	.type	GetPreviousAlwaysSkill, %function
GetPreviousAlwaysSkill:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:207: 	id--; 
	subs	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:208: 	for (int i = id; i > 0; --i) { 
	cmp	r0, #0	@ <retval>,
	ble	.L86		@,
	ldr	r2, .L95	@ tmp128,
	b	.L88		@
.L93:
@ Patches/../C_code.c:208: 	for (int i = id; i > 0; --i) { 
	subs	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:208: 	for (int i = id; i > 0; --i) { 
	cmp	r0, #0	@ <retval>,
	beq	.L86		@,
.L88:
@ Patches/../C_code.c:209: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r3, [r2, r0]	@ MEM[(unsigned char *)&AlwaysSkillTable + _15 * 1], MEM[(unsigned char *)&AlwaysSkillTable + _15 * 1]
	cmp	r3, #0	@ MEM[(unsigned char *)&AlwaysSkillTable + _15 * 1],
	beq	.L93		@,
.L85:
@ Patches/../C_code.c:215: } 
	@ sp needed	@
	bx	lr
.L86:
@ Patches/../C_code.c:211: 	for (int i = NumberOfSkills; i > 0; --i) { 
	ldr	r3, .L95+4	@ tmp123,
	ldr	r0, [r3]	@ <retval>, NumberOfSkills
@ Patches/../C_code.c:211: 	for (int i = NumberOfSkills; i > 0; --i) { 
	cmp	r0, #0	@ <retval>,
	ble	.L90		@,
	ldr	r2, .L95	@ tmp128,
	b	.L89		@
.L94:
@ Patches/../C_code.c:211: 	for (int i = NumberOfSkills; i > 0; --i) { 
	subs	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:211: 	for (int i = NumberOfSkills; i > 0; --i) { 
	cmp	r0, #0	@ <retval>,
	beq	.L85		@,
.L89:
@ Patches/../C_code.c:212: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r3, [r2, r0]	@ MEM[(unsigned char *)&AlwaysSkillTable + _2 * 1], MEM[(unsigned char *)&AlwaysSkillTable + _2 * 1]
	cmp	r3, #0	@ MEM[(unsigned char *)&AlwaysSkillTable + _2 * 1],
	beq	.L94		@,
	b	.L85		@
.L90:
@ Patches/../C_code.c:214: 	return 0; 
	movs	r0, #0	@ <retval>,
	b	.L85		@
.L96:
	.align	2
.L95:
	.word	AlwaysSkillTable
	.word	NumberOfSkills
	.size	GetPreviousAlwaysSkill, .-GetPreviousAlwaysSkill
	.align	1
	.p2align 2,,3
	.global	GetUnitIdOfPortrait
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitIdOfPortrait, %function
GetUnitIdOfPortrait:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:241: int GetUnitIdOfPortrait(int portraitID) { 
	movs	r4, r0	@ portraitID, tmp126
@ Patches/../C_code.c:242: 	if (portraitID < 0x100) { 
	cmp	r0, #255	@ portraitID,
	bgt	.L98		@,
@ Patches/../C_code.c:243: 		if (ReplacePortraitTable[portraitID]) { portraitID = ReplacePortraitTable[portraitID]; } 
	ldr	r3, .L108	@ tmp122,
	ldrb	r3, [r3, r0]	@ _1, ReplacePortraitTable
@ Patches/../C_code.c:243: 		if (ReplacePortraitTable[portraitID]) { portraitID = ReplacePortraitTable[portraitID]; } 
	cmp	r3, #0	@ _1,
	bne	.L106		@,
.L98:
@ Patches/../C_code.c:245: 	const struct CharacterData* table = GetCharacterData(1); 
	ldr	r3, .L108+4	@ tmp123,
	movs	r0, #1	@,
	bl	.L14		@
	ldr	r3, .L108+8	@ tmp129,
	adds	r2, r0, r3	@ _20, table, tmp129
	b	.L101		@
.L99:
@ Patches/../C_code.c:248: 		table++; 
	adds	r0, r0, #52	@ table,
@ Patches/../C_code.c:246: 	for (int i = 1; i <= MAX_CHAR_ID; i++) { 
	cmp	r0, r2	@ table, _20
	beq	.L107		@,
.L101:
@ Patches/../C_code.c:247: 		if (table->portraitId == portraitID) { return table->number; } 
	ldrh	r3, [r0, #6]	@ MEM[(short unsigned int *)table_19 + 6B], MEM[(short unsigned int *)table_19 + 6B]
@ Patches/../C_code.c:247: 		if (table->portraitId == portraitID) { return table->number; } 
	cmp	r3, r4	@ MEM[(short unsigned int *)table_19 + 6B], portraitID
	bne	.L99		@,
@ Patches/../C_code.c:247: 		if (table->portraitId == portraitID) { return table->number; } 
	ldrb	r0, [r0, #4]	@ <retval>,
.L97:
@ Patches/../C_code.c:251: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L106:
@ Patches/../C_code.c:243: 		if (ReplacePortraitTable[portraitID]) { portraitID = ReplacePortraitTable[portraitID]; } 
	movs	r4, r3	@ portraitID, _1
	b	.L98		@
.L107:
@ Patches/../C_code.c:250: 	return 0;
	movs	r0, #0	@ <retval>,
	b	.L97		@
.L109:
	.align	2
.L108:
	.word	ReplacePortraitTable
	.word	GetCharacterData
	.word	13260
	.size	GetUnitIdOfPortrait, .-GetUnitIdOfPortrait
	.align	1
	.p2align 2,,3
	.global	CanCharacterBecomeBoss
	.syntax unified
	.code	16
	.thumb_func
	.type	CanCharacterBecomeBoss, %function
CanCharacterBecomeBoss:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movs	r2, #128	@ tmp125,
	ldr	r3, [r0, #40]	@ table_7(D)->attributes, table_7(D)->attributes
	lsls	r2, r2, #8	@ tmp125, tmp125,
	ands	r2, r3	@ _8, table_7(D)->attributes
@ Patches/../C_code.c:339: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	ldr	r3, .L113	@ tmp127,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r1, [r3]	@ *RecruitValues.8_2, *RecruitValues.8_2
	movs	r3, #7	@ tmp133,
	ands	r3, r1	@ _4, *RecruitValues.8_2
@ Patches/../C_code.c:339: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	cmp	r3, #5	@ _4,
	beq	.L112		@,
@ Patches/../C_code.c:340: 	if ((!boss) && (RecruitValues->recruitment == 4)) { return true; } // players become bosses and vice versa 
	subs	r0, r3, #4	@ tmp137, _4,
	rsbs	r3, r0, #0	@ tmp138, tmp137
	adcs	r0, r0, r3	@ tmp136, tmp137, tmp138
@ Patches/../C_code.c:340: 	if ((!boss) && (RecruitValues->recruitment == 4)) { return true; } // players become bosses and vice versa 
	movs	r3, r2	@ _8, _8
	subs	r2, r3, #1	@ tmp141, _8
	sbcs	r3, r3, r2	@ _8, _8, tmp141
@ Patches/../C_code.c:340: 	if ((!boss) && (RecruitValues->recruitment == 4)) { return true; } // players become bosses and vice versa 
	orrs	r0, r3	@ <retval>, tmp140
.L110:
@ Patches/../C_code.c:343: }
	@ sp needed	@
	bx	lr
.L112:
@ Patches/../C_code.c:339: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	movs	r0, #0	@ <retval>,
	b	.L110		@
.L114:
	.align	2
.L113:
	.word	RecruitValues
	.size	CanCharacterBecomeBoss, .-CanCharacterBecomeBoss
	.align	1
	.p2align 2,,3
	.global	MustCharacterBecomeBoss
	.syntax unified
	.code	16
	.thumb_func
	.type	MustCharacterBecomeBoss, %function
MustCharacterBecomeBoss:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:347: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	ldr	r3, .L116	@ tmp126,
@ Patches/../C_code.c:353: }
	@ sp needed	@
@ Patches/../C_code.c:347: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r2, [r3]	@ *RecruitValues.10_2, *RecruitValues.10_2
@ Patches/../C_code.c:347: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	movs	r3, #7	@ tmp132,
	ands	r3, r2	@ tmp134, *RecruitValues.10_2
	subs	r3, r3, #5	@ tmp137,
	subs	r2, r3, #1	@ tmp138, tmp137
	sbcs	r3, r3, r2	@ tmp136, tmp137, tmp138
@ Patches/../C_code.c:350: 	if (boss) { return true; } 
	ldr	r0, [r0, #40]	@ table_7(D)->attributes, table_7(D)->attributes
	lsrs	r0, r0, #15	@ tmp144, table_7(D)->attributes,
	ands	r0, r3	@ tmp124, tmp136
@ Patches/../C_code.c:353: }
	bx	lr
.L117:
	.align	2
.L116:
	.word	RecruitValues
	.size	MustCharacterBecomeBoss, .-MustCharacterBecomeBoss
	.align	1
	.p2align 2,,3
	.global	GetAdjustedCharacterID
	.syntax unified
	.code	16
	.thumb_func
	.type	GetAdjustedCharacterID, %function
GetAdjustedCharacterID:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:356: 	int portraitID = table->portraitId; 
	ldrh	r4, [r0, #6]	@ _1,
@ Patches/../C_code.c:355: int GetAdjustedCharacterID(const struct CharacterData* table) { 
	movs	r5, r0	@ table, tmp128
@ Patches/../C_code.c:357: 	if (!portraitID) { return table->number; } 
	cmp	r4, #0	@ _1,
	bne	.L119		@,
.L127:
@ Patches/../C_code.c:375: 	return table->number; 
	ldrb	r0, [r5, #4]	@ <retval>,
.L118:
@ Patches/../C_code.c:376: } 
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L119:
@ Patches/../C_code.c:358: 	const struct CharacterData* table2 = GetCharacterData(1); 
	ldr	r3, .L128	@ tmp124,
	movs	r0, #1	@,
	bl	.L14		@
	ldr	r3, .L128+4	@ tmp131,
	adds	r1, r0, r3	@ _23, table2, tmp131
	b	.L122		@
.L121:
@ Patches/../C_code.c:361: 		table2++;
	adds	r0, r0, #52	@ table2,
@ Patches/../C_code.c:359: 	for (int i = 0; i<MAX_CHAR_ID; ++i) { // replace duplicate unit IDs (eg. Lyn without supports and Lyn with supports becomes the same char) 
	cmp	r0, r1	@ table2, _23
	beq	.L127		@,
.L122:
@ Patches/../C_code.c:360: 		if ((portraitID == table2->portraitId) && (table2->pSupportData)) { return table2->number; } 
	ldrh	r2, [r0, #6]	@ MEM[(short unsigned int *)table2_22 + 6B], MEM[(short unsigned int *)table2_22 + 6B]
	cmp	r2, r4	@ MEM[(short unsigned int *)table2_22 + 6B], _1
	bne	.L121		@,
@ Patches/../C_code.c:360: 		if ((portraitID == table2->portraitId) && (table2->pSupportData)) { return table2->number; } 
	ldr	r2, [r0, #44]	@ MEM[(long unsigned int *)table2_22 + 44B], MEM[(long unsigned int *)table2_22 + 44B]
	cmp	r2, #0	@ MEM[(long unsigned int *)table2_22 + 44B],
	beq	.L121		@,
@ Patches/../C_code.c:360: 		if ((portraitID == table2->portraitId) && (table2->pSupportData)) { return table2->number; } 
	ldrb	r0, [r0, #4]	@ <retval>,
@ Patches/../C_code.c:360: 		if ((portraitID == table2->portraitId) && (table2->pSupportData)) { return table2->number; } 
	b	.L118		@
.L129:
	.align	2
.L128:
	.word	GetCharacterData
	.word	13260
	.size	GetAdjustedCharacterID, .-GetAdjustedCharacterID
	.align	1
	.p2align 2,,3
	.global	GetUnitListToUse
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitListToUse, %function
GetUnitListToUse:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:383: 	if (!table->portraitId) { return result; } 
	ldrh	r3, [r0, #6]	@ tmp129,
	cmp	r3, #0	@ tmp129,
	beq	.L141		@,
@ Patches/../C_code.c:347: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	ldr	r3, .L150	@ tmp130,
	ldr	r2, [r3]	@ pretmp_36, RecruitValues
@ Patches/../C_code.c:347: 	if ((RecruitValues->recruitment == 5)) { return false; } 
	movs	r3, #7	@ tmp136,
	ldrb	r4, [r2]	@ MEM[(struct RecruitmentValues *)pretmp_36], MEM[(struct RecruitmentValues *)pretmp_36]
	ands	r3, r4	@ _38, MEM[(struct RecruitmentValues *)pretmp_36]
@ Patches/../C_code.c:392: 	if (boss && (MustCharacterBecomeBoss(table))) { result = 2; } 
	cmp	r1, #0	@ boss,
	beq	.L132		@,
@ Patches/../C_code.c:350: 	if (boss) { return true; } 
	ldr	r1, [r0, #40]	@ table_4(D)->attributes, table_4(D)->attributes
	lsls	r1, r1, #16	@ tmp172, table_4(D)->attributes,
	bpl	.L132		@,
	cmp	r3, #5	@ _38,
	bne	.L133		@,
.L132:
@ Patches/../C_code.c:393: 	if (result == 1) { if (RecruitValues->recruitment == 2) { result = 0; } } 
	cmp	r3, #2	@ _38,
	beq	.L141		@,
@ Patches/../C_code.c:395: 	if (RecruitValues->recruitment < 4) { 
	ldrb	r3, [r2]	@ *pretmp_36, *pretmp_36
	lsls	r3, r3, #29	@ tmp158, *pretmp_36,
@ Patches/../C_code.c:395: 	if (RecruitValues->recruitment < 4) { 
	lsrs	r3, r3, #29	@ tmp161, tmp158,
	cmp	r3, #3	@ tmp161,
	bhi	.L137		@,
@ Patches/../C_code.c:405: 			if (table->number > 0x2c) { return 0; } 
	ldrb	r3, [r0, #4]	@ tmp165,
	cmp	r3, #44	@ tmp165,
	bhi	.L141		@,
.L137:
@ Patches/../C_code.c:409: 	if (RecruitValues->recruitment == 5) { result = 1; } 
	movs	r0, #1	@ <retval>,
	b	.L130		@
.L141:
@ Patches/../C_code.c:383: 	if (!table->portraitId) { return result; } 
	movs	r0, #0	@ <retval>,
.L130:
@ Patches/../C_code.c:413: }  
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L133:
	subs	r3, r3, #1	@ tmp168,
	subs	r2, r3, #1	@ tmp169, tmp168
	sbcs	r3, r3, r2	@ tmp167, tmp168, tmp169
	lsls	r0, r3, #1	@ <retval>, tmp167,
	b	.L130		@
.L151:
	.align	2
.L150:
	.word	RecruitValues
	.size	GetUnitListToUse, .-GetUnitListToUse
	.align	1
	.p2align 2,,3
	.global	CallGetUnitListToUse
	.syntax unified
	.code	16
	.thumb_func
	.type	CallGetUnitListToUse, %function
CallGetUnitListToUse:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	ldr	r3, .L160	@ tmp124,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
@ Patches/../C_code.c:416: int CallGetUnitListToUse(const struct CharacterData* table, int boss, int excludeNoSupports) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	ldrb	r4, [r3]	@ MEM[(struct RecruitmentValues *)pretmp_22], MEM[(struct RecruitmentValues *)pretmp_22]
	movs	r3, #7	@ tmp130,
	ands	r4, r3	@ _24, tmp130
@ Patches/../C_code.c:383: 	if (!table->portraitId) { return result; } 
	ldrh	r3, [r0, #6]	@ tmp132,
	cmp	r3, #0	@ tmp132,
	beq	.L158		@,
	bl	GetUnitListToUse.part.0		@
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	cmp	r4, #4	@ _24,
	beq	.L159		@,
.L152:
@ Patches/../C_code.c:420: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L159:
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	cmp	r0, #1	@ <retval>,
	beq	.L157		@,
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	subs	r0, r0, #2	@ tmp135,
	rsbs	r3, r0, #0	@ tmp136, tmp135
	adcs	r0, r0, r3	@ <retval>, tmp135, tmp136
	b	.L152		@
.L158:
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	movs	r0, #0	@ <retval>,
	b	.L152		@
.L157:
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	movs	r0, #2	@ <retval>,
	b	.L152		@
.L161:
	.align	2
.L160:
	.word	RecruitValues
	.size	CallGetUnitListToUse, .-CallGetUnitListToUse
	.align	1
	.p2align 2,,3
	.global	ShouldDoJankyPalettes
	.syntax unified
	.code	16
	.thumb_func
	.type	ShouldDoJankyPalettes, %function
ShouldDoJankyPalettes:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:588: 	return RandBitflags->colours == 2; 
	movs	r0, #7	@ tmp127,
@ Patches/../C_code.c:589: } 
	@ sp needed	@
@ Patches/../C_code.c:588: 	return RandBitflags->colours == 2; 
	ldr	r3, .L163	@ tmp121,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.17_1, *RandBitflags.17_1
	ands	r0, r3	@ tmp129, *RandBitflags.17_1
	subs	r0, r0, #2	@ tmp132,
	rsbs	r3, r0, #0	@ tmp133, tmp132
	adcs	r0, r0, r3	@ tmp131, tmp132, tmp133
@ Patches/../C_code.c:589: } 
	bx	lr
.L164:
	.align	2
.L163:
	.word	RandBitflags
	.size	ShouldDoJankyPalettes, .-ShouldDoJankyPalettes
	.align	1
	.p2align 2,,3
	.global	ShouldRandomizeBGM
	.syntax unified
	.code	16
	.thumb_func
	.type	ShouldRandomizeBGM, %function
ShouldRandomizeBGM:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:595: 	if (NeverRandomizeBGM) { return false; } 
	ldr	r3, .L168	@ tmp119,
@ Patches/../C_code.c:595: 	if (NeverRandomizeBGM) { return false; } 
	ldr	r3, [r3]	@ NeverRandomizeBGM, NeverRandomizeBGM
	cmp	r3, #0	@ NeverRandomizeBGM,
	bne	.L167		@,
@ Patches/../C_code.c:596: 	if (!RandBitflags->randMusic) { return false; } 
	movs	r0, #63	@ tmp128,
@ Patches/../C_code.c:596: 	if (!RandBitflags->randMusic) { return false; } 
	ldr	r3, .L168+4	@ tmp122,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
@ Patches/../C_code.c:596: 	if (!RandBitflags->randMusic) { return false; } 
	ldrb	r3, [r3, #1]	@ *RandBitflags.19_5, *RandBitflags.19_5
	cmp	r0, r3	@ tmp128, *RandBitflags.19_5
	sbcs	r0, r0, r0	@ tmp131
	rsbs	r0, r0, #0	@ <retval>, tmp131
.L165:
@ Patches/../C_code.c:598: } 
	@ sp needed	@
	bx	lr
.L167:
@ Patches/../C_code.c:595: 	if (NeverRandomizeBGM) { return false; } 
	movs	r0, #0	@ <retval>,
	b	.L165		@
.L169:
	.align	2
.L168:
	.word	NeverRandomizeBGM
	.word	RandBitflags
	.size	ShouldRandomizeBGM, .-ShouldRandomizeBGM
	.align	1
	.p2align 2,,3
	.global	GetItemAttributes
	.syntax unified
	.code	16
	.thumb_func
	.type	GetItemAttributes, %function
GetItemAttributes:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:617: 	u32 attr = GetItemData(item & 0xFF)->attributes;
	movs	r4, #255	@ tmp129,
@ Patches/../C_code.c:616: int GetItemAttributes(int item) { // 801727C
	mov	lr, r8	@,
@ Patches/../C_code.c:617: 	u32 attr = GetItemData(item & 0xFF)->attributes;
	ldr	r3, .L177	@ tmp130,
	ands	r4, r0	@ _1, tmp166
	movs	r0, r4	@, _1
@ Patches/../C_code.c:616: int GetItemAttributes(int item) { // 801727C
	push	{lr}	@
@ Patches/../C_code.c:617: 	u32 attr = GetItemData(item & 0xFF)->attributes;
	mov	r8, r3	@ tmp130, tmp130
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	movs	r6, #96	@ tmp138,
@ Patches/../C_code.c:617: 	u32 attr = GetItemData(item & 0xFF)->attributes;
	bl	.L14		@
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	ldr	r7, .L177+4	@ tmp132,
	ldr	r3, [r7]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.22_3, *RandBitflags.22_3
@ Patches/../C_code.c:617: 	u32 attr = GetItemData(item & 0xFF)->attributes;
	ldr	r5, [r0, #8]	@ attr, _2->attributes
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	ands	r3, r6	@ _5, tmp138
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	cmp	r3, #32	@ _5,
	beq	.L175		@,
.L171:
@ Patches/../C_code.c:619: 	if (RandBitflags->itemDur == 2) { attr |= IA_UNBREAKABLE; } 
	cmp	r3, #64	@ _5,
	beq	.L176		@,
.L173:
@ Patches/../C_code.c:621: }
	@ sp needed	@
	movs	r0, r5	@, attr
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L176:
@ Patches/../C_code.c:619: 	if (RandBitflags->itemDur == 2) { attr |= IA_UNBREAKABLE; } 
	subs	r3, r3, #56	@ tmp164,
	orrs	r5, r3	@ attr, tmp164
	b	.L173		@
.L175:
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	subs	r3, r3, #27	@ tmp140,
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	tst	r3, r5	@ tmp140, attr
	beq	.L172		@,
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	adds	r3, r3, #3	@ tmp142,
	orrs	r5, r3	@ attr, tmp142
	b	.L173		@
.L172:
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	movs	r0, r4	@, _1
	bl	.L179		@
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	ldrb	r3, [r0, #7]	@ tmp144,
	cmp	r3, #12	@ tmp144,
	beq	.L174		@,
@ Patches/../C_code.c:619: 	if (RandBitflags->itemDur == 2) { attr |= IA_UNBREAKABLE; } 
	ldr	r3, [r7]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *pretmp_34,
	ands	r3, r6	@ _5, tmp138
	b	.L171		@
.L174:
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	movs	r2, #8	@ tmp163,
@ Patches/../C_code.c:619: 	if (RandBitflags->itemDur == 2) { attr |= IA_UNBREAKABLE; } 
	ldr	r3, [r7]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *pretmp_28,
@ Patches/../C_code.c:618: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { attr |= IA_UNBREAKABLE; } 
	orrs	r5, r2	@ attr, tmp163
@ Patches/../C_code.c:619: 	if (RandBitflags->itemDur == 2) { attr |= IA_UNBREAKABLE; } 
	ands	r3, r6	@ _5, tmp138
	b	.L171		@
.L178:
	.align	2
.L177:
	.word	GetItemData
	.word	RandBitflags
	.size	GetItemAttributes, .-GetItemAttributes
	.align	1
	.p2align 2,,3
	.global	GetItemAfterUse
	.syntax unified
	.code	16
	.thumb_func
	.type	GetItemAfterUse, %function
GetItemAfterUse:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:601: u16 GetItemAfterUse(int item) { // 16AEC 8016730 8016928 
	movs	r4, r0	@ item, tmp146
@ Patches/../C_code.c:602: 	int attr = GetItemAttributes(item);
	bl	GetItemAttributes		@
@ Patches/../C_code.c:603:     if ((attr & IA_UNBREAKABLE) || (RandBitflags->itemDur == 2)) { 
	lsls	r3, r0, #28	@ tmp149, attr,
	bmi	.L183		@,
@ Patches/../C_code.c:603:     if ((attr & IA_UNBREAKABLE) || (RandBitflags->itemDur == 2)) { 
	ldr	r3, .L193	@ tmp130,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r2, [r3, #2]	@ *RandBitflags.20_2, *RandBitflags.20_2
	movs	r3, #96	@ tmp136,
	ands	r3, r2	@ _4, *RandBitflags.20_2
@ Patches/../C_code.c:603:     if ((attr & IA_UNBREAKABLE) || (RandBitflags->itemDur == 2)) { 
	cmp	r3, #64	@ _4,
	beq	.L183		@,
@ Patches/../C_code.c:606: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { return item; } 
	cmp	r3, #32	@ _4,
	beq	.L192		@,
.L184:
@ Patches/../C_code.c:608:     item -= (1 << 8); // lose one use
	subs	r4, r4, #1	@ item,
	subs	r4, r4, #255	@ item,
@ Patches/../C_code.c:610:     if (item < (1 << 8))
	cmp	r4, #255	@ item,
	ble	.L185		@,
@ Patches/../C_code.c:613:     return item; // return used item
	lsls	r4, r4, #16	@ tmp144, item,
	lsrs	r0, r4, #16	@ <retval>, tmp144,
	b	.L182		@
.L192:
@ Patches/../C_code.c:606: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { return item; } 
	subs	r3, r3, #27	@ tmp138,
@ Patches/../C_code.c:606: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { return item; } 
	tst	r3, r0	@ tmp138, attr
	bne	.L183		@,
@ Patches/../C_code.c:606: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { return item; } 
	movs	r0, #255	@ tmp140,
	ldr	r3, .L193+4	@ tmp142,
	ands	r0, r4	@ tmp141, item
	bl	.L14		@
@ Patches/../C_code.c:606: 	if ((RandBitflags->itemDur == 1) && ((attr & (IA_WEAPON|IA_STAFF)) || (GetItemData(item&0xFF)->weaponType == 0xC))) { return item; } 
	ldrb	r3, [r0, #7]	@ tmp143,
	cmp	r3, #12	@ tmp143,
	bne	.L184		@,
.L183:
@ Patches/../C_code.c:604: 	return item; } // unbreakable items don't lose uses!
	lsls	r0, r4, #16	@ tmp128, item,
	lsrs	r0, r0, #16	@ <retval>, tmp128,
.L182:
@ Patches/../C_code.c:614: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L185:
@ Patches/../C_code.c:611:         return 0; // return no item if uses < 0
	movs	r0, #0	@ <retval>,
	b	.L182		@
.L194:
	.align	2
.L193:
	.word	RandBitflags
	.word	GetItemData
	.size	GetItemAfterUse, .-GetItemAfterUse
	.align	1
	.p2align 2,,3
	.global	GetItemUses
	.syntax unified
	.code	16
	.thumb_func
	.type	GetItemUses, %function
GetItemUses:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:623: int GetItemUses(int item) {
	movs	r4, r0	@ item, tmp138
@ Patches/../C_code.c:624: 	if ((GetItemAttributes(item) & IA_UNBREAKABLE) || RandBitflags->itemDur)
	bl	GetItemAttributes		@
@ Patches/../C_code.c:624: 	if ((GetItemAttributes(item) & IA_UNBREAKABLE) || RandBitflags->itemDur)
	lsls	r0, r0, #28	@ tmp140, tmp139,
	bmi	.L198		@,
@ Patches/../C_code.c:624: 	if ((GetItemAttributes(item) & IA_UNBREAKABLE) || RandBitflags->itemDur)
	movs	r2, #96	@ tmp131,
	ldr	r3, .L199	@ tmp125,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.24_3, *RandBitflags.24_3
	tst	r2, r3	@ tmp131, *RandBitflags.24_3
	bne	.L198		@,
@ Patches/../C_code.c:627:         return (item&0xFF00)>>8;
	lsls	r0, r4, #16	@ tmp136, item,
	lsrs	r0, r0, #24	@ <retval>, tmp136,
.L195:
@ Patches/../C_code.c:628: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L198:
@ Patches/../C_code.c:625:         return 0xFF;
	movs	r0, #255	@ <retval>,
	b	.L195		@
.L200:
	.align	2
.L199:
	.word	RandBitflags
	.size	GetItemUses, .-GetItemUses
	.align	1
	.p2align 2,,3
	.global	GetItemMaxUses
	.syntax unified
	.code	16
	.thumb_func
	.type	GetItemMaxUses, %function
GetItemMaxUses:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:630: int GetItemMaxUses(int item) {
	movs	r4, r0	@ item, tmp141
@ Patches/../C_code.c:631: 	if ((GetItemAttributes(item) & IA_UNBREAKABLE) || RandBitflags->itemDur)
	bl	GetItemAttributes		@
@ Patches/../C_code.c:631: 	if ((GetItemAttributes(item) & IA_UNBREAKABLE) || RandBitflags->itemDur)
	lsls	r0, r0, #28	@ tmp144, tmp142,
	bmi	.L203		@,
@ Patches/../C_code.c:631: 	if ((GetItemAttributes(item) & IA_UNBREAKABLE) || RandBitflags->itemDur)
	movs	r2, #96	@ tmp133,
	ldr	r3, .L206	@ tmp127,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.25_3, *RandBitflags.25_3
@ Patches/../C_code.c:632:         return 0xFF;
	movs	r0, #255	@ <retval>,
@ Patches/../C_code.c:631: 	if ((GetItemAttributes(item) & IA_UNBREAKABLE) || RandBitflags->itemDur)
	tst	r2, r3	@ tmp133, *RandBitflags.25_3
	beq	.L205		@,
.L201:
@ Patches/../C_code.c:635: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L205:
@ Patches/../C_code.c:634:         return GetItemData(item & 0xFF)->maxUses;
	ldr	r3, .L206+4	@ tmp139,
	ands	r0, r4	@ tmp138, item
	bl	.L14		@
@ Patches/../C_code.c:634:         return GetItemData(item & 0xFF)->maxUses;
	ldrb	r0, [r0, #20]	@ <retval>,
@ Patches/../C_code.c:634:         return GetItemData(item & 0xFF)->maxUses;
	b	.L201		@
.L203:
@ Patches/../C_code.c:632:         return 0xFF;
	movs	r0, #255	@ <retval>,
	b	.L201		@
.L207:
	.align	2
.L206:
	.word	RandBitflags
	.word	GetItemData
	.size	GetItemMaxUses, .-GetItemMaxUses
	.align	1
	.p2align 2,,3
	.global	RandomizeBattleMusic
	.syntax unified
	.code	16
	.thumb_func
	.type	RandomizeBattleMusic, %function
RandomizeBattleMusic:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:595: 	if (NeverRandomizeBGM) { return false; } 
	ldr	r3, .L210	@ tmp123,
@ Patches/../C_code.c:595: 	if (NeverRandomizeBGM) { return false; } 
	ldr	r3, [r3]	@ NeverRandomizeBGM, NeverRandomizeBGM
@ Patches/../C_code.c:688: int RandomizeBattleMusic(int id){ 
	push	{r4, lr}	@
@ Patches/../C_code.c:595: 	if (NeverRandomizeBGM) { return false; } 
	cmp	r3, #0	@ NeverRandomizeBGM,
	bne	.L209		@,
@ Patches/../C_code.c:596: 	if (!RandBitflags->randMusic) { return false; } 
	ldr	r3, .L210+4	@ tmp126,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
@ Patches/../C_code.c:596: 	if (!RandBitflags->randMusic) { return false; } 
	ldrb	r3, [r3, #1]	@ *RandBitflags.19_13, *RandBitflags.19_13
	cmp	r3, #63	@ *RandBitflags.19_13,
	bls	.L209		@,
@ Patches/../C_code.c:700: 	return SoundRoomTable[NextRN_N(63)].songID; // before game over at 64
	ldr	r3, .L210+8	@ tmp130,
	movs	r0, #63	@,
	bl	.L14		@
@ Patches/../C_code.c:700: 	return SoundRoomTable[NextRN_N(63)].songID; // before game over at 64
	ldr	r3, .L210+12	@ tmp138,
	mov	ip, r3	@ tmp138, tmp138
	lsls	r0, r0, #4	@ tmp132, tmp136,
	add	r0, r0, ip	@ tmp133, tmp138
	ldr	r0, [r0]	@ id, _4->songID
.L209:
@ Patches/../C_code.c:702: };
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L211:
	.align	2
.L210:
	.word	NeverRandomizeBGM
	.word	RandBitflags
	.word	NextRN_N
	.word	144838260
	.size	RandomizeBattleMusic, .-RandomizeBattleMusic
	.align	1
	.p2align 2,,3
	.global	UnitHasDroppableItem
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitHasDroppableItem, %function
UnitHasDroppableItem:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:759: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	movs	r1, #11	@ tmp121,
	movs	r2, #192	@ tmp122,
	ldrsb	r1, [r0, r1]	@ tmp121,
@ Patches/../C_code.c:758: int UnitHasDroppableItem(struct Unit* unit) { 
	movs	r3, r0	@ unit, tmp127
@ Patches/../C_code.c:759: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	ands	r2, r1	@ tmp123, tmp121
@ Patches/../C_code.c:759: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	movs	r0, #0	@ <retval>,
@ Patches/../C_code.c:759: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	cmp	r2, #128	@ tmp123,
	bne	.L212		@,
@ Patches/../C_code.c:760: 	return (unit->state & US_DROP_ITEM); 
	ldr	r0, [r3, #12]	@ unit_7(D)->state, unit_7(D)->state
	movs	r3, #128	@ tmp125,
	lsls	r3, r3, #5	@ tmp125, tmp125,
	ands	r0, r3	@ <retval>, tmp125
.L212:
@ Patches/../C_code.c:761: } 
	@ sp needed	@
	bx	lr
	.size	UnitHasDroppableItem, .-UnitHasDroppableItem
	.align	1
	.p2align 2,,3
	.global	UnitHasStealableItem
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitHasStealableItem, %function
UnitHasStealableItem:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:767: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	movs	r2, #11	@ tmp129,
@ Patches/../C_code.c:766: int UnitHasStealableItem(struct Unit* unit) { 
	push	{r3, r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:767: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	movs	r3, #192	@ tmp130,
	ldrsb	r2, [r0, r2]	@ tmp129,
	ands	r3, r2	@ tmp131, tmp129
@ Patches/../C_code.c:767: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	cmp	r3, #128	@ tmp131,
	bne	.L216		@,
	movs	r4, r0	@ ivtmp.791, unit
	adds	r0, r0, #40	@ unit,
	movs	r5, r0	@ _28, unit
@ Patches/../C_code.c:763:     return (GetItemData(item&0xFF)->weaponType == 9);
	movs	r6, #255	@ tmp137,
	ldr	r7, .L221	@ tmp143,
	adds	r4, r4, #30	@ ivtmp.791,
.L218:
	ldrh	r0, [r4]	@ MEM[(short unsigned int *)_26], MEM[(short unsigned int *)_26]
	ands	r0, r6	@ tmp138, tmp137
	bl	.L223		@
@ Patches/../C_code.c:770: 		if (IsItemStealableSimple(unit->items[i])) { return true; } 
	ldrb	r3, [r0, #7]	@ tmp141,
	cmp	r3, #9	@ tmp141,
	beq	.L219		@,
@ Patches/../C_code.c:768: 	for (int i = 0; i < 5; ++i) { 
	adds	r4, r4, #2	@ ivtmp.791,
	cmp	r4, r5	@ ivtmp.791, _28
	bne	.L218		@,
.L216:
@ Patches/../C_code.c:767: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	movs	r0, #0	@ <retval>,
.L215:
@ Patches/../C_code.c:776: } 
	@ sp needed	@
	pop	{r3, r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L219:
@ Patches/../C_code.c:770: 		if (IsItemStealableSimple(unit->items[i])) { return true; } 
	movs	r0, #1	@ <retval>,
	b	.L215		@
.L222:
	.align	2
.L221:
	.word	GetItemData
	.size	UnitHasStealableItem, .-UnitHasStealableItem
	.align	1
	.p2align 2,,3
	.global	MaybeDisplayStealOrDropIcon
	.syntax unified
	.code	16
	.thumb_func
	.type	MaybeDisplayStealOrDropIcon, %function
MaybeDisplayStealOrDropIcon:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
	mov	lr, r9	@,
	mov	r7, r8	@,
@ Patches/../C_code.c:778: 	if ((GetGameClock() & 0x1F) >= 20) { return false; } 
	ldr	r3, .L238	@ tmp161,
@ Patches/../C_code.c:777: int MaybeDisplayStealOrDropIcon(struct Unit* unit) { 
	push	{r7, lr}	@
@ Patches/../C_code.c:777: int MaybeDisplayStealOrDropIcon(struct Unit* unit) { 
	movs	r4, r0	@ unit, tmp221
@ Patches/../C_code.c:778: 	if ((GetGameClock() & 0x1F) >= 20) { return false; } 
	bl	.L14		@
@ Patches/../C_code.c:778: 	if ((GetGameClock() & 0x1F) >= 20) { return false; } 
	movs	r3, #31	@ tmp162,
	ands	r3, r0	@ tmp163, tmp222
@ Patches/../C_code.c:779: 	if (!UNIT_IS_VALID(unit)) { return false; } 
	cmp	r3, #19	@ tmp163,
	bhi	.L235		@,
	cmp	r4, #0	@ unit,
	beq	.L235		@,
@ Patches/../C_code.c:779: 	if (!UNIT_IS_VALID(unit)) { return false; } 
	ldr	r3, [r4]	@ unit_30(D)->pCharacterData, unit_30(D)->pCharacterData
	cmp	r3, #0	@ unit_30(D)->pCharacterData,
	beq	.L235		@,
@ Patches/../C_code.c:781: 	int x = unit->xPos; 
	movs	r5, #16	@ x,
@ Patches/../C_code.c:783: 	x = x * 16 - gCameraX;
	ldr	r3, .L238+4	@ tmp177,
@ Patches/../C_code.c:781: 	int x = unit->xPos; 
	ldrsb	r5, [r4, r5]	@ x,* x
@ Patches/../C_code.c:783: 	x = x * 16 - gCameraX;
	ldrh	r3, [r3]	@ gCameraX, gCameraX
@ Patches/../C_code.c:783: 	x = x * 16 - gCameraX;
	lsls	r5, r5, #4	@ _6, x,
@ Patches/../C_code.c:783: 	x = x * 16 - gCameraX;
	subs	r5, r5, r3	@ x, _6, gCameraX
@ Patches/../C_code.c:785: 	if (x < -16 || x > 240) {
	movs	r2, r5	@ tmp179, x
@ Patches/../C_code.c:785: 	if (x < -16 || x > 240) {
	movs	r3, #128	@ tmp180,
@ Patches/../C_code.c:785: 	if (x < -16 || x > 240) {
	adds	r2, r2, #16	@ tmp179,
@ Patches/../C_code.c:785: 	if (x < -16 || x > 240) {
	lsls	r3, r3, #1	@ tmp180, tmp180,
	cmp	r2, r3	@ tmp179, tmp180
	bhi	.L235		@,
@ Patches/../C_code.c:782: 	int y = unit->yPos; 
	movs	r6, #17	@ y,
@ Patches/../C_code.c:784: 	y = y * 16 - gCameraY;
	ldr	r3, .L238+8	@ tmp182,
@ Patches/../C_code.c:782: 	int y = unit->yPos; 
	ldrsb	r6, [r4, r6]	@ y,* y
@ Patches/../C_code.c:784: 	y = y * 16 - gCameraY;
	ldrh	r3, [r3]	@ gCameraY, gCameraY
@ Patches/../C_code.c:784: 	y = y * 16 - gCameraY;
	lsls	r6, r6, #4	@ _9, y,
@ Patches/../C_code.c:784: 	y = y * 16 - gCameraY;
	subs	r6, r6, r3	@ y, _9, gCameraY
@ Patches/../C_code.c:789: 	if (y < -16 || y > 160) {
	movs	r3, r6	@ tmp184, y
	adds	r3, r3, #16	@ tmp184,
@ Patches/../C_code.c:789: 	if (y < -16 || y > 160) {
	cmp	r3, #176	@ tmp184,
	bhi	.L235		@,
@ Patches/../C_code.c:759: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	movs	r2, #11	@ tmp185,
	movs	r3, #192	@ tmp186,
	ldrsb	r2, [r4, r2]	@ tmp185,
	ands	r3, r2	@ tmp187, tmp185
@ Patches/../C_code.c:759: 	if (UNIT_FACTION(unit) != FACTION_RED) { return false; } 
	cmp	r3, #128	@ tmp187,
	bne	.L227		@,
@ Patches/../C_code.c:792: 	if (UnitHasDroppableItem(unit)) { 
	ldr	r3, [r4, #12]	@ unit_30(D)->state, unit_30(D)->state
	lsls	r3, r3, #19	@ tmp225, unit_30(D)->state,
	bmi	.L237		@,
	movs	r3, #40	@ _107,
	mov	r9, r3	@ _107, _107
	ldr	r3, .L238+12	@ tmp220,
	movs	r7, r4	@ ivtmp.803, unit
	add	r9, r9, r4	@ _107, unit
	mov	r8, r3	@ tmp220, tmp220
@ Patches/../C_code.c:763:     return (GetItemData(item&0xFF)->weaponType == 9);
	movs	r4, #255	@ tmp201,
	adds	r7, r7, #30	@ ivtmp.803,
.L230:
	ldrh	r0, [r7]	@ MEM[(short unsigned int *)_109], MEM[(short unsigned int *)_109]
	ands	r0, r4	@ tmp206, tmp201
	bl	.L179		@
@ Patches/../C_code.c:770: 		if (IsItemStealableSimple(unit->items[i])) { return true; } 
	ldrb	r3, [r0, #7]	@ tmp209,
	cmp	r3, #9	@ tmp209,
	beq	.L229		@,
@ Patches/../C_code.c:768: 	for (int i = 0; i < 5; ++i) { 
	adds	r7, r7, #2	@ ivtmp.803,
	cmp	r9, r7	@ _107, ivtmp.803
	bne	.L230		@,
.L227:
@ Patches/../C_code.c:804: 	return true; 
	movs	r0, #1	@ <retval>,
	b	.L224		@
.L235:
@ Patches/../C_code.c:778: 	if ((GetGameClock() & 0x1F) >= 20) { return false; } 
	movs	r0, #0	@ <retval>,
.L224:
@ Patches/../C_code.c:805: } 
	@ sp needed	@
	pop	{r6, r7}
	mov	r9, r7
	mov	r8, r6
	pop	{r3, r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L229:
@ Patches/../C_code.c:796: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x865); 
	movs	r1, r4	@ tmp201, tmp201
@ Patches/../C_code.c:796: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x865); 
	ldr	r3, .L238+16	@ tmp237,
@ Patches/../C_code.c:796: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x865); 
	adds	r6, r6, #8	@ tmp213,
@ Patches/../C_code.c:796: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x865); 
	adds	r0, r5, r3	@ tmp216, x, tmp237
@ Patches/../C_code.c:796: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x865); 
	adds	r6, r6, #255	@ tmp213,
@ Patches/../C_code.c:796: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x865); 
	lsls	r0, r0, #23	@ tmp218, tmp216,
	lsrs	r0, r0, #23	@ tmp217, tmp218,
	ldr	r2, .L238+20	@ tmp212,
	ldr	r3, .L238+24	@,
	ldr	r4, .L238+28	@ tmp219,
	ands	r1, r6	@ tmp201, tmp213
	bl	.L240		@
@ Patches/../C_code.c:804: 	return true; 
	movs	r0, #1	@ <retval>,
	b	.L224		@
.L237:
@ Patches/../C_code.c:793: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x869); // 0x869 priority 2 tile 0x69 
	movs	r1, #255	@ tmp194,
@ Patches/../C_code.c:793: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x869); // 0x869 priority 2 tile 0x69 
	ldr	r3, .L238+16	@ tmp231,
@ Patches/../C_code.c:793: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x869); // 0x869 priority 2 tile 0x69 
	adds	r6, r6, #8	@ tmp193,
@ Patches/../C_code.c:793: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x869); // 0x869 priority 2 tile 0x69 
	adds	r0, r5, r3	@ tmp196, x, tmp231
@ Patches/../C_code.c:793: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x869); // 0x869 priority 2 tile 0x69 
	adds	r6, r6, #255	@ tmp193,
@ Patches/../C_code.c:793: 	CallARM_PushToSecondaryOAM(OAM1_X(0x200+x + 1), OAM0_Y(0x100+y + 7), gObject_8x8, 0x869); // 0x869 priority 2 tile 0x69 
	lsls	r0, r0, #23	@ tmp198, tmp196,
	lsrs	r0, r0, #23	@ tmp197, tmp198,
	ldr	r2, .L238+20	@ tmp192,
	ldr	r3, .L238+32	@,
	ldr	r4, .L238+28	@ tmp199,
	ands	r1, r6	@ tmp195, tmp193
	bl	.L240		@
@ Patches/../C_code.c:804: 	return true; 
	movs	r0, #1	@ <retval>,
	b	.L224		@
.L239:
	.align	2
.L238:
	.word	GetGameClock
	.word	gCameraX
	.word	gCameraY
	.word	GetItemData
	.word	513
	.word	gObject_8x8
	.word	2149
	.word	CallARM_PushToSecondaryOAM
	.word	2153
	.size	MaybeDisplayStealOrDropIcon, .-MaybeDisplayStealOrDropIcon
	.align	1
	.p2align 2,,3
	.global	GetAdjustedPortraitId
	.syntax unified
	.code	16
	.thumb_func
	.type	GetAdjustedPortraitId, %function
GetAdjustedPortraitId:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:883: int GetAdjustedPortraitId(struct Unit* unit) { 
	movs	r4, r0	@ unit, tmp130
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	ldr	r3, .L245	@ tmp124,
	bl	.L14		@
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldr	r2, [r4]	@ _1, unit_10(D)->pCharacterData
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrh	r1, [r2, #6]	@ tmp125,
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	movs	r3, r0	@ portraitID, tmp131
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	cmp	r1, #0	@ tmp125,
	bne	.L242		@,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	movs	r1, #11	@ tmp126,
	ldrsb	r1, [r4, r1]	@ tmp126,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrb	r2, [r2, #4]	@ tmp127,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r3, r1, r0	@ portraitID, tmp126, portraitID
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r3, r2, r3	@ portraitID, tmp127, portraitID
.L242:
@ Patches/../C_code.c:886: 	portraitID &= 0xFF; 
	movs	r2, #255	@ tmp128,
	movs	r0, r2	@ <retval>, tmp128
	ands	r0, r3	@ <retval>, portraitID
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	tst	r2, r3	@ tmp128, portraitID
	bne	.L241		@,
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	movs	r0, #1	@ <retval>,
.L241:
@ Patches/../C_code.c:889: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L246:
	.align	2
.L245:
	.word	GetUnitPortraitId
	.size	GetAdjustedPortraitId, .-GetAdjustedPortraitId
	.align	1
	.p2align 2,,3
	.global	ShouldRandomizeColours
	.syntax unified
	.code	16
	.thumb_func
	.type	ShouldRandomizeColours, %function
ShouldRandomizeColours:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:894: 	if (NeverRandomizeColours) { return false; } 
	ldr	r3, .L250	@ tmp120,
@ Patches/../C_code.c:894: 	if (NeverRandomizeColours) { return false; } 
	ldr	r3, [r3]	@ NeverRandomizeColours, NeverRandomizeColours
	cmp	r3, #0	@ NeverRandomizeColours,
	bne	.L249		@,
@ Patches/../C_code.c:895: 	if (RandBitflags->colours) { return true; } 
	movs	r0, #7	@ tmp129,
@ Patches/../C_code.c:895: 	if (RandBitflags->colours) { return true; } 
	ldr	r3, .L250+4	@ tmp123,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.35_5, *RandBitflags.35_5
@ Patches/../C_code.c:895: 	if (RandBitflags->colours) { return true; } 
	ands	r0, r3	@ tmp131, *RandBitflags.35_5
	subs	r3, r0, #1	@ tmp134, tmp131
	sbcs	r0, r0, r3	@ <retval>, tmp131, tmp134
.L247:
@ Patches/../C_code.c:898: }  
	@ sp needed	@
	bx	lr
.L249:
@ Patches/../C_code.c:894: 	if (NeverRandomizeColours) { return false; } 
	movs	r0, #0	@ <retval>,
	b	.L247		@
.L251:
	.align	2
.L250:
	.word	NeverRandomizeColours
	.word	RandBitflags
	.size	ShouldRandomizeColours, .-ShouldRandomizeColours
	.align	1
	.p2align 2,,3
	.global	AnyFadeExists
	.syntax unified
	.code	16
	.thumb_func
	.type	AnyFadeExists, %function
AnyFadeExists:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:984: 	if (FadeExists()) return true; 
	ldr	r3, .L256	@ tmp121,
	bl	.L14		@
@ Patches/../C_code.c:984: 	if (FadeExists()) return true; 
	cmp	r0, #0	@ tmp136,
	beq	.L253		@,
.L255:
@ Patches/../C_code.c:984: 	if (FadeExists()) return true; 
	movs	r0, #1	@ <retval>,
.L252:
@ Patches/../C_code.c:991: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L253:
@ Patches/../C_code.c:985: 	if (Proc_Find(ProcScr_FadeCore)) return true; 
	ldr	r0, .L256+4	@ tmp124,
	ldr	r4, .L256+8	@ tmp125,
	bl	.L240		@
@ Patches/../C_code.c:985: 	if (Proc_Find(ProcScr_FadeCore)) return true; 
	cmp	r0, #0	@ tmp137,
	bne	.L255		@,
@ Patches/../C_code.c:986: 	if (Proc_Find(ProcScr_PalFade)) return true; 
	ldr	r0, .L256+12	@ tmp126,
	bl	.L240		@
@ Patches/../C_code.c:986: 	if (Proc_Find(ProcScr_PalFade)) return true; 
	cmp	r0, #0	@ tmp138,
	bne	.L255		@,
@ Patches/../C_code.c:987: 	if (Proc_Find(ProcScr_BmFadeIN)) return true; 
	ldr	r0, .L256+16	@ tmp128,
	bl	.L240		@
@ Patches/../C_code.c:987: 	if (Proc_Find(ProcScr_BmFadeIN)) return true; 
	cmp	r0, #0	@ tmp139,
	bne	.L255		@,
@ Patches/../C_code.c:988: 	if (Proc_Find(ProcScr_BmFadeOUT)) return true; 
	ldr	r0, .L256+20	@ tmp130,
	bl	.L240		@
@ Patches/../C_code.c:988: 	if (Proc_Find(ProcScr_BmFadeOUT)) return true; 
	subs	r3, r0, #1	@ tmp134, tmp140
	sbcs	r0, r0, r3	@ <retval>, tmp140, tmp134
	b	.L252		@
.L257:
	.align	2
.L256:
	.word	FadeExists
	.word	ProcScr_FadeCore
	.word	Proc_Find
	.word	ProcScr_PalFade
	.word	ProcScr_BmFadeIN
	.word	ProcScr_BmFadeOUT
	.size	AnyFadeExists, .-AnyFadeExists
	.align	1
	.p2align 2,,3
	.global	ShouldRandomizeGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	ShouldRandomizeGrowth, %function
ShouldRandomizeGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L261	@ tmp125,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_1, *RandBitflags.53_1
	ldr	r3, .L261+4	@ tmp128,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_1, tmp128
	beq	.L260		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_6(D)], MEM[(const struct CharacterData * *)unit_6(D)]
	ldrb	r2, [r2, #4]	@ tmp131,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L261+8	@ tmp129,
	lsls	r2, r2, #1	@ tmp132, tmp131,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r0, [r2, r3]	@ tmp134, CharExceptions
	rsbs	r3, r0, #0	@ tmp136, tmp134
	adcs	r0, r0, r3	@ <retval>, tmp134, tmp136
.L258:
@ Patches/../C_code.c:1167: }
	@ sp needed	@
	bx	lr
.L260:
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	movs	r0, #0	@ <retval>,
	b	.L258		@
.L262:
	.align	2
.L261:
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.size	ShouldRandomizeGrowth, .-ShouldRandomizeGrowth
	.align	1
	.p2align 2,,3
	.global	ShouldRandomizeStatCaps
	.syntax unified
	.code	16
	.thumb_func
	.type	ShouldRandomizeStatCaps, %function
ShouldRandomizeStatCaps:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, .L266	@ tmp125,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrh	r2, [r3]	@ *RandBitflags.54_1, *RandBitflags.54_1
	movs	r3, #224	@ tmp129,
	lsls	r3, r3, #1	@ tmp129, tmp129,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	tst	r2, r3	@ *RandBitflags.54_1, tmp129
	beq	.L265		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_6(D)], MEM[(const struct CharacterData * *)unit_6(D)]
	ldrb	r2, [r2, #4]	@ tmp135,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L266+4	@ tmp133,
	lsls	r2, r2, #1	@ tmp136, tmp135,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r0, [r2, r3]	@ tmp138, CharExceptions
	rsbs	r3, r0, #0	@ tmp140, tmp138
	adcs	r0, r0, r3	@ <retval>, tmp138, tmp140
.L263:
@ Patches/../C_code.c:1171: }
	@ sp needed	@
	bx	lr
.L265:
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	movs	r0, #0	@ <retval>,
	b	.L263		@
.L267:
	.align	2
.L266:
	.word	RandBitflags
	.word	CharExceptions
	.size	ShouldRandomizeStatCaps, .-ShouldRandomizeStatCaps
	.align	1
	.p2align 2,,3
	.global	ShouldRandomizeClass
	.syntax unified
	.code	16
	.thumb_func
	.type	ShouldRandomizeClass, %function
ShouldRandomizeClass:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:1174: 	int config = RandBitflags->class; 
	ldr	r3, .L279	@ tmp130,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #1]	@ *RandBitflags.55_1, *RandBitflags.55_1
	lsls	r3, r3, #29	@ tmp135, *RandBitflags.55_1,
@ Patches/../C_code.c:1173: int ShouldRandomizeClass(struct Unit* unit) { 
	movs	r2, r0	@ unit, tmp152
@ Patches/../C_code.c:1174: 	int config = RandBitflags->class; 
	lsrs	r0, r3, #30	@ <retval>, tmp135,
@ Patches/../C_code.c:1175: 	if (!config) { return false; } 
	beq	.L268		@,
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	cmp	r0, #3	@ <retval>,
	beq	.L277		@,
@ Patches/../C_code.c:1177: 	if ((config == 2) && (UNIT_FACTION(unit) == FACTION_RED)) {  return false; } 
	cmp	r0, #2	@ <retval>,
	beq	.L278		@,
.L271:
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r2]	@ MEM[(const struct CharacterData * *)unit_12(D)], MEM[(const struct CharacterData * *)unit_12(D)]
	ldrb	r2, [r2, #4]	@ tmp145,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L279+4	@ tmp143,
	lsls	r2, r2, #1	@ tmp146, tmp145,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r0, [r2, r3]	@ tmp148, CharExceptions
	rsbs	r3, r0, #0	@ tmp150, tmp148
	adcs	r0, r0, r3	@ <retval>, tmp148, tmp150
.L268:
@ Patches/../C_code.c:1180: } 
	@ sp needed	@
	bx	lr
.L277:
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	movs	r1, #11	@ tmp137,
	movs	r3, #192	@ tmp138,
	ldrsb	r1, [r2, r1]	@ tmp137,
@ Patches/../C_code.c:1175: 	if (!config) { return false; } 
	movs	r0, #0	@ <retval>,
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	ands	r3, r1	@ tmp139, tmp137
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	cmp	r3, #128	@ tmp139,
	bne	.L268		@,
	b	.L271		@
.L278:
@ Patches/../C_code.c:1177: 	if ((config == 2) && (UNIT_FACTION(unit) == FACTION_RED)) {  return false; } 
	movs	r1, #11	@ tmp140,
	movs	r3, #192	@ tmp141,
	ldrsb	r1, [r2, r1]	@ tmp140,
	ands	r3, r1	@ tmp142, tmp140
@ Patches/../C_code.c:1177: 	if ((config == 2) && (UNIT_FACTION(unit) == FACTION_RED)) {  return false; } 
	cmp	r3, #128	@ tmp142,
	bne	.L271		@,
@ Patches/../C_code.c:1175: 	if (!config) { return false; } 
	movs	r0, #0	@ <retval>,
	b	.L268		@
.L280:
	.align	2
.L279:
	.word	RandBitflags
	.word	CharExceptions
	.size	ShouldRandomizeClass, .-ShouldRandomizeClass
	.align	1
	.p2align 2,,3
	.global	IsClassOrRecruitmentRandomized
	.syntax unified
	.code	16
	.thumb_func
	.type	IsClassOrRecruitmentRandomized, %function
IsClassOrRecruitmentRandomized:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:1174: 	int config = RandBitflags->class; 
	ldr	r2, .L296	@ tmp135,
@ Patches/../C_code.c:1181: int IsClassOrRecruitmentRandomized(struct Unit* unit) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:1174: 	int config = RandBitflags->class; 
	ldr	r2, [r2]	@ RandBitflags, RandBitflags
	ldrb	r4, [r2, #1]	@ *RandBitflags.55_16, *RandBitflags.55_16
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_5(D)], MEM[(const struct CharacterData * *)unit_5(D)]
@ Patches/../C_code.c:1174: 	int config = RandBitflags->class; 
	lsls	r4, r4, #29	@ tmp140, *RandBitflags.55_16,
@ Patches/../C_code.c:1181: int IsClassOrRecruitmentRandomized(struct Unit* unit) { 
	movs	r3, r0	@ unit, tmp167
@ Patches/../C_code.c:1174: 	int config = RandBitflags->class; 
	lsrs	r4, r4, #30	@ <retval>, tmp140,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r0, [r2, #4]	@ _58,
@ Patches/../C_code.c:1175: 	if (!config) { return false; } 
	cmp	r4, #0	@ <retval>,
	beq	.L282		@,
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	cmp	r4, #3	@ <retval>,
	beq	.L294		@,
@ Patches/../C_code.c:1177: 	if ((config == 2) && (UNIT_FACTION(unit) == FACTION_RED)) {  return false; } 
	cmp	r4, #2	@ <retval>,
	beq	.L295		@,
.L284:
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L296+4	@ tmp149,
	lsls	r2, r0, #1	@ tmp150, _58,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r4, [r2, r3]	@ tmp152, CharExceptions
	rsbs	r3, r4, #0	@ tmp154, tmp152
	adcs	r4, r4, r3	@ <retval>, tmp152, tmp154
.L282:
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldr	r3, .L296+8	@ tmp155,
	bl	.L14		@
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldrh	r3, [r0, #6]	@ tmp156,
	cmp	r3, #0	@ tmp156,
	beq	.L281		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L296+12	@ tmp158,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.0_12, *RecruitValues.0_12
	lsls	r3, r3, #29	@ tmp163, *RecruitValues.0_12,
	lsrs	r3, r3, #29	@ tmp164, tmp163,
@ Patches/../C_code.c:1183: 	result |= ShouldRandomizeRecruitmentForUnitID(unit->pCharacterData->number); 
	orrs	r4, r3	@ <retval>, tmp164
.L281:
@ Patches/../C_code.c:1185: } 
	movs	r0, r4	@, <retval>
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L294:
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	movs	r2, #11	@ tmp143,
	ldrsb	r2, [r3, r2]	@ tmp143,
	movs	r3, #192	@ tmp144,
@ Patches/../C_code.c:1175: 	if (!config) { return false; } 
	movs	r4, #0	@ <retval>,
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	ands	r3, r2	@ tmp145, tmp143
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	cmp	r3, #128	@ tmp145,
	bne	.L282		@,
	b	.L284		@
.L295:
@ Patches/../C_code.c:1177: 	if ((config == 2) && (UNIT_FACTION(unit) == FACTION_RED)) {  return false; } 
	movs	r2, #11	@ tmp146,
	ldrsb	r2, [r3, r2]	@ tmp146,
	movs	r3, #192	@ tmp147,
	ands	r3, r2	@ tmp148, tmp146
@ Patches/../C_code.c:1177: 	if ((config == 2) && (UNIT_FACTION(unit) == FACTION_RED)) {  return false; } 
	cmp	r3, #128	@ tmp148,
	bne	.L284		@,
@ Patches/../C_code.c:1175: 	if (!config) { return false; } 
	movs	r4, #0	@ <retval>,
	b	.L282		@
.L297:
	.align	2
.L296:
	.word	RandBitflags
	.word	CharExceptions
	.word	GetCharacterData
	.word	RecruitValues
	.size	IsClassOrRecruitmentRandomized, .-IsClassOrRecruitmentRandomized
	.align	1
	.p2align 2,,3
	.global	IsAnythingRandomized
	.syntax unified
	.code	16
	.thumb_func
	.type	IsAnythingRandomized, %function
IsAnythingRandomized:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldr	r3, .L299	@ tmp141,
@ Patches/../C_code.c:1190: } 
	@ sp needed	@
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldr	r1, [r3]	@ RandBitflags.56_1, RandBitflags
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldr	r3, .L299+4	@ tmp144,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrb	r2, [r1]	@ *RandBitflags.56_1, *RandBitflags.56_1
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrb	r0, [r3]	@ *RecruitValues.57_4, *RecruitValues.57_4
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsls	r3, r2, #30	@ tmp156, *RandBitflags.56_1,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsls	r0, r0, #29	@ tmp149, *RecruitValues.57_4,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsrs	r3, r3, #30	@ tmp157, tmp156,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsrs	r0, r0, #29	@ tmp150, tmp149,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r0, r3	@ tmp159, tmp157
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrh	r3, [r1]	@ *RandBitflags.56_1, *RandBitflags.56_1
	lsls	r3, r3, #23	@ tmp164, *RandBitflags.56_1,
	lsrs	r3, r3, #29	@ tmp165, tmp164,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r0, r3	@ tmp167, tmp165
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrb	r3, [r1, #2]	@ *RandBitflags.56_1, *RandBitflags.56_1
	lsls	r3, r3, #27	@ tmp172, *RandBitflags.56_1,
	lsrs	r3, r3, #30	@ tmp173, tmp172,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r0, r3	@ tmp175, tmp173
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrb	r3, [r1, #1]	@ *RandBitflags.56_1, *RandBitflags.56_1
	lsls	r1, r3, #29	@ tmp180, *RandBitflags.56_1,
	lsrs	r1, r1, #30	@ tmp181, tmp180,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r0, r1	@ tmp183, tmp181
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsls	r1, r3, #28	@ tmp188, *RandBitflags.56_1,
	lsrs	r1, r1, #31	@ tmp189, tmp188,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsls	r3, r3, #26	@ tmp196, *RandBitflags.56_1,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r0, r1	@ tmp191, tmp189
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsrs	r3, r3, #30	@ tmp197, tmp196,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r0, r3	@ tmp199, tmp197
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	movs	r3, #12	@ tmp205,
	ands	r3, r2	@ tmp207, *RandBitflags.56_1
	subs	r2, r3, #1	@ tmp210, tmp207
	sbcs	r3, r3, r2	@ tmp209, tmp207, tmp210
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r0, r3	@ tmp142, tmp209
@ Patches/../C_code.c:1190: } 
	bx	lr
.L300:
	.align	2
.L299:
	.word	RandBitflags
	.word	RecruitValues
	.size	IsAnythingRandomized, .-IsAnythingRandomized
	.align	1
	.p2align 2,,3
	.global	GetSeed
	.syntax unified
	.code	16
	.thumb_func
	.type	GetSeed, %function
GetSeed:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:1193: 	return RandValues->seed; 
	ldr	r3, .L302	@ tmp119,
@ Patches/../C_code.c:1194: } 
	@ sp needed	@
@ Patches/../C_code.c:1193: 	return RandValues->seed; 
	ldr	r3, [r3]	@ RandValues, RandValues
	ldr	r0, [r3]	@ *RandValues.64_1, *RandValues.64_1
	lsls	r0, r0, #12	@ tmp121, *RandValues.64_1,
	lsrs	r0, r0, #12	@ tmp117, tmp121,
@ Patches/../C_code.c:1194: } 
	bx	lr
.L303:
	.align	2
.L302:
	.word	RandValues
	.size	GetSeed, .-GetSeed
	.align	1
	.p2align 2,,3
	.global	GetMaxItems
	.syntax unified
	.code	16
	.thumb_func
	.type	GetMaxItems, %function
GetMaxItems:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	ldr	r3, .L312	@ tmp123,
	ldr	r0, [r3]	@ <retval>, MaxItems_Link
@ Patches/../C_code.c:1211: int GetMaxItems(void) {  
	push	{r4, lr}	@
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	cmp	r0, #0	@ <retval>,
	bne	.L304		@,
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	ldr	r4, .L312+4	@ tmp131,
	ldr	r3, [r4]	@ MaxItems, MaxItems
	ldrb	r0, [r3]	@ _3, *MaxItems.76_2
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	cmp	r0, #0	@ _3,
	beq	.L311		@,
.L304:
@ Patches/../C_code.c:1221: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L311:
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	ldr	r3, .L312+8	@ tmp126,
	adds	r0, r0, #1	@,
	bl	.L14		@
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	movs	r3, #1	@ i,
	b	.L309		@
.L307:
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1217: 		table++; 
	adds	r0, r0, #36	@ table,
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	cmp	r3, #255	@ i,
	beq	.L308		@,
.L309:
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	ldrb	r2, [r0, #6]	@ MEM[(unsigned char *)table_15 + 6B], MEM[(unsigned char *)table_15 + 6B]
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	cmp	r2, r3	@ MEM[(unsigned char *)table_15 + 6B], i
	beq	.L307		@,
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	subs	r0, r0, #36	@ table,
.L308:
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	ldr	r3, [r4]	@ MaxItems.78_19, MaxItems
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	ldrb	r0, [r0, #6]	@ _21,
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	strb	r0, [r3]	@ _21, *MaxItems.78_19
	b	.L304		@
.L313:
	.align	2
.L312:
	.word	MaxItems_Link
	.word	MaxItems
	.word	GetItemData
	.size	GetMaxItems, .-GetMaxItems
	.align	1
	.p2align 2,,3
	.global	GetMaxClasses
	.syntax unified
	.code	16
	.thumb_func
	.type	GetMaxClasses, %function
GetMaxClasses:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:1223: 	if (MaxClasses_Link) { return MaxClasses_Link; } 
	ldr	r3, .L326	@ tmp127,
	ldr	r0, [r3]	@ <retval>, MaxClasses_Link
@ Patches/../C_code.c:1222: int GetMaxClasses(void) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:1223: 	if (MaxClasses_Link) { return MaxClasses_Link; } 
	cmp	r0, #0	@ <retval>,
	bne	.L314		@,
@ Patches/../C_code.c:1224: 	if (*MaxClasses) { return *MaxClasses; } 
	ldr	r4, .L326+4	@ tmp146,
	ldr	r3, [r4]	@ MaxClasses, MaxClasses
	ldrb	r0, [r3]	@ _3, *MaxClasses.80_2
@ Patches/../C_code.c:1224: 	if (*MaxClasses) { return *MaxClasses; } 
	cmp	r0, #0	@ _3,
	beq	.L325		@,
.L314:
@ Patches/../C_code.c:1245: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L325:
@ Patches/../C_code.c:1225: 	const struct ClassData* table = GetClassData(1); 
	ldr	r3, .L326+8	@ tmp130,
	adds	r0, r0, #1	@,
	bl	.L14		@
@ Patches/../C_code.c:1234: 	if (!RecruitValues->newClasses) { c = 127; } 
	movs	r1, #48	@ tmp138,
@ Patches/../C_code.c:1234: 	if (!RecruitValues->newClasses) { c = 127; } 
	ldr	r3, .L326+12	@ tmp132,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.82_11, *RecruitValues.82_11
@ Patches/../C_code.c:1234: 	if (!RecruitValues->newClasses) { c = 127; } 
	ands	r1, r3	@ tmp140, *RecruitValues.82_11
@ Patches/../C_code.c:1234: 	if (!RecruitValues->newClasses) { c = 127; } 
	subs	r3, r1, #1	@ tmp148, tmp140
	sbcs	r1, r1, r3	@ tmp147, tmp140, tmp148
	lsls	r1, r1, #7	@ c, tmp147,
@ Patches/../C_code.c:1236: 	for (int i = 1; i < c; i++) { 
	movs	r3, #1	@ i,
@ Patches/../C_code.c:1234: 	if (!RecruitValues->newClasses) { c = 127; } 
	adds	r1, r1, #127	@ c,
	b	.L320		@
.L318:
@ Patches/../C_code.c:1236: 	for (int i = 1; i < c; i++) { 
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1238: 		table++; 
	adds	r0, r0, #84	@ table,
@ Patches/../C_code.c:1236: 	for (int i = 1; i < c; i++) { 
	cmp	r3, r1	@ i, c
	beq	.L319		@,
.L320:
@ Patches/../C_code.c:1237: 		if (table->number != i) { table--; break; } 
	ldrb	r2, [r0, #4]	@ MEM[(unsigned char *)table_18 + 4B], MEM[(unsigned char *)table_18 + 4B]
@ Patches/../C_code.c:1237: 		if (table->number != i) { table--; break; } 
	cmp	r2, r3	@ MEM[(unsigned char *)table_18 + 4B], i
	beq	.L318		@,
@ Patches/../C_code.c:1237: 		if (table->number != i) { table--; break; } 
	subs	r0, r0, #84	@ table,
.L319:
@ Patches/../C_code.c:1240: 	c = table->number;
	ldrb	r3, [r0, #4]	@ prephitmp_7,
@ Patches/../C_code.c:1240: 	c = table->number;
	subs	r0, r3, #0	@ <retval>, prephitmp_7,
@ Patches/../C_code.c:1242: 	if (c < 1) { c = 1; } 
	bne	.L321		@,
@ Patches/../C_code.c:1242: 	if (c < 1) { c = 1; } 
	movs	r0, #1	@ <retval>,
	adds	r3, r3, #1	@ prephitmp_7,
.L321:
@ Patches/../C_code.c:1243: 	*MaxClasses = c;
	ldr	r2, [r4]	@ MaxClasses.83_26, MaxClasses
@ Patches/../C_code.c:1243: 	*MaxClasses = c;
	strb	r3, [r2]	@ prephitmp_7, *MaxClasses.83_26
	b	.L314		@
.L327:
	.align	2
.L326:
	.word	MaxClasses_Link
	.word	MaxClasses
	.word	GetClassData
	.word	RecruitValues
	.size	GetMaxClasses, .-GetMaxClasses
	.align	1
	.p2align 2,,3
	.global	NextSeededRN_Simple
	.syntax unified
	.code	16
	.thumb_func
	.type	NextSeededRN_Simple, %function
NextSeededRN_Simple:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:1251: 	u32 rn0 = rn & 0xFFFF; 
	lsls	r1, r0, #16	@ tmp126, rn,
@ Patches/../C_code.c:1252: 	u32 rn1 = rn >> 16; 
	lsrs	r3, r0, #16	@ rn1, rn,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	lsls	r2, r3, #11	@ tmp127, rn1,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	lsrs	r0, r1, #21	@ tmp128, tmp126,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	adds	r2, r2, r0	@ tmp129, tmp127, tmp128
@ Patches/../C_code.c:1261:         rn0++;
	orrs	r3, r1	@ tmp135, tmp126
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	adds	r2, r2, r1	@ rn, tmp129, tmp126
@ Patches/../C_code.c:1261:         rn0++;
	lsrs	r0, r3, #15	@ rn0, tmp135,
@ Patches/../C_code.c:1264:     rn ^= rn0;
	eors	r0, r2	@ rn, rn
@ Patches/../C_code.c:1266: }
	@ sp needed	@
	bx	lr
	.size	NextSeededRN_Simple, .-NextSeededRN_Simple
	.align	1
	.p2align 2,,3
	.global	InitSeededRN_Simple
	.syntax unified
	.code	16
	.thumb_func
	.type	InitSeededRN_Simple, %function
InitSeededRN_Simple:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
	sub	sp, sp, #16	@,,
@ Patches/../C_code.c:1273:     u16 initTable[8] = {
	mov	r4, sp	@ tmp135,
	movs	r2, r4	@ tmp137, tmp135
@ Patches/../C_code.c:1269: u32 InitSeededRN_Simple(int seed, u32 currentRN) {
	movs	r5, r0	@ seed, tmp164
@ Patches/../C_code.c:1273:     u16 initTable[8] = {
	ldr	r3, .L339	@ tmp136,
	ldmia	r3!, {r0, r1, r6}	@ tmp138, tmp168, tmp167, tmp169
	stmia	r2!, {r0, r1, r6}	@ tmp137, tmp168, tmp167, tmp169
	ldr	r3, [r3]	@ tmp139,
@ Patches/../C_code.c:1284:     int mod = Mod(seed, 7);
	movs	r1, #7	@,
@ Patches/../C_code.c:1273:     u16 initTable[8] = {
	str	r3, [r2]	@ tmp139,
@ Patches/../C_code.c:1284:     int mod = Mod(seed, 7);
	movs	r0, r5	@, seed
	ldr	r6, .L339+4	@ tmp140,
	bl	.L341		@
@ Patches/../C_code.c:1286:     currentRN = initTable[(mod++ & 7)];
	movs	r3, #7	@ tmp142,
	movs	r2, r3	@ tmp143, tmp142
	ands	r2, r0	@ tmp143, mod
@ Patches/../C_code.c:1286:     currentRN = initTable[(mod++ & 7)];
	adds	r0, r0, #1	@ mod,
@ Patches/../C_code.c:1287:     currentRN |= initTable[(mod++ & 7)] << 16;
	ands	r3, r0	@ tmp148, mod
@ Patches/../C_code.c:1286:     currentRN = initTable[(mod++ & 7)];
	lsls	r2, r2, #1	@ tmp144, tmp143,
@ Patches/../C_code.c:1287:     currentRN |= initTable[(mod++ & 7)] << 16;
	lsls	r3, r3, #1	@ tmp149, tmp148,
@ Patches/../C_code.c:1286:     currentRN = initTable[(mod++ & 7)];
	ldrh	r2, [r2, r4]	@ currentRN, initTable
@ Patches/../C_code.c:1287:     currentRN |= initTable[(mod++ & 7)] << 16;
	ldrh	r4, [r3, r4]	@ tmp150, initTable
@ Patches/../C_code.c:1289:     if (Mod(seed, 5) > 0) { 
	movs	r1, #5	@,
@ Patches/../C_code.c:1287:     currentRN |= initTable[(mod++ & 7)] << 16;
	lsls	r4, r4, #16	@ tmp151, tmp150,
@ Patches/../C_code.c:1289:     if (Mod(seed, 5) > 0) { 
	movs	r0, r5	@, seed
@ Patches/../C_code.c:1287:     currentRN |= initTable[(mod++ & 7)] << 16;
	orrs	r4, r2	@ <retval>, currentRN
@ Patches/../C_code.c:1289:     if (Mod(seed, 5) > 0) { 
	bl	.L341		@
@ Patches/../C_code.c:1289:     if (Mod(seed, 5) > 0) { 
	cmp	r0, #0	@ mod,
	ble	.L332		@,
.L335:
@ Patches/../C_code.c:1251: 	u32 rn0 = rn & 0xFFFF; 
	lsls	r2, r4, #16	@ tmp153, <retval>,
@ Patches/../C_code.c:1252: 	u32 rn1 = rn >> 16; 
	lsrs	r3, r4, #16	@ rn1, <retval>,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	lsls	r1, r3, #11	@ tmp155, rn1,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	lsrs	r4, r2, #21	@ tmp154, tmp153,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	adds	r4, r4, r1	@ tmp156, tmp154, tmp155
@ Patches/../C_code.c:1261:         rn0++;
	orrs	r3, r2	@ tmp162, tmp153
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	adds	r4, r4, r2	@ rn, tmp156, tmp153
@ Patches/../C_code.c:1261:         rn0++;
	lsrs	r3, r3, #15	@ rn0, tmp162,
@ Patches/../C_code.c:1290:         for (mod = Mod(seed,  5); mod != 0; mod--) { 
	subs	r0, r0, #1	@ mod,
@ Patches/../C_code.c:1264:     rn ^= rn0;
	eors	r4, r3	@ <retval>, rn0
@ Patches/../C_code.c:1290:         for (mod = Mod(seed,  5); mod != 0; mod--) { 
	cmp	r0, #0	@ mod,
	bne	.L335		@,
.L332:
@ Patches/../C_code.c:1296: }
	movs	r0, r4	@, <retval>
	add	sp, sp, #16	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L340:
	.align	2
.L339:
	.word	.LANCHOR0
	.word	Mod
	.size	InitSeededRN_Simple, .-InitSeededRN_Simple
	.align	1
	.p2align 2,,3
	.global	GetNthRN_Simple
	.syntax unified
	.code	16
	.thumb_func
	.type	GetNthRN_Simple, %function
GetNthRN_Simple:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:1299: 	n = (n ^ (n >> 4)) & 0xF; 
	movs	r4, #15	@ tmp132,
@ Patches/../C_code.c:1299: 	n = (n ^ (n >> 4)) & 0xF; 
	asrs	r3, r0, #4	@ tmp131, tmp144,
@ Patches/../C_code.c:1299: 	n = (n ^ (n >> 4)) & 0xF; 
	eors	r3, r0	@ _2, tmp144
@ Patches/../C_code.c:1298: u32 GetNthRN_Simple(int n, int seed, u32 currentRN) { 
	movs	r5, r1	@ seed, tmp145
@ Patches/../C_code.c:1299: 	n = (n ^ (n >> 4)) & 0xF; 
	ands	r4, r3	@ n, _2
@ Patches/../C_code.c:1300: 	if (!currentRN) { 
	cmp	r2, #0	@ currentRN,
	bne	.L343		@,
@ Patches/../C_code.c:1301: 		currentRN = InitSeededRN_Simple(seed, currentRN); 
	movs	r1, #0	@,
	movs	r0, r5	@, seed
	bl	InitSeededRN_Simple		@
	movs	r2, r0	@ currentRN, tmp147
.L343:
@ Patches/../C_code.c:1303: 	for (int i = 0; i < n; i++) { 
	cmp	r4, #0	@ n,
	beq	.L344		@,
	movs	r0, #0	@ i,
.L346:
@ Patches/../C_code.c:1251: 	u32 rn0 = rn & 0xFFFF; 
	lsls	r1, r2, #16	@ tmp133, currentRN,
@ Patches/../C_code.c:1252: 	u32 rn1 = rn >> 16; 
	lsrs	r3, r2, #16	@ rn1, currentRN,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	lsls	r5, r3, #11	@ tmp135, rn1,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	lsrs	r2, r1, #21	@ tmp134, tmp133,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	adds	r2, r2, r5	@ tmp136, tmp134, tmp135
@ Patches/../C_code.c:1261:         rn0++;
	orrs	r3, r1	@ tmp142, tmp133
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	adds	r2, r2, r1	@ rn, tmp136, tmp133
@ Patches/../C_code.c:1261:         rn0++;
	lsrs	r3, r3, #15	@ rn0, tmp142,
@ Patches/../C_code.c:1303: 	for (int i = 0; i < n; i++) { 
	adds	r0, r0, #1	@ i,
@ Patches/../C_code.c:1264:     rn ^= rn0;
	eors	r2, r3	@ currentRN, rn0
@ Patches/../C_code.c:1303: 	for (int i = 0; i < n; i++) { 
	cmp	r4, r0	@ n, i
	bne	.L346		@,
.L344:
@ Patches/../C_code.c:1307: } 
	@ sp needed	@
	movs	r0, r2	@, currentRN
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
	.size	GetNthRN_Simple, .-GetNthRN_Simple
	.align	1
	.p2align 2,,3
	.global	InitRandomRecruitmentProc
	.syntax unified
	.code	16
	.thumb_func
	.type	InitRandomRecruitmentProc, %function
InitRandomRecruitmentProc:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 200
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, fp	@,
	mov	r7, r10	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
	push	{r5, r6, r7, lr}	@
	sub	sp, sp, #204	@,,
@ Patches/../C_code.c:425: 	const struct CharacterData* table = GetCharacterData(1); 
	ldr	r6, .L432	@ tmp326,
@ Patches/../C_code.c:422: RecruitmentProc* InitRandomRecruitmentProc(int procID) { 
	str	r0, [sp, #36]	@ tmp349, %sfp
@ Patches/../C_code.c:425: 	const struct CharacterData* table = GetCharacterData(1); 
	movs	r0, #1	@,
	bl	.L341		@
@ Patches/../C_code.c:430: 	RecruitmentProc* proc1 = Proc_Start(RecruitmentProcCmd1, PROC_TREE_3); 
	ldr	r4, .L432+4	@ tmp203,
@ Patches/../C_code.c:425: 	const struct CharacterData* table = GetCharacterData(1); 
	movs	r5, r0	@ table, tmp350
@ Patches/../C_code.c:430: 	RecruitmentProc* proc1 = Proc_Start(RecruitmentProcCmd1, PROC_TREE_3); 
	movs	r0, r4	@ tmp204, tmp203
@ Patches/../C_code.c:428: 	int seed = RandValues->seed; 
	ldr	r3, .L432+8	@ tmp200,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldr	r3, [r3]	@ *RandValues.16_1, *RandValues.16_1
	lsls	r3, r3, #12	@ tmp202, *RandValues.16_1,
@ Patches/../C_code.c:430: 	RecruitmentProc* proc1 = Proc_Start(RecruitmentProcCmd1, PROC_TREE_3); 
	ldr	r7, .L432+12	@ tmp205,
@ Patches/../C_code.c:428: 	int seed = RandValues->seed; 
	lsrs	r3, r3, #12	@ seed, tmp202,
@ Patches/../C_code.c:430: 	RecruitmentProc* proc1 = Proc_Start(RecruitmentProcCmd1, PROC_TREE_3); 
	movs	r1, #3	@,
	adds	r0, r0, #16	@ tmp204,
@ Patches/../C_code.c:428: 	int seed = RandValues->seed; 
	str	r3, [sp, #12]	@ seed, %sfp
@ Patches/../C_code.c:430: 	RecruitmentProc* proc1 = Proc_Start(RecruitmentProcCmd1, PROC_TREE_3); 
	bl	.L223		@
@ Patches/../C_code.c:431: 	RecruitmentProc* proc2 = Proc_Start(RecruitmentProcCmd2, PROC_TREE_3); 
	movs	r3, r4	@ tmp207, tmp203
	adds	r3, r3, #48	@ tmp207,
@ Patches/../C_code.c:430: 	RecruitmentProc* proc1 = Proc_Start(RecruitmentProcCmd1, PROC_TREE_3); 
	mov	r8, r0	@ <retval>, tmp351
@ Patches/../C_code.c:431: 	RecruitmentProc* proc2 = Proc_Start(RecruitmentProcCmd2, PROC_TREE_3); 
	movs	r1, #3	@,
@ Patches/../C_code.c:430: 	RecruitmentProc* proc1 = Proc_Start(RecruitmentProcCmd1, PROC_TREE_3); 
	str	r0, [sp, #20]	@ <retval>, %sfp
@ Patches/../C_code.c:431: 	RecruitmentProc* proc2 = Proc_Start(RecruitmentProcCmd2, PROC_TREE_3); 
	movs	r0, r3	@ tmp207, tmp207
	bl	.L223		@
@ Patches/../C_code.c:432: 	RecruitmentProc* proc3 = Proc_Start(RecruitmentProcCmd3, PROC_TREE_3); 
	movs	r3, r4	@ tmp210, tmp203
	adds	r3, r3, #80	@ tmp210,
	movs	r1, #3	@,
@ Patches/../C_code.c:431: 	RecruitmentProc* proc2 = Proc_Start(RecruitmentProcCmd2, PROC_TREE_3); 
	str	r0, [sp, #4]	@ tmp352, %sfp
@ Patches/../C_code.c:432: 	RecruitmentProc* proc3 = Proc_Start(RecruitmentProcCmd3, PROC_TREE_3); 
	movs	r0, r3	@ tmp210, tmp210
	bl	.L223		@
@ Patches/../C_code.c:433: 	RecruitmentProc* proc4 = Proc_Start(RecruitmentProcCmd4, PROC_TREE_3); 
	adds	r4, r4, #112	@ tmp203,
@ Patches/../C_code.c:432: 	RecruitmentProc* proc3 = Proc_Start(RecruitmentProcCmd3, PROC_TREE_3); 
	mov	fp, r0	@ proc3, tmp353
@ Patches/../C_code.c:433: 	RecruitmentProc* proc4 = Proc_Start(RecruitmentProcCmd4, PROC_TREE_3); 
	movs	r1, #3	@,
	movs	r0, r4	@ tmp213, tmp203
	bl	.L223		@
@ Patches/../C_code.c:442: 		proc->id[i&0x3F] = 0x0; 
	movs	r1, #63	@ tmp215,
	mov	r10, r1	@ tmp215, tmp215
@ Patches/../C_code.c:442: 		proc->id[i&0x3F] = 0x0; 
	movs	r1, #0	@ tmp220,
	mov	r9, r1	@ tmp220, tmp220
@ Patches/../C_code.c:446: 		boss = table->attributes & (CA_BOSS);
	movs	r1, #128	@ tmp346,
	lsls	r1, r1, #8	@ tmp346, tmp346,
@ Patches/../C_code.c:434: 	RecruitmentProc* proc = proc1;  
	mov	r7, r8	@ proc, <retval>
@ Patches/../C_code.c:427: 	int b = 0; // bosses count 
	movs	r3, #0	@ b,
@ Patches/../C_code.c:426: 	int c = 0; 
	movs	r2, #0	@ c,
@ Patches/../C_code.c:446: 		boss = table->attributes & (CA_BOSS);
	mov	r8, r1	@ tmp346, tmp346
@ Patches/../C_code.c:455: 				bosses[b] = i+1; 
	mov	r1, fp	@ proc3, proc3
	str	r6, [sp, #24]	@ tmp326, %sfp
@ Patches/../C_code.c:437: 	for (int i = 0; i <= MAX_CHAR_ID; ++i) { // all available units 
	movs	r4, #0	@ i,
@ Patches/../C_code.c:455: 				bosses[b] = i+1; 
	mov	fp, r3	@ b, b
	movs	r6, r2	@ c, c
@ Patches/../C_code.c:433: 	RecruitmentProc* proc4 = Proc_Start(RecruitmentProcCmd4, PROC_TREE_3); 
	str	r0, [sp, #16]	@ tmp354, %sfp
@ Patches/../C_code.c:455: 				bosses[b] = i+1; 
	str	r1, [sp, #8]	@ proc3, %sfp
@ Patches/../C_code.c:436: 	table--; 
	subs	r5, r5, #52	@ table,
	b	.L358		@
.L418:
@ Patches/../C_code.c:446: 		boss = table->attributes & (CA_BOSS);
	mov	r3, r8	@ tmp346, tmp346
	ldr	r1, [r5, #40]	@ MEM[(long unsigned int *)table_124 + 40B], MEM[(long unsigned int *)table_124 + 40B]
	movs	r0, r5	@, table
	ands	r1, r3	@ boss, tmp346
	bl	GetUnitListToUse.part.0		@
	adds	r4, r4, #1	@ i,
@ Patches/../C_code.c:447: 		switch (GetUnitListToUse(table, boss, true)) { 
	cmp	r0, #1	@ _106,
	bne	.LCB2197	@
	b	.L356	@long jump	@
.LCB2197:
	cmp	r0, #2	@ _106,
	bne	.L355		@,
@ Patches/../C_code.c:455: 				bosses[b] = i+1; 
	movs	r1, #80	@ tmp413,
	mov	r2, fp	@ b, b
	add	r3, sp, #40	@ tmp410,,
	adds	r3, r3, r1	@ tmp412, tmp410, tmp413
	strb	r4, [r3, r2]	@ i, bosses[b_159]
@ Patches/../C_code.c:456: 				b++; 
	movs	r3, #1	@ tmp414,
	mov	ip, r3	@ tmp414, tmp414
	add	fp, fp, ip	@ b, tmp414
.L355:
@ Patches/../C_code.c:437: 	for (int i = 0; i <= MAX_CHAR_ID; ++i) { // all available units 
	movs	r3, #128	@ tmp234,
	lsls	r3, r3, #1	@ tmp234, tmp234,
	cmp	r4, r3	@ i, tmp234
	beq	.L424		@,
.L358:
@ Patches/../C_code.c:438: 		table++; 
	adds	r5, r5, #52	@ table,
@ Patches/../C_code.c:439: 		if (i == 0x40) { proc = proc2; } 
	cmp	r4, #64	@ i,
	beq	.L385		@,
@ Patches/../C_code.c:440: 		if (i == 0x80) { proc = proc3; } 
	cmp	r4, #128	@ i,
	beq	.L386		@,
@ Patches/../C_code.c:441: 		if (i == 0xC0) { proc = proc4; } 
	cmp	r4, #192	@ i,
	bne	.L354		@,
@ Patches/../C_code.c:441: 		if (i == 0xC0) { proc = proc4; } 
	ldr	r7, [sp, #16]	@ proc, %sfp
.L354:
@ Patches/../C_code.c:442: 		proc->id[i&0x3F] = 0x0; 
	mov	r3, r10	@ tmp216, tmp215
@ Patches/../C_code.c:442: 		proc->id[i&0x3F] = 0x0; 
	mov	r2, r9	@ tmp220, tmp220
@ Patches/../C_code.c:442: 		proc->id[i&0x3F] = 0x0; 
	ands	r3, r4	@ tmp216, i
@ Patches/../C_code.c:442: 		proc->id[i&0x3F] = 0x0; 
	adds	r3, r7, r3	@ tmp218, proc, tmp216
	adds	r3, r3, #42	@ tmp219,
	strb	r2, [r3]	@ tmp220, proc_55->id[_3]
@ Patches/../C_code.c:383: 	if (!table->portraitId) { return result; } 
	ldrh	r3, [r5, #6]	@ MEM[(short unsigned int *)table_124 + 6B], MEM[(short unsigned int *)table_124 + 6B]
	cmp	r3, #0	@ MEM[(short unsigned int *)table_124 + 6B],
	bne	.L418		@,
@ Patches/../C_code.c:437: 	for (int i = 0; i <= MAX_CHAR_ID; ++i) { // all available units 
	movs	r3, #128	@ tmp234,
	adds	r4, r4, #1	@ i,
	lsls	r3, r3, #1	@ tmp234, tmp234,
	cmp	r4, r3	@ i, tmp234
	bne	.L358		@,
.L424:
	mov	r3, fp	@ b, b
	str	r3, [sp, #32]	@ b, %sfp
@ Patches/../C_code.c:463: 	proc = proc4; 
	ldr	r3, [sp, #16]	@ proc, %sfp
	movs	r7, r6	@ c, c
	mov	r9, r3	@ proc, proc
@ Patches/../C_code.c:467: 	u32 rn = 0; 
	movs	r3, #0	@ rn,
	str	r6, [sp, #28]	@ c, %sfp
	ldr	r6, [sp, #24]	@ tmp326, %sfp
	mov	r8, fp	@ b, b
@ Patches/../C_code.c:469: 	for (int i = MAX_CHAR_ID; i > 0 ; --i) { // reordered at random 
	movs	r4, #255	@ i,
	mov	fp, r6	@ tmp326, tmp326
	movs	r6, r7	@ c, c
	movs	r7, r3	@ rn, rn
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	ldr	r2, .L432+16	@ tmp340,
	mov	r10, r2	@ tmp340, tmp340
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	ldr	r2, .L432+20	@ tmp341,
	str	r2, [sp, #24]	@ tmp341, %sfp
.L359:
@ Patches/../C_code.c:474: 		table = GetCharacterData(i);  
	movs	r0, r4	@, i
	bl	.L434		@
@ Patches/../C_code.c:383: 	if (!table->portraitId) { return result; } 
	ldrh	r3, [r0, #6]	@ tmp236,
@ Patches/../C_code.c:483: 			rn = GetNthRN_Simple(i-1, seed, rn);  
	subs	r5, r4, #1	@ _139, i,
@ Patches/../C_code.c:383: 	if (!table->portraitId) { return result; } 
	cmp	r3, #0	@ tmp236,
	beq	.L361		@,
@ Patches/../C_code.c:478: 		boss = table->attributes & (CA_BOSS);
	movs	r3, #128	@ tmp239,
	ldr	r1, [r0, #40]	@ table_103->attributes, table_103->attributes
	lsls	r3, r3, #8	@ tmp239, tmp239,
	ands	r1, r3	@ boss, tmp239
	bl	GetUnitListToUse.part.0		@
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	mov	r3, r10	@ tmp340, tmp340
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r2, [r3]	@ *RecruitValues.15_136, *RecruitValues.15_136
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	movs	r3, #7	@ tmp247,
	ands	r3, r2	@ tmp248, *RecruitValues.15_136
	cmp	r3, #4	@ tmp248,
	beq	.L425		@,
@ Patches/../C_code.c:480: 		switch (CallGetUnitListToUse(table, boss, true)) { 
	cmp	r0, #1	@ _135,
	beq	.L364		@,
	cmp	r0, #2	@ _135,
	bne	.L361		@,
.L363:
@ Patches/../C_code.c:493: 				rn = GetNthRN_Simple(i-1, seed, rn);  				
	movs	r2, r7	@, rn
	movs	r0, r5	@, _139
	ldr	r1, [sp, #12]	@, %sfp
	bl	GetNthRN_Simple		@
@ Patches/../C_code.c:495: 				if (b < 0) { b = b_max-1; } 
	mov	r3, r8	@ b, b
@ Patches/../C_code.c:493: 				rn = GetNthRN_Simple(i-1, seed, rn);  				
	movs	r7, r0	@ rn, tmp360
@ Patches/../C_code.c:495: 				if (b < 0) { b = b_max-1; } 
	subs	r3, r3, #1	@ b, b,
	bpl	.LCB2293	@
	b	.L426	@long jump	@
.LCB2293:
	mov	r8, r3	@ b, b
@ Patches/../C_code.c:169: 	if (max==0) return 0;
	mov	r3, r8	@ b, b
	cmp	r3, #0	@ b,
	bne	.LCB2297	@
	b	.L390	@long jump	@
.LCB2297:
.L431:
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	mov	r1, r8	@, b
	ldr	r3, [sp, #24]	@ tmp341, %sfp
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	lsrs	r0, r7, #3	@ tmp264, rn,
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	bl	.L14		@
.L368:
@ Patches/../C_code.c:498: 				proc->id[(i&0x3F)-1] = bosses[num]; 
	movs	r3, #63	@ tmp267,
@ Patches/../C_code.c:498: 				proc->id[(i&0x3F)-1] = bosses[num]; 
	add	r2, sp, #120	@ tmp266,,
@ Patches/../C_code.c:498: 				proc->id[(i&0x3F)-1] = bosses[num]; 
	ands	r3, r4	@ tmp268, i
@ Patches/../C_code.c:498: 				proc->id[(i&0x3F)-1] = bosses[num]; 
	ldrb	r1, [r2, r0]	@ _19, bosses
@ Patches/../C_code.c:498: 				proc->id[(i&0x3F)-1] = bosses[num]; 
	add	r3, r3, r9	@ tmp270, proc
	adds	r3, r3, #41	@ tmp271,
	strb	r1, [r3]	@ _19, proc_57->id[_18]
@ Patches/../C_code.c:499: 				bosses[num] = bosses[b]; // move last entry to one we just used 
	mov	r3, r8	@ b, b
	ldrb	r3, [r2, r3]	@ _20, bosses
@ Patches/../C_code.c:499: 				bosses[num] = bosses[b]; // move last entry to one we just used 
	strb	r3, [r2, r0]	@ _20, bosses[prephitmp_160]
@ Patches/../C_code.c:500: 				bosses[b] = proc->id[(i&0x3F)-1];
	mov	r3, r8	@ b, b
	strb	r1, [r2, r3]	@ _19, bosses[b_51]
.L361:
@ Patches/../C_code.c:469: 	for (int i = MAX_CHAR_ID; i > 0 ; --i) { // reordered at random 
	cmp	r5, #0	@ _139,
	beq	.L427		@,
.L369:
@ Patches/../C_code.c:471: 		if (i <= 0xBF) { proc = proc3; } 
	cmp	r5, #191	@ _139,
	bgt	.L360		@,
	ldr	r3, [sp, #8]	@ proc, %sfp
	mov	r9, r3	@ proc, proc
@ Patches/../C_code.c:472: 		if (i <= 0x7F) { proc = proc2; } 
	cmp	r5, #127	@ _139,
	bgt	.L360		@,
	ldr	r3, [sp, #4]	@ proc, %sfp
	mov	r9, r3	@ proc, proc
@ Patches/../C_code.c:473: 		if (i <= 0x3F) { proc = proc1; } 
	cmp	r5, #63	@ _139,
	ble	.L428		@,
.L360:
	movs	r4, r5	@ i, _139
	b	.L359		@
.L385:
@ Patches/../C_code.c:439: 		if (i == 0x40) { proc = proc2; } 
	ldr	r7, [sp, #4]	@ proc, %sfp
	b	.L354		@
.L386:
@ Patches/../C_code.c:440: 		if (i == 0x80) { proc = proc3; } 
	ldr	r7, [sp, #8]	@ proc, %sfp
	b	.L354		@
.L356:
@ Patches/../C_code.c:450: 				unit[c] = i+1; 
	add	r3, sp, #40	@ tmp409,,
	strb	r4, [r3, r6]	@ i, unit[c_156]
@ Patches/../C_code.c:451: 				c++; 
	adds	r6, r6, #1	@ c,
@ Patches/../C_code.c:452: 				break; 
	b	.L355		@
.L428:
@ Patches/../C_code.c:473: 		if (i <= 0x3F) { proc = proc1; } 
	ldr	r3, [sp, #20]	@ proc, %sfp
	movs	r4, r5	@ i, _139
	mov	r9, r3	@ proc, proc
	b	.L359		@
.L425:
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	cmp	r0, #1	@ _135,
	beq	.L363		@,
@ Patches/../C_code.c:418: 	if (RecruitValues->recruitment == 4) { if (result == 1) { return 2; } else if (result == 2) { return 1; } }  
	cmp	r0, #2	@ _135,
	bne	.L361		@,
.L364:
@ Patches/../C_code.c:483: 			rn = GetNthRN_Simple(i-1, seed, rn);  
	movs	r2, r7	@, rn
	movs	r0, r5	@, _139
	ldr	r1, [sp, #12]	@, %sfp
	bl	GetNthRN_Simple		@
	movs	r7, r0	@ rn, tmp358
@ Patches/../C_code.c:485: 			if (c < 0) { c = c_max-1; } 
	subs	r6, r6, #1	@ c, c,
	bpl	.L365		@,
@ Patches/../C_code.c:485: 			if (c < 0) { c = c_max-1; } 
	ldr	r3, [sp, #28]	@ c, %sfp
	subs	r6, r3, #1	@ c, c,
.L365:
@ Patches/../C_code.c:169: 	if (max==0) return 0;
	cmp	r6, #0	@ c,
	beq	.L389		@,
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	movs	r1, r6	@, c
	ldr	r3, [sp, #24]	@ tmp341, %sfp
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	lsrs	r0, r7, #3	@ tmp250, rn,
@ Patches/../C_code.c:170: 	return Mod((rn >> 3), max);
	bl	.L14		@
.L366:
@ Patches/../C_code.c:487: 			proc->id[(i&0x3F)-1] = unit[num]; 
	add	r3, sp, #40	@ tmp430,,
	ldrb	r2, [r3, r0]	@ _14, unit
@ Patches/../C_code.c:487: 			proc->id[(i&0x3F)-1] = unit[num]; 
	movs	r3, #63	@ tmp253,
	ands	r3, r4	@ tmp254, i
@ Patches/../C_code.c:487: 			proc->id[(i&0x3F)-1] = unit[num]; 
	add	r3, r3, r9	@ tmp256, proc
	adds	r3, r3, #41	@ tmp257,
	strb	r2, [r3]	@ _14, proc_57->id[_13]
@ Patches/../C_code.c:488: 			unit[num] = unit[c]; // move last entry to one we just used 
	add	r3, sp, #40	@ tmp431,,
	ldrb	r3, [r3, r6]	@ _15, unit
@ Patches/../C_code.c:488: 			unit[num] = unit[c]; // move last entry to one we just used 
	add	r1, sp, #40	@ tmp432,,
	strb	r3, [r1, r0]	@ _15, unit[prephitmp_157]
@ Patches/../C_code.c:489: 			unit[c] = proc->id[(i&0x3F)-1];
	strb	r2, [r1, r6]	@ _14, unit[c_46]
@ Patches/../C_code.c:469: 	for (int i = MAX_CHAR_ID; i > 0 ; --i) { // reordered at random 
	cmp	r5, #0	@ _139,
	bne	.L369		@,
.L427:
@ Patches/../C_code.c:510: 	proc = proc4; 
	ldr	r3, [sp, #8]	@ proc3, %sfp
	mov	r6, fp	@ tmp326, tmp326
@ Patches/../C_code.c:511: 	for (int i = MAX_CHAR_ID; i > 0 ; --i) { 
	movs	r4, #255	@ i,
@ Patches/../C_code.c:510: 	proc = proc4; 
	mov	fp, r3	@ proc3, proc3
@ Patches/../C_code.c:524: 					case 2: { proc->id[(i&0x3F)-1] =  proc3->id[(num&0x3F)-1]; break; } 
	movs	r7, #63	@ tmp337,
@ Patches/../C_code.c:510: 	proc = proc4; 
	ldr	r5, [sp, #16]	@ proc, %sfp
.L379:
@ Patches/../C_code.c:513: 		if (i <= 0xBF) { proc = proc3; } 
	cmp	r4, #191	@ i,
	bgt	.L370		@,
@ Patches/../C_code.c:514: 		if (i <= 0x7F) { proc = proc2; } 
	cmp	r4, #127	@ i,
	bgt	.L391		@,
	ldr	r5, [sp, #4]	@ proc, %sfp
@ Patches/../C_code.c:515: 		if (i <= 0x3F) { proc = proc1; } 
	cmp	r4, #63	@ i,
	ble	.L429		@,
.L370:
@ Patches/../C_code.c:516: 		table = GetCharacterData(i);  
	movs	r0, r4	@, i
	bl	.L341		@
@ Patches/../C_code.c:519: 			num = GetAdjustedCharacterID(table);
	bl	GetAdjustedCharacterID		@
@ Patches/../C_code.c:520: 			if (num != (i+1)) { 
	adds	r3, r4, #1	@ tmp324, i,
	cmp	r0, r3	@ num, tmp324
	beq	.L430		@,
.L383:
@ Patches/../C_code.c:521: 				switch (num >> 6) { 
	asrs	r3, r0, #6	@ _22, num,
@ Patches/../C_code.c:521: 				switch (num >> 6) { 
	cmp	r3, #2	@ _22,
	beq	.L372		@,
	bgt	.L373		@,
	cmp	r3, #0	@ _22,
	beq	.L374		@,
	cmp	r3, #1	@ _22,
	bne	.L371		@,
@ Patches/../C_code.c:523: 					case 1: { proc->id[(i&0x3F)-1] =  proc2->id[(num&0x3F)-1]; break; } 
	ldr	r3, [sp, #4]	@ proc2, %sfp
@ Patches/../C_code.c:523: 					case 1: { proc->id[(i&0x3F)-1] =  proc2->id[(num&0x3F)-1]; break; } 
	ands	r0, r7	@ tmp290, tmp337
.L422:
@ Patches/../C_code.c:525: 					case 3: { proc->id[(i&0x3F)-1] =  proc4->id[(num&0x3F)-1]; break; } 
	mov	ip, r3	@ proc4, proc4
	add	r0, r0, ip	@ tmp314, proc4
.L423:
@ Patches/../C_code.c:525: 					case 3: { proc->id[(i&0x3F)-1] =  proc4->id[(num&0x3F)-1]; break; } 
	movs	r3, r7	@ tmp317, tmp337
@ Patches/../C_code.c:525: 					case 3: { proc->id[(i&0x3F)-1] =  proc4->id[(num&0x3F)-1]; break; } 
	adds	r0, r0, #41	@ tmp315,
@ Patches/../C_code.c:525: 					case 3: { proc->id[(i&0x3F)-1] =  proc4->id[(num&0x3F)-1]; break; } 
	ands	r3, r4	@ tmp317, i
@ Patches/../C_code.c:525: 					case 3: { proc->id[(i&0x3F)-1] =  proc4->id[(num&0x3F)-1]; break; } 
	ldrb	r2, [r0]	@ _42,
@ Patches/../C_code.c:525: 					case 3: { proc->id[(i&0x3F)-1] =  proc4->id[(num&0x3F)-1]; break; } 
	adds	r3, r5, r3	@ tmp319, proc, tmp317
	adds	r3, r3, #41	@ tmp320,
	strb	r2, [r3]	@ _42,
.L371:
@ Patches/../C_code.c:511: 	for (int i = MAX_CHAR_ID; i > 0 ; --i) { 
	subs	r4, r4, #1	@ i,
@ Patches/../C_code.c:511: 	for (int i = MAX_CHAR_ID; i > 0 ; --i) { 
	cmp	r4, #0	@ i,
	bne	.L379		@,
@ Patches/../C_code.c:533: 	switch (procID) { 
	ldr	r3, [sp, #36]	@ procID, %sfp
	cmp	r3, #2	@ procID,
	beq	.L394		@,
	bgt	.L381		@,
	cmp	r3, #0	@ procID,
	beq	.L353		@,
	subs	r3, r3, #1	@ procID,
	rsbs	r2, r3, #0	@ tmp330, tmp329
	adcs	r3, r3, r2	@ tmp328, tmp329, tmp330
	ldr	r2, [sp, #4]	@ proc2, %sfp
	rsbs	r3, r3, #0	@ tmp331, tmp328
	ands	r2, r3	@ proc2, tmp331
	str	r2, [sp, #20]	@ proc2, %sfp
.L353:
@ Patches/../C_code.c:543: } 
	ldr	r0, [sp, #20]	@, %sfp
	add	sp, sp, #204	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L426:
@ Patches/../C_code.c:495: 				if (b < 0) { b = b_max-1; } 
	ldr	r3, [sp, #32]	@ b, %sfp
	subs	r3, r3, #1	@ b,
	mov	r8, r3	@ b, b
@ Patches/../C_code.c:169: 	if (max==0) return 0;
	mov	r3, r8	@ b, b
	cmp	r3, #0	@ b,
	beq	.LCB2494	@
	b	.L431	@long jump	@
.LCB2494:
.L390:
	movs	r0, #0	@ _148,
	b	.L368		@
.L389:
	movs	r0, #0	@ _143,
	b	.L366		@
.L391:
@ Patches/../C_code.c:516: 		table = GetCharacterData(i);  
	movs	r0, r4	@, i
	bl	.L341		@
@ Patches/../C_code.c:519: 			num = GetAdjustedCharacterID(table);
	bl	GetAdjustedCharacterID		@
@ Patches/../C_code.c:520: 			if (num != (i+1)) { 
	adds	r3, r4, #1	@ tmp324, i,
	mov	r5, fp	@ proc, proc3
	cmp	r0, r3	@ num, tmp324
	bne	.L383		@,
.L430:
@ Patches/../C_code.c:511: 	for (int i = MAX_CHAR_ID; i > 0 ; --i) { 
	subs	r4, r4, #1	@ i,
	b	.L379		@
.L373:
@ Patches/../C_code.c:521: 				switch (num >> 6) { 
	cmp	r3, #3	@ _22,
	bne	.L371		@,
@ Patches/../C_code.c:525: 					case 3: { proc->id[(i&0x3F)-1] =  proc4->id[(num&0x3F)-1]; break; } 
	ldr	r3, [sp, #16]	@ proc4, %sfp
@ Patches/../C_code.c:525: 					case 3: { proc->id[(i&0x3F)-1] =  proc4->id[(num&0x3F)-1]; break; } 
	ands	r0, r7	@ tmp312, tmp337
	b	.L422		@
.L374:
@ Patches/../C_code.c:522: 					case 0: { proc->id[(i&0x3F)-1] =  proc1->id[(num&0x3F)-1]; break; } 
	ldr	r3, [sp, #20]	@ <retval>, %sfp
	b	.L422		@
.L372:
@ Patches/../C_code.c:524: 					case 2: { proc->id[(i&0x3F)-1] =  proc3->id[(num&0x3F)-1]; break; } 
	ands	r0, r7	@ tmp301, tmp337
@ Patches/../C_code.c:524: 					case 2: { proc->id[(i&0x3F)-1] =  proc3->id[(num&0x3F)-1]; break; } 
	add	r0, r0, fp	@ tmp303, proc3
	b	.L423		@
.L429:
@ Patches/../C_code.c:516: 		table = GetCharacterData(i);  
	movs	r0, r4	@, i
	bl	.L341		@
@ Patches/../C_code.c:519: 			num = GetAdjustedCharacterID(table);
	bl	GetAdjustedCharacterID		@
@ Patches/../C_code.c:520: 			if (num != (i+1)) { 
	adds	r3, r4, #1	@ tmp279, i,
@ Patches/../C_code.c:526: 					default: 
	ldr	r5, [sp, #20]	@ proc, %sfp
@ Patches/../C_code.c:520: 			if (num != (i+1)) { 
	cmp	r0, r3	@ num, tmp279
	bne	.L383		@,
@ Patches/../C_code.c:526: 					default: 
	b	.L371		@
.L381:
@ Patches/../C_code.c:537: 		case 3: { return proc4; break; } 
	ldr	r3, [sp, #36]	@ procID, %sfp
	subs	r3, r3, #3	@ procID,
	rsbs	r2, r3, #0	@ tmp335, tmp334
	adcs	r3, r3, r2	@ tmp333, tmp334, tmp335
	ldr	r2, [sp, #16]	@ proc4, %sfp
	rsbs	r3, r3, #0	@ tmp336, tmp333
	ands	r2, r3	@ proc4, tmp336
	str	r2, [sp, #20]	@ proc4, %sfp
	b	.L353		@
.L394:
@ Patches/../C_code.c:536: 		case 2: { return proc3; break; } 
	mov	r3, fp	@ proc3, proc3
	str	r3, [sp, #20]	@ proc3, %sfp
	b	.L353		@
.L433:
	.align	2
.L432:
	.word	GetCharacterData
	.word	.LANCHOR0
	.word	RandValues
	.word	Proc_Start
	.word	RecruitValues
	.word	Mod
	.size	InitRandomRecruitmentProc, .-InitRandomRecruitmentProc
	.align	1
	.p2align 2,,3
	.syntax unified
	.code	16
	.thumb_func
	.type	GetReorderedCharacter.part.0.isra.0, %function
GetReorderedCharacter.part.0.isra.0:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldr	r4, .L453	@ tmp163,
@ Patches/../C_code.c:255: const struct CharacterData* GetReorderedCharacter(const struct CharacterData* table) { 
	movs	r6, r0	@ ISRA.906, tmp164
@ Patches/../C_code.c:258: 	int id = table->number; 
	movs	r5, r0	@ id, ISRA.906
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	bl	.L240		@
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldrh	r3, [r0, #6]	@ tmp129,
	cmp	r3, #0	@ tmp129,
	beq	.L436		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L453+4	@ tmp131,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.0_36, *RecruitValues.0_36
	lsls	r3, r3, #29	@ tmp136, *RecruitValues.0_36,
@ Patches/../C_code.c:259: 	if (!ShouldRandomizeRecruitmentForUnitID(id)) { return GetCharacterData(id); } 
	beq	.L436		@,
@ Patches/../C_code.c:261: 	int procID = id >> 6; // 0, 1, 2, or 3 
	asrs	r7, r6, #6	@ procID, ISRA.906,
@ Patches/../C_code.c:263: 	switch (procID) { 
	cmp	r7, #2	@ procID,
	beq	.L439		@,
	cmp	r7, #3	@ procID,
	beq	.L440		@,
	cmp	r7, #1	@ procID,
	bne	.L451		@,
@ Patches/../C_code.c:269: 			proc = Proc_Find(RecruitmentProcCmd2); 
	ldr	r0, .L453+8	@ tmp144,
	ldr	r3, .L453+12	@ tmp145,
	bl	.L14		@
.L442:
@ Patches/../C_code.c:283: 	if (!proc) { proc = InitRandomRecruitmentProc(procID); } 
	cmp	r0, #0	@ proc,
	beq	.L452		@,
.L443:
@ Patches/../C_code.c:285: 	int unitID = proc->id[(id&0x3F)-1];
	movs	r3, #63	@ tmp155,
	ands	r3, r6	@ tmp156, ISRA.906
@ Patches/../C_code.c:285: 	int unitID = proc->id[(id&0x3F)-1];
	adds	r0, r0, r3	@ tmp159, proc, tmp156
	adds	r0, r0, #41	@ tmp160,
@ Patches/../C_code.c:285: 	int unitID = proc->id[(id&0x3F)-1];
	ldrb	r3, [r0]	@ unitID, *proc_15
@ Patches/../C_code.c:286: 	if (!unitID) { unitID = id; } 
	cmp	r3, #0	@ unitID,
	beq	.L444		@,
@ Patches/../C_code.c:285: 	int unitID = proc->id[(id&0x3F)-1];
	movs	r5, r3	@ id, unitID
.L444:
@ Patches/../C_code.c:287: 	return GetCharacterData(unitID);
	movs	r0, r5	@, id
	bl	.L240		@
	b	.L435		@
.L436:
@ Patches/../C_code.c:259: 	if (!ShouldRandomizeRecruitmentForUnitID(id)) { return GetCharacterData(id); } 
	movs	r0, r6	@, ISRA.906
	bl	.L240		@
.L435:
@ Patches/../C_code.c:288: }
	@ sp needed	@
	pop	{r3, r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L451:
@ Patches/../C_code.c:265: 			proc = Proc_Find(RecruitmentProcCmd1); 
	ldr	r0, .L453+16	@ tmp141,
	ldr	r3, .L453+12	@ tmp142,
	bl	.L14		@
@ Patches/../C_code.c:283: 	if (!proc) { proc = InitRandomRecruitmentProc(procID); } 
	cmp	r0, #0	@ proc,
	bne	.L443		@,
.L452:
@ Patches/../C_code.c:283: 	if (!proc) { proc = InitRandomRecruitmentProc(procID); } 
	movs	r0, r7	@, procID
	bl	InitRandomRecruitmentProc		@
	b	.L443		@
.L440:
@ Patches/../C_code.c:277: 			proc = Proc_Find(RecruitmentProcCmd4); 
	ldr	r3, .L453+12	@ tmp151,
	ldr	r0, .L453+20	@ tmp150,
	bl	.L14		@
@ Patches/../C_code.c:278: 			break; 
	b	.L442		@
.L439:
@ Patches/../C_code.c:273: 			proc = Proc_Find(RecruitmentProcCmd3); 
	ldr	r3, .L453+12	@ tmp148,
	ldr	r0, .L453+24	@ tmp147,
	bl	.L14		@
@ Patches/../C_code.c:274: 			break; 
	b	.L442		@
.L454:
	.align	2
.L453:
	.word	GetCharacterData
	.word	RecruitValues
	.word	.LANCHOR0+48
	.word	Proc_Find
	.word	.LANCHOR0+16
	.word	.LANCHOR0+112
	.word	.LANCHOR0+80
	.size	GetReorderedCharacter.part.0.isra.0, .-GetReorderedCharacter.part.0.isra.0
	.align	1
	.p2align 2,,3
	.global	GetReorderedCharacterPortraitByPortrait
	.syntax unified
	.code	16
	.thumb_func
	.type	GetReorderedCharacterPortraitByPortrait, %function
GetReorderedCharacterPortraitByPortrait:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:296: int GetReorderedCharacterPortraitByPortrait(int portraitID) { 
	movs	r5, r0	@ portraitID, tmp135
	movs	r4, r0	@ portraitID, portraitID
@ Patches/../C_code.c:242: 	if (portraitID < 0x100) { 
	cmp	r0, #255	@ portraitID,
	bgt	.L456		@,
@ Patches/../C_code.c:243: 		if (ReplacePortraitTable[portraitID]) { portraitID = ReplacePortraitTable[portraitID]; } 
	ldr	r3, .L474	@ tmp128,
	ldrb	r3, [r3, r0]	@ _17, ReplacePortraitTable
@ Patches/../C_code.c:243: 		if (ReplacePortraitTable[portraitID]) { portraitID = ReplacePortraitTable[portraitID]; } 
	cmp	r3, #0	@ _17,
	bne	.L473		@,
.L456:
@ Patches/../C_code.c:245: 	const struct CharacterData* table = GetCharacterData(1); 
	movs	r0, #1	@,
	ldr	r6, .L474+4	@ tmp134,
	bl	.L341		@
	ldr	r3, .L474+8	@ tmp140,
	adds	r2, r0, r3	@ _7, table, tmp140
	b	.L460		@
.L457:
@ Patches/../C_code.c:248: 		table++; 
	adds	r0, r0, #52	@ table,
@ Patches/../C_code.c:246: 	for (int i = 1; i <= MAX_CHAR_ID; i++) { 
	cmp	r2, r0	@ _7, table
	beq	.L458		@,
.L460:
@ Patches/../C_code.c:247: 		if (table->portraitId == portraitID) { return table->number; } 
	ldrh	r3, [r0, #6]	@ MEM[(short unsigned int *)table_24 + 6B], MEM[(short unsigned int *)table_24 + 6B]
@ Patches/../C_code.c:247: 		if (table->portraitId == portraitID) { return table->number; } 
	cmp	r3, r4	@ MEM[(short unsigned int *)table_24 + 6B], portraitID
	bne	.L457		@,
@ Patches/../C_code.c:247: 		if (table->portraitId == portraitID) { return table->number; } 
	ldrb	r0, [r0, #4]	@ _26,
@ Patches/../C_code.c:298: 	if (!result) { return portraitID; }
	cmp	r0, #0	@ _26,
	beq	.L458		@,
@ Patches/../C_code.c:299: 	return GetReorderedCharacter(GetCharacterData(result))->portraitId; 
	bl	.L341		@
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r5, [r0, #6]	@ _11,
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	cmp	r5, #0	@ _11,
	beq	.L458		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_1 + 4B], MEM[(unsigned char *)_1 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:299: 	return GetReorderedCharacter(GetCharacterData(result))->portraitId; 
	ldrh	r5, [r0, #6]	@ _11,
.L458:
@ Patches/../C_code.c:300: } 
	@ sp needed	@
	movs	r0, r5	@, portraitID
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L473:
@ Patches/../C_code.c:243: 		if (ReplacePortraitTable[portraitID]) { portraitID = ReplacePortraitTable[portraitID]; } 
	movs	r4, r3	@ portraitID, _17
	b	.L456		@
.L475:
	.align	2
.L474:
	.word	ReplacePortraitTable
	.word	GetCharacterData
	.word	13260
	.size	GetReorderedCharacterPortraitByPortrait, .-GetReorderedCharacterPortraitByPortrait
	.align	1
	.p2align 2,,3
	.global	GetRandomizedPortrait
	.syntax unified
	.code	16
	.thumb_func
	.type	GetRandomizedPortrait, %function
GetRandomizedPortrait:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:303: int GetRandomizedPortrait(int portraitID, int seed) {  
	subs	r4, r0, #0	@ portraitID, tmp130,
@ Patches/../C_code.c:304: 	if (portraitID < 0) { return portraitID; } 
	blt	.L478		@,
@ Patches/../C_code.c:161: 	if (!id) { return false; } 
	cmp	r0, #0	@ portraitID,
	beq	.L478		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L489	@ tmp121,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.0_10, *RecruitValues.0_10
	lsls	r3, r3, #29	@ tmp126, *RecruitValues.0_10,
@ Patches/../C_code.c:305: 	if (!ShouldRandomizeRecruitmentForPortraitID(portraitID)) { return portraitID; } 
	beq	.L478		@,
@ Patches/../C_code.c:306: 	int result = GetReorderedCharacterPortraitByPortrait(portraitID); 
	bl	GetReorderedCharacterPortraitByPortrait		@
@ Patches/../C_code.c:308: 	if (!result) { return portraitID; } 
	cmp	r0, #0	@ result,
	beq	.L478		@,
@ Patches/../C_code.c:320: 	return result; 
	movs	r4, r0	@ portraitID, result
.L478:
@ Patches/../C_code.c:321: } 
	@ sp needed	@
	movs	r0, r4	@, portraitID
	pop	{r4}
	pop	{r1}
	bx	r1
.L490:
	.align	2
.L489:
	.word	RecruitValues
	.size	GetRandomizedPortrait, .-GetRandomizedPortrait
	.align	1
	.p2align 2,,3
	.global	GetNameTextIdOfRandomizedPortrait
	.syntax unified
	.code	16
	.thumb_func
	.type	GetNameTextIdOfRandomizedPortrait, %function
GetNameTextIdOfRandomizedPortrait:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:323: int GetNameTextIdOfRandomizedPortrait(int portraitID, int seed) { 
	subs	r4, r0, #0	@ portraitID, tmp137,
@ Patches/../C_code.c:304: 	if (portraitID < 0) { return portraitID; } 
	blt	.L493		@,
@ Patches/../C_code.c:161: 	if (!id) { return false; } 
	cmp	r0, #0	@ portraitID,
	beq	.L493		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L509	@ tmp126,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.0_18, *RecruitValues.0_18
	lsls	r3, r3, #29	@ tmp131, *RecruitValues.0_18,
@ Patches/../C_code.c:305: 	if (!ShouldRandomizeRecruitmentForPortraitID(portraitID)) { return portraitID; } 
	beq	.L493		@,
@ Patches/../C_code.c:306: 	int result = GetReorderedCharacterPortraitByPortrait(portraitID); 
	bl	GetReorderedCharacterPortraitByPortrait		@
@ Patches/../C_code.c:308: 	if (!result) { return portraitID; } 
	cmp	r0, #0	@ result,
	beq	.L493		@,
@ Patches/../C_code.c:320: 	return result; 
	movs	r4, r0	@ portraitID, result
.L493:
@ Patches/../C_code.c:325: 	const struct CharacterData* table = GetCharacterData(1); 
	ldr	r3, .L509+4	@ tmp134,
	movs	r0, #1	@,
	bl	.L14		@
	ldr	r3, .L509+8	@ tmp141,
	adds	r2, r0, r3	@ _14, table, tmp141
	b	.L497		@
.L495:
@ Patches/../C_code.c:329: 		table++; 
	adds	r0, r0, #52	@ table,
@ Patches/../C_code.c:326: 	for (int i = 1; i <= 0xFF; i++) { 
	cmp	r2, r0	@ _14, table
	beq	.L508		@,
.L497:
@ Patches/../C_code.c:327: 		if (table->portraitId == portraitID) { return table->nameTextId; } 
	ldrh	r3, [r0, #6]	@ MEM[(short unsigned int *)table_11 + 6B], MEM[(short unsigned int *)table_11 + 6B]
@ Patches/../C_code.c:327: 		if (table->portraitId == portraitID) { return table->nameTextId; } 
	cmp	r3, r4	@ MEM[(short unsigned int *)table_11 + 6B], portraitID
	bne	.L495		@,
@ Patches/../C_code.c:327: 		if (table->portraitId == portraitID) { return table->nameTextId; } 
	ldrh	r0, [r0]	@ <retval>, *table_11
.L491:
@ Patches/../C_code.c:333: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L508:
@ Patches/../C_code.c:332: 	return 1; // "Yes"
	movs	r0, #1	@ <retval>,
	b	.L491		@
.L510:
	.align	2
.L509:
	.word	RecruitValues
	.word	GetCharacterData
	.word	13260
	.size	GetNameTextIdOfRandomizedPortrait, .-GetNameTextIdOfRandomizedPortrait
	.align	1
	.p2align 2,,3
	.global	GetReorderedUnitID
	.syntax unified
	.code	16
	.thumb_func
	.type	GetReorderedUnitID, %function
GetReorderedUnitID:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:294: 	return GetReorderedCharacter(unit->pCharacterData)->number; 
	ldr	r0, [r0]	@ _1, unit_4(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp120,
	cmp	r3, #0	@ tmp120,
	beq	.L512		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_1 + 4B], MEM[(unsigned char *)_1 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
.L512:
@ Patches/../C_code.c:295: } 
	@ sp needed	@
@ Patches/../C_code.c:294: 	return GetReorderedCharacter(unit->pCharacterData)->number; 
	ldrb	r0, [r0, #4]	@ tmp122,
@ Patches/../C_code.c:295: } 
	pop	{r4}
	pop	{r1}
	bx	r1
	.size	GetReorderedUnitID, .-GetReorderedUnitID
	.align	1
	.p2align 2,,3
	.global	GetReorderedUnit
	.syntax unified
	.code	16
	.thumb_func
	.type	GetReorderedUnit, %function
GetReorderedUnit:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r0, [r0]	@ <retval>, unit_3(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp118,
	cmp	r3, #0	@ tmp118,
	beq	.L516		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_1 + 4B], MEM[(unsigned char *)_1 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
.L516:
@ Patches/../C_code.c:292: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
	.size	GetReorderedUnit, .-GetReorderedUnit
	.align	1
	.p2align 2,,3
	.global	GetReorderedCharacter
	.syntax unified
	.code	16
	.thumb_func
	.type	GetReorderedCharacter, %function
GetReorderedCharacter:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp118,
	cmp	r3, #0	@ tmp118,
	beq	.L522		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)table_4(D) + 4B], MEM[(unsigned char *)table_4(D) + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
.L522:
@ Patches/../C_code.c:288: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
	.size	GetReorderedCharacter, .-GetReorderedCharacter
	.align	1
	.p2align 2,,3
	.global	HbPopulate_SSCharacter
	.syntax unified
	.code	16
	.thumb_func
	.type	HbPopulate_SSCharacter, %function
HbPopulate_SSCharacter:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:548: 	if (ShouldRandomizeRecruitmentForUnitID(gStatScreen.unit->pCharacterData->number)) { 
	ldr	r5, .L545	@ tmp154,
@ Patches/../C_code.c:548: 	if (ShouldRandomizeRecruitmentForUnitID(gStatScreen.unit->pCharacterData->number)) { 
	ldr	r3, [r5, #12]	@ gStatScreen.unit, gStatScreen.unit
@ Patches/../C_code.c:548: 	if (ShouldRandomizeRecruitmentForUnitID(gStatScreen.unit->pCharacterData->number)) { 
	ldr	r3, [r3]	@ _1->pCharacterData, _1->pCharacterData
@ Patches/../C_code.c:547: {
	movs	r4, r0	@ proc, tmp155
@ Patches/../C_code.c:548: 	if (ShouldRandomizeRecruitmentForUnitID(gStatScreen.unit->pCharacterData->number)) { 
	ldrb	r0, [r3, #4]	@ tmp133,
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldr	r3, .L545+4	@ tmp134,
	bl	.L14		@
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldrh	r3, [r0, #6]	@ tmp135,
	cmp	r3, #0	@ tmp135,
	beq	.L527		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L545+8	@ tmp137,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.0_24, *RecruitValues.0_24
	lsls	r3, r3, #29	@ tmp142, *RecruitValues.0_24,
@ Patches/../C_code.c:548: 	if (ShouldRandomizeRecruitmentForUnitID(gStatScreen.unit->pCharacterData->number)) { 
	bne	.L543		@,
.L527:
@ Patches/../C_code.c:567:     int midDesc = gStatScreen.unit->pCharacterData->descTextId;
	ldr	r3, [r5, #12]	@ gStatScreen.unit, gStatScreen.unit
@ Patches/../C_code.c:567:     int midDesc = gStatScreen.unit->pCharacterData->descTextId;
	ldr	r3, [r3]	@ _9->pCharacterData, _9->pCharacterData
	ldrh	r3, [r3, #2]	@ _11,
@ Patches/../C_code.c:569: 		if (midDesc) {
	cmp	r3, #0	@ _11,
	beq	.L530		@,
.L529:
@ Patches/../C_code.c:582: }
	@ sp needed	@
@ Patches/../C_code.c:555: 		proc->mid = 0x6BE; } // TODO: mid constants
	movs	r2, #76	@ tmp152,
	strh	r3, [r4, r2]	@ _11, proc_16(D)->mid
@ Patches/../C_code.c:582: }
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L543:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r3, [r5, #12]	@ gStatScreen.unit, gStatScreen.unit
	ldr	r0, [r3]	@ pretmp_12, pretmp_26->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp147,
	cmp	r3, #0	@ tmp147,
	bne	.L544		@,
.L528:
@ Patches/../C_code.c:549: 		int midDesc = GetReorderedUnit(gStatScreen.unit)->descTextId;
	ldrh	r3, [r0, #2]	@ _11,
@ Patches/../C_code.c:551: 		if (midDesc) {
	cmp	r3, #0	@ _11,
	bne	.L529		@,
.L530:
@ Patches/../C_code.c:547: {
	ldr	r3, .L545+12	@ _11,
	b	.L529		@
.L544:
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)pretmp_12 + 4B], MEM[(unsigned char *)pretmp_12 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
	b	.L528		@
.L546:
	.align	2
.L545:
	.word	gStatScreen
	.word	GetCharacterData
	.word	RecruitValues
	.word	1726
	.size	HbPopulate_SSCharacter, .-HbPopulate_SSCharacter
	.align	1
	.p2align 2,,3
	.global	NextSeededRN
	.syntax unified
	.code	16
	.thumb_func
	.type	NextSeededRN, %function
NextSeededRN:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movs	r3, r0	@ currentRN, tmp146
	push	{r4, r5, lr}	@
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	ldrh	r1, [r0, #2]	@ _1, MEM[(u16 *)currentRN_11(D) + 2B]
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	ldrh	r4, [r0]	@ _3, *currentRN_11(D)
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsls	r0, r1, #11	@ tmp125, _1,
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsrs	r2, r4, #5	@ tmp126, _3,
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	adds	r0, r0, r2	@ tmp129, tmp125, tmp126
@ Patches/../C_code.c:1316:     currentRN[2] *= 2;
	ldrh	r2, [r3, #4]	@ MEM[(u16 *)currentRN_11(D) + 4B], MEM[(u16 *)currentRN_11(D) + 4B]
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsls	r0, r0, #16	@ tmp130, tmp129,
@ Patches/../C_code.c:1316:     currentRN[2] *= 2;
	lsls	r2, r2, #17	@ tmp134, MEM[(u16 *)currentRN_11(D) + 4B],
@ Patches/../C_code.c:1319:     if (currentRN[1] & 0x8000)
	lsls	r5, r1, #16	@ _1, _1,
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsrs	r0, r0, #16	@ rn, tmp130,
@ Patches/../C_code.c:1316:     currentRN[2] *= 2;
	lsrs	r2, r2, #16	@ _6, tmp134,
@ Patches/../C_code.c:1319:     if (currentRN[1] & 0x8000)
	asrs	r5, r5, #16	@ _1, _1,
	bpl	.L548		@,
@ Patches/../C_code.c:1320:         currentRN[2]++;
	adds	r2, r2, #1	@ tmp138,
	lsls	r2, r2, #16	@ tmp139, tmp138,
	lsrs	r2, r2, #16	@ _6, tmp139,
.L548:
@ Patches/../C_code.c:1322:     rn ^= currentRN[2];
	eors	r0, r2	@ rn, _6
@ Patches/../C_code.c:1325:     currentRN[2] = currentRN[1];
	strh	r1, [r3, #4]	@ _1, MEM[(u16 *)currentRN_11(D) + 4B]
@ Patches/../C_code.c:1330: }
	@ sp needed	@
@ Patches/../C_code.c:1326:     currentRN[1] = currentRN[0];
	strh	r4, [r3, #2]	@ _3, MEM[(u16 *)currentRN_11(D) + 2B]
@ Patches/../C_code.c:1327:     currentRN[0] = rn;
	strh	r0, [r3]	@ rn, *currentRN_11(D)
@ Patches/../C_code.c:1330: }
	pop	{r4, r5}
	pop	{r1}
	bx	r1
	.size	NextSeededRN, .-NextSeededRN
	.align	1
	.p2align 2,,3
	.global	InitSeededRN
	.syntax unified
	.code	16
	.thumb_func
	.type	InitSeededRN, %function
InitSeededRN:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r9	@,
	mov	r7, r8	@,
	push	{r7, lr}	@
	sub	sp, sp, #20	@,,
@ Patches/../C_code.c:1337:     u16 initTable[8] = {
	mov	r4, sp	@ tmp132,
	movs	r2, r4	@ tmp134, tmp132
@ Patches/../C_code.c:1333: void InitSeededRN(int seed, u16* currentRN) {
	mov	r8, r0	@ seed, tmp175
@ Patches/../C_code.c:1337:     u16 initTable[8] = {
	ldr	r3, .L555	@ tmp133,
@ Patches/../C_code.c:1333: void InitSeededRN(int seed, u16* currentRN) {
	movs	r7, r1	@ currentRN, tmp176
@ Patches/../C_code.c:1337:     u16 initTable[8] = {
	ldmia	r3!, {r0, r1, r5}	@ tmp135, tmp180, tmp179, tmp181
	stmia	r2!, {r0, r1, r5}	@ tmp134, tmp180, tmp179, tmp181
	ldr	r3, [r3]	@ tmp136,
	str	r3, [r2]	@ tmp136,
@ Patches/../C_code.c:1348:     int mod = Mod(seed, 7);
	ldr	r3, .L555+4	@ tmp137,
	movs	r1, #7	@,
	mov	r0, r8	@, seed
	mov	r9, r3	@ tmp137, tmp137
	bl	.L14		@
@ Patches/../C_code.c:1350:     currentRN[0] = initTable[(mod++ & 7)];
	movs	r3, #7	@ tmp139,
	movs	r2, r3	@ tmp140, tmp139
	ands	r2, r0	@ tmp140, mod
@ Patches/../C_code.c:1350:     currentRN[0] = initTable[(mod++ & 7)];
	lsls	r2, r2, #1	@ tmp141, tmp140,
	ldrh	r6, [r2, r4]	@ currentRN__lsm.955, initTable
@ Patches/../C_code.c:1350:     currentRN[0] = initTable[(mod++ & 7)];
	adds	r2, r0, #1	@ mod, mod,
@ Patches/../C_code.c:1351:     currentRN[1] = initTable[(mod++ & 7)];
	adds	r0, r0, #2	@ mod,
@ Patches/../C_code.c:1351:     currentRN[1] = initTable[(mod++ & 7)];
	ands	r2, r3	@ tmp146, tmp139
@ Patches/../C_code.c:1352:     currentRN[2] = initTable[(mod & 7)];
	ands	r3, r0	@ tmp152, mod
@ Patches/../C_code.c:1351:     currentRN[1] = initTable[(mod++ & 7)];
	lsls	r2, r2, #1	@ tmp147, tmp146,
@ Patches/../C_code.c:1352:     currentRN[2] = initTable[(mod & 7)];
	lsls	r3, r3, #1	@ tmp153, tmp152,
@ Patches/../C_code.c:1351:     currentRN[1] = initTable[(mod++ & 7)];
	ldrh	r5, [r2, r4]	@ currentRN__lsm.954, initTable
@ Patches/../C_code.c:1352:     currentRN[2] = initTable[(mod & 7)];
	ldrh	r4, [r3, r4]	@ currentRN__lsm.956, initTable
@ Patches/../C_code.c:1354:     if (Mod(seed, 23) > 0)
	movs	r1, #23	@,
	mov	r0, r8	@, seed
@ Patches/../C_code.c:1350:     currentRN[0] = initTable[(mod++ & 7)];
	strh	r6, [r7]	@ currentRN__lsm.955, *currentRN_16(D)
@ Patches/../C_code.c:1351:     currentRN[1] = initTable[(mod++ & 7)];
	strh	r5, [r7, #2]	@ currentRN__lsm.954, MEM[(u16 *)currentRN_16(D) + 2B]
@ Patches/../C_code.c:1352:     currentRN[2] = initTable[(mod & 7)];
	strh	r4, [r7, #4]	@ currentRN__lsm.956, MEM[(u16 *)currentRN_16(D) + 4B]
@ Patches/../C_code.c:1354:     if (Mod(seed, 23) > 0)
	bl	.L557		@
@ Patches/../C_code.c:1354:     if (Mod(seed, 23) > 0)
	cmp	r0, #0	@ mod,
	bgt	.L552		@,
	b	.L549		@
.L553:
@ Patches/../C_code.c:1326:     currentRN[1] = currentRN[0];
	movs	r5, r6	@ currentRN__lsm.954, currentRN__lsm.955
@ Patches/../C_code.c:1327:     currentRN[0] = rn;
	movs	r6, r3	@ currentRN__lsm.955, rn
.L552:
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsls	r3, r5, #11	@ tmp156, currentRN__lsm.954,
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsrs	r2, r6, #5	@ tmp157, currentRN__lsm.955,
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	adds	r3, r3, r2	@ tmp160, tmp156, tmp157
	lsls	r3, r3, #16	@ tmp161, tmp160,
@ Patches/../C_code.c:1316:     currentRN[2] *= 2;
	lsls	r4, r4, #17	@ tmp164, currentRN__lsm.956,
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsrs	r3, r3, #16	@ rn, tmp161,
@ Patches/../C_code.c:1316:     currentRN[2] *= 2;
	lsrs	r4, r4, #16	@ currentRN__lsm.956, tmp164,
@ Patches/../C_code.c:1319:     if (currentRN[1] & 0x8000)
	lsls	r2, r5, #16	@ tmp182, currentRN__lsm.954,
	bpl	.L551		@,
@ Patches/../C_code.c:1320:         currentRN[2]++;
	adds	r4, r4, #1	@ tmp168,
	lsls	r4, r4, #16	@ tmp169, tmp168,
	lsrs	r4, r4, #16	@ currentRN__lsm.956, tmp169,
.L551:
@ Patches/../C_code.c:1355:         for (mod = Mod(seed,  23); mod != 0; mod--)
	subs	r0, r0, #1	@ mod,
@ Patches/../C_code.c:1322:     rn ^= currentRN[2];
	eors	r3, r4	@ rn, currentRN__lsm.956
@ Patches/../C_code.c:1325:     currentRN[2] = currentRN[1];
	movs	r4, r5	@ currentRN__lsm.956, currentRN__lsm.954
@ Patches/../C_code.c:1355:         for (mod = Mod(seed,  23); mod != 0; mod--)
	cmp	r0, #0	@ mod,
	bne	.L553		@,
	strh	r5, [r7, #4]	@ currentRN__lsm.954, MEM[(u16 *)currentRN_16(D) + 4B]
	strh	r6, [r7, #2]	@ currentRN__lsm.955, MEM[(u16 *)currentRN_16(D) + 2B]
	strh	r3, [r7]	@ rn, *currentRN_16(D)
.L549:
@ Patches/../C_code.c:1357: }
	add	sp, sp, #20	@,,
	@ sp needed	@
	pop	{r6, r7}
	mov	r9, r7
	mov	r8, r6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L556:
	.align	2
.L555:
	.word	.LANCHOR0
	.word	Mod
	.size	InitSeededRN, .-InitSeededRN
	.align	1
	.p2align 2,,3
	.global	GetNthRN
	.syntax unified
	.code	16
	.thumb_func
	.type	GetNthRN, %function
GetNthRN:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
	movs	r3, r0	@ tmp149, n
@ Patches/../C_code.c:1360: 	n &= 0x3F; 
	movs	r4, #63	@ tmp127,
@ Patches/../C_code.c:1359: u16 GetNthRN(int n, int seed) { 
	sub	sp, sp, #8	@,,
@ Patches/../C_code.c:1359: u16 GetNthRN(int n, int seed) { 
	movs	r0, r1	@ seed, tmp150
@ Patches/../C_code.c:1362: 	InitSeededRN(seed, currentRN); 
	mov	r1, sp	@,
@ Patches/../C_code.c:1360: 	n &= 0x3F; 
	ands	r4, r3	@ n, tmp149
@ Patches/../C_code.c:1362: 	InitSeededRN(seed, currentRN); 
	bl	InitSeededRN		@
@ Patches/../C_code.c:1364: 	for (int i = 0; i < n; i++) { 
	cmp	r4, #0	@ n,
	beq	.L562		@,
	mov	r3, sp	@ tmp154,
@ Patches/../C_code.c:1364: 	for (int i = 0; i < n; i++) { 
	movs	r1, #0	@ i,
	ldrh	r2, [r3, #2]	@ currentRN__lsm.966, MEM[(u16 *)&currentRN + 2B]
	ldrh	r5, [r3]	@ currentRN__lsm.967, MEM[(u16 *)&currentRN]
	ldrh	r6, [r3, #4]	@ currentRN__lsm.968, MEM[(u16 *)&currentRN + 4B]
	b	.L561		@
.L563:
@ Patches/../C_code.c:1326:     currentRN[1] = currentRN[0];
	movs	r2, r5	@ currentRN__lsm.966, currentRN__lsm.967
@ Patches/../C_code.c:1327:     currentRN[0] = rn;
	movs	r5, r0	@ currentRN__lsm.967, <retval>
.L561:
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsls	r0, r2, #11	@ tmp133, currentRN__lsm.966,
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsrs	r3, r5, #5	@ tmp132, currentRN__lsm.967,
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	adds	r3, r3, r0	@ tmp136, tmp132, tmp133
	lsls	r3, r3, #16	@ tmp137, tmp136,
@ Patches/../C_code.c:1316:     currentRN[2] *= 2;
	lsls	r6, r6, #17	@ tmp140, currentRN__lsm.968,
@ Patches/../C_code.c:1313:     u16 rn = (currentRN[1] << 11) + (currentRN[0] >> 5);
	lsrs	r3, r3, #16	@ rn, tmp137,
@ Patches/../C_code.c:1316:     currentRN[2] *= 2;
	lsrs	r0, r6, #16	@ currentRN__lsm.968, tmp140,
@ Patches/../C_code.c:1319:     if (currentRN[1] & 0x8000)
	lsls	r6, r2, #16	@ tmp151, currentRN__lsm.966,
	bpl	.L560		@,
@ Patches/../C_code.c:1320:         currentRN[2]++;
	adds	r0, r0, #1	@ tmp144,
	lsls	r0, r0, #16	@ tmp145, tmp144,
	lsrs	r0, r0, #16	@ currentRN__lsm.968, tmp145,
.L560:
@ Patches/../C_code.c:1364: 	for (int i = 0; i < n; i++) { 
	adds	r1, r1, #1	@ i,
@ Patches/../C_code.c:1325:     currentRN[2] = currentRN[1];
	movs	r6, r2	@ currentRN__lsm.968, currentRN__lsm.966
@ Patches/../C_code.c:1322:     rn ^= currentRN[2];
	eors	r0, r3	@ <retval>, rn
@ Patches/../C_code.c:1364: 	for (int i = 0; i < n; i++) { 
	cmp	r4, r1	@ n, i
	bne	.L563		@,
.L559:
@ Patches/../C_code.c:1368: } 
	add	sp, sp, #8	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L562:
@ Patches/../C_code.c:1364: 	for (int i = 0; i < n; i++) { 
	movs	r0, #0	@ <retval>,
	b	.L559		@
	.size	GetNthRN, .-GetNthRN
	.align	1
	.p2align 2,,3
	.global	GetInitialSeed
	.syntax unified
	.code	16
	.thumb_func
	.type	GetInitialSeed, %function
GetInitialSeed:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:1372: 	int result = RandValues->seed;
	ldr	r3, .L569	@ tmp133,
	ldr	r3, [r3]	@ RandValues, RandValues
@ Patches/../C_code.c:1371: int GetInitialSeed(int rate) { 
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:1372: 	int result = RandValues->seed;
	ldr	r4, [r3]	@ *RandValues.88_1, *RandValues.88_1
@ Patches/../C_code.c:1373: 	int clock = GetGameClock()>>rate; 
	ldr	r6, .L569+4	@ tmp136,
@ Patches/../C_code.c:1372: 	int result = RandValues->seed;
	lsls	r4, r4, #12	@ tmp135, *RandValues.88_1,
	lsrs	r4, r4, #12	@ <retval>, tmp135,
@ Patches/../C_code.c:1371: int GetInitialSeed(int rate) { 
	movs	r5, r0	@ rate, tmp152
@ Patches/../C_code.c:1373: 	int clock = GetGameClock()>>rate; 
	bl	.L341		@
@ Patches/../C_code.c:1374: 	if (!result) { 
	cmp	r4, #0	@ <retval>,
	bne	.L566		@,
@ Patches/../C_code.c:1373: 	int clock = GetGameClock()>>rate; 
	lsrs	r0, r0, r5	@ _3, _3, rate
@ Patches/../C_code.c:1375: 		result = (GetNthRN(clock, (clock&0xF))<<4) | GetNthRN(clock, (clock&0xF0)); 
	movs	r1, #15	@ tmp137,
	ands	r1, r0	@ tmp138, _4
@ Patches/../C_code.c:1373: 	int clock = GetGameClock()>>rate; 
	movs	r5, r0	@ _4, _3
@ Patches/../C_code.c:1375: 		result = (GetNthRN(clock, (clock&0xF))<<4) | GetNthRN(clock, (clock&0xF0)); 
	bl	GetNthRN		@
@ Patches/../C_code.c:1375: 		result = (GetNthRN(clock, (clock&0xF))<<4) | GetNthRN(clock, (clock&0xF0)); 
	movs	r1, #240	@ tmp141,
@ Patches/../C_code.c:1375: 		result = (GetNthRN(clock, (clock&0xF))<<4) | GetNthRN(clock, (clock&0xF0)); 
	movs	r4, r0	@ tmp139, tmp154
@ Patches/../C_code.c:1375: 		result = (GetNthRN(clock, (clock&0xF))<<4) | GetNthRN(clock, (clock&0xF0)); 
	ands	r1, r5	@ tmp142, _4
	movs	r0, r5	@, _4
	bl	GetNthRN		@
@ Patches/../C_code.c:1375: 		result = (GetNthRN(clock, (clock&0xF))<<4) | GetNthRN(clock, (clock&0xF0)); 
	lsls	r4, r4, #4	@ tmp145, tmp139,
@ Patches/../C_code.c:1375: 		result = (GetNthRN(clock, (clock&0xF))<<4) | GetNthRN(clock, (clock&0xF0)); 
	orrs	r4, r0	@ <retval>, tmp155
@ Patches/../C_code.c:1377: 	if (!result) { result = GetGameClock()<<9; } 
	beq	.L568		@,
.L566:
@ Patches/../C_code.c:1378: 	if (result > 999999) { result &= 0xEFFFF; } 
	ldr	r3, .L569+8	@ tmp147,
	cmp	r4, r3	@ <retval>, tmp147
	ble	.L565		@,
@ Patches/../C_code.c:1378: 	if (result > 999999) { result &= 0xEFFFF; } 
	ldr	r3, .L569+12	@ tmp150,
	ands	r4, r3	@ <retval>, tmp150
.L565:
@ Patches/../C_code.c:1380: } 
	movs	r0, r4	@, <retval>
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L568:
@ Patches/../C_code.c:1377: 	if (!result) { result = GetGameClock()<<9; } 
	bl	.L341		@
@ Patches/../C_code.c:1377: 	if (!result) { result = GetGameClock()<<9; } 
	lsls	r4, r0, #9	@ <retval>, tmp156,
	b	.L566		@
.L570:
	.align	2
.L569:
	.word	RandValues
	.word	GetGameClock
	.word	999999
	.word	983039
	.size	GetInitialSeed, .-GetInitialSeed
	.align	1
	.p2align 2,,3
	.global	HashByte_Class
	.syntax unified
	.code	16
	.thumb_func
	.type	HashByte_Class, %function
HashByte_Class:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:1386: 	while ((c = *noise++)) { 
	ldrb	r5, [r2]	@ c, *noise_31(D)
@ Patches/../C_code.c:1386: 	while ((c = *noise++)) { 
	adds	r4, r2, #1	@ noise, noise,
@ Patches/../C_code.c:1386: 	while ((c = *noise++)) { 
	cmp	r5, #0	@ c,
	beq	.L572		@,
.L573:
@ Patches/../C_code.c:1387: 	n = c + (n << 6) + (n << 16) - n;
	lsls	r2, r0, #6	@ tmp154, n,
@ Patches/../C_code.c:1387: 	n = c + (n << 6) + (n << 16) - n;
	adds	r2, r2, r5	@ tmp155, tmp154, c
@ Patches/../C_code.c:1387: 	n = c + (n << 6) + (n << 16) - n;
	lsls	r5, r0, #16	@ tmp156, n,
@ Patches/../C_code.c:1387: 	n = c + (n << 6) + (n << 16) - n;
	adds	r2, r2, r5	@ _4, tmp155, tmp156
@ Patches/../C_code.c:1386: 	while ((c = *noise++)) { 
	ldrb	r5, [r4]	@ c, MEM[(u8 *)_117]
@ Patches/../C_code.c:1387: 	n = c + (n << 6) + (n << 16) - n;
	subs	r0, r2, r0	@ n, _4, n
@ Patches/../C_code.c:1386: 	while ((c = *noise++)) { 
	adds	r4, r4, #1	@ ivtmp.982,
	cmp	r5, #0	@ c,
	bne	.L573		@,
.L572:
@ Patches/../C_code.c:1393: }
	@ sp needed	@
@ Patches/../C_code.c:1389: 	n = (RandValues->seed&0xFF) + (n << 6) + (n << 16) - n;
	movs	r4, #255	@ tmp161,
	movs	r5, r4	@ tmp162, tmp161
@ Patches/../C_code.c:1389: 	n = (RandValues->seed&0xFF) + (n << 6) + (n << 16) - n;
	ldr	r2, .L578	@ tmp158,
	ldr	r2, [r2]	@ RandValues, RandValues
	ldr	r2, [r2]	@ *RandValues.90_6, *RandValues.90_6
	lsls	r2, r2, #12	@ tmp160, *RandValues.90_6,
	lsrs	r2, r2, #12	@ _7, tmp160,
@ Patches/../C_code.c:1389: 	n = (RandValues->seed&0xFF) + (n << 6) + (n << 16) - n;
	lsls	r6, r0, #6	@ tmp163, n,
@ Patches/../C_code.c:1389: 	n = (RandValues->seed&0xFF) + (n << 6) + (n << 16) - n;
	ands	r5, r2	@ tmp162, _7
@ Patches/../C_code.c:1389: 	n = (RandValues->seed&0xFF) + (n << 6) + (n << 16) - n;
	adds	r5, r5, r6	@ tmp164, tmp162, tmp163
@ Patches/../C_code.c:1389: 	n = (RandValues->seed&0xFF) + (n << 6) + (n << 16) - n;
	lsls	r6, r0, #16	@ tmp165, n,
@ Patches/../C_code.c:1389: 	n = (RandValues->seed&0xFF) + (n << 6) + (n << 16) - n;
	adds	r5, r5, r6	@ _12, tmp164, tmp165
@ Patches/../C_code.c:1389: 	n = (RandValues->seed&0xFF) + (n << 6) + (n << 16) - n;
	subs	r0, r5, r0	@ n, _12, n
@ Patches/../C_code.c:1390: 	n = ((RandValues->seed&0xFF00) >> 8) + (n << 6) + (n << 16) - n;	
	asrs	r2, r2, #8	@ tmp166, _7,
@ Patches/../C_code.c:1390: 	n = ((RandValues->seed&0xFF00) >> 8) + (n << 6) + (n << 16) - n;	
	lsls	r5, r0, #6	@ tmp169, n,
@ Patches/../C_code.c:1390: 	n = ((RandValues->seed&0xFF00) >> 8) + (n << 6) + (n << 16) - n;	
	ands	r2, r4	@ tmp168, tmp161
@ Patches/../C_code.c:1390: 	n = ((RandValues->seed&0xFF00) >> 8) + (n << 6) + (n << 16) - n;	
	adds	r2, r2, r5	@ tmp170, tmp168, tmp169
@ Patches/../C_code.c:1390: 	n = ((RandValues->seed&0xFF00) >> 8) + (n << 6) + (n << 16) - n;	
	lsls	r5, r0, #16	@ tmp171, n,
@ Patches/../C_code.c:1390: 	n = ((RandValues->seed&0xFF00) >> 8) + (n << 6) + (n << 16) - n;	
	adds	r2, r2, r5	@ _20, tmp170, tmp171
@ Patches/../C_code.c:1390: 	n = ((RandValues->seed&0xFF00) >> 8) + (n << 6) + (n << 16) - n;	
	subs	r2, r2, r0	@ n, _20, n
@ Patches/../C_code.c:1391: 	n = ((offset&0xFF)) + (n << 6) + (n << 16) - n;	
	ands	r4, r3	@ tmp173, offset
@ Patches/../C_code.c:1391: 	n = ((offset&0xFF)) + (n << 6) + (n << 16) - n;	
	lsls	r0, r2, #6	@ tmp174, n,
@ Patches/../C_code.c:1391: 	n = ((offset&0xFF)) + (n << 6) + (n << 16) - n;	
	lsls	r3, r2, #16	@ tmp176, n,
@ Patches/../C_code.c:1391: 	n = ((offset&0xFF)) + (n << 6) + (n << 16) - n;	
	adds	r0, r4, r0	@ tmp175, tmp173, tmp174
@ Patches/../C_code.c:1391: 	n = ((offset&0xFF)) + (n << 6) + (n << 16) - n;	
	adds	r0, r0, r3	@ _25, tmp175, tmp176
@ Patches/../C_code.c:1392: 	return Mod((n & 0x2FFFFFFF), max);
	ldr	r3, .L578+4	@ tmp179,
@ Patches/../C_code.c:1391: 	n = ((offset&0xFF)) + (n << 6) + (n << 16) - n;	
	subs	r0, r0, r2	@ n, _25, n
@ Patches/../C_code.c:1392: 	return Mod((n & 0x2FFFFFFF), max);
	ands	r0, r3	@ tmp178, tmp179
	ldr	r3, .L578+8	@ tmp180,
	bl	.L14		@
@ Patches/../C_code.c:1392: 	return Mod((n & 0x2FFFFFFF), max);
	lsls	r0, r0, #16	@ tmp183, tmp188,
	lsrs	r0, r0, #16	@ tmp182, tmp183,
@ Patches/../C_code.c:1393: }
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L579:
	.align	2
.L578:
	.word	RandValues
	.word	805306367
	.word	Mod
	.size	HashByte_Class, .-HashByte_Class
	.align	1
	.p2align 2,,3
	.global	HashByte_Global
	.syntax unified
	.code	16
	.thumb_func
	.type	HashByte_Global, %function
HashByte_Global:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	movs	r5, r2	@ noise, tmp227
	movs	r6, r0	@ number, tmp225
	mov	lr, r8	@,
@ Patches/../C_code.c:1400: 	currentRN = GetNthRN_Simple(offset, RandValues->seed, currentRN); 
	ldr	r2, .L591	@ tmp175,
	ldr	r2, [r2]	@ RandValues, RandValues
@ Patches/../C_code.c:1397: 	offset += noise[0] + noise[1] + noise[2] + noise[3] + number; 
	ldr	r0, [r5]	@ *noise_44(D), *noise_44(D)
@ Patches/../C_code.c:1400: 	currentRN = GetNthRN_Simple(offset, RandValues->seed, currentRN); 
	ldr	r7, [r2]	@ *RandValues.92_9, *RandValues.92_9
@ Patches/../C_code.c:1397: 	offset += noise[0] + noise[1] + noise[2] + noise[3] + number; 
	ldr	r2, [r5, #4]	@ MEM[(int *)noise_44(D) + 4B], MEM[(int *)noise_44(D) + 4B]
	adds	r0, r0, r2	@ tmp178, *noise_44(D), MEM[(int *)noise_44(D) + 4B]
@ Patches/../C_code.c:1397: 	offset += noise[0] + noise[1] + noise[2] + noise[3] + number; 
	ldr	r2, [r5, #8]	@ MEM[(int *)noise_44(D) + 8B], MEM[(int *)noise_44(D) + 8B]
	adds	r0, r0, r2	@ tmp181, tmp178, MEM[(int *)noise_44(D) + 8B]
@ Patches/../C_code.c:1397: 	offset += noise[0] + noise[1] + noise[2] + noise[3] + number; 
	ldr	r2, [r5, #12]	@ MEM[(int *)noise_44(D) + 12B], MEM[(int *)noise_44(D) + 12B]
@ Patches/../C_code.c:1400: 	currentRN = GetNthRN_Simple(offset, RandValues->seed, currentRN); 
	lsls	r7, r7, #12	@ tmp177, *RandValues.92_9,
@ Patches/../C_code.c:1397: 	offset += noise[0] + noise[1] + noise[2] + noise[3] + number; 
	adds	r0, r0, r2	@ tmp183, tmp181, MEM[(int *)noise_44(D) + 12B]
@ Patches/../C_code.c:1400: 	currentRN = GetNthRN_Simple(offset, RandValues->seed, currentRN); 
	lsrs	r7, r7, #12	@ _10, tmp177,
@ Patches/../C_code.c:1397: 	offset += noise[0] + noise[1] + noise[2] + noise[3] + number; 
	adds	r0, r0, r6	@ tmp185, tmp183, number
@ Patches/../C_code.c:1400: 	currentRN = GetNthRN_Simple(offset, RandValues->seed, currentRN); 
	movs	r2, #0	@,
@ Patches/../C_code.c:1397: 	offset += noise[0] + noise[1] + noise[2] + noise[3] + number; 
	adds	r0, r0, r3	@ offset, tmp185, tmp228
@ Patches/../C_code.c:1395: u16 HashByte_Global(int number, int max, int noise[], int offset) {
	mov	r8, r1	@ max, tmp226
	push	{lr}	@
@ Patches/../C_code.c:1400: 	currentRN = GetNthRN_Simple(offset, RandValues->seed, currentRN); 
	movs	r1, r7	@, _10
	bl	GetNthRN_Simple		@
@ Patches/../C_code.c:1401: 	currentRN = (RandValues->seed&0xFF) + (currentRN << 6) + (currentRN << 16) - currentRN;
	movs	r3, #255	@ tmp187,
	movs	r2, r3	@ tmp188, tmp187
@ Patches/../C_code.c:1401: 	currentRN = (RandValues->seed&0xFF) + (currentRN << 6) + (currentRN << 16) - currentRN;
	lsls	r1, r0, #6	@ tmp189, _13,
@ Patches/../C_code.c:1401: 	currentRN = (RandValues->seed&0xFF) + (currentRN << 6) + (currentRN << 16) - currentRN;
	ands	r2, r7	@ tmp188, _10
@ Patches/../C_code.c:1401: 	currentRN = (RandValues->seed&0xFF) + (currentRN << 6) + (currentRN << 16) - currentRN;
	adds	r2, r2, r1	@ tmp190, tmp188, tmp189
@ Patches/../C_code.c:1401: 	currentRN = (RandValues->seed&0xFF) + (currentRN << 6) + (currentRN << 16) - currentRN;
	lsls	r1, r0, #16	@ tmp191, _13,
@ Patches/../C_code.c:1401: 	currentRN = (RandValues->seed&0xFF) + (currentRN << 6) + (currentRN << 16) - currentRN;
	adds	r2, r2, r1	@ _20, tmp190, tmp191
@ Patches/../C_code.c:1401: 	currentRN = (RandValues->seed&0xFF) + (currentRN << 6) + (currentRN << 16) - currentRN;
	subs	r2, r2, r0	@ currentRN, _20, _13
@ Patches/../C_code.c:1402: 	currentRN = ((RandValues->seed&0xFF00) >> 8) + (currentRN << 6) + (currentRN << 16) - currentRN;
	asrs	r1, r7, #8	@ tmp192, _10,
	ands	r3, r1	@ tmp194, tmp192
@ Patches/../C_code.c:1402: 	currentRN = ((RandValues->seed&0xFF00) >> 8) + (currentRN << 6) + (currentRN << 16) - currentRN;
	lsls	r1, r2, #6	@ tmp195, currentRN,
@ Patches/../C_code.c:1402: 	currentRN = ((RandValues->seed&0xFF00) >> 8) + (currentRN << 6) + (currentRN << 16) - currentRN;
	adds	r3, r3, r1	@ tmp196, tmp194, tmp195
@ Patches/../C_code.c:1402: 	currentRN = ((RandValues->seed&0xFF00) >> 8) + (currentRN << 6) + (currentRN << 16) - currentRN;
	lsls	r1, r2, #16	@ tmp197, currentRN,
@ Patches/../C_code.c:1402: 	currentRN = ((RandValues->seed&0xFF00) >> 8) + (currentRN << 6) + (currentRN << 16) - currentRN;
	adds	r3, r3, r1	@ _26, tmp196, tmp197
@ Patches/../C_code.c:1402: 	currentRN = ((RandValues->seed&0xFF00) >> 8) + (currentRN << 6) + (currentRN << 16) - currentRN;
	subs	r3, r3, r2	@ currentRN, _26, currentRN
@ Patches/../C_code.c:1405: 	currentRN = ((currentRN << 5) + currentRN) ^ number; 
	lsls	r2, r3, #5	@ tmp200, currentRN,
	adds	r2, r2, r3	@ tmp201, tmp200, currentRN
	movs	r3, #16	@ _68,
	eors	r2, r7	@ tmp202, _10
	lsls	r0, r2, #5	@ tmp204, tmp202,
	mov	ip, r3	@ _68, _68
	adds	r0, r0, r2	@ tmp205, tmp204, tmp202
@ Patches/../C_code.c:1405: 	currentRN = ((currentRN << 5) + currentRN) ^ number; 
	eors	r0, r6	@ currentRN, number
@ Patches/../C_code.c:1407: 		for (int i = 0; i < (noise[c] & 0xF); ++i) { 
	movs	r6, #15	@ tmp213,
	add	ip, ip, r5	@ _68, ivtmp.997
.L581:
	ldr	r3, [r5]	@ MEM[(int *)_63], MEM[(int *)_63]
	movs	r2, r3	@ _82, MEM[(int *)_63]
@ Patches/../C_code.c:1407: 		for (int i = 0; i < (noise[c] & 0xF); ++i) { 
	movs	r1, #0	@ i,
@ Patches/../C_code.c:1407: 		for (int i = 0; i < (noise[c] & 0xF); ++i) { 
	ands	r2, r6	@ _82, tmp213
@ Patches/../C_code.c:1407: 		for (int i = 0; i < (noise[c] & 0xF); ++i) { 
	tst	r3, r6	@ MEM[(int *)_63], tmp213
	beq	.L585		@,
.L583:
@ Patches/../C_code.c:1251: 	u32 rn0 = rn & 0xFFFF; 
	lsls	r4, r0, #16	@ tmp206, currentRN,
@ Patches/../C_code.c:1252: 	u32 rn1 = rn >> 16; 
	lsrs	r0, r0, #16	@ rn1, currentRN,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	lsls	r7, r0, #11	@ tmp208, rn1,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	lsrs	r3, r4, #21	@ tmp207, tmp206,
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	adds	r3, r3, r7	@ tmp209, tmp207, tmp208
@ Patches/../C_code.c:1261:         rn0++;
	orrs	r0, r4	@ tmp222, tmp206
@ Patches/../C_code.c:1253:     rn = (rn1 << 11) + (rn0 >> 5) + (rn0 << 16);
	adds	r3, r3, r4	@ rn, tmp209, tmp206
@ Patches/../C_code.c:1261:         rn0++;
	lsrs	r0, r0, #15	@ rn0, tmp222,
@ Patches/../C_code.c:1407: 		for (int i = 0; i < (noise[c] & 0xF); ++i) { 
	adds	r1, r1, #1	@ i,
@ Patches/../C_code.c:1264:     rn ^= rn0;
	eors	r0, r3	@ currentRN, rn
@ Patches/../C_code.c:1407: 		for (int i = 0; i < (noise[c] & 0xF); ++i) { 
	cmp	r1, r2	@ i, _82
	bne	.L583		@,
.L585:
@ Patches/../C_code.c:1406: 	for (int c = 0; c < 4; ++c) { 
	adds	r5, r5, #4	@ ivtmp.997,
	cmp	ip, r5	@ _68, ivtmp.997
	bne	.L581		@,
@ Patches/../C_code.c:1414: }
	@ sp needed	@
@ Patches/../C_code.c:1413: 	return Mod((currentRN & 0x2FFFFFFF), max);
	ldr	r3, .L591+4	@ tmp216,
	mov	r1, r8	@, max
	ands	r0, r3	@ tmp215, tmp216
	ldr	r3, .L591+8	@ tmp217,
	bl	.L14		@
@ Patches/../C_code.c:1413: 	return Mod((currentRN & 0x2FFFFFFF), max);
	lsls	r0, r0, #16	@ tmp220, tmp230,
	lsrs	r0, r0, #16	@ tmp219, tmp220,
@ Patches/../C_code.c:1414: }
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L592:
	.align	2
.L591:
	.word	RandValues
	.word	805306367
	.word	Mod
	.size	HashByte_Global, .-HashByte_Global
	.align	1
	.p2align 2,,3
	.global	RandomizeSkill
	.syntax unified
	.code	16
	.thumb_func
	.type	RandomizeSkill, %function
RandomizeSkill:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
	sub	sp, sp, #16	@,,
@ Patches/../C_code.c:178: 	if (!id) { return 0; } 
	cmp	r0, #0	@ id,
	beq	.L597		@,
@ Patches/../C_code.c:179: 	if (SkillExceptions[id].NeverChangeFrom) { return id; } 
	ldr	r4, .L604	@ tmp132,
	lsls	r3, r0, #1	@ tmp133, id,
@ Patches/../C_code.c:179: 	if (SkillExceptions[id].NeverChangeFrom) { return id; } 
	ldrb	r3, [r3, r4]	@ tmp134, SkillExceptions
	cmp	r3, #0	@ tmp134,
	bne	.L593		@,
@ Patches/../C_code.c:180: 	if (!RandValues->skills) { if (!VanillaSkill[id]) { return 0; } else { return id; } } 
	ldr	r3, .L604+4	@ tmp136,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldrb	r3, [r3, #3]	@ _3, *RandValues.1_2
@ Patches/../C_code.c:180: 	if (!RandValues->skills) { if (!VanillaSkill[id]) { return 0; } else { return id; } } 
	cmp	r3, #63	@ _3,
	bhi	.L596		@,
@ Patches/../C_code.c:180: 	if (!RandValues->skills) { if (!VanillaSkill[id]) { return 0; } else { return id; } } 
	ldr	r3, .L604+8	@ tmp139,
@ Patches/../C_code.c:180: 	if (!RandValues->skills) { if (!VanillaSkill[id]) { return 0; } else { return id; } } 
	ldrb	r3, [r3, r0]	@ tmp140, VanillaSkill
	cmp	r3, #0	@ tmp140,
	bne	.L593		@,
.L597:
@ Patches/../C_code.c:178: 	if (!id) { return 0; } 
	movs	r0, #0	@ <retval>,
.L593:
@ Patches/../C_code.c:187: } 
	add	sp, sp, #16	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L596:
@ Patches/../C_code.c:181: 	if (RandValues->skills == 2) { return id; } 
	movs	r2, #63	@ tmp142,
	bics	r3, r2	@ tmp143, tmp142
	cmp	r3, #128	@ tmp143,
	beq	.L593		@,
@ Patches/../C_code.c:182: 	const struct CharacterData* table = unit->pCharacterData; 	
	ldr	r3, [r1]	@ table, unit_20(D)->pCharacterData
@ Patches/../C_code.c:183: 	int noise[4] = { table->number, id, id, table->portraitId }; 
	ldrb	r2, [r3, #4]	@ tmp146,
@ Patches/../C_code.c:183: 	int noise[4] = { table->number, id, id, table->portraitId }; 
	str	r0, [sp, #4]	@ <retval>, noise[1]
@ Patches/../C_code.c:183: 	int noise[4] = { table->number, id, id, table->portraitId }; 
	str	r2, [sp]	@ tmp146, noise[0]
@ Patches/../C_code.c:183: 	int noise[4] = { table->number, id, id, table->portraitId }; 
	str	r0, [sp, #8]	@ <retval>, noise[2]
@ Patches/../C_code.c:183: 	int noise[4] = { table->number, id, id, table->portraitId }; 
	ldrh	r3, [r3, #6]	@ tmp150,
	str	r3, [sp, #12]	@ tmp150, noise[3]
@ Patches/../C_code.c:184: 	id = HashByte_Global(id, NumberOfSkills-1, noise, 12)+1; // never 0 
	ldr	r3, .L604+12	@ tmp152,
	ldr	r1, [r3]	@ NumberOfSkills, NumberOfSkills
	mov	r2, sp	@,
	movs	r3, #12	@,
	subs	r1, r1, #1	@ tmp153,
	bl	HashByte_Global		@
@ Patches/../C_code.c:184: 	id = HashByte_Global(id, NumberOfSkills-1, noise, 12)+1; // never 0 
	adds	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:185: 	if (SkillExceptions[id].NeverChangeInto) { return 0; } 
	lsls	r3, r0, #1	@ tmp158, <retval>,
	adds	r4, r4, r3	@ tmp159, tmp132, tmp158
@ Patches/../C_code.c:185: 	if (SkillExceptions[id].NeverChangeInto) { return 0; } 
	ldrb	r3, [r4, #1]	@ tmp161, SkillExceptions
	cmp	r3, #0	@ tmp161,
	beq	.L593		@,
	b	.L597		@
.L605:
	.align	2
.L604:
	.word	SkillExceptions
	.word	RandValues
	.word	VanillaSkill
	.word	NumberOfSkills
	.size	RandomizeSkill, .-RandomizeSkill
	.align	1
	.p2align 2,,3
	.global	AdjustNonSkinColours
	.syntax unified
	.code	16
	.thumb_func
	.type	AdjustNonSkinColours, %function
AdjustNonSkinColours:
	@ Function supports interworking.
	@ args = 4, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, fp	@,
	mov	r5, r8	@,
	mov	r7, r10	@,
	mov	r6, r9	@,
	movs	r4, r1	@ id, tmp192
	push	{r5, r6, r7, lr}	@
	sub	sp, sp, #20	@,,
@ Patches/../C_code.c:1484: 	int noise[4] = { 0, 0, 0, 0 };
	movs	r1, #0	@,
@ Patches/../C_code.c:904: void AdjustNonSkinColours(int bank, int id, int AlwaysRandomizePastThisColour, int NeverRandomizeBeforeThisColour, int fading) { 
	movs	r7, r0	@ bank, tmp191
	mov	r8, r2	@ AlwaysRandomizePastThisColour, tmp193
	movs	r5, r3	@ NeverRandomizeBeforeThisColour, tmp194
@ Patches/../C_code.c:1484: 	int noise[4] = { 0, 0, 0, 0 };
	movs	r2, #16	@,
	ldr	r3, .L620	@ tmp148,
	mov	r0, sp	@,
	bl	.L14		@
@ Patches/../C_code.c:1485: 	int result = HashByte_Global(5, 254, noise, id)+1;
	movs	r3, r4	@, id
	mov	r2, sp	@,
	movs	r1, #254	@,
	movs	r0, #5	@,
	bl	HashByte_Global		@
@ Patches/../C_code.c:1485: 	int result = HashByte_Global(5, 254, noise, id)+1;
	adds	r6, r0, #1	@ result, tmp152,
@ Patches/../C_code.c:1486: 	if (result < 40) { result += 40; } 
	cmp	r6, #39	@ result,
	bgt	.L607		@,
@ Patches/../C_code.c:1486: 	if (result < 40) { result += 40; } 
	adds	r0, r0, #41	@ tmp152,
	movs	r6, r0	@ result, tmp152
.L608:
	ldr	r2, .L620+4	@ tmp187,
	mov	r9, r2	@ tmp187, tmp187
@ Patches/../C_code.c:925: 		RandColours(bank, i, 1, id);
	ldr	r2, .L620+8	@ tmp190,
@ Patches/../C_code.c:907: 	u16* buffer = &gPaletteBuffer[(bank * 16)];
	lsls	r3, r7, #4	@ _45, bank,
	mov	r10, r3	@ _45, _45
@ Patches/../C_code.c:925: 		RandColours(bank, i, 1, id);
	mov	fp, r2	@ tmp190, tmp190
@ Patches/../C_code.c:908: 	for (int i = 0; i < 16; i++) { 
	movs	r3, #0	@ i,
@ Patches/../C_code.c:925: 		RandColours(bank, i, 1, id);
	lsls	r6, r6, #24	@ tmp188, result,
	lsrs	r6, r6, #24	@ tmp189, tmp188,
.L612:
@ Patches/../C_code.c:909: 		if (i < NeverRandomizeBeforeThisColour) { i = NeverRandomizeBeforeThisColour; } 
	movs	r4, r5	@ _25, NeverRandomizeBeforeThisColour
	cmp	r5, r3	@ NeverRandomizeBeforeThisColour, i
	bge	.L609		@,
	movs	r4, r3	@ _25, i
.L609:
@ Patches/../C_code.c:910: 		col = buffer[i]; 
	mov	r3, r10	@ _45, _45
	mov	r2, r9	@ tmp187, tmp187
	adds	r3, r4, r3	@ tmp154, _25, _45
	lsls	r3, r3, #1	@ tmp155, tmp154,
	ldrh	r0, [r2, r3]	@ _5, *_4
@ Patches/../C_code.c:914: 		if (i < AlwaysRandomizePastThisColour) { 
	cmp	r4, r8	@ _25, AlwaysRandomizePastThisColour
	bge	.L610		@,
	movs	r3, #31	@ tmp159,
	movs	r1, r3	@ _23, tmp159
@ Patches/../C_code.c:912: 		g = (col & (0x1F << 5)) >> 5; 
	asrs	r2, r0, #5	@ tmp163, _5,
	ands	r1, r0	@ _23, _5
@ Patches/../C_code.c:913: 		b = (col & (0x1F << 10)) >> 10; 
	asrs	r0, r0, #10	@ tmp165, _5,
@ Patches/../C_code.c:912: 		g = (col & (0x1F << 5)) >> 5; 
	ands	r2, r3	@ g, tmp159
@ Patches/../C_code.c:913: 		b = (col & (0x1F << 10)) >> 10; 
	ands	r3, r0	@ b, tmp165
@ Patches/../C_code.c:915: 			if ((r >= g) && (g >= b)) { // yellowish/brownish (skin colours) 
	cmp	r1, r2	@ _23, g
	bcc	.L610		@,
	cmp	r2, r3	@ g, b
	bcc	.L610		@,
@ Patches/../C_code.c:916: 				if (((r - g) < 14) && ((g - b) < 25)) { // no extreme differences 
	subs	r0, r1, r2	@ tmp179, _23, g
@ Patches/../C_code.c:916: 				if (((r - g) < 14) && ((g - b) < 25)) { // no extreme differences 
	cmp	r0, #13	@ tmp179,
	bgt	.L610		@,
@ Patches/../C_code.c:916: 				if (((r - g) < 14) && ((g - b) < 25)) { // no extreme differences 
	subs	r3, r2, r3	@ tmp180, g, b
@ Patches/../C_code.c:916: 				if (((r - g) < 14) && ((g - b) < 25)) { // no extreme differences 
	cmp	r3, #24	@ tmp180,
	bgt	.L610		@,
@ Patches/../C_code.c:917: 					if (fading) { continue; } 
	ldr	r3, [sp, #56]	@ tmp205, fading
	cmp	r3, #0	@ tmp205,
	bne	.L611		@,
@ Patches/../C_code.c:918: 					else if (r > 17) { // r > g > b 
	cmp	r1, #17	@ _23,
	bls	.L610		@,
@ Patches/../C_code.c:919: 						if ((r+g) > 36) { 
	adds	r1, r1, r2	@ tmp183, _23, g
@ Patches/../C_code.c:919: 						if ((r+g) > 36) { 
	cmp	r1, #36	@ tmp183,
	bgt	.L611		@,
.L610:
@ Patches/../C_code.c:925: 		RandColours(bank, i, 1, id);
	movs	r3, r6	@, tmp189
	movs	r2, #1	@,
	movs	r1, r4	@, _25
	movs	r0, r7	@, bank
	bl	.L434		@
.L611:
@ Patches/../C_code.c:908: 	for (int i = 0; i < 16; i++) { 
	adds	r3, r4, #1	@ i, _25,
@ Patches/../C_code.c:908: 	for (int i = 0; i < 16; i++) { 
	cmp	r3, #15	@ i,
	ble	.L612		@,
@ Patches/../C_code.c:928: } 
	add	sp, sp, #20	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L607:
@ Patches/../C_code.c:1487: 	if (result > 210) { result -= 40; } 
	cmp	r6, #210	@ result,
	ble	.L608		@,
@ Patches/../C_code.c:1487: 	if (result > 210) { result -= 40; } 
	subs	r0, r0, #39	@ tmp152,
	movs	r6, r0	@ result, tmp152
	b	.L608		@
.L621:
	.align	2
.L620:
	.word	memset
	.word	gPaletteBuffer
	.word	RandColours
	.size	AdjustNonSkinColours, .-AdjustNonSkinColours
	.align	1
	.p2align 2,,3
	.global	PortraitAdjustNonSkinColours
	.syntax unified
	.code	16
	.thumb_func
	.type	PortraitAdjustNonSkinColours, %function
PortraitAdjustNonSkinColours:
	@ Function supports interworking.
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}	@
	sub	sp, sp, #12	@,,
@ Patches/../C_code.c:993: 	if ((AlwaysRandomizePastThisColour) && (!NeverRandomizeBeforeThisColour)) { 
	cmp	r2, #0	@ AlwaysRandomizePastThisColour,
	beq	.L623		@,
	cmp	r3, #0	@ NeverRandomizeBeforeThisColour,
	bne	.L623		@,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldr	r3, .L633	@ tmp136,
	lsls	r4, r0, #5	@ tmp138, bank,
	adds	r4, r4, #2	@ tmp139,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldrh	r5, [r4, r3]	@ tmp144, gPaletteBuffer
	movs	r4, #192	@ tmp143,
	movs	r3, #0	@ tmp148,
	lsls	r4, r4, #7	@ tmp143, tmp143,
	cmp	r5, r4	@ tmp144, tmp143
	adcs	r3, r3, r3	@ tmp147, tmp148, tmp148
	rsbs	r4, r3, #0	@ tmp149, tmp147
	movs	r3, #5	@ tmp150,
	ands	r3, r4	@ NeverRandomizeBeforeThisColour, tmp149
.L623:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	ldr	r4, [sp, #28]	@ tmp158, classCard
	cmp	r4, #0	@ tmp158,
	beq	.L624		@,
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r2, #99	@ AlwaysRandomizePastThisColour,
.L624:
@ Patches/../C_code.c:997: 	AdjustNonSkinColours(bank, id, AlwaysRandomizePastThisColour, NeverRandomizeBeforeThisColour, fading); 
	ldr	r4, [sp, #24]	@ tmp159, fading
	str	r4, [sp]	@ tmp159,
	bl	AdjustNonSkinColours		@
@ Patches/../C_code.c:998: }
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L634:
	.align	2
.L633:
	.word	gPaletteBuffer
	.size	PortraitAdjustNonSkinColours, .-PortraitAdjustNonSkinColours
	.align	1
	.p2align 2,,3
	.global	MaybeRandomizeColours
	.syntax unified
	.code	16
	.thumb_func
	.type	MaybeRandomizeColours, %function
MaybeRandomizeColours:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r7, r10	@,
	mov	lr, fp	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
@ Patches/../C_code.c:1002: 	if (RandBitflags->fog == 1) { gVision = 0; } 
	movs	r3, #96	@ tmp290,
@ Patches/../C_code.c:1001: int MaybeRandomizeColours(void) { 
	push	{r5, r6, r7, lr}	@
@ Patches/../C_code.c:1002: 	if (RandBitflags->fog == 1) { gVision = 0; } 
	ldr	r7, .L779	@ tmp510,
	ldr	r2, [r7]	@ RandBitflags.37_1, RandBitflags
@ Patches/../C_code.c:1002: 	if (RandBitflags->fog == 1) { gVision = 0; } 
	ldrb	r1, [r2, #3]	@ *RandBitflags.37_1, *RandBitflags.37_1
@ Patches/../C_code.c:1001: int MaybeRandomizeColours(void) { 
	sub	sp, sp, #20	@,,
@ Patches/../C_code.c:1002: 	if (RandBitflags->fog == 1) { gVision = 0; } 
	ands	r3, r1	@ _3, *RandBitflags.37_1
@ Patches/../C_code.c:1002: 	if (RandBitflags->fog == 1) { gVision = 0; } 
	cmp	r3, #32	@ _3,
	beq	.L771		@,
@ Patches/../C_code.c:1003: 	if (RandBitflags->fog == 2) { gVision = 3; } 
	cmp	r3, #64	@ _3,
	bne	.L637		@,
@ Patches/../C_code.c:1003: 	if (RandBitflags->fog == 2) { gVision = 3; } 
	movs	r1, #3	@ tmp296,
	ldr	r3, .L779+4	@ tmp295,
	strb	r1, [r3]	@ tmp296, gVision
.L637:
@ Patches/../C_code.c:894: 	if (NeverRandomizeColours) { return false; } 
	ldr	r3, .L779+8	@ tmp298,
	ldr	r4, [r3]	@ <retval>, NeverRandomizeColours
@ Patches/../C_code.c:894: 	if (NeverRandomizeColours) { return false; } 
	cmp	r4, #0	@ <retval>,
	bne	.L695		@,
.L773:
@ Patches/../C_code.c:895: 	if (RandBitflags->colours) { return true; } 
	ldrb	r3, [r2, #2]	@ *RandBitflags.37_1, *RandBitflags.37_1
@ Patches/../C_code.c:895: 	if (RandBitflags->colours) { return true; } 
	lsls	r3, r3, #29	@ tmp587, *RandBitflags.37_1,
	bne	.L772		@,
.L635:
@ Patches/../C_code.c:1159: } 
	movs	r0, r4	@, <retval>
	add	sp, sp, #20	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L772:
@ Patches/../C_code.c:1007: 	int fading = AnyFadeExists();
	bl	AnyFadeExists		@
@ Patches/../C_code.c:1017: 	if (Proc_Find(gProcScr_StatScreen)) { // stat screen portrait  
	ldr	r3, .L779+12	@ tmp511,
@ Patches/../C_code.c:1007: 	int fading = AnyFadeExists();
	mov	r8, r0	@ fading, tmp558
@ Patches/../C_code.c:1017: 	if (Proc_Find(gProcScr_StatScreen)) { // stat screen portrait  
	ldr	r0, .L779+16	@ tmp308,
	mov	r10, r3	@ tmp511, tmp511
	bl	.L14		@
@ Patches/../C_code.c:1017: 	if (Proc_Find(gProcScr_StatScreen)) { // stat screen portrait  
	cmp	r0, #0	@ tmp559,
	beq	.L639		@,
@ Patches/../C_code.c:1018: 		unit = gStatScreen.unit; 
	ldr	r3, .L779+20	@ tmp310,
	ldr	r5, [r3, #12]	@ unit, gStatScreen.unit
@ Patches/../C_code.c:1019: 		if (unit) { 
	cmp	r5, #0	@ unit,
	beq	.L639		@,
@ Patches/../C_code.c:1020: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	ldr	r3, [r5]	@ unit_122->pCharacterData, unit_122->pCharacterData
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	movs	r0, r5	@, unit
@ Patches/../C_code.c:1020: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	ldrh	r6, [r3, #6]	@ _8,
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	ldr	r3, .L779+24	@ tmp312,
	bl	.L14		@
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldr	r3, [r5]	@ _178, unit_122->pCharacterData
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrh	r2, [r3, #6]	@ tmp313,
	cmp	r2, #0	@ tmp313,
	bne	.L640		@,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	movs	r2, #11	@ tmp314,
	ldrsb	r2, [r5, r2]	@ tmp314,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrb	r3, [r3, #4]	@ tmp315,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r2, r0	@ portraitID, tmp314, portraitID
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r3, r0	@ portraitID, tmp315, portraitID
.L640:
@ Patches/../C_code.c:886: 	portraitID &= 0xFF; 
	movs	r3, #255	@ tmp316,
	movs	r1, r3	@ portraitID, tmp316
	ands	r1, r0	@ portraitID, portraitID
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	tst	r3, r0	@ tmp316, portraitID
	bne	.L641		@,
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	movs	r1, #1	@ portraitID,
.L641:
@ Patches/../C_code.c:1024: 			PortraitAdjustNonSkinColours(11, GetAdjustedPortraitId(unit), PortraitColoursPastThisAreNotSkin, 0, fading, classCard); 
	ldr	r3, .L779+28	@ tmp317,
	ldr	r2, [r3]	@ AlwaysRandomizePastThisColour, PortraitColoursPastThisAreNotSkin
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:993: 	if ((AlwaysRandomizePastThisColour) && (!NeverRandomizeBeforeThisColour)) { 
	cmp	r2, #0	@ AlwaysRandomizePastThisColour,
	beq	.L642		@,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	movs	r5, #177	@ tmp319,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldr	r0, .L779+32	@ tmp318,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	lsls	r5, r5, #1	@ tmp319, tmp319,
	ldrh	r5, [r0, r5]	@ tmp324,
	movs	r0, #192	@ tmp323,
	lsls	r0, r0, #7	@ tmp323, tmp323,
	cmp	r5, r0	@ tmp324, tmp323
	adcs	r3, r3, r3	@ tmp531, NeverRandomizeBeforeThisColour, NeverRandomizeBeforeThisColour
	rsbs	r0, r3, #0	@ tmp533, tmp531
	movs	r3, #5	@ tmp534,
	ands	r3, r0	@ NeverRandomizeBeforeThisColour, tmp533
.L642:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	cmp	r6, #0	@ _8,
	bne	.LCB3818	@
	b	.L699	@long jump	@
.LCB3818:
	movs	r4, r3	@ <retval>, NeverRandomizeBeforeThisColour
.L643:
@ Patches/../C_code.c:997: 	AdjustNonSkinColours(bank, id, AlwaysRandomizePastThisColour, NeverRandomizeBeforeThisColour, fading); 
	mov	r3, r8	@ fading, fading
	movs	r0, #11	@,
	str	r3, [sp]	@ fading,
	movs	r3, r4	@, <retval>
	bl	AdjustNonSkinColours		@
@ Patches/../C_code.c:1026: 			return true; // so we don't alter prep palettes during stat screen 
	movs	r4, #1	@ <retval>,
	b	.L635		@
.L771:
@ Patches/../C_code.c:1002: 	if (RandBitflags->fog == 1) { gVision = 0; } 
	movs	r1, #0	@ tmp293,
	ldr	r3, .L779+4	@ tmp292,
	strb	r1, [r3]	@ tmp293, gVision
@ Patches/../C_code.c:894: 	if (NeverRandomizeColours) { return false; } 
	ldr	r3, .L779+8	@ tmp298,
	ldr	r4, [r3]	@ <retval>, NeverRandomizeColours
@ Patches/../C_code.c:894: 	if (NeverRandomizeColours) { return false; } 
	cmp	r4, #0	@ <retval>,
	beq	.L773		@,
.L695:
@ Patches/../C_code.c:1005: 	if (!ShouldRandomizeColours()) { return false; } 
	movs	r4, #0	@ <retval>,
	b	.L635		@
.L780:
	.align	2
.L779:
	.word	RandBitflags
	.word	gVision
	.word	NeverRandomizeColours
	.word	Proc_Find
	.word	gProcScr_StatScreen
	.word	gStatScreen
	.word	GetUnitPortraitId
	.word	PortraitColoursPastThisAreNotSkin
	.word	gPaletteBuffer
.L639:
@ Patches/../C_code.c:1029: 	struct PlayerInterfaceProc* proc = Proc_Find((struct ProcCmd*)gProcScr_UnitDisplay_MinimugBox);
	ldr	r0, .L781	@ tmp327,
	bl	.L785		@
	subs	r5, r0, #0	@ proc, tmp561,
@ Patches/../C_code.c:1030: 	if (proc) { 
	bne	.LCB3863	@
	b	.L649	@long jump	@
.LCB3863:
@ Patches/../C_code.c:1031: 		unit = GetUnit(gBmMapUnit[gCursorY][gCursorX]); 
	ldr	r3, .L781+4	@ tmp329,
	ldr	r6, .L781+8	@ tmp332,
	ldrh	r3, [r3]	@ gCursorY, gCursorY
	ldr	r1, [r6]	@ gBmMapUnit, gBmMapUnit
@ Patches/../C_code.c:1031: 		unit = GetUnit(gBmMapUnit[gCursorY][gCursorX]); 
	ldr	r2, .L781+12	@ tmp334,
@ Patches/../C_code.c:1031: 		unit = GetUnit(gBmMapUnit[gCursorY][gCursorX]); 
	lsls	r3, r3, #2	@ tmp333, gCursorY,
@ Patches/../C_code.c:1031: 		unit = GetUnit(gBmMapUnit[gCursorY][gCursorX]); 
	ldr	r3, [r3, r1]	@ *_15, *_15
	ldrh	r2, [r2]	@ gCursorX, gCursorX
@ Patches/../C_code.c:1031: 		unit = GetUnit(gBmMapUnit[gCursorY][gCursorX]); 
	ldrb	r0, [r3, r2]	@ *_19, *_19
	ldr	r3, .L781+16	@ tmp338,
	mov	r9, r3	@ tmp338, tmp338
	bl	.L14		@
@ Patches/../C_code.c:1037: 		if (proc->isRetracting) { unit = GetUnit(gBmMapUnit[proc->yCursorPrev][proc->xCursorPrev]); } 
	movs	r3, #86	@ tmp339,
@ Patches/../C_code.c:1037: 		if (proc->isRetracting) { unit = GetUnit(gBmMapUnit[proc->yCursorPrev][proc->xCursorPrev]); } 
	ldrsb	r3, [r5, r3]	@ tmp340,
	cmp	r3, #0	@ tmp340,
	beq	.LCB3879	@
	b	.L774	@long jump	@
.LCB3879:
.L647:
@ Patches/../C_code.c:1039: 		if (gActiveUnit->state & US_HIDDEN) { unit = gActiveUnit; } // for frame we select unit 
	ldr	r3, .L781+20	@ tmp351,
	ldr	r5, [r3]	@ gActiveUnit.44_34, gActiveUnit
@ Patches/../C_code.c:1039: 		if (gActiveUnit->state & US_HIDDEN) { unit = gActiveUnit; } // for frame we select unit 
	ldr	r3, [r5, #12]	@ gActiveUnit.44_34->state, gActiveUnit.44_34->state
@ Patches/../C_code.c:1039: 		if (gActiveUnit->state & US_HIDDEN) { unit = gActiveUnit; } // for frame we select unit 
	lsls	r3, r3, #31	@ tmp588, gActiveUnit.44_34->state,
	bmi	.L648		@,
@ Patches/../C_code.c:1040: 		if (unit) { 
	cmp	r0, #0	@ unit,
	bne	.LCB3889	@
	b	.L649	@long jump	@
.LCB3889:
	movs	r5, r0	@ gActiveUnit.44_34, unit
.L648:
@ Patches/../C_code.c:1041: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	ldr	r3, [r5]	@ unit_326->pCharacterData, unit_326->pCharacterData
	ldrh	r6, [r3, #6]	@ _38,
@ Patches/../C_code.c:1041: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	rsbs	r2, r6, #0	@ classCard, _38
	adcs	r2, r2, r6	@ classCard, _38
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	movs	r0, r5	@, gActiveUnit.44_34
	ldr	r3, .L781+24	@ tmp359,
@ Patches/../C_code.c:1041: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	mov	r9, r2	@ classCard, classCard
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	bl	.L14		@
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldr	r3, [r5]	@ _199, unit_326->pCharacterData
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrh	r2, [r3, #6]	@ tmp360,
	cmp	r2, #0	@ tmp360,
	bne	.L650		@,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	movs	r2, #11	@ tmp361,
	ldrsb	r2, [r5, r2]	@ tmp361,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrb	r3, [r3, #4]	@ tmp362,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r2, r0	@ portraitID, tmp361, portraitID
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r3, r0	@ portraitID, tmp362, portraitID
.L650:
@ Patches/../C_code.c:886: 	portraitID &= 0xFF; 
	movs	r3, #255	@ tmp363,
	movs	r1, r3	@ portraitID, tmp363
	ands	r1, r0	@ portraitID, portraitID
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	tst	r3, r0	@ tmp363, portraitID
	bne	.L651		@,
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	movs	r1, #1	@ portraitID,
.L651:
@ Patches/../C_code.c:1042: 			PortraitAdjustNonSkinColours(4, GetAdjustedPortraitId(unit), PortraitColoursPastThisAreNotSkin, 0, fading, classCard); 
	ldr	r3, .L781+28	@ tmp364,
	ldr	r2, [r3]	@ AlwaysRandomizePastThisColour, PortraitColoursPastThisAreNotSkin
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:993: 	if ((AlwaysRandomizePastThisColour) && (!NeverRandomizeBeforeThisColour)) { 
	cmp	r2, #0	@ AlwaysRandomizePastThisColour,
	beq	.L652		@,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	movs	r5, #130	@ tmp366,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldr	r0, .L781+32	@ tmp365,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldrh	r5, [r0, r5]	@ tmp371,
	movs	r0, #192	@ tmp370,
	lsls	r0, r0, #7	@ tmp370, tmp370,
	cmp	r5, r0	@ tmp371, tmp370
	adcs	r3, r3, r3	@ tmp535, NeverRandomizeBeforeThisColour, NeverRandomizeBeforeThisColour
	movs	r0, #5	@ tmp538,
	rsbs	r3, r3, #0	@ tmp537, tmp535
	ands	r3, r0	@ NeverRandomizeBeforeThisColour, tmp538
.L652:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	cmp	r6, #0	@ _38,
	bne	.LCB3937	@
	b	.L775	@long jump	@
.LCB3937:
.L653:
@ Patches/../C_code.c:997: 	AdjustNonSkinColours(bank, id, AlwaysRandomizePastThisColour, NeverRandomizeBeforeThisColour, fading); 
	mov	r0, r8	@ fading, fading
	str	r0, [sp]	@ fading,
	movs	r0, #4	@,
	bl	AdjustNonSkinColours		@
@ Patches/../C_code.c:1043: 			result = true;
	movs	r3, #1	@ result,
	str	r3, [sp, #8]	@ result, %sfp
.L646:
@ Patches/../C_code.c:1068: 		PortraitAdjustNonSkinColours(sFaceConfig[i].paletteId+16, gFaces[i]->faceId, PortraitColoursPastThisAreNotSkin, 0, fading, classCard); 
	ldr	r3, .L781+28	@ tmp555,
	mov	fp, r3	@ tmp555, tmp555
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	movs	r1, r4	@ <retval>, <retval>
	ldr	r3, .L781+32	@ tmp556,
	str	r3, [sp, #12]	@ tmp556, %sfp
	mov	r3, fp	@ tmp555, tmp555
	mov	r4, r8	@ fading, fading
	mov	fp, r7	@ tmp510, tmp510
	mov	r8, r1	@ <retval>, <retval>
	ldr	r2, [sp, #8]	@ result, %sfp
	ldr	r6, .L781+36	@ ivtmp.1017,
	ldr	r5, .L781+40	@ ivtmp.1019,
	str	r3, [sp, #8]	@ tmp555, %sfp
.L659:
@ Patches/../C_code.c:1051: 		if (gFaces[i] == NULL) {
	ldr	r3, [r6]	@ _41, MEM[(struct FaceProc * *)_4]
@ Patches/../C_code.c:1051: 		if (gFaces[i] == NULL) {
	cmp	r3, #0	@ _41,
	beq	.L654		@,
@ Patches/../C_code.c:1061: 		if (gFaces[i]->faceId < 0x72) { classCard = false; } 
	ldrh	r1, [r3, #62]	@ _43,
@ Patches/../C_code.c:1068: 		PortraitAdjustNonSkinColours(sFaceConfig[i].paletteId+16, gFaces[i]->faceId, PortraitColoursPastThisAreNotSkin, 0, fading, classCard); 
	ldrh	r0, [r5, #4]	@ MEM[(short unsigned int *)_46 + 4B], MEM[(short unsigned int *)_46 + 4B]
@ Patches/../C_code.c:1068: 		PortraitAdjustNonSkinColours(sFaceConfig[i].paletteId+16, gFaces[i]->faceId, PortraitColoursPastThisAreNotSkin, 0, fading, classCard); 
	ldr	r3, [sp, #8]	@ tmp555, %sfp
	adds	r0, r0, #16	@ _109,
	ldr	r2, [r3]	@ AlwaysRandomizePastThisColour, PortraitColoursPastThisAreNotSkin
@ Patches/../C_code.c:1061: 		if (gFaces[i]->faceId < 0x72) { classCard = false; } 
	cmp	r1, #113	@ _43,
	bls	.LCB3974	@
	b	.L655	@long jump	@
.LCB3974:
@ Patches/../C_code.c:993: 	if ((AlwaysRandomizePastThisColour) && (!NeverRandomizeBeforeThisColour)) { 
	cmp	r2, #0	@ AlwaysRandomizePastThisColour,
	bne	.LCB3976	@
	b	.L770	@long jump	@
.LCB3976:
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	movs	r7, #192	@ tmp506,
	lsls	r7, r7, #7	@ tmp506, tmp506,
	mov	ip, r7	@ tmp506, tmp506
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	lsls	r3, r0, #5	@ tmp501, _109,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldr	r7, [sp, #12]	@ tmp556, %sfp
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	adds	r3, r3, #2	@ tmp502,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldrh	r3, [r7, r3]	@ tmp507, gPaletteBuffer
	cmp	r3, ip	@ tmp507, tmp506
	bcs	.LCB3986	@
	b	.L770	@long jump	@
.LCB3986:
	movs	r3, #0	@ classCard,
	mov	r9, r3	@ classCard, classCard
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	adds	r3, r3, #5	@ NeverRandomizeBeforeThisColour,
.L657:
@ Patches/../C_code.c:997: 	AdjustNonSkinColours(bank, id, AlwaysRandomizePastThisColour, NeverRandomizeBeforeThisColour, fading); 
	str	r4, [sp]	@ fading,
	bl	AdjustNonSkinColours		@
@ Patches/../C_code.c:1070: 		result = true;
	movs	r2, #1	@ result,
.L654:
@ Patches/../C_code.c:1050: 	for (int i = 0; i < 4; ++i) {
	ldr	r3, .L781+44	@ tmp630,
	adds	r5, r5, #8	@ ivtmp.1019,
	adds	r6, r6, #4	@ ivtmp.1017,
	cmp	r3, r5	@ tmp630, ivtmp.1019
	bne	.L659		@,
@ Patches/../C_code.c:1073: 	struct PrepItemScreenProc* proc_2 = Proc_Find((struct ProcCmd*)ProcScr_PrepUnitScreen);
	mov	r3, r8	@ <retval>, <retval>
	ldr	r0, .L781+48	@ tmp389,
	mov	r8, r4	@ fading, fading
	mov	r7, fp	@ tmp510, tmp510
	movs	r4, r3	@ <retval>, <retval>
	str	r2, [sp, #8]	@ result, %sfp
	bl	.L785		@
@ Patches/../C_code.c:1074: 	if (proc_2) { 
	cmp	r0, #0	@ proc_2,
	beq	.L662		@,
@ Patches/../C_code.c:1083: 		id = proc_2->id; 
	movs	r3, #44	@ tmp391,
@ Patches/../C_code.c:1083: 		id = proc_2->id; 
	ldrb	r0, [r0, r3]	@ id,
@ Patches/../C_code.c:1085: 		unit = GetUnitFromPrepList(id); 
	ldr	r3, .L781+52	@ tmp393,
	bl	.L14		@
	subs	r5, r0, #0	@ unit, tmp566,
@ Patches/../C_code.c:1090: 		if (unit) { 
	beq	.L662		@,
@ Patches/../C_code.c:1091: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	ldr	r3, [r0]	@ unit_138->pCharacterData, unit_138->pCharacterData
@ Patches/../C_code.c:1091: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	ldrh	r3, [r3, #6]	@ tmp395,
@ Patches/../C_code.c:1091: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	rsbs	r2, r3, #0	@ tmp517, tmp395
	adcs	r3, r3, r2	@ tmp516, tmp395, tmp517
	mov	r2, r9	@ classCard, classCard
	rsbs	r3, r3, #0	@ tmp518, tmp516
	ands	r2, r3	@ classCard, tmp518
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	ldr	r3, .L781+24	@ tmp396,
@ Patches/../C_code.c:1091: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	mov	r9, r2	@ classCard, classCard
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	bl	.L14		@
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldr	r3, [r5]	@ _229, unit_138->pCharacterData
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrh	r2, [r3, #6]	@ tmp397,
	cmp	r2, #0	@ tmp397,
	bne	.L664		@,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	movs	r2, #11	@ tmp398,
	ldrsb	r2, [r5, r2]	@ tmp398,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrb	r3, [r3, #4]	@ tmp399,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r2, r0	@ portraitID, tmp398, portraitID
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r3, r0	@ portraitID, tmp399, portraitID
.L664:
@ Patches/../C_code.c:886: 	portraitID &= 0xFF; 
	movs	r3, #255	@ tmp400,
	movs	r1, r3	@ portraitID, tmp400
	ands	r1, r0	@ portraitID, portraitID
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	tst	r3, r0	@ tmp400, portraitID
	bne	.L665		@,
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	movs	r1, #1	@ portraitID,
.L665:
@ Patches/../C_code.c:1092: 			PortraitAdjustNonSkinColours(palID, GetAdjustedPortraitId(unit), PortraitColoursPastThisAreNotSkin, 0, fading, classCard); 
	ldr	r3, .L781+28	@ tmp401,
	ldr	r2, [r3]	@ AlwaysRandomizePastThisColour, PortraitColoursPastThisAreNotSkin
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:993: 	if ((AlwaysRandomizePastThisColour) && (!NeverRandomizeBeforeThisColour)) { 
	cmp	r2, #0	@ AlwaysRandomizePastThisColour,
	beq	.L666		@,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	movs	r5, #66	@ tmp403,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldr	r0, .L781+32	@ tmp402,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldrh	r5, [r0, r5]	@ tmp408,
	movs	r0, #192	@ tmp407,
	lsls	r0, r0, #7	@ tmp407, tmp407,
	cmp	r5, r0	@ tmp408, tmp407
	adcs	r3, r3, r3	@ tmp543, NeverRandomizeBeforeThisColour, NeverRandomizeBeforeThisColour
	rsbs	r0, r3, #0	@ tmp545, tmp543
	movs	r3, #5	@ tmp546,
	ands	r3, r0	@ NeverRandomizeBeforeThisColour, tmp545
.L666:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	mov	r0, r9	@ classCard, classCard
	cmp	r0, #0	@ classCard,
	beq	.LCB4065	@
	b	.L776	@long jump	@
.LCB4065:
.L667:
@ Patches/../C_code.c:997: 	AdjustNonSkinColours(bank, id, AlwaysRandomizePastThisColour, NeverRandomizeBeforeThisColour, fading); 
	mov	r0, r8	@ fading, fading
	str	r0, [sp]	@ fading,
	movs	r0, #2	@,
	bl	AdjustNonSkinColours		@
@ Patches/../C_code.c:1093: 			result = true;
	movs	r3, #1	@ result,
	str	r3, [sp, #8]	@ result, %sfp
.L662:
@ Patches/../C_code.c:1097: 	struct PrepItemScreenProc* proc_3 = Proc_Find((struct ProcCmd*)ProcScr_PrepItemScreen);
	ldr	r0, .L781+56	@ tmp411,
	bl	.L785		@
	subs	r3, r0, #0	@ proc_3, tmp568,
@ Patches/../C_code.c:1098: 	if (proc_3) { 
	beq	.L671		@,
@ Patches/../C_code.c:1111: 		id = proc_3->selectedUnitIdx; 
	movs	r2, #43	@ tmp413,
@ Patches/../C_code.c:1111: 		id = proc_3->selectedUnitIdx; 
	ldrb	r0, [r0, r2]	@ id,
@ Patches/../C_code.c:1112: 		if (id == 0xFF) { id = proc_3->hoverUnitIdx; } 
	cmp	r0, #255	@ id,
	bne	.L669		@,
@ Patches/../C_code.c:1112: 		if (id == 0xFF) { id = proc_3->hoverUnitIdx; } 
	subs	r2, r2, #1	@ tmp414,
@ Patches/../C_code.c:1112: 		if (id == 0xFF) { id = proc_3->hoverUnitIdx; } 
	ldrb	r0, [r3, r2]	@ id,
.L669:
@ Patches/../C_code.c:1114: 		unit = GetUnitFromPrepList(id); 
	ldr	r3, .L781+52	@ tmp415,
	bl	.L14		@
	subs	r5, r0, #0	@ unit, tmp569,
@ Patches/../C_code.c:1115: 		if (unit) { 
	beq	.L671		@,
@ Patches/../C_code.c:1116: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	ldr	r3, [r0]	@ unit_146->pCharacterData, unit_146->pCharacterData
@ Patches/../C_code.c:1116: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	ldrh	r3, [r3, #6]	@ tmp417,
@ Patches/../C_code.c:1116: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	rsbs	r2, r3, #0	@ tmp521, tmp417
	adcs	r3, r3, r2	@ tmp520, tmp417, tmp521
	mov	r2, r9	@ classCard, classCard
	rsbs	r3, r3, #0	@ tmp522, tmp520
	ands	r2, r3	@ classCard, tmp522
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	ldr	r3, .L781+24	@ tmp418,
@ Patches/../C_code.c:1116: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	mov	r9, r2	@ classCard, classCard
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	bl	.L14		@
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldr	r3, [r5]	@ _250, unit_146->pCharacterData
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrh	r2, [r3, #6]	@ tmp419,
	cmp	r2, #0	@ tmp419,
	bne	.L673		@,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	movs	r2, #11	@ tmp420,
	ldrsb	r2, [r5, r2]	@ tmp420,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrb	r3, [r3, #4]	@ tmp421,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r2, r0	@ portraitID, tmp420, portraitID
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r3, r0	@ portraitID, tmp421, portraitID
.L673:
@ Patches/../C_code.c:886: 	portraitID &= 0xFF; 
	movs	r3, #255	@ tmp422,
	movs	r1, r3	@ portraitID, tmp422
	ands	r1, r0	@ portraitID, portraitID
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	tst	r3, r0	@ tmp422, portraitID
	bne	.L674		@,
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	movs	r1, #1	@ portraitID,
.L674:
@ Patches/../C_code.c:1117: 			PortraitAdjustNonSkinColours(palID, GetAdjustedPortraitId(unit), PortraitColoursPastThisAreNotSkin, 0, fading, classCard); 
	ldr	r3, .L781+28	@ tmp423,
	ldr	r2, [r3]	@ AlwaysRandomizePastThisColour, PortraitColoursPastThisAreNotSkin
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:993: 	if ((AlwaysRandomizePastThisColour) && (!NeverRandomizeBeforeThisColour)) { 
	cmp	r2, #0	@ AlwaysRandomizePastThisColour,
	beq	.L675		@,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	movs	r5, #98	@ tmp425,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldr	r0, .L781+32	@ tmp424,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldrh	r5, [r0, r5]	@ tmp430,
	movs	r0, #192	@ tmp429,
	lsls	r0, r0, #7	@ tmp429, tmp429,
	cmp	r5, r0	@ tmp430, tmp429
	adcs	r3, r3, r3	@ tmp547, NeverRandomizeBeforeThisColour, NeverRandomizeBeforeThisColour
	rsbs	r0, r3, #0	@ tmp549, tmp547
	movs	r3, #5	@ tmp550,
	ands	r3, r0	@ NeverRandomizeBeforeThisColour, tmp549
.L675:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	mov	r0, r9	@ classCard, classCard
	cmp	r0, #0	@ classCard,
	bne	.L777		@,
.L676:
@ Patches/../C_code.c:997: 	AdjustNonSkinColours(bank, id, AlwaysRandomizePastThisColour, NeverRandomizeBeforeThisColour, fading); 
	mov	r0, r8	@ fading, fading
	str	r0, [sp]	@ fading,
	movs	r0, #3	@,
	bl	AdjustNonSkinColours		@
@ Patches/../C_code.c:1118: 			result = true;
	movs	r3, #1	@ result,
	str	r3, [sp, #8]	@ result, %sfp
.L671:
@ Patches/../C_code.c:1123: 	struct SupportScreenProc* proc_4 = Proc_Find((struct ProcCmd*)gProcScr_SupportScreen);
	ldr	r0, .L781+60	@ tmp433,
	bl	.L785		@
@ Patches/../C_code.c:1124: 	if (proc_4) { 
	cmp	r0, #0	@ proc_4,
	beq	.L679		@,
@ Patches/../C_code.c:1125: 		unit = GetUnitFromPrepList(proc_4->curIndex); 
	ldr	r0, [r0, #56]	@ proc_4_150->curIndex, proc_4_150->curIndex
	ldr	r3, .L781+52	@ tmp436,
	bl	.L14		@
	subs	r5, r0, #0	@ unit, tmp572,
@ Patches/../C_code.c:1126: 		if (unit) { 
	beq	.L679		@,
@ Patches/../C_code.c:1127: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	ldr	r3, [r0]	@ unit_152->pCharacterData, unit_152->pCharacterData
@ Patches/../C_code.c:1127: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	ldrh	r3, [r3, #6]	@ tmp438,
@ Patches/../C_code.c:1127: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	rsbs	r2, r3, #0	@ tmp525, tmp438
	adcs	r3, r3, r2	@ tmp524, tmp438, tmp525
	mov	r2, r9	@ classCard, classCard
	rsbs	r3, r3, #0	@ tmp526, tmp524
	ands	r2, r3	@ classCard, tmp526
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	ldr	r3, .L781+24	@ tmp439,
@ Patches/../C_code.c:1127: 			if (unit->pCharacterData->portraitId) { classCard = false; } 
	mov	r9, r2	@ classCard, classCard
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	bl	.L14		@
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldr	r3, [r5]	@ _271, unit_152->pCharacterData
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrh	r2, [r3, #6]	@ tmp440,
	cmp	r2, #0	@ tmp440,
	bne	.L681		@,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	movs	r2, #11	@ tmp441,
	ldrsb	r2, [r5, r2]	@ tmp441,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrb	r3, [r3, #4]	@ tmp442,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r2, r0	@ portraitID, tmp441, portraitID
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r3, r0	@ portraitID, tmp442, portraitID
.L681:
@ Patches/../C_code.c:886: 	portraitID &= 0xFF; 
	movs	r3, #255	@ tmp443,
	movs	r1, r3	@ portraitID, tmp443
	ands	r1, r0	@ portraitID, portraitID
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	tst	r3, r0	@ tmp443, portraitID
	bne	.L682		@,
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	movs	r1, #1	@ portraitID,
.L682:
@ Patches/../C_code.c:1128: 			PortraitAdjustNonSkinColours(2, GetAdjustedPortraitId(unit), PortraitColoursPastThisAreNotSkin, 0, fading, classCard); 
	ldr	r3, .L781+28	@ tmp444,
	ldr	r2, [r3]	@ AlwaysRandomizePastThisColour, PortraitColoursPastThisAreNotSkin
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:993: 	if ((AlwaysRandomizePastThisColour) && (!NeverRandomizeBeforeThisColour)) { 
	cmp	r2, #0	@ AlwaysRandomizePastThisColour,
	beq	.L683		@,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	movs	r5, #66	@ tmp446,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldr	r0, .L781+32	@ tmp445,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldrh	r5, [r0, r5]	@ tmp451,
	movs	r0, #192	@ tmp450,
	lsls	r0, r0, #7	@ tmp450, tmp450,
	cmp	r5, r0	@ tmp451, tmp450
	adcs	r3, r3, r3	@ tmp551, NeverRandomizeBeforeThisColour, NeverRandomizeBeforeThisColour
	rsbs	r0, r3, #0	@ tmp553, tmp551
	movs	r3, #5	@ tmp554,
	ands	r3, r0	@ NeverRandomizeBeforeThisColour, tmp553
.L683:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	mov	r0, r9	@ classCard, classCard
	cmp	r0, #0	@ classCard,
	beq	.LCB4205	@
	b	.L778	@long jump	@
.LCB4205:
.L684:
@ Patches/../C_code.c:997: 	AdjustNonSkinColours(bank, id, AlwaysRandomizePastThisColour, NeverRandomizeBeforeThisColour, fading); 
	mov	r0, r8	@ fading, fading
	str	r0, [sp]	@ fading,
	movs	r0, #2	@,
	bl	AdjustNonSkinColours		@
@ Patches/../C_code.c:1129: 			result = true;
	movs	r3, #1	@ result,
	str	r3, [sp, #8]	@ result, %sfp
.L679:
@ Patches/../C_code.c:1136: 	if (RandBitflags->colours == 1) { // if 3, it's portraits only. 2 is janky 
	ldr	r3, [r7]	@ RandBitflags, RandBitflags
	ldrb	r2, [r3, #2]	@ *RandBitflags.50_67, *RandBitflags.50_67
@ Patches/../C_code.c:1136: 	if (RandBitflags->colours == 1) { // if 3, it's portraits only. 2 is janky 
	movs	r3, #7	@ tmp461,
	ands	r3, r2	@ tmp462, *RandBitflags.50_67
	cmp	r3, #1	@ tmp462,
	beq	.L685		@,
.L686:
@ Patches/../C_code.c:1026: 			return true; // so we don't alter prep palettes during stat screen 
	ldr	r4, [sp, #8]	@ <retval>, %sfp
	b	.L635		@
.L655:
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:993: 	if ((AlwaysRandomizePastThisColour) && (!NeverRandomizeBeforeThisColour)) { 
	cmp	r2, #0	@ AlwaysRandomizePastThisColour,
	beq	.L658		@,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldr	r7, [sp, #12]	@ tmp556, %sfp
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	lsls	r3, r0, #5	@ tmp380, _109,
	adds	r3, r3, #2	@ tmp381,
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	ldrh	r3, [r3, r7]	@ tmp386, gPaletteBuffer
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	movs	r7, #192	@ tmp385,
	lsls	r7, r7, #7	@ tmp385, tmp385,
	cmp	r3, r7	@ tmp386, tmp385
	sbcs	r3, r3, r3	@ tmp541
	movs	r7, #4	@ tmp542,
	bics	r3, r7	@ NeverRandomizeBeforeThisColour, tmp542
	adds	r3, r3, #5	@ NeverRandomizeBeforeThisColour,
.L658:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	mov	r7, r9	@ classCard, classCard
	cmp	r7, #0	@ classCard,
	bne	.LCB4248	@
	b	.L657	@long jump	@
.LCB4248:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r2, #99	@ AlwaysRandomizePastThisColour,
	b	.L657		@
.L770:
@ Patches/../C_code.c:994: 	if (gPaletteBuffer[(bank * 16) + 1]  >= 0x6000) { NeverRandomizeBeforeThisColour = 5; } 
	movs	r3, #0	@ classCard,
	mov	r9, r3	@ classCard, classCard
	b	.L657		@
.L649:
@ Patches/../C_code.c:1006: 	int result = false; //sizeof(struct BattleUnit);  
	movs	r3, #0	@ result,
	str	r3, [sp, #8]	@ result, %sfp
@ Patches/../C_code.c:1014: 	int classCard = true; 
	adds	r3, r3, #1	@ classCard,
	mov	r9, r3	@ classCard, classCard
	b	.L646		@
.L699:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r2, #99	@ AlwaysRandomizePastThisColour,
	b	.L643		@
.L777:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r2, #99	@ AlwaysRandomizePastThisColour,
	b	.L676		@
.L782:
	.align	2
.L781:
	.word	gProcScr_UnitDisplay_MinimugBox
	.word	gCursorY
	.word	gBmMapUnit
	.word	gCursorX
	.word	GetUnit
	.word	gActiveUnit
	.word	GetUnitPortraitId
	.word	PortraitColoursPastThisAreNotSkin
	.word	gPaletteBuffer
	.word	gFaces
	.word	sFaceConfig
	.word	sFaceConfig+32
	.word	ProcScr_PrepUnitScreen
	.word	GetUnitFromPrepList
	.word	ProcScr_PrepItemScreen
	.word	gProcScr_SupportScreen
.L685:
@ Patches/../C_code.c:1138: 		if (Proc_Find(gProc_ekrBattleDeamon)) { // battle anim 
	ldr	r0, .L783	@ tmp464,
	bl	.L785		@
@ Patches/../C_code.c:1138: 		if (Proc_Find(gProc_ekrBattleDeamon)) { // battle anim 
	cmp	r0, #0	@ tmp574,
	beq	.L686		@,
@ Patches/../C_code.c:1140: 			if (BattleAttackerSideBool) { // swap units 
	ldr	r3, .L783+4	@ tmp514,
	mov	r10, r3	@ tmp514, tmp514
@ Patches/../C_code.c:1140: 			if (BattleAttackerSideBool) { // swap units 
	ldrb	r3, [r3]	@ BattleAttackerSideBool, BattleAttackerSideBool
	cmp	r3, #0	@ BattleAttackerSideBool,
	bne	.L721		@,
@ Patches/../C_code.c:1139: 			unit = &gBattleActorUnit; 
	ldr	r6, .L783+8	@ unit,
.L687:
@ Patches/../C_code.c:1144: 			if (gPaletteBuffer[((7+16) * 16) + 1]  >= 0x7BBE) { offset = 5; } 
	ldr	r3, .L783+12	@ tmp513,
	mov	r9, r3	@ tmp513, tmp513
@ Patches/../C_code.c:1144: 			if (gPaletteBuffer[((7+16) * 16) + 1]  >= 0x7BBE) { offset = 5; } 
	mov	r2, r9	@ tmp513, tmp513
	ldr	r3, .L783+16	@ tmp469,
	ldrh	r2, [r2, r3]	@ tmp474,
@ Patches/../C_code.c:1143: 			int offset = 0; 
	ldr	r3, .L783+20	@ tmp473,
	movs	r5, #5	@ tmp530,
	cmp	r3, r2	@ tmp473, tmp474
	sbcs	r3, r3, r3	@ tmp529
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	movs	r0, r6	@, unit
	ldr	r7, .L783+24	@ tmp512,
@ Patches/../C_code.c:1143: 			int offset = 0; 
	ands	r5, r3	@ offset, tmp529
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	bl	.L223		@
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldr	r3, [r6]	@ _283, unit_86->pCharacterData
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrh	r2, [r3, #6]	@ tmp478,
	cmp	r2, #0	@ tmp478,
	bne	.L689		@,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	movs	r2, #11	@ tmp479,
	ldrsb	r2, [r6, r2]	@ tmp479,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrb	r3, [r3, #4]	@ tmp480,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r2, r0	@ portraitID, tmp479, portraitID
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r3, r0	@ portraitID, tmp480, portraitID
.L689:
@ Patches/../C_code.c:886: 	portraitID &= 0xFF; 
	movs	r3, #255	@ tmp481,
	movs	r1, r3	@ portraitID, tmp481
	ands	r1, r0	@ portraitID, portraitID
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	tst	r3, r0	@ tmp481, portraitID
	bne	.L690		@,
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	movs	r1, #1	@ portraitID,
.L690:
@ Patches/../C_code.c:1146: 			AdjustNonSkinColours(7+16, GetAdjustedPortraitId(unit), 99, offset, fading); 
	mov	r3, r8	@ fading, fading
	movs	r2, #99	@,
	str	r3, [sp]	@ fading,
	movs	r0, #23	@,
	movs	r3, r5	@, offset
	bl	AdjustNonSkinColours		@
@ Patches/../C_code.c:1148: 			if (BattleAttackerSideBool) { // swap units 
	mov	r3, r10	@ tmp514, tmp514
	ldrb	r3, [r3]	@ BattleAttackerSideBool, BattleAttackerSideBool
	cmp	r3, #0	@ BattleAttackerSideBool,
	bne	.L724		@,
@ Patches/../C_code.c:1147: 			unit = &gBattleTargetUnit; 
	ldr	r5, .L783+28	@ unit,
.L691:
@ Patches/../C_code.c:1152: 			if (gPaletteBuffer[((9+16) * 16) + 1]  >= 0x7BBE) { offset = 5; } 
	mov	r1, r9	@ tmp513, tmp513
	ldr	r2, .L783+32	@ tmp485,
	ldr	r3, .L783+20	@ tmp489,
	ldrh	r2, [r1, r2]	@ tmp490,
	cmp	r2, r3	@ tmp490, tmp489
	bls	.L692		@,
@ Patches/../C_code.c:1152: 			if (gPaletteBuffer[((9+16) * 16) + 1]  >= 0x7BBE) { offset = 5; } 
	movs	r4, #5	@ <retval>,
.L692:
@ Patches/../C_code.c:884: 	int portraitID = GetUnitPortraitId(unit);
	movs	r0, r5	@, unit
	bl	.L223		@
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldr	r3, [r5]	@ _295, unit_87->pCharacterData
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrh	r2, [r3, #6]	@ tmp494,
	cmp	r2, #0	@ tmp494,
	bne	.L693		@,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	movs	r2, #11	@ tmp495,
	ldrsb	r2, [r5, r2]	@ tmp495,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	ldrb	r3, [r3, #4]	@ tmp496,
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r2, r0	@ portraitID, tmp495, portraitID
@ Patches/../C_code.c:885: 	if (!unit->pCharacterData->portraitId) { portraitID += unit->index; portraitID += unit->pCharacterData->number;} 
	adds	r0, r3, r0	@ portraitID, tmp496, portraitID
.L693:
@ Patches/../C_code.c:886: 	portraitID &= 0xFF; 
	movs	r3, #255	@ tmp497,
	movs	r1, r3	@ portraitID, tmp497
	ands	r1, r0	@ portraitID, portraitID
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	tst	r3, r0	@ tmp497, portraitID
	bne	.L694		@,
@ Patches/../C_code.c:887: 	if (!portraitID) { portraitID = 1; } 
	movs	r1, #1	@ portraitID,
.L694:
@ Patches/../C_code.c:1153: 			AdjustNonSkinColours(9+16, GetAdjustedPortraitId(unit), 99, offset, fading); 
	mov	r3, r8	@ fading, fading
	movs	r2, #99	@,
	str	r3, [sp]	@ fading,
	movs	r0, #25	@,
	movs	r3, r4	@, <retval>
	bl	AdjustNonSkinColours		@
@ Patches/../C_code.c:1026: 			return true; // so we don't alter prep palettes during stat screen 
	movs	r4, #1	@ <retval>,
	b	.L635		@
.L778:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r2, #99	@ AlwaysRandomizePastThisColour,
	b	.L684		@
.L776:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r2, #99	@ AlwaysRandomizePastThisColour,
	b	.L667		@
.L775:
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r3, #0	@ NeverRandomizeBeforeThisColour,
@ Patches/../C_code.c:996: 	if (classCard) { AlwaysRandomizePastThisColour = 99; NeverRandomizeBeforeThisColour = 0; } 
	movs	r2, #99	@ AlwaysRandomizePastThisColour,
	b	.L653		@
.L774:
@ Patches/../C_code.c:1037: 		if (proc->isRetracting) { unit = GetUnit(gBmMapUnit[proc->yCursorPrev][proc->xCursorPrev]); } 
	movs	r3, #77	@ tmp341,
@ Patches/../C_code.c:1037: 		if (proc->isRetracting) { unit = GetUnit(gBmMapUnit[proc->yCursorPrev][proc->xCursorPrev]); } 
	movs	r2, #76	@ tmp346,
@ Patches/../C_code.c:1037: 		if (proc->isRetracting) { unit = GetUnit(gBmMapUnit[proc->yCursorPrev][proc->xCursorPrev]); } 
	ldrb	r3, [r5, r3]	@ tmp342,
@ Patches/../C_code.c:1037: 		if (proc->isRetracting) { unit = GetUnit(gBmMapUnit[proc->yCursorPrev][proc->xCursorPrev]); } 
	ldr	r1, [r6]	@ gBmMapUnit, gBmMapUnit
	lsls	r3, r3, #2	@ tmp345, tmp342,
@ Patches/../C_code.c:1037: 		if (proc->isRetracting) { unit = GetUnit(gBmMapUnit[proc->yCursorPrev][proc->xCursorPrev]); } 
	ldrb	r2, [r5, r2]	@ tmp347,
@ Patches/../C_code.c:1037: 		if (proc->isRetracting) { unit = GetUnit(gBmMapUnit[proc->yCursorPrev][proc->xCursorPrev]); } 
	ldr	r3, [r3, r1]	@ *_27, *_27
@ Patches/../C_code.c:1037: 		if (proc->isRetracting) { unit = GetUnit(gBmMapUnit[proc->yCursorPrev][proc->xCursorPrev]); } 
	ldrb	r0, [r3, r2]	@ *_31, *_31
	bl	.L557		@
	b	.L647		@
.L724:
@ Patches/../C_code.c:1149: 				unit = &gBattleActorUnit; 
	ldr	r5, .L783+8	@ unit,
	b	.L691		@
.L721:
@ Patches/../C_code.c:1141: 				unit = &gBattleTargetUnit; 
	ldr	r6, .L783+28	@ unit,
	b	.L687		@
.L784:
	.align	2
.L783:
	.word	gProc_ekrBattleDeamon
	.word	BattleAttackerSideBool
	.word	gBattleActorUnit
	.word	gPaletteBuffer
	.word	738
	.word	31677
	.word	GetUnitPortraitId
	.word	gBattleTargetUnit
	.word	802
	.size	MaybeRandomizeColours, .-MaybeRandomizeColours
	.align	1
	.p2align 2,,3
	.global	GetBGMTrack
	.syntax unified
	.code	16
	.thumb_func
	.type	GetBGMTrack, %function
GetBGMTrack:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}	@
@ Patches/../C_code.c:595: 	if (NeverRandomizeBGM) { return false; } 
	ldr	r3, .L794	@ tmp131,
@ Patches/../C_code.c:595: 	if (NeverRandomizeBGM) { return false; } 
	ldr	r3, [r3]	@ NeverRandomizeBGM, NeverRandomizeBGM
@ Patches/../C_code.c:651: int GetBGMTrack(){ // fe7/fe8 only? 
	sub	sp, sp, #20	@,,
@ Patches/../C_code.c:595: 	if (NeverRandomizeBGM) { return false; } 
	cmp	r3, #0	@ NeverRandomizeBGM,
	bne	.L787		@,
@ Patches/../C_code.c:596: 	if (!RandBitflags->randMusic) { return false; } 
	ldr	r2, .L794+4	@ tmp134,
	ldr	r2, [r2]	@ RandBitflags, RandBitflags
@ Patches/../C_code.c:596: 	if (!RandBitflags->randMusic) { return false; } 
	ldrb	r2, [r2, #1]	@ *RandBitflags.19_10, *RandBitflags.19_10
	cmp	r2, #63	@ *RandBitflags.19_10,
	bls	.L787		@,
@ Patches/../C_code.c:653: 	int noise[4] = {1, 2, gCh, 0}; 
	movs	r0, #1	@ tmp138,
	movs	r1, #2	@,
	ldr	r2, .L794+8	@ tmp139,
	ldrb	r5, [r2]	@ _14, gCh
	mov	r2, sp	@ ivtmp.1032,
	str	r3, [sp, #12]	@ NeverRandomizeBGM, noise[3]
@ Patches/../C_code.c:654: 	int number = gPhase; 
	ldr	r3, .L794+12	@ tmp143,
@ Patches/../C_code.c:653: 	int noise[4] = {1, 2, gCh, 0}; 
	str	r0, [sp]	@ tmp138, MEM <vector(2) int> [(int *)&noise]
	str	r1, [sp, #4]	@ tmp138,
@ Patches/../C_code.c:654: 	int number = gPhase; 
	ldrb	r0, [r3]	@ gPhase.27_15, gPhase
@ Patches/../C_code.c:659: 	return MapMusicList[HashByte_Ch(number, sizeof(MapMusicList), noise, gTurn)]; 
	ldr	r3, .L794+16	@ tmp144,
@ Patches/../C_code.c:653: 	int noise[4] = {1, 2, gCh, 0}; 
	str	r5, [sp, #8]	@ _14, noise[2]
@ Patches/../C_code.c:659: 	return MapMusicList[HashByte_Ch(number, sizeof(MapMusicList), noise, gTurn)]; 
	ldrh	r3, [r3]	@ gTurn.28_17, gTurn
	add	r4, sp, #16	@ _9,,
.L788:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r1, [r2]	@ MEM[(int *)_27], MEM[(int *)_27]
	cmp	r1, #0	@ MEM[(int *)_27],
	beq	.L793		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r2, r2, #4	@ ivtmp.1032,
	cmp	r4, r2	@ _9, ivtmp.1032
	bne	.L788		@,
.L791:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	mov	r2, sp	@,
	movs	r1, #29	@,
	bl	HashByte_Global		@
@ Patches/../C_code.c:659: 	return MapMusicList[HashByte_Ch(number, sizeof(MapMusicList), noise, gTurn)]; 
	ldr	r3, .L794+20	@ tmp150,
	adds	r3, r3, r0	@ tmp151, tmp150, tmp155
	ldrb	r0, [r3, #16]	@ <retval>, MapMusicList
	b	.L786		@
.L787:
@ Patches/../C_code.c:652: 	if (!ShouldRandomizeBGM()) { return GetCurrentMapMusicIndex(); } 
	ldr	r3, .L794+24	@ tmp145,
	bl	.L14		@
.L786:
@ Patches/../C_code.c:660: };
	add	sp, sp, #20	@,,
	@ sp needed	@
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L793:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	str	r5, [r2]	@ _14, *_27
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L791		@
.L795:
	.align	2
.L794:
	.word	NeverRandomizeBGM
	.word	RandBitflags
	.word	gCh
	.word	gPhase
	.word	gTurn
	.word	.LANCHOR1
	.word	GetCurrentMapMusicIndex
	.size	GetBGMTrack, .-GetBGMTrack
	.align	1
	.p2align 2,,3
	.global	StartMapSongBgm
	.syntax unified
	.code	16
	.thumb_func
	.type	StartMapSongBgm, %function
StartMapSongBgm:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:710:     StartBgm(GetBGMTrack(), 0); //8003890, 8003210
	bl	GetBGMTrack		@
@ Patches/../C_code.c:712: }
	@ sp needed	@
@ Patches/../C_code.c:710:     StartBgm(GetBGMTrack(), 0); //8003890, 8003210
	movs	r1, #0	@,
	ldr	r3, .L797	@ tmp115,
	bl	.L14		@
@ Patches/../C_code.c:712: }
	pop	{r4}
	pop	{r0}
	bx	r0
.L798:
	.align	2
.L797:
	.word	StartBgm
	.size	StartMapSongBgm, .-StartMapSongBgm
	.align	1
	.p2align 2,,3
	.global	PhaseIntroInitText
	.syntax unified
	.code	16
	.thumb_func
	.type	PhaseIntroInitText, %function
PhaseIntroInitText:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:725:     if (GetCurrentBgmSong() != GetBGMTrack()) // 80034DC, 8002F68
	ldr	r3, .L804	@ tmp119,
@ Patches/../C_code.c:724: {
	movs	r4, r0	@ proc, tmp135
@ Patches/../C_code.c:725:     if (GetCurrentBgmSong() != GetBGMTrack()) // 80034DC, 8002F68
	bl	.L14		@
	movs	r5, r0	@ _1, tmp136
@ Patches/../C_code.c:725:     if (GetCurrentBgmSong() != GetBGMTrack()) // 80034DC, 8002F68
	bl	GetBGMTrack		@
@ Patches/../C_code.c:725:     if (GetCurrentBgmSong() != GetBGMTrack()) // 80034DC, 8002F68
	cmp	r5, r0	@ _1, tmp137
	beq	.L800		@,
@ Patches/../C_code.c:726:         Sound_FadeOutBGM(4); // 80035EC, 8003064
	movs	r0, #4	@,
	ldr	r3, .L804+4	@ tmp120,
	bl	.L14		@
.L800:
@ Patches/../C_code.c:729:     PlaySoundEffect(0x73); // 803DD98, 8036D08
	ldr	r3, .L804+8	@ tmp121,
	ldrb	r3, [r3]	@ gSfx, gSfx
	lsls	r3, r3, #30	@ tmp138, gSfx,
	bpl	.L803		@,
.L801:
@ Patches/../C_code.c:739: }
	@ sp needed	@
@ Patches/../C_code.c:738:     proc->timer = 15;
	movs	r3, #76	@ tmp132,
	movs	r2, #15	@ tmp133,
	strh	r2, [r4, r3]	@ tmp133, proc_11(D)->timer
@ Patches/../C_code.c:739: }
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L803:
@ Patches/../C_code.c:729:     PlaySoundEffect(0x73); // 803DD98, 8036D08
	movs	r0, #115	@,
	ldr	r3, .L804+12	@ tmp131,
	bl	.L14		@
	b	.L801		@
.L805:
	.align	2
.L804:
	.word	GetCurrentBgmSong
	.word	Sound_FadeOutBGM
	.word	gSfx
	.word	m4aSongNumStart
	.size	PhaseIntroInitText, .-PhaseIntroInitText
	.align	1
	.p2align 2,,3
	.global	sub_80328B0
	.syntax unified
	.code	16
	.thumb_func
	.type	sub_80328B0, %function
sub_80328B0:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:742:     int bgmIdx = GetBGMTrack();
	bl	GetBGMTrack		@
@ Patches/../C_code.c:744:     if (GetCurrentBgmSong() != bgmIdx) {
	ldr	r3, .L808	@ tmp116,
@ Patches/../C_code.c:742:     int bgmIdx = GetBGMTrack();
	movs	r4, r0	@ bgmIdx, tmp118
@ Patches/../C_code.c:744:     if (GetCurrentBgmSong() != bgmIdx) {
	bl	.L14		@
@ Patches/../C_code.c:744:     if (GetCurrentBgmSong() != bgmIdx) {
	cmp	r0, r4	@ tmp119, bgmIdx
	beq	.L806		@,
@ Patches/../C_code.c:745:         StartBgmExt(bgmIdx, 6, NULL); //80038AC, 800322C
	movs	r2, #0	@,
	movs	r1, #6	@,
	movs	r0, r4	@, bgmIdx
	ldr	r3, .L808+4	@ tmp117,
	bl	.L14		@
.L806:
@ Patches/../C_code.c:749: }
	@ sp needed	@
	pop	{r4}
	pop	{r0}
	bx	r0
.L809:
	.align	2
.L808:
	.word	GetCurrentBgmSong
	.word	StartBgmExt
	.size	sub_80328B0, .-sub_80328B0
	.align	1
	.p2align 2,,3
	.global	MaybeChangeAi2
	.syntax unified
	.code	16
	.thumb_func
	.type	MaybeChangeAi2, %function
MaybeChangeAi2:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldr	r3, .L823	@ tmp164,
	ldr	r0, [r3]	@ RandBitflags.56_29, RandBitflags
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldr	r3, .L823+4	@ tmp166,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrb	r1, [r0]	@ *RandBitflags.56_29, *RandBitflags.56_29
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrb	r3, [r3]	@ *RecruitValues.57_32, *RecruitValues.57_32
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsls	r2, r1, #30	@ tmp178, *RandBitflags.56_29,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsls	r3, r3, #29	@ tmp171, *RecruitValues.57_32,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsrs	r2, r2, #30	@ tmp179, tmp178,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsrs	r3, r3, #29	@ tmp172, tmp171,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r3, r2	@ tmp181, tmp179
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrh	r2, [r0]	@ *RandBitflags.56_29, *RandBitflags.56_29
	lsls	r2, r2, #23	@ tmp186, *RandBitflags.56_29,
	lsrs	r2, r2, #29	@ tmp187, tmp186,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r3, r2	@ tmp189, tmp187
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrb	r2, [r0, #2]	@ *RandBitflags.56_29, *RandBitflags.56_29
	lsls	r2, r2, #27	@ tmp194, *RandBitflags.56_29,
	lsrs	r2, r2, #30	@ tmp195, tmp194,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r3, r2	@ tmp197, tmp195
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	ldrb	r2, [r0, #1]	@ *RandBitflags.56_29, *RandBitflags.56_29
	lsls	r0, r2, #29	@ tmp202, *RandBitflags.56_29,
	lsrs	r0, r0, #30	@ tmp203, tmp202,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r3, r0	@ tmp205, tmp203
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsls	r0, r2, #28	@ tmp210, *RandBitflags.56_29,
	lsrs	r0, r0, #31	@ tmp211, tmp210,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	lsls	r2, r2, #26	@ tmp218, *RandBitflags.56_29,
	lsrs	r2, r2, #30	@ tmp219, tmp218,
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r3, r0	@ tmp213, tmp211
	orrs	r3, r2	@ tmp221, tmp219
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	movs	r2, #12	@ tmp227,
	ands	r2, r1	@ tmp229, *RandBitflags.56_29
	subs	r1, r2, #1	@ tmp232, tmp229
	sbcs	r2, r2, r1	@ tmp231, tmp229, tmp232
@ Patches/../C_code.c:1197: void MaybeChangeAi2(void) { 
	push	{r4, r5, lr}	@
@ Patches/../C_code.c:1189: 	return RandBitflags->base | RecruitValues->recruitment | ((RandBitflags->growth != 4) && (RandBitflags->growth)) | RandBitflags->caps | RandBitflags->itemStats | RandBitflags->class | RandBitflags->shopItems | RandBitflags->foundItems; 
	orrs	r3, r2	@ tmp233, tmp231
@ Patches/../C_code.c:1197: void MaybeChangeAi2(void) { 
	sub	sp, sp, #20	@,,
@ Patches/../C_code.c:1198: 	if (IsAnythingRandomized()) { 
	cmp	r3, #0	@ tmp233,
	beq	.L810		@,
@ Patches/../C_code.c:1199: 		if (gActiveUnit->ai2 == 3) { 
	ldr	r3, .L823+8	@ tmp234,
	ldr	r4, [r3]	@ gActiveUnit.65_2, gActiveUnit
	movs	r3, #68	@ tmp235,
@ Patches/../C_code.c:1199: 		if (gActiveUnit->ai2 == 3) { 
	ldrb	r3, [r4, r3]	@ tmp236,
	cmp	r3, #3	@ tmp236,
	beq	.L821		@,
.L810:
@ Patches/../C_code.c:1209: } 
	add	sp, sp, #20	@,,
	@ sp needed	@
	pop	{r4, r5}
	pop	{r0}
	bx	r0
.L821:
@ Patches/../C_code.c:1200: 			if (UNIT_CATTRIBUTES(gActiveUnit) & CA_BOSS) { return; } 
	ldr	r1, [r4]	@ _4, gActiveUnit.65_2->pCharacterData
	ldr	r2, [r4, #4]	@ _6, gActiveUnit.65_2->pClassData
	ldr	r3, [r1, #40]	@ _4->attributes, _4->attributes
	ldr	r0, [r2, #40]	@ _6->attributes, _6->attributes
	orrs	r3, r0	@ tmp237, _6->attributes
@ Patches/../C_code.c:1200: 			if (UNIT_CATTRIBUTES(gActiveUnit) & CA_BOSS) { return; } 
	lsls	r3, r3, #16	@ tmp264, tmp237,
	bmi	.L810		@,
@ Patches/../C_code.c:1201: 			if (gTurn > 10) { 
	ldr	r3, .L823+12	@ tmp242,
	ldrh	r5, [r3]	@ gTurn.68_10, gTurn
@ Patches/../C_code.c:1201: 			if (gTurn > 10) { 
	cmp	r5, #10	@ gTurn.68_10,
	bls	.L810		@,
@ Patches/../C_code.c:1202: 				int noise[4] = { gActiveUnit->pCharacterData->number, gActiveUnit->pClassData->number, 0, 0 }; 
	ldrb	r3, [r1, #4]	@ tmp246,
	str	r3, [sp]	@ tmp246, noise[0]
@ Patches/../C_code.c:1202: 				int noise[4] = { gActiveUnit->pCharacterData->number, gActiveUnit->pClassData->number, 0, 0 }; 
	ldrb	r3, [r2, #4]	@ tmp248,
@ Patches/../C_code.c:1202: 				int noise[4] = { gActiveUnit->pCharacterData->number, gActiveUnit->pClassData->number, 0, 0 }; 
	movs	r2, #0	@ tmp249,
@ Patches/../C_code.c:1202: 				int noise[4] = { gActiveUnit->pCharacterData->number, gActiveUnit->pClassData->number, 0, 0 }; 
	str	r3, [sp, #4]	@ tmp248, noise[1]
@ Patches/../C_code.c:1202: 				int noise[4] = { gActiveUnit->pCharacterData->number, gActiveUnit->pClassData->number, 0, 0 }; 
	movs	r3, #0	@,
	str	r2, [sp, #8]	@ tmp249, MEM <vector(2) int> [(int *)&noise + 8B]
	str	r3, [sp, #12]	@ tmp249,
	mov	r3, sp	@ ivtmp.1054,
	add	r1, sp, #16	@ _121,,
.L814:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_59], MEM[(int *)_59]
	cmp	r2, #0	@ MEM[(int *)_59],
	beq	.L822		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.1054,
	cmp	r1, r3	@ _121, ivtmp.1054
	bne	.L814		@,
.L813:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	movs	r3, r5	@, gTurn.68_10
	movs	r0, r5	@, gTurn.68_10
	mov	r2, sp	@,
	movs	r1, #100	@,
	bl	HashByte_Global		@
@ Patches/../C_code.c:1203: 				if (HashByte_Ch(gTurn, 100, noise, gTurn) < ((gTurn) * 2)) { 
	lsls	r5, r5, #1	@ tmp256, gTurn.68_10,
@ Patches/../C_code.c:1203: 				if (HashByte_Ch(gTurn, 100, noise, gTurn) < ((gTurn) * 2)) { 
	cmp	r0, r5	@ tmp262, tmp256
	bge	.L810		@,
@ Patches/../C_code.c:1204: 					gActiveUnit->ai2 = 0; 
	movs	r3, #68	@ tmp257,
	movs	r2, #0	@ tmp258,
	strb	r2, [r4, r3]	@ tmp258, gActiveUnit.65_2->ai2
	b	.L810		@
.L822:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, .L823+16	@ tmp251,
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r3]	@ gCh, *_59
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L813		@
.L824:
	.align	2
.L823:
	.word	RandBitflags
	.word	RecruitValues
	.word	gActiveUnit
	.word	gTurn
	.word	gCh
	.size	MaybeChangeAi2, .-MaybeChangeAi2
	.align	1
	.p2align 2,,3
	.global	HashByte_GlobalOld
	.syntax unified
	.code	16
	.thumb_func
	.type	HashByte_GlobalOld, %function
HashByte_GlobalOld:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:1416: u16 HashByte_GlobalOld(int number, int max, int noise[], int offset) {
	movs	r5, r0	@ number, tmp212
	subs	r4, r1, #0	@ max, tmp213,
@ Patches/../C_code.c:1417: 	if (max==0) return 0;
	beq	.L829		@,
@ Patches/../C_code.c:1423: 	offset &= 0xFF; 
	movs	r6, #255	@ tmp179,
@ Patches/../C_code.c:1418: 	offset += noise[0]*3; 
	ldr	r0, [r2]	@ *noise_40(D), *noise_40(D)
	lsls	r1, r0, #1	@ tmp163, *noise_40(D),
	adds	r1, r1, r0	@ tmp164, tmp163, *noise_40(D)
@ Patches/../C_code.c:1419: 	offset += noise[1]*5; 
	ldr	r0, [r2, #4]	@ MEM[(int *)noise_40(D) + 4B], MEM[(int *)noise_40(D) + 4B]
@ Patches/../C_code.c:1418: 	offset += noise[0]*3; 
	adds	r1, r1, r3	@ offset, tmp164, offset
@ Patches/../C_code.c:1419: 	offset += noise[1]*5; 
	lsls	r3, r0, #2	@ tmp167, MEM[(int *)noise_40(D) + 4B],
	adds	r3, r3, r0	@ tmp168, tmp167, MEM[(int *)noise_40(D) + 4B]
@ Patches/../C_code.c:1420: 	offset += noise[2]*7; 
	ldr	r0, [r2, #8]	@ MEM[(int *)noise_40(D) + 8B], MEM[(int *)noise_40(D) + 8B]
@ Patches/../C_code.c:1419: 	offset += noise[1]*5; 
	adds	r3, r3, r1	@ offset, tmp168, offset
@ Patches/../C_code.c:1420: 	offset += noise[2]*7; 
	lsls	r1, r0, #3	@ tmp171, MEM[(int *)noise_40(D) + 8B],
	subs	r1, r1, r0	@ tmp172, tmp171, MEM[(int *)noise_40(D) + 8B]
@ Patches/../C_code.c:1421: 	offset += noise[3]*11; 
	ldr	r0, [r2, #12]	@ MEM[(int *)noise_40(D) + 12B], MEM[(int *)noise_40(D) + 12B]
@ Patches/../C_code.c:1420: 	offset += noise[2]*7; 
	adds	r1, r1, r3	@ offset, tmp172, offset
@ Patches/../C_code.c:1421: 	offset += noise[3]*11; 
	lsls	r3, r0, #2	@ tmp175, MEM[(int *)noise_40(D) + 12B],
	adds	r3, r3, r0	@ tmp176, tmp175, MEM[(int *)noise_40(D) + 12B]
	lsls	r3, r3, #1	@ tmp177, tmp176,
	adds	r0, r3, r0	@ tmp178, tmp177, MEM[(int *)noise_40(D) + 12B]
@ Patches/../C_code.c:1427: 	u8 seed[3] = { (RandValues->seed & 0xFF), (RandValues->seed&0xFF00)>>8, (RandValues->seed&0xFF0000)>>16 }; 
	ldr	r3, .L834	@ tmp181,
	ldr	r3, [r3]	@ RandValues, RandValues
@ Patches/../C_code.c:1425: 	hash = ((hash << 5) + hash) ^ number;
	ldr	r7, .L834+4	@ tmp185,
@ Patches/../C_code.c:1421: 	offset += noise[3]*11; 
	adds	r0, r0, r1	@ offset, tmp178, offset
@ Patches/../C_code.c:1427: 	u8 seed[3] = { (RandValues->seed & 0xFF), (RandValues->seed&0xFF00)>>8, (RandValues->seed&0xFF0000)>>16 }; 
	ldr	r1, [r3]	@ *RandValues.100_10, *RandValues.100_10
@ Patches/../C_code.c:1425: 	hash = ((hash << 5) + hash) ^ number;
	eors	r5, r7	@ hash, tmp185
@ Patches/../C_code.c:1427: 	u8 seed[3] = { (RandValues->seed & 0xFF), (RandValues->seed&0xFF00)>>8, (RandValues->seed&0xFF0000)>>16 }; 
	lsls	r3, r1, #12	@ tmp183, *RandValues.100_10,
	lsls	r7, r5, #5	@ tmp187, hash,
@ Patches/../C_code.c:1429: 		hash = ((hash << 5) + hash) ^ seed[i];
	lsls	r1, r1, #24	@ tmp190, *RandValues.100_10,
	adds	r5, r7, r5	@ tmp188, tmp187, hash
	lsrs	r1, r1, #24	@ tmp189, tmp190,
@ Patches/../C_code.c:1429: 		hash = ((hash << 5) + hash) ^ seed[i];
	eors	r1, r5	@ hash, tmp188
	lsls	r5, r1, #5	@ tmp193, hash,
	adds	r5, r5, r1	@ tmp194, tmp193, hash
@ Patches/../C_code.c:1427: 	u8 seed[3] = { (RandValues->seed & 0xFF), (RandValues->seed&0xFF00)>>8, (RandValues->seed&0xFF0000)>>16 }; 
	lsrs	r1, r3, #20	@ tmp195, tmp183,
@ Patches/../C_code.c:1429: 		hash = ((hash << 5) + hash) ^ seed[i];
	ands	r1, r6	@ tmp197, tmp179
@ Patches/../C_code.c:1423: 	offset &= 0xFF; 
	ands	r0, r6	@ offset, tmp179
	movs	r6, r2	@ _102, ivtmp.1066
@ Patches/../C_code.c:1429: 		hash = ((hash << 5) + hash) ^ seed[i];
	eors	r1, r5	@ hash, tmp194
	lsls	r5, r1, #5	@ tmp200, hash,
	adds	r5, r5, r1	@ tmp201, tmp200, hash
@ Patches/../C_code.c:1427: 	u8 seed[3] = { (RandValues->seed & 0xFF), (RandValues->seed&0xFF00)>>8, (RandValues->seed&0xFF0000)>>16 }; 
	lsrs	r1, r3, #28	@ tmp202, tmp183,
@ Patches/../C_code.c:1429: 		hash = ((hash << 5) + hash) ^ seed[i];
	eors	r1, r5	@ hash, tmp201
	adds	r6, r6, #16	@ _102,
.L828:
@ Patches/../C_code.c:1433: 		if (!noise[i]) { continue; } 
	ldr	r3, [r2]	@ _34, MEM[(int *)_104]
@ Patches/../C_code.c:1433: 		if (!noise[i]) { continue; } 
	cmp	r3, #0	@ _34,
	beq	.L827		@,
	lsls	r5, r1, #5	@ tmp204, hash,
	adds	r1, r5, r1	@ tmp205, tmp204, hash
@ Patches/../C_code.c:1434: 		hash = ((hash << 5) + hash) ^ noise[i];
	eors	r1, r3	@ hash, _34
.L827:
@ Patches/../C_code.c:1432: 	for (int i = 0; i < 4; ++i){
	adds	r2, r2, #4	@ ivtmp.1066,
	cmp	r2, r6	@ ivtmp.1066, _102
	bne	.L828		@,
@ Patches/../C_code.c:1436: 	hash = GetNthRN(offset + 1, hash); 
	adds	r0, r0, #1	@ tmp206,
	bl	GetNthRN		@
@ Patches/../C_code.c:1438: 	return Mod((hash & 0x2FFFFFFF), max);
	movs	r1, r4	@, max
	ldr	r3, .L834+8	@ tmp209,
	bl	.L14		@
@ Patches/../C_code.c:1438: 	return Mod((hash & 0x2FFFFFFF), max);
	lsls	r0, r0, #16	@ tmp210, tmp217,
	lsrs	r0, r0, #16	@ <retval>, tmp210,
.L826:
@ Patches/../C_code.c:1439: }; 
	@ sp needed	@
	pop	{r3, r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L829:
@ Patches/../C_code.c:1417: 	if (max==0) return 0;
	movs	r0, #0	@ <retval>,
	b	.L826		@
.L835:
	.align	2
.L834:
	.word	RandValues
	.word	177573
	.word	Mod
	.size	HashByte_GlobalOld, .-HashByte_GlobalOld
	.align	1
	.p2align 2,,3
	.global	HashByte_Ch
	.syntax unified
	.code	16
	.thumb_func
	.type	HashByte_Ch, %function
HashByte_Ch:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
	movs	r6, r2	@ _25, noise
	movs	r4, r2	@ ivtmp.1076, noise
	adds	r6, r6, #16	@ _25,
.L839:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r5, [r4]	@ MEM[(int *)_3], MEM[(int *)_3]
	cmp	r5, #0	@ MEM[(int *)_3],
	beq	.L841		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r4, r4, #4	@ ivtmp.1076,
	cmp	r4, r6	@ ivtmp.1076, _25
	bne	.L839		@,
.L838:
@ Patches/../C_code.c:1447: };
	@ sp needed	@
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	bl	HashByte_Global		@
@ Patches/../C_code.c:1447: };
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L841:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r5, .L842	@ tmp126,
	ldrb	r5, [r5]	@ gCh, gCh
	str	r5, [r4]	@ gCh, *_3
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L838		@
.L843:
	.align	2
.L842:
	.word	gCh
	.size	HashByte_Ch, .-HashByte_Ch
	.global	__aeabi_uidiv
	.global	__aeabi_idiv
	.align	1
	.p2align 2,,3
	.global	HashPercent
	.syntax unified
	.code	16
	.thumb_func
	.type	HashPercent, %function
HashPercent:
	@ Function supports interworking.
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r9	@,
	mov	r9, r3	@ global, tmp216
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	mvns	r3, r0	@ tmp200, number
@ Patches/../C_code.c:1449: s16 HashPercent(int number, int noise[], int offset, int global, int earlygamePromo){
	movs	r5, r0	@ number, tmp213
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	asrs	r3, r3, #31	@ tmp199, tmp200,
	ands	r5, r3	@ _25, tmp199
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	ldr	r3, .L868	@ tmp147,
	ldr	r3, [r3]	@ RandValues, RandValues
@ Patches/../C_code.c:1449: s16 HashPercent(int number, int noise[], int offset, int global, int earlygamePromo){
	push	{lr}	@
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	ldrh	r4, [r3, #2]	@ *RandValues.110_1, *RandValues.110_1
@ Patches/../C_code.c:1452: 	if (earlygamePromo == 3) { // 2/3rds
	ldr	r3, [sp, #24]	@ tmp230, earlygamePromo
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	lsls	r4, r4, #23	@ tmp152, *RandValues.110_1,
@ Patches/../C_code.c:1449: s16 HashPercent(int number, int noise[], int offset, int global, int earlygamePromo){
	movs	r7, r1	@ noise, tmp214
	movs	r6, r2	@ offset, tmp215
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	lsrs	r4, r4, #27	@ _3, tmp152,
@ Patches/../C_code.c:1452: 	if (earlygamePromo == 3) { // 2/3rds
	cmp	r3, #3	@ tmp230,
	beq	.L846		@,
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	lsls	r3, r4, #2	@ tmp155, _3,
	adds	r4, r3, r4	@ variation, tmp155, _3
@ Patches/../C_code.c:1458: 	if (global) { 
	mov	r3, r9	@ global, global
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	lsls	r1, r4, #1	@ _61, variation,
@ Patches/../C_code.c:1458: 	if (global) { 
	cmp	r3, #0	@ global,
	beq	.L848		@,
.L851:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	movs	r3, r6	@, offset
	movs	r2, r7	@, noise
	movs	r0, r5	@, _25
	bl	HashByte_Global		@
@ Patches/../C_code.c:1463: 	if (earlygamePromo == 1) { if (percentage > 125) { percentage = percentage >> 1; } }
	ldr	r3, [sp, #24]	@ tmp233, earlygamePromo
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	subs	r4, r0, r4	@ tmp177, percentage, variation
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	adds	r4, r4, #100	@ percentage,
@ Patches/../C_code.c:1463: 	if (earlygamePromo == 1) { if (percentage > 125) { percentage = percentage >> 1; } }
	cmp	r3, #1	@ tmp233,
	beq	.L866		@,
@ Patches/../C_code.c:1464: 	if (earlygamePromo == 2) { if (percentage > 150) { percentage = percentage >> 1; } }
	ldr	r3, [sp, #24]	@ tmp234, earlygamePromo
	cmp	r3, #2	@ tmp234,
	bne	.L854		@,
	movs	r3, #1	@ tmp184,
	cmp	r4, #150	@ percentage,
	bgt	.L855		@,
	movs	r3, #0	@ tmp184,
.L855:
	lsls	r3, r3, #24	@ tmp189, tmp184,
	bne	.L865		@,
.L854:
@ Patches/../C_code.c:1465: 	int ret = Div1((percentage * number), 100); //1.5 * 120 (we want to negate this)
	movs	r1, #100	@,
	movs	r0, r5	@ tmp190, _25
	muls	r0, r4	@ tmp190, percentage
	ldr	r6, .L868+4	@ tmp191,
	bl	.L341		@
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	cmp	r0, #127	@ ret,
	ble	.L856		@,
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r0, #200	@ tmp192,
	subs	r0, r0, r4	@ tmp193, tmp192, percentage
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r1, #100	@,
	muls	r0, r5	@ tmp194, _25
	bl	.L341		@
.L856:
@ Patches/../C_code.c:1469: };
	@ sp needed	@
@ Patches/../C_code.c:1467: 	if (ret < 0) ret = 0;
	mvns	r3, r0	@ tmp207, ret
	asrs	r3, r3, #31	@ tmp206, tmp207,
	ands	r0, r3	@ ret, tmp206
@ Patches/../C_code.c:1468: 	return ret;
	lsls	r0, r0, #16	@ ret, ret,
	asrs	r0, r0, #16	@ ret, ret,
@ Patches/../C_code.c:1469: };
	pop	{r7}
	mov	r9, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L866:
@ Patches/../C_code.c:1463: 	if (earlygamePromo == 1) { if (percentage > 125) { percentage = percentage >> 1; } }
	cmp	r4, #125	@ percentage,
	ble	.L854		@,
.L865:
@ Patches/../C_code.c:1464: 	if (earlygamePromo == 2) { if (percentage > 150) { percentage = percentage >> 1; } }
	asrs	r4, r4, #1	@ percentage, percentage,
	b	.L854		@
.L846:
@ Patches/../C_code.c:1453: 		variation += variation; 
	lsls	r0, r4, #2	@ tmp158, _3,
	adds	r0, r0, r4	@ tmp159, tmp158, _3
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	movs	r1, #3	@,
	ldr	r3, .L868+8	@ tmp167,
@ Patches/../C_code.c:1453: 		variation += variation; 
	lsls	r0, r0, #1	@ tmp160, tmp159,
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	bl	.L14		@
@ Patches/../C_code.c:1458: 	if (global) { 
	mov	r3, r9	@ global, global
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	movs	r4, r0	@ variation, tmp217
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	lsls	r1, r4, #1	@ _61, variation,
@ Patches/../C_code.c:1458: 	if (global) { 
	cmp	r3, #0	@ global,
	bne	.L851		@,
.L848:
	movs	r0, r7	@ _4, noise
	movs	r3, r7	@ ivtmp.1087, noise
	adds	r0, r0, #16	@ _4,
.L852:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_41], MEM[(int *)_41]
	cmp	r2, #0	@ MEM[(int *)_41],
	beq	.L867		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.1087,
	cmp	r0, r3	@ _4, ivtmp.1087
	bne	.L852		@,
	b	.L851		@
.L867:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, .L868+12	@ tmp172,
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r3]	@ gCh, *_41
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L851		@
.L869:
	.align	2
.L868:
	.word	RandValues
	.word	Div1
	.word	__aeabi_idiv
	.word	gCh
	.size	HashPercent, .-HashPercent
	.align	1
	.p2align 2,,3
	.global	HashByPercent_Ch
	.syntax unified
	.code	16
	.thumb_func
	.type	HashByPercent_Ch, %function
HashByPercent_Ch:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{lr}	@
	sub	sp, sp, #12	@,,
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	str	r3, [sp]	@ tmp125,
	movs	r3, #0	@,
	bl	HashPercent		@
@ Patches/../C_code.c:1473: };
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r1}
	bx	r1
	.size	HashByPercent_Ch, .-HashByPercent_Ch
	.align	1
	.p2align 2,,3
	.global	HashByPercent
	.syntax unified
	.code	16
	.thumb_func
	.type	HashByPercent, %function
HashByPercent:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movs	r3, r2	@ offset, tmp167
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	mvns	r2, r0	@ tmp162, number
@ Patches/../C_code.c:1475: s16 HashByPercent(int number, int noise[], int offset){
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:1475: s16 HashByPercent(int number, int noise[], int offset){
	movs	r4, r0	@ number, tmp165
	movs	r6, r1	@ noise, tmp166
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	asrs	r2, r2, #31	@ tmp161, tmp162,
	ands	r4, r2	@ _7, tmp161
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	ldr	r2, .L875	@ tmp134,
	ldr	r2, [r2]	@ RandValues, RandValues
	ldrh	r0, [r2, #2]	@ *RandValues.110_8, *RandValues.110_8
	lsls	r0, r0, #23	@ tmp139, *RandValues.110_8,
	lsrs	r0, r0, #27	@ _10, tmp139,
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	lsls	r5, r0, #2	@ tmp142, _10,
	adds	r5, r5, r0	@ tmp143, tmp142, _10
	lsls	r1, r5, #1	@ tmp144, tmp143,
	movs	r2, r6	@, noise
	movs	r0, r4	@, _7
	bl	HashByte_Global		@
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	subs	r5, r0, r5	@ tmp151, tmp168, tmp143
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	adds	r5, r5, #100	@ percentage,
@ Patches/../C_code.c:1465: 	int ret = Div1((percentage * number), 100); //1.5 * 120 (we want to negate this)
	movs	r1, #100	@,
	movs	r0, r5	@ tmp152, percentage
	muls	r0, r4	@ tmp152, _7
	ldr	r6, .L875+4	@ tmp153,
	bl	.L341		@
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	cmp	r0, #127	@ ret,
	ble	.L873		@,
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r0, #200	@ tmp154,
	subs	r0, r0, r5	@ tmp155, tmp154, percentage
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r1, #100	@,
	muls	r0, r4	@ tmp156, _7
	bl	.L341		@
.L873:
@ Patches/../C_code.c:1477: };
	@ sp needed	@
@ Patches/../C_code.c:1467: 	if (ret < 0) ret = 0;
	mvns	r3, r0	@ tmp164, ret
	asrs	r3, r3, #31	@ tmp163, tmp164,
	ands	r0, r3	@ ret, tmp163
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	lsls	r0, r0, #16	@ ret, ret,
	asrs	r0, r0, #16	@ ret, ret,
@ Patches/../C_code.c:1477: };
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L876:
	.align	2
.L875:
	.word	RandValues
	.word	Div1
	.size	HashByPercent, .-HashByPercent
	.align	1
	.p2align 2,,3
	.global	HashByTwoThirdsPercent
	.syntax unified
	.code	16
	.thumb_func
	.type	HashByTwoThirdsPercent, %function
HashByTwoThirdsPercent:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	mvns	r3, r0	@ tmp170, number
@ Patches/../C_code.c:1479: s16 HashByTwoThirdsPercent(int number, int noise[], int offset){
	movs	r4, r0	@ number, tmp173
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	asrs	r3, r3, #31	@ tmp169, tmp170,
	ands	r4, r3	@ _7, tmp169
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	ldr	r3, .L881	@ tmp135,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldrh	r5, [r3, #2]	@ *RandValues.110_8, *RandValues.110_8
	lsls	r5, r5, #23	@ tmp140, *RandValues.110_8,
	lsrs	r5, r5, #27	@ tmp141, tmp140,
@ Patches/../C_code.c:1453: 		variation += variation; 
	lsls	r0, r5, #2	@ tmp144, tmp141,
	adds	r0, r0, r5	@ tmp145, tmp144, tmp141
@ Patches/../C_code.c:1479: s16 HashByTwoThirdsPercent(int number, int noise[], int offset){
	movs	r6, r1	@ noise, tmp174
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	ldr	r3, .L881+4	@ tmp153,
	movs	r1, #3	@,
@ Patches/../C_code.c:1453: 		variation += variation; 
	lsls	r0, r0, #1	@ tmp146, tmp145,
@ Patches/../C_code.c:1479: s16 HashByTwoThirdsPercent(int number, int noise[], int offset){
	movs	r7, r2	@ offset, tmp175
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	bl	.L14		@
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	movs	r2, r6	@, noise
	lsls	r1, r0, #1	@ tmp155, tmp154,
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	movs	r5, r0	@ tmp154, tmp176
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	movs	r3, r7	@, offset
	movs	r0, r4	@, _7
	bl	HashByte_Global		@
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	subs	r5, r0, r5	@ tmp159, tmp177, tmp154
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	adds	r5, r5, #100	@ percentage,
@ Patches/../C_code.c:1465: 	int ret = Div1((percentage * number), 100); //1.5 * 120 (we want to negate this)
	movs	r1, #100	@,
	movs	r0, r5	@ tmp160, percentage
	muls	r0, r4	@ tmp160, _7
	ldr	r6, .L881+8	@ tmp161,
	bl	.L341		@
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	cmp	r0, #127	@ ret,
	ble	.L879		@,
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r0, #200	@ tmp162,
	subs	r0, r0, r5	@ tmp163, tmp162, percentage
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r1, #100	@,
	muls	r0, r4	@ tmp164, _7
	bl	.L341		@
.L879:
@ Patches/../C_code.c:1481: };
	@ sp needed	@
@ Patches/../C_code.c:1467: 	if (ret < 0) ret = 0;
	mvns	r3, r0	@ tmp172, ret
	asrs	r3, r3, #31	@ tmp171, tmp172,
	ands	r0, r3	@ ret, tmp171
@ Patches/../C_code.c:1480: 	return HashPercent(number, noise, offset, true, 3);
	lsls	r0, r0, #16	@ ret, ret,
	asrs	r0, r0, #16	@ ret, ret,
@ Patches/../C_code.c:1481: };
	pop	{r3, r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L882:
	.align	2
.L881:
	.word	RandValues
	.word	__aeabi_idiv
	.word	Div1
	.size	HashByTwoThirdsPercent, .-HashByTwoThirdsPercent
	.align	1
	.p2align 2,,3
	.global	GetRNByID
	.syntax unified
	.code	16
	.thumb_func
	.type	GetRNByID, %function
GetRNByID:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
	movs	r4, r0	@ id, tmp128
	sub	sp, sp, #16	@,,
@ Patches/../C_code.c:1484: 	int noise[4] = { 0, 0, 0, 0 };
	movs	r2, #16	@,
	movs	r1, #0	@,
	ldr	r3, .L886	@ tmp121,
	mov	r0, sp	@,
	bl	.L14		@
@ Patches/../C_code.c:1485: 	int result = HashByte_Global(5, 254, noise, id)+1;
	movs	r3, r4	@, id
	mov	r2, sp	@,
	movs	r1, #254	@,
	movs	r0, #5	@,
	bl	HashByte_Global		@
	movs	r3, r0	@ tmp125, tmp129
@ Patches/../C_code.c:1485: 	int result = HashByte_Global(5, 254, noise, id)+1;
	adds	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:1486: 	if (result < 40) { result += 40; } 
	cmp	r0, #39	@ <retval>,
	bgt	.L884		@,
@ Patches/../C_code.c:1486: 	if (result < 40) { result += 40; } 
	adds	r3, r3, #41	@ tmp125,
	movs	r0, r3	@ <retval>, tmp125
.L883:
@ Patches/../C_code.c:1489: }
	add	sp, sp, #16	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L884:
@ Patches/../C_code.c:1487: 	if (result > 210) { result -= 40; } 
	cmp	r0, #210	@ <retval>,
	ble	.L883		@,
@ Patches/../C_code.c:1487: 	if (result > 210) { result -= 40; } 
	subs	r3, r3, #39	@ tmp125,
	movs	r0, r3	@ <retval>, tmp125
@ Patches/../C_code.c:1488: 	return result; 
	b	.L883		@
.L887:
	.align	2
.L886:
	.word	memset
	.size	GetRNByID, .-GetRNByID
	.align	1
	.p2align 2,,3
	.global	HashMight
	.syntax unified
	.code	16
	.thumb_func
	.type	HashMight, %function
HashMight:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:1493: 	if (!RandBitflags->itemStats) { return number; } 
	movs	r2, #24	@ tmp145,
	ldr	r3, .L897	@ tmp139,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.111_1, *RandBitflags.111_1
@ Patches/../C_code.c:1492: s16 HashMight(int number, int noise[]) { 
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:1492: s16 HashMight(int number, int noise[]) { 
	movs	r5, r1	@ noise, tmp190
@ Patches/../C_code.c:1493: 	if (!RandBitflags->itemStats) { return number; } 
	tst	r2, r3	@ tmp145, *RandBitflags.111_1
	beq	.L895		@,
@ Patches/../C_code.c:1494: 	if (number == 255) { return number; } // eclipse 
	cmp	r0, #255	@ number,
	beq	.L894		@,
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	mvns	r4, r0	@ tmp186, number
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	ldr	r3, .L897+4	@ tmp150,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldrh	r3, [r3, #2]	@ *RandValues.110_18, *RandValues.110_18
	lsls	r3, r3, #23	@ tmp155, *RandValues.110_18,
	lsrs	r3, r3, #27	@ tmp156, tmp155,
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	asrs	r4, r4, #31	@ tmp185, tmp186,
	ands	r4, r0	@ _17, number
@ Patches/../C_code.c:1453: 		variation += variation; 
	lsls	r0, r3, #2	@ tmp159, tmp156,
	adds	r0, r0, r3	@ tmp160, tmp159, tmp156
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	movs	r1, #3	@,
	ldr	r3, .L897+8	@ tmp168,
@ Patches/../C_code.c:1453: 		variation += variation; 
	lsls	r0, r0, #1	@ tmp161, tmp160,
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	bl	.L14		@
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	movs	r2, r5	@, noise
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	movs	r6, r0	@ tmp169, tmp191
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	lsls	r1, r0, #1	@ tmp170, tmp169,
	movs	r3, #0	@,
	movs	r0, r4	@, _17
	bl	HashByte_Global		@
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	subs	r5, r0, r6	@ tmp174, tmp192, tmp169
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	adds	r5, r5, #100	@ percentage,
@ Patches/../C_code.c:1465: 	int ret = Div1((percentage * number), 100); //1.5 * 120 (we want to negate this)
	movs	r1, #100	@,
	movs	r0, r5	@ tmp175, percentage
	muls	r0, r4	@ tmp175, _17
	ldr	r6, .L897+12	@ tmp176,
	bl	.L341		@
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	cmp	r0, #127	@ ret,
	bgt	.L896		@,
.L892:
@ Patches/../C_code.c:1467: 	if (ret < 0) ret = 0;
	mvns	r3, r0	@ tmp188, ret
	asrs	r3, r3, #31	@ tmp187, tmp188,
	ands	r0, r3	@ ret, tmp187
@ Patches/../C_code.c:1495: 	return HashByTwoThirdsPercent(number, noise, 0)+2; 
	adds	r0, r0, #2	@ tmp183,
.L895:
	lsls	r0, r0, #16	@ <retval>, tmp183,
	asrs	r0, r0, #16	@ <retval>, <retval>,
.L890:
@ Patches/../C_code.c:1496: } 
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L896:
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r0, #200	@ tmp177,
	subs	r0, r0, r5	@ tmp178, tmp177, percentage
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r1, #100	@,
	muls	r0, r4	@ tmp179, _17
	bl	.L341		@
	b	.L892		@
.L894:
@ Patches/../C_code.c:1494: 	if (number == 255) { return number; } // eclipse 
	movs	r0, #255	@ <retval>,
	b	.L890		@
.L898:
	.align	2
.L897:
	.word	RandBitflags
	.word	RandValues
	.word	__aeabi_idiv
	.word	Div1
	.size	HashMight, .-HashMight
	.align	1
	.p2align 2,,3
	.global	HashHit
	.syntax unified
	.code	16
	.thumb_func
	.type	HashHit, %function
HashHit:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:1499: 	if (!RandBitflags->itemStats) { return number; } 
	movs	r2, #24	@ tmp135,
	ldr	r3, .L904	@ tmp129,
@ Patches/../C_code.c:1498: s16 HashHit(int number, int noise[]) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:1499: 	if (!RandBitflags->itemStats) { return number; } 
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.112_1, *RandBitflags.112_1
@ Patches/../C_code.c:1498: s16 HashHit(int number, int noise[]) { 
	movs	r4, r1	@ noise, tmp150
	sub	sp, sp, #8	@,,
@ Patches/../C_code.c:1499: 	if (!RandBitflags->itemStats) { return number; } 
	tst	r2, r3	@ tmp135, *RandBitflags.112_1
	bne	.L900		@,
@ Patches/../C_code.c:1499: 	if (!RandBitflags->itemStats) { return number; } 
	lsls	r0, r0, #16	@ <retval>, number,
	asrs	r0, r0, #16	@ <retval>, <retval>,
.L901:
@ Patches/../C_code.c:1504: } 
	add	sp, sp, #8	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L900:
@ Patches/../C_code.c:1480: 	return HashPercent(number, noise, offset, true, 3);
	movs	r3, #3	@ tmp139,
	movs	r2, #0	@,
	str	r3, [sp]	@ tmp139,
	subs	r3, r3, #2	@,
	bl	HashPercent		@
@ Patches/../C_code.c:1501: 	if (number < 50) number += number + (noise[0] & 0x1F) + 30; 
	cmp	r0, #49	@ number,
	bgt	.L902		@,
@ Patches/../C_code.c:1501: 	if (number < 50) number += number + (noise[0] & 0x1F) + 30; 
	movs	r2, #31	@ tmp142,
	ldr	r3, [r4]	@ *noise_9(D), *noise_9(D)
	ands	r3, r2	@ tmp143, tmp142
@ Patches/../C_code.c:1501: 	if (number < 50) number += number + (noise[0] & 0x1F) + 30; 
	adds	r3, r3, r0	@ tmp145, tmp143, number
@ Patches/../C_code.c:1501: 	if (number < 50) number += number + (noise[0] & 0x1F) + 30; 
	adds	r3, r3, #30	@ _17,
@ Patches/../C_code.c:1501: 	if (number < 50) number += number + (noise[0] & 0x1F) + 30; 
	adds	r0, r0, r3	@ number, number, _17
.L902:
@ Patches/../C_code.c:1502: 	if (number > MaxWeaponHitrate) { number = MaxWeaponHitrate; } 
	ldr	r3, .L904+4	@ tmp147,
@ Patches/../C_code.c:1502: 	if (number > MaxWeaponHitrate) { number = MaxWeaponHitrate; } 
	ldr	r3, [r3]	@ MaxWeaponHitrate, MaxWeaponHitrate
	cmp	r3, r0	@ MaxWeaponHitrate, number
	ble	.L903		@,
	movs	r3, r0	@ MaxWeaponHitrate, number
.L903:
@ Patches/../C_code.c:1503: 	return number; 
	lsls	r0, r3, #16	@ <retval>, MaxWeaponHitrate,
	asrs	r0, r0, #16	@ <retval>, <retval>,
	b	.L901		@
.L905:
	.align	2
.L904:
	.word	RandBitflags
	.word	MaxWeaponHitrate
	.size	HashHit, .-HashHit
	.align	1
	.p2align 2,,3
	.global	HashCrit
	.syntax unified
	.code	16
	.thumb_func
	.type	HashCrit, %function
HashCrit:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movs	r2, r1	@ noise, tmp178
@ Patches/../C_code.c:1506: 	if (!RandBitflags->itemStats) { return number; } 
	movs	r1, #24	@ tmp142,
	ldr	r3, .L915	@ tmp136,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.114_1, *RandBitflags.114_1
@ Patches/../C_code.c:1505: s16 HashCrit(int number, int noise[]) { 
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:1506: 	if (!RandBitflags->itemStats) { return number; } 
	tst	r1, r3	@ tmp142, *RandBitflags.114_1
	beq	.L913		@,
@ Patches/../C_code.c:1507: 	if (number == 255) { return number; } // weps that cannot crit  
	cmp	r0, #255	@ number,
	beq	.L912		@,
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	mvns	r4, r0	@ tmp174, number
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	ldr	r3, .L915+4	@ tmp147,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldrh	r3, [r3, #2]	@ *RandValues.110_15, *RandValues.110_15
	lsls	r3, r3, #23	@ tmp152, *RandValues.110_15,
	lsrs	r3, r3, #27	@ _17, tmp152,
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	lsls	r5, r3, #2	@ tmp155, _17,
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	asrs	r4, r4, #31	@ tmp173, tmp174,
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	adds	r5, r5, r3	@ tmp156, tmp155, _17
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	ands	r4, r0	@ _14, number
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	lsls	r1, r5, #1	@ tmp157, tmp156,
	movs	r3, #0	@,
	movs	r0, r4	@, _14
	bl	HashByte_Global		@
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	subs	r5, r0, r5	@ tmp164, tmp179, tmp156
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	adds	r5, r5, #100	@ percentage,
@ Patches/../C_code.c:1465: 	int ret = Div1((percentage * number), 100); //1.5 * 120 (we want to negate this)
	movs	r1, #100	@,
	movs	r0, r5	@ tmp165, percentage
	muls	r0, r4	@ tmp165, _14
	ldr	r6, .L915+8	@ tmp166,
	bl	.L341		@
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	cmp	r0, #127	@ ret,
	bgt	.L914		@,
.L910:
@ Patches/../C_code.c:1467: 	if (ret < 0) ret = 0;
	mvns	r3, r0	@ tmp176, ret
	asrs	r3, r3, #31	@ tmp175, tmp176,
	ands	r0, r3	@ ret, tmp175
.L913:
@ Patches/../C_code.c:1468: 	return ret;
	lsls	r0, r0, #16	@ <retval>, ret,
	asrs	r0, r0, #16	@ <retval>, <retval>,
.L908:
@ Patches/../C_code.c:1509: } 
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L914:
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r0, #200	@ tmp167,
	subs	r0, r0, r5	@ tmp168, tmp167, percentage
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r1, #100	@,
	muls	r0, r4	@ tmp169, _14
	bl	.L341		@
	b	.L910		@
.L912:
@ Patches/../C_code.c:1507: 	if (number == 255) { return number; } // weps that cannot crit  
	movs	r0, #255	@ <retval>,
	b	.L908		@
.L916:
	.align	2
.L915:
	.word	RandBitflags
	.word	RandValues
	.word	Div1
	.size	HashCrit, .-HashCrit
	.align	1
	.p2align 2,,3
	.global	HashWeight
	.syntax unified
	.code	16
	.thumb_func
	.type	HashWeight, %function
HashWeight:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:1511: 	if (!RandBitflags->itemStats) { return number; } 
	movs	r2, #24	@ tmp143,
	ldr	r3, .L924	@ tmp137,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.115_1, *RandBitflags.115_1
@ Patches/../C_code.c:1510: s16 HashWeight(int number, int noise[]) { 
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:1510: s16 HashWeight(int number, int noise[]) { 
	movs	r5, r1	@ noise, tmp186
@ Patches/../C_code.c:1511: 	if (!RandBitflags->itemStats) { return number; } 
	tst	r2, r3	@ tmp143, *RandBitflags.115_1
	bne	.L918		@,
.L923:
@ Patches/../C_code.c:1513: } 
	@ sp needed	@
@ Patches/../C_code.c:1468: 	return ret;
	lsls	r0, r0, #16	@ <retval>, ret,
	asrs	r0, r0, #16	@ <retval>, <retval>,
@ Patches/../C_code.c:1513: } 
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L918:
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	mvns	r4, r0	@ tmp182, number
@ Patches/../C_code.c:1451: 	int variation = (RandValues->variance)*5;
	ldr	r3, .L924+4	@ tmp148,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldrh	r3, [r3, #2]	@ *RandValues.110_15, *RandValues.110_15
	lsls	r3, r3, #23	@ tmp153, *RandValues.110_15,
	lsrs	r3, r3, #27	@ tmp154, tmp153,
@ Patches/../C_code.c:1450: 	if (number < 0) number = 0;
	asrs	r4, r4, #31	@ tmp181, tmp182,
	ands	r4, r0	@ _14, number
@ Patches/../C_code.c:1453: 		variation += variation; 
	lsls	r0, r3, #2	@ tmp157, tmp154,
	adds	r0, r0, r3	@ tmp158, tmp157, tmp154
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	movs	r1, #3	@,
	ldr	r3, .L924+8	@ tmp166,
@ Patches/../C_code.c:1453: 		variation += variation; 
	lsls	r0, r0, #1	@ tmp159, tmp158,
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	bl	.L14		@
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	movs	r2, r5	@, noise
@ Patches/../C_code.c:1454: 		variation = variation / 3; 
	movs	r6, r0	@ tmp167, tmp187
@ Patches/../C_code.c:1459: 		percentage = HashByte_Global(number, variation*2, noise, offset); //rn up to 150 e.g. 125
	lsls	r1, r0, #1	@ tmp168, tmp167,
	movs	r3, #0	@,
	movs	r0, r4	@, _14
	bl	HashByte_Global		@
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	subs	r5, r0, r6	@ tmp172, tmp188, tmp167
@ Patches/../C_code.c:1462: 	percentage += (100-variation); // 125 + 25 = 150
	adds	r5, r5, #100	@ percentage,
@ Patches/../C_code.c:1465: 	int ret = Div1((percentage * number), 100); //1.5 * 120 (we want to negate this)
	movs	r1, #100	@,
	movs	r0, r5	@ tmp173, percentage
	muls	r0, r4	@ tmp173, _14
	ldr	r6, .L924+12	@ tmp174,
	bl	.L341		@
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	cmp	r0, #127	@ ret,
	ble	.L921		@,
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r0, #200	@ tmp175,
	subs	r0, r0, r5	@ tmp176, tmp175, percentage
@ Patches/../C_code.c:1466: 	if (ret > 127) ret = Div1((200 - percentage) * number, 100);
	movs	r1, #100	@,
	muls	r0, r4	@ tmp177, _14
	bl	.L341		@
.L921:
@ Patches/../C_code.c:1467: 	if (ret < 0) ret = 0;
	mvns	r3, r0	@ tmp184, ret
	asrs	r3, r3, #31	@ tmp183, tmp184,
	ands	r0, r3	@ ret, tmp183
	b	.L923		@
.L925:
	.align	2
.L924:
	.word	RandBitflags
	.word	RandValues
	.word	__aeabi_idiv
	.word	Div1
	.size	HashWeight, .-HashWeight
	.align	1
	.p2align 2,,3
	.global	GetItemMight
	.syntax unified
	.code	16
	.thumb_func
	.type	GetItemMight, %function
GetItemMight:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:1536: 	item &= 0xFF; 
	movs	r4, #255	@ tmp126,
@ Patches/../C_code.c:1535: int GetItemMight(int item) { 
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1537: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:1536: 	item &= 0xFF; 
	ands	r4, r0	@ item, tmp153
@ Patches/../C_code.c:1537: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L934	@ tmp130,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:1539: 	int might = GetItemData(item&0xFF)->might;
	ldr	r3, .L934+4	@ tmp134,
	movs	r0, r4	@, item
@ Patches/../C_code.c:1538: 	noise[0] = item; 
	str	r4, [sp, #8]	@ item, noise[0]
@ Patches/../C_code.c:1539: 	int might = GetItemData(item&0xFF)->might;
	bl	.L14		@
@ Patches/../C_code.c:1493: 	if (!RandBitflags->itemStats) { return number; } 
	movs	r2, #24	@ tmp142,
	ldr	r3, .L934+8	@ tmp136,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.111_14, *RandBitflags.111_14
@ Patches/../C_code.c:1539: 	int might = GetItemData(item&0xFF)->might;
	ldrb	r0, [r0, #21]	@ <retval>,
@ Patches/../C_code.c:1493: 	if (!RandBitflags->itemStats) { return number; } 
	tst	r2, r3	@ tmp142, *RandBitflags.111_14
	beq	.L926		@,
@ Patches/../C_code.c:1494: 	if (number == 255) { return number; } // eclipse 
	cmp	r0, #255	@ <retval>,
	beq	.L926		@,
@ Patches/../C_code.c:1480: 	return HashPercent(number, noise, offset, true, 3);
	movs	r3, #3	@ tmp147,
	movs	r2, #0	@,
	str	r3, [sp]	@ tmp147,
	add	r1, sp, #8	@,,
	subs	r3, r3, #2	@,
	bl	HashPercent		@
@ Patches/../C_code.c:1495: 	return HashByTwoThirdsPercent(number, noise, 0)+2; 
	adds	r0, r0, #2	@ tmp151,
@ Patches/../C_code.c:1540: 	return HashMight(might, noise); 
	lsls	r0, r0, #16	@ <retval>, tmp151,
	asrs	r0, r0, #16	@ <retval>, <retval>,
.L926:
@ Patches/../C_code.c:1541: } 
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L935:
	.align	2
.L934:
	.word	memset
	.word	GetItemData
	.word	RandBitflags
	.size	GetItemMight, .-GetItemMight
	.align	1
	.p2align 2,,3
	.global	GetItemHit
	.syntax unified
	.code	16
	.thumb_func
	.type	GetItemHit, %function
GetItemHit:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:1544: 	item &= 0xFF; 
	movs	r4, #255	@ tmp121,
@ Patches/../C_code.c:1543: int GetItemHit(int item) { 
	sub	sp, sp, #16	@,,
@ Patches/../C_code.c:1545: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:1544: 	item &= 0xFF; 
	ands	r4, r0	@ item, tmp135
@ Patches/../C_code.c:1545: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L937	@ tmp125,
	add	r0, sp, #4	@,,
	bl	.L14		@
@ Patches/../C_code.c:1547: 	int hit = GetItemData(item&0xFF)->hit;
	ldr	r3, .L937+4	@ tmp129,
	movs	r0, r4	@, item
@ Patches/../C_code.c:1546: 	noise[0] = item; 
	str	r4, [sp]	@ item, noise[0]
@ Patches/../C_code.c:1547: 	int hit = GetItemData(item&0xFF)->hit;
	bl	.L14		@
@ Patches/../C_code.c:1548: 	return HashHit(hit, noise); 
	mov	r1, sp	@,
@ Patches/../C_code.c:1547: 	int hit = GetItemData(item&0xFF)->hit;
	ldrb	r0, [r0, #22]	@ hit,
@ Patches/../C_code.c:1548: 	return HashHit(hit, noise); 
	bl	HashHit		@
@ Patches/../C_code.c:1549: } 
	add	sp, sp, #16	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L938:
	.align	2
.L937:
	.word	memset
	.word	GetItemData
	.size	GetItemHit, .-GetItemHit
	.align	1
	.p2align 2,,3
	.global	GetItemCrit
	.syntax unified
	.code	16
	.thumb_func
	.type	GetItemCrit, %function
GetItemCrit:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:1552: 	item &= 0xFF; 
	movs	r4, #255	@ tmp123,
@ Patches/../C_code.c:1551: int GetItemCrit(int item) { 
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1553: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:1552: 	item &= 0xFF; 
	ands	r4, r0	@ item, tmp148
@ Patches/../C_code.c:1553: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L947	@ tmp127,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:1555: 	int crit = GetItemData(item&0xFF)->crit;
	ldr	r3, .L947+4	@ tmp131,
	movs	r0, r4	@, item
@ Patches/../C_code.c:1554: 	noise[0] = item; 
	str	r4, [sp, #8]	@ item, noise[0]
@ Patches/../C_code.c:1555: 	int crit = GetItemData(item&0xFF)->crit;
	bl	.L14		@
@ Patches/../C_code.c:1506: 	if (!RandBitflags->itemStats) { return number; } 
	movs	r2, #24	@ tmp139,
	ldr	r3, .L947+8	@ tmp133,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.114_14, *RandBitflags.114_14
@ Patches/../C_code.c:1555: 	int crit = GetItemData(item&0xFF)->crit;
	ldrb	r0, [r0, #24]	@ <retval>,
@ Patches/../C_code.c:1506: 	if (!RandBitflags->itemStats) { return number; } 
	tst	r2, r3	@ tmp139, *RandBitflags.114_14
	beq	.L939		@,
@ Patches/../C_code.c:1507: 	if (number == 255) { return number; } // weps that cannot crit  
	cmp	r0, #255	@ <retval>,
	beq	.L939		@,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp144,
	movs	r2, #0	@,
	str	r3, [sp]	@ tmp144,
	add	r1, sp, #8	@,,
	adds	r3, r3, #1	@,
	bl	HashPercent		@
.L939:
@ Patches/../C_code.c:1557: } 
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L948:
	.align	2
.L947:
	.word	memset
	.word	GetItemData
	.word	RandBitflags
	.size	GetItemCrit, .-GetItemCrit
	.align	1
	.p2align 2,,3
	.global	GetItemWeight
	.syntax unified
	.code	16
	.thumb_func
	.type	GetItemWeight, %function
GetItemWeight:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:1560: 	item &= 0xFF; 
	movs	r4, #255	@ tmp123,
@ Patches/../C_code.c:1559: int GetItemWeight(int item) { 
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1561: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:1560: 	item &= 0xFF; 
	ands	r4, r0	@ item, tmp148
@ Patches/../C_code.c:1561: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L954	@ tmp127,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:1563: 	int weight = GetItemData(item&0xFF)->weight;
	ldr	r3, .L954+4	@ tmp131,
	movs	r0, r4	@, item
@ Patches/../C_code.c:1562: 	noise[0] = item; 
	str	r4, [sp, #8]	@ item, noise[0]
@ Patches/../C_code.c:1563: 	int weight = GetItemData(item&0xFF)->weight;
	bl	.L14		@
@ Patches/../C_code.c:1511: 	if (!RandBitflags->itemStats) { return number; } 
	movs	r2, #24	@ tmp139,
	ldr	r3, .L954+8	@ tmp133,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #2]	@ *RandBitflags.115_14, *RandBitflags.115_14
@ Patches/../C_code.c:1563: 	int weight = GetItemData(item&0xFF)->weight;
	ldrb	r0, [r0, #23]	@ <retval>,
@ Patches/../C_code.c:1511: 	if (!RandBitflags->itemStats) { return number; } 
	tst	r2, r3	@ tmp139, *RandBitflags.115_14
	beq	.L949		@,
@ Patches/../C_code.c:1480: 	return HashPercent(number, noise, offset, true, 3);
	movs	r3, #3	@ tmp144,
	movs	r2, #0	@,
	str	r3, [sp]	@ tmp144,
	add	r1, sp, #8	@,,
	subs	r3, r3, #2	@,
	bl	HashPercent		@
.L949:
@ Patches/../C_code.c:1565: } 
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L955:
	.align	2
.L954:
	.word	memset
	.word	GetItemData
	.word	RandBitflags
	.size	GetItemWeight, .-GetItemWeight
	.align	1
	.p2align 2,,3
	.global	BuildAvailableClassList
	.syntax unified
	.code	16
	.thumb_func
	.type	BuildAvailableClassList, %function
BuildAvailableClassList:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
	mov	r7, r10	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
	mov	lr, fp	@,
@ Patches/../C_code.c:1573: 	list[0] = 0; // count 
	movs	r3, #0	@ tmp156,
@ Patches/../C_code.c:1570: u8* BuildAvailableClassList(u8 list[], int promotedBitflag, int allegiance) {
	push	{r5, r6, r7, lr}	@
@ Patches/../C_code.c:1573: 	list[0] = 0; // count 
	strb	r3, [r0]	@ tmp156, *list_29(D)
@ Patches/../C_code.c:1583: 		const struct ClassData* table = GetClassData(i); 
	ldr	r3, .L983	@ tmp221,
	mov	r9, r3	@ tmp221, tmp221
@ Patches/../C_code.c:1592: 		int wexp = table->baseRanks[0]; 
	movs	r3, #44	@ tmp222,
	mov	fp, r3	@ tmp222, tmp222
@ Patches/../C_code.c:1601: 		if (IncludeMonstersWithoutWEXP) { 
	ldr	r3, .L983+4	@ tmp223,
@ Patches/../C_code.c:1580: 	for (int i = 1; i <= GetMaxClasses(); i++) { 
	movs	r4, #1	@ i,
@ Patches/../C_code.c:1570: u8* BuildAvailableClassList(u8 list[], int promotedBitflag, int allegiance) {
	movs	r6, r0	@ list, tmp224
	movs	r7, r1	@ promotedBitflag, tmp225
	mov	r8, r2	@ allegiance, tmp226
@ Patches/../C_code.c:1601: 		if (IncludeMonstersWithoutWEXP) { 
	mov	r10, r3	@ tmp223, tmp223
	ldr	r5, .L983+8	@ ivtmp.1133,
@ Patches/../C_code.c:1580: 	for (int i = 1; i <= GetMaxClasses(); i++) { 
	bl	GetMaxClasses		@
@ Patches/../C_code.c:1580: 	for (int i = 1; i <= GetMaxClasses(); i++) { 
	cmp	r0, r4	@ tmp228, i
	blt	.L982		@,
.L966:
@ Patches/../C_code.c:1582: 		if (IsClassInvalid(i)) { continue; } 
	ldrb	r3, [r5]	@ MEM[(unsigned char *)_74], MEM[(unsigned char *)_74]
	cmp	r3, #0	@ MEM[(unsigned char *)_74],
	bne	.L959		@,
@ Patches/../C_code.c:1583: 		const struct ClassData* table = GetClassData(i); 
	movs	r0, r4	@, i
	bl	.L557		@
@ Patches/../C_code.c:1584: 		attr = table->attributes; 
	ldr	r2, [r0, #40]	@ _1, table_37->attributes
@ Patches/../C_code.c:1585: 		if (!promotedBitflag) { if (attr & CA_PROMOTED) { continue; } } 
	cmp	r7, #0	@ promotedBitflag,
	bne	.L960		@,
@ Patches/../C_code.c:1585: 		if (!promotedBitflag) { if (attr & CA_PROMOTED) { continue; } } 
	lsls	r3, r2, #23	@ tmp229, _1,
	bmi	.L959		@,
.L962:
@ Patches/../C_code.c:1588: 		if (!allegiance) { // no enemy bards / dancers 
	mov	r3, r8	@ allegiance, allegiance
	cmp	r3, #0	@ allegiance,
	bne	.L963		@,
@ Patches/../C_code.c:1589: 			if (attrExceptions & attr) { list[0]++; list[list[0]] = i; } 
	adds	r3, r3, #48	@ tmp164,
	tst	r3, r2	@ tmp164, _1
	beq	.L963		@,
@ Patches/../C_code.c:1589: 			if (attrExceptions & attr) { list[0]++; list[list[0]] = i; } 
	ldrb	r3, [r6]	@ *list_29(D), *list_29(D)
	adds	r3, r3, #1	@ tmp168,
	lsls	r3, r3, #24	@ tmp169, tmp168,
	lsrs	r3, r3, #24	@ _4, tmp169,
	strb	r3, [r6]	@ _4, *list_29(D)
@ Patches/../C_code.c:1589: 			if (attrExceptions & attr) { list[0]++; list[list[0]] = i; } 
	strb	r4, [r6, r3]	@ i, *_6
.L963:
@ Patches/../C_code.c:1599: 		wexp |= table->baseRanks[7]; 
	mov	r3, fp	@ tmp222, tmp222
	movs	r1, #45	@ tmp173,
	ldrb	r3, [r0, r3]	@ tmp175,
	ldrb	r1, [r0, r1]	@ tmp177,
	orrs	r3, r1	@ tmp178, tmp177
@ Patches/../C_code.c:1594: 		wexp |= table->baseRanks[2]; 
	movs	r1, #46	@ tmp179,
@ Patches/../C_code.c:1599: 		wexp |= table->baseRanks[7]; 
	ldrb	r1, [r0, r1]	@ tmp182,
	orrs	r3, r1	@ tmp183, tmp182
@ Patches/../C_code.c:1595: 		wexp |= table->baseRanks[3]; 
	movs	r1, #47	@ tmp184,
@ Patches/../C_code.c:1599: 		wexp |= table->baseRanks[7]; 
	ldrb	r1, [r0, r1]	@ tmp187,
	orrs	r3, r1	@ tmp188, tmp187
@ Patches/../C_code.c:1596: 		wexp |= table->baseRanks[4]; 
	movs	r1, #48	@ tmp189,
@ Patches/../C_code.c:1599: 		wexp |= table->baseRanks[7]; 
	ldrb	r1, [r0, r1]	@ tmp192,
	orrs	r3, r1	@ tmp193, tmp192
@ Patches/../C_code.c:1597: 		wexp |= table->baseRanks[5]; 
	movs	r1, #49	@ tmp194,
@ Patches/../C_code.c:1599: 		wexp |= table->baseRanks[7]; 
	ldrb	r1, [r0, r1]	@ tmp197,
	orrs	r3, r1	@ tmp198, tmp197
@ Patches/../C_code.c:1598: 		wexp |= table->baseRanks[6]; 
	movs	r1, #50	@ tmp199,
@ Patches/../C_code.c:1599: 		wexp |= table->baseRanks[7]; 
	ldrb	r1, [r0, r1]	@ tmp202,
	orrs	r3, r1	@ tmp203, tmp202
@ Patches/../C_code.c:1599: 		wexp |= table->baseRanks[7]; 
	movs	r1, #51	@ tmp204,
@ Patches/../C_code.c:1599: 		wexp |= table->baseRanks[7]; 
	ldrb	r1, [r0, r1]	@ tmp207,
	orrs	r3, r1	@ wexp, tmp207
@ Patches/../C_code.c:1601: 		if (IncludeMonstersWithoutWEXP) { 
	mov	r1, r10	@ tmp223, tmp223
	ldr	r1, [r1]	@ IncludeMonstersWithoutWEXP, IncludeMonstersWithoutWEXP
	cmp	r1, #0	@ IncludeMonstersWithoutWEXP,
	beq	.L964		@,
@ Patches/../C_code.c:1602: 			if ((!wexp) && (!(attr & CA_LOCK_3))) { // Dragons or Monster depending of game
	cmp	r3, #0	@ wexp,
	bne	.L965		@,
@ Patches/../C_code.c:1602: 			if ((!wexp) && (!(attr & CA_LOCK_3))) { // Dragons or Monster depending of game
	lsls	r2, r2, #13	@ tmp231, _1,
	bpl	.L959		@,
.L965:
@ Patches/../C_code.c:1610: 		list[0]++; list[list[0]] = i;
	ldrb	r3, [r6]	@ *list_29(D), *list_29(D)
	adds	r3, r3, #1	@ tmp216,
	lsls	r3, r3, #24	@ tmp217, tmp216,
	lsrs	r3, r3, #24	@ _19, tmp217,
	strb	r3, [r6]	@ _19, *list_29(D)
@ Patches/../C_code.c:1610: 		list[0]++; list[list[0]] = i;
	strb	r4, [r6, r3]	@ i, *_21
.L959:
@ Patches/../C_code.c:1580: 	for (int i = 1; i <= GetMaxClasses(); i++) { 
	adds	r4, r4, #1	@ i,
	adds	r5, r5, #2	@ ivtmp.1133,
@ Patches/../C_code.c:1580: 	for (int i = 1; i <= GetMaxClasses(); i++) { 
	bl	GetMaxClasses		@
@ Patches/../C_code.c:1580: 	for (int i = 1; i <= GetMaxClasses(); i++) { 
	cmp	r0, r4	@ tmp228, i
	bge	.L966		@,
.L982:
@ Patches/../C_code.c:1614: } 
	@ sp needed	@
	movs	r0, r6	@, list
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r3, r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L960:
@ Patches/../C_code.c:1586: 		else if (!(attr & CA_PROMOTED)) { continue; } 
	lsls	r3, r2, #23	@ tmp230, _1,
	bmi	.L962		@,
	b	.L959		@
.L964:
@ Patches/../C_code.c:1606: 		else if (!wexp) { 
	cmp	r3, #0	@ wexp,
	bne	.L965		@,
	b	.L959		@
.L984:
	.align	2
.L983:
	.word	GetClassData
	.word	IncludeMonstersWithoutWEXP
	.word	ClassExceptions+3
	.size	BuildAvailableClassList, .-BuildAvailableClassList
	.align	1
	.p2align 2,,3
	.global	RandClass
	.syntax unified
	.code	16
	.thumb_func
	.type	RandClass, %function
RandClass:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 256
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	movs	r4, r0	@ id, tmp171
	sub	sp, sp, #260	@,,
@ Patches/../C_code.c:1618: 	if (!ShouldRandomizeClass(unit)) { return id; } 
	movs	r0, r2	@, unit
@ Patches/../C_code.c:1617: int RandClass(int id, int noise[], struct Unit* unit) { 
	movs	r6, r1	@ noise, tmp172
	movs	r5, r2	@ unit, tmp173
@ Patches/../C_code.c:1618: 	if (!ShouldRandomizeClass(unit)) { return id; } 
	bl	ShouldRandomizeClass		@
@ Patches/../C_code.c:1618: 	if (!ShouldRandomizeClass(unit)) { return id; } 
	cmp	r0, #0	@ tmp174,
	beq	.L986		@,
@ Patches/../C_code.c:1619: 	if (ClassExceptions[id].NeverChangeFrom) { return id; } 
	ldr	r3, .L999	@ tmp142,
	lsls	r2, r4, #1	@ tmp143, id,
@ Patches/../C_code.c:1619: 	if (ClassExceptions[id].NeverChangeFrom) { return id; } 
	ldrb	r3, [r2, r3]	@ tmp144, ClassExceptions
	cmp	r3, #0	@ tmp144,
	beq	.L997		@,
.L986:
@ Patches/../C_code.c:1631: } 
	movs	r0, r4	@, id
	add	sp, sp, #260	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L997:
@ Patches/../C_code.c:1623: 	list[0] = 99; 
	mov	r2, sp	@ tmp180,
@ Patches/../C_code.c:1620: 	int allegiance = (unit->index)>>6;
	movs	r7, #11	@ tmp145,
@ Patches/../C_code.c:1623: 	list[0] = 99; 
	adds	r3, r3, #99	@ tmp150,
@ Patches/../C_code.c:1620: 	int allegiance = (unit->index)>>6;
	ldrsb	r7, [r5, r7]	@ tmp145,
@ Patches/../C_code.c:1623: 	list[0] = 99; 
	strb	r3, [r2]	@ tmp150, list[0]
@ Patches/../C_code.c:1624: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ldr	r3, [r5]	@ unit_19(D)->pCharacterData, unit_19(D)->pCharacterData
@ Patches/../C_code.c:1624: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	movs	r0, r4	@, id
@ Patches/../C_code.c:1624: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ldr	r5, [r3, #40]	@ _6, _5->attributes
@ Patches/../C_code.c:1624: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ldr	r3, .L999+4	@ tmp153,
	bl	.L14		@
@ Patches/../C_code.c:1624: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	movs	r3, #128	@ tmp157,
@ Patches/../C_code.c:1624: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ldr	r1, [r0, #40]	@ _7->attributes, _7->attributes
@ Patches/../C_code.c:1624: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	lsls	r3, r3, #1	@ tmp157, tmp157,
@ Patches/../C_code.c:1620: 	int allegiance = (unit->index)>>6;
	asrs	r7, r7, #6	@ allegiance, tmp145,
@ Patches/../C_code.c:1624: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	orrs	r1, r5	@ tmp154, _6
@ Patches/../C_code.c:1624: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ands	r1, r3	@ promotedBitflag, tmp157
@ Patches/../C_code.c:1626: 	BuildAvailableClassList(list, promotedBitflag, allegiance); 
	movs	r2, r7	@, allegiance
	mov	r0, sp	@,
	bl	BuildAvailableClassList		@
@ Patches/../C_code.c:1627: 	id = HashByte_Ch(id, list[0]+1, noise, 0);
	mov	r3, sp	@ tmp181,
	movs	r0, r6	@ _52, noise
	ldrb	r1, [r3]	@ list, list
	movs	r3, r6	@ ivtmp.1145, noise
@ Patches/../C_code.c:1627: 	id = HashByte_Ch(id, list[0]+1, noise, 0);
	adds	r1, r1, #1	@ _12,
	adds	r0, r0, #16	@ _52,
.L989:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_35], MEM[(int *)_35]
	cmp	r2, #0	@ MEM[(int *)_35],
	beq	.L998		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.1145,
	cmp	r0, r3	@ _52, ivtmp.1145
	bne	.L989		@,
.L988:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	movs	r3, #0	@,
	movs	r2, r6	@, noise
	movs	r0, r4	@, id
	bl	HashByte_Global		@
@ Patches/../C_code.c:1628: 	if (!id) { id = 1; } // never 0  
	cmp	r0, #0	@ id,
	bne	.L990		@,
@ Patches/../C_code.c:1628: 	if (!id) { id = 1; } // never 0  
	adds	r0, r0, #1	@ id,
.L990:
@ Patches/../C_code.c:1629: 	if (!list[id]) { return 1; } // never 0 
	mov	r3, sp	@ tmp183,
	ldrb	r4, [r3, r0]	@ _14, list
@ Patches/../C_code.c:1629: 	if (!list[id]) { return 1; } // never 0 
	cmp	r4, #0	@ _14,
	bne	.L986		@,
@ Patches/../C_code.c:1629: 	if (!list[id]) { return 1; } // never 0 
	adds	r4, r4, #1	@ id,
	b	.L986		@
.L998:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, .L999+8	@ tmp163,
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r3]	@ gCh, *_35
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L988		@
.L1000:
	.align	2
.L999:
	.word	ClassExceptions
	.word	GetClassData
	.word	gCh
	.size	RandClass, .-RandClass
	.align	1
	.p2align 2,,3
	.global	RandClass2
	.syntax unified
	.code	16
	.thumb_func
	.type	RandClass2, %function
RandClass2:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 256
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	movs	r4, r0	@ id, tmp170
	sub	sp, sp, #260	@,,
@ Patches/../C_code.c:1635: 	if (!ShouldRandomizeClass(unit)) { return id; } 
	movs	r0, r2	@, unit
@ Patches/../C_code.c:1633: int RandClass2(int id, u8 noise[], struct Unit* unit) {  
	movs	r6, r1	@ noise, tmp171
	movs	r5, r2	@ unit, tmp172
@ Patches/../C_code.c:1635: 	if (!ShouldRandomizeClass(unit)) { return id; } 
	bl	ShouldRandomizeClass		@
@ Patches/../C_code.c:1635: 	if (!ShouldRandomizeClass(unit)) { return id; } 
	cmp	r0, #0	@ tmp173,
	beq	.L1002		@,
@ Patches/../C_code.c:1636: 	if (ClassExceptions[id].NeverChangeFrom) { return id; } 
	ldr	r3, .L1011	@ tmp137,
	lsls	r2, r4, #1	@ tmp138, id,
@ Patches/../C_code.c:1636: 	if (ClassExceptions[id].NeverChangeFrom) { return id; } 
	ldrb	r3, [r2, r3]	@ tmp139, ClassExceptions
	cmp	r3, #0	@ tmp139,
	beq	.L1009		@,
.L1002:
@ Patches/../C_code.c:1648: } 
	movs	r0, r4	@, id
	add	sp, sp, #260	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1009:
@ Patches/../C_code.c:1640: 	list[0] = 99; 
	mov	r2, sp	@ tmp179,
@ Patches/../C_code.c:1637: 	int allegiance = (unit->index)>>6;
	movs	r7, #11	@ tmp140,
@ Patches/../C_code.c:1640: 	list[0] = 99; 
	adds	r3, r3, #99	@ tmp145,
@ Patches/../C_code.c:1637: 	int allegiance = (unit->index)>>6;
	ldrsb	r7, [r5, r7]	@ tmp140,
@ Patches/../C_code.c:1640: 	list[0] = 99; 
	strb	r3, [r2]	@ tmp145, list[0]
@ Patches/../C_code.c:1641: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ldr	r3, [r5]	@ unit_7(D)->pCharacterData, unit_7(D)->pCharacterData
@ Patches/../C_code.c:1641: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	movs	r0, r4	@, id
@ Patches/../C_code.c:1641: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ldr	r5, [r3, #40]	@ _15, _14->attributes
@ Patches/../C_code.c:1641: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ldr	r3, .L1011+4	@ tmp148,
	bl	.L14		@
@ Patches/../C_code.c:1641: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	movs	r3, #128	@ tmp152,
@ Patches/../C_code.c:1641: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ldr	r1, [r0, #40]	@ _16->attributes, _16->attributes
@ Patches/../C_code.c:1641: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	lsls	r3, r3, #1	@ tmp152, tmp152,
@ Patches/../C_code.c:1637: 	int allegiance = (unit->index)>>6;
	asrs	r7, r7, #6	@ allegiance, tmp140,
@ Patches/../C_code.c:1641: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	orrs	r1, r5	@ tmp149, _15
@ Patches/../C_code.c:1641: 	int promotedBitflag = (unit->pCharacterData->attributes | GetClassData(id)->attributes)& CA_PROMOTED;
	ands	r1, r3	@ promotedBitflag, tmp152
@ Patches/../C_code.c:1643: 	BuildAvailableClassList(list, promotedBitflag, allegiance); 
	movs	r2, r7	@, allegiance
	mov	r0, sp	@,
	bl	BuildAvailableClassList		@
@ Patches/../C_code.c:1644: 	id = HashByte_Class(id, list[0]+1, noise, 0);
	mov	r3, sp	@ tmp180,
	ldrb	r1, [r3]	@ list, list
@ Patches/../C_code.c:1644: 	id = HashByte_Class(id, list[0]+1, noise, 0);
	movs	r2, r6	@, noise
	movs	r3, #0	@,
	movs	r0, r4	@, id
	adds	r1, r1, #1	@ tmp157,
	bl	HashByte_Class		@
@ Patches/../C_code.c:1645: 	if (!id) { id = 1; } // never 0  
	cmp	r0, #0	@ id,
	bne	.L1003		@,
@ Patches/../C_code.c:1645: 	if (!id) { id = 1; } // never 0  
	adds	r0, r0, #1	@ id,
.L1003:
	mov	r3, sp	@ tmp181,
	ldrb	r3, [r3, r0]	@ tmp163, list
	adds	r4, r3, #0	@ tmp160, tmp163
	cmp	r3, #0	@ tmp163,
	beq	.L1010		@,
	lsls	r4, r4, #24	@ tmp167, tmp160,
	lsrs	r4, r4, #24	@ id, tmp167,
	b	.L1002		@
.L1010:
	movs	r4, #1	@ tmp160,
	lsls	r4, r4, #24	@ tmp167, tmp160,
	lsrs	r4, r4, #24	@ id, tmp167,
	b	.L1002		@
.L1012:
	.align	2
.L1011:
	.word	ClassExceptions
	.word	GetClassData
	.size	RandClass2, .-RandClass2
	.align	1
	.p2align 2,,3
	.global	GetValidWexpMask
	.syntax unified
	.code	16
	.thumb_func
	.type	GetValidWexpMask, %function
GetValidWexpMask:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:1654:         wexp = unit->pClassData->baseRanks[i];
	ldr	r1, [r0, #4]	@ _1, unit_9(D)->pClassData
@ Patches/../C_code.c:1650: int GetValidWexpMask(struct Unit* unit) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:1653:     for (int i = 0; i < 8; ++i) {
	movs	r3, #0	@ i,
@ Patches/../C_code.c:1651: 	int result = 0; 
	movs	r0, #0	@ <retval>,
@ Patches/../C_code.c:1656: 			result |= 1<<i;
	movs	r4, #1	@ tmp128,
	adds	r1, r1, #44	@ tmp127,
.L1015:
@ Patches/../C_code.c:1655: 		if (wexp) { 
	ldrb	r2, [r1, r3]	@ MEM[(unsigned char *)_6 + _16 * 1], MEM[(unsigned char *)_6 + _16 * 1]
	cmp	r2, #0	@ MEM[(unsigned char *)_6 + _16 * 1],
	beq	.L1014		@,
@ Patches/../C_code.c:1656: 			result |= 1<<i;
	movs	r2, r4	@ tmp124, tmp128
	lsls	r2, r2, r3	@ tmp124, tmp124, i
@ Patches/../C_code.c:1656: 			result |= 1<<i;
	orrs	r0, r2	@ <retval>, tmp124
.L1014:
@ Patches/../C_code.c:1653:     for (int i = 0; i < 8; ++i) {
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1653:     for (int i = 0; i < 8; ++i) {
	cmp	r3, #8	@ i,
	bne	.L1015		@,
@ Patches/../C_code.c:1660: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
	.size	GetValidWexpMask, .-GetValidWexpMask
	.align	1
	.p2align 2,,3
	.global	GetUsedWexpMask
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUsedWexpMask, %function
GetUsedWexpMask:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movs	r1, r0	@ tmp128, unit
	push	{r4, lr}	@
@ Patches/../C_code.c:1665:     for (int i = 0; i < 8; ++i) {
	movs	r3, #0	@ i,
@ Patches/../C_code.c:1663: 	int result = 0; 
	movs	r0, #0	@ <retval>,
@ Patches/../C_code.c:1668: 			result |= 1<<i;
	movs	r4, #1	@ tmp127,
	adds	r1, r1, #40	@ tmp126,
.L1022:
@ Patches/../C_code.c:1667: 		if (wexp) { 
	ldrb	r2, [r1, r3]	@ MEM[(unsigned char *)_5 + _15 * 1], MEM[(unsigned char *)_5 + _15 * 1]
	cmp	r2, #0	@ MEM[(unsigned char *)_5 + _15 * 1],
	beq	.L1021		@,
@ Patches/../C_code.c:1668: 			result |= 1<<i;
	movs	r2, r4	@ tmp123, tmp127
	lsls	r2, r2, r3	@ tmp123, tmp123, i
@ Patches/../C_code.c:1668: 			result |= 1<<i;
	orrs	r0, r2	@ <retval>, tmp123
.L1021:
@ Patches/../C_code.c:1665:     for (int i = 0; i < 8; ++i) {
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1665:     for (int i = 0; i < 8; ++i) {
	cmp	r3, #8	@ i,
	bne	.L1022		@,
@ Patches/../C_code.c:1672: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
	.size	GetUsedWexpMask, .-GetUsedWexpMask
	.align	1
	.p2align 2,,3
	.global	BuildAvailableWeaponList
	.syntax unified
	.code	16
	.thumb_func
	.type	BuildAvailableWeaponList, %function
BuildAvailableWeaponList:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, fp	@,
	mov	r5, r8	@,
	mov	r7, r10	@,
	mov	r6, r9	@,
	movs	r4, r1	@ tmp350, unit
	push	{r5, r6, r7, lr}	@
	mov	fp, r0	@ list, tmp361
@ Patches/../C_code.c:1663: 	int result = 0; 
	movs	r2, #0	@ result,
@ Patches/../C_code.c:1665:     for (int i = 0; i < 8; ++i) {
	movs	r3, #0	@ i,
@ Patches/../C_code.c:1668: 			result |= 1<<i;
	movs	r5, #1	@ tmp360,
@ Patches/../C_code.c:1676: u8* BuildAvailableWeaponList(u8 list[], struct Unit* unit) { 
	sub	sp, sp, #28	@,,
	adds	r4, r4, #40	@ tmp350,
.L1029:
@ Patches/../C_code.c:1667: 		if (wexp) { 
	ldrb	r0, [r4, r3]	@ MEM[(unsigned char *)_81 + _82 * 1], MEM[(unsigned char *)_81 + _82 * 1]
	cmp	r0, #0	@ MEM[(unsigned char *)_81 + _82 * 1],
	beq	.L1028		@,
@ Patches/../C_code.c:1668: 			result |= 1<<i;
	movs	r0, r5	@ tmp209, tmp360
	lsls	r0, r0, r3	@ tmp209, tmp209, i
@ Patches/../C_code.c:1668: 			result |= 1<<i;
	orrs	r2, r0	@ result, tmp209
.L1028:
@ Patches/../C_code.c:1665:     for (int i = 0; i < 8; ++i) {
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1665:     for (int i = 0; i < 8; ++i) {
	cmp	r3, #8	@ i,
	bne	.L1029		@,
@ Patches/../C_code.c:1689: 	attr = unit->pCharacterData->attributes | unit->pClassData->attributes; 
	ldr	r3, [r1, #4]	@ unit_64(D)->pClassData, unit_64(D)->pClassData
@ Patches/../C_code.c:1689: 	attr = unit->pCharacterData->attributes | unit->pClassData->attributes; 
	ldr	r4, [r1]	@ _1, unit_64(D)->pCharacterData
@ Patches/../C_code.c:1689: 	attr = unit->pCharacterData->attributes | unit->pClassData->attributes; 
	ldr	r0, [r3, #40]	@ _3->attributes, _3->attributes
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	movs	r5, #11	@ tmp214,
@ Patches/../C_code.c:1689: 	attr = unit->pCharacterData->attributes | unit->pClassData->attributes; 
	ldr	r3, [r4, #40]	@ _1->attributes, _1->attributes
	orrs	r0, r3	@ _5, _1->attributes
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	movs	r3, #192	@ tmp215,
	ldrsb	r5, [r1, r5]	@ tmp214,
	ands	r3, r5	@ tmp216, tmp214
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	subs	r3, r3, #128	@ tmp219,
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	subs	r5, r3, #1	@ tmp220, tmp219
	sbcs	r3, r3, r5	@ tmp221, tmp219, tmp220
	cmp	r3, #0	@ tmp221,
	bne	.L1030		@,
	ldrb	r3, [r4, #4]	@ tmp226,
	cmp	r3, #44	@ tmp226,
	bls	.LCB6241	@
	b	.L1142	@long jump	@
.LCB6241:
.L1030:
@ Patches/../C_code.c:1687: 	badAttr = IA_LOCK_1|IA_LOCK_2|IA_LOCK_3|IA_LOCK_4|IA_LOCK_5|IA_LOCK_6|IA_LOCK_7|IA_UNCOUNTERABLE; 
	ldr	r3, .L1149	@ tmp406,
	mov	ip, r3	@ tmp406, tmp406
@ Patches/../C_code.c:1691: 		if (attr & CA_LOCK_1) { badAttr &= ~IA_LOCK_1; } // "wep lock 1" 
	lsls	r6, r0, #15	@ tmp234, _5,
@ Patches/../C_code.c:1687: 	badAttr = IA_LOCK_1|IA_LOCK_2|IA_LOCK_3|IA_LOCK_4|IA_LOCK_5|IA_LOCK_6|IA_LOCK_7|IA_UNCOUNTERABLE; 
	asrs	r6, r6, #31	@ tmp355, tmp234,
	lsrs	r6, r6, #11	@ tmp356, tmp355,
	lsls	r6, r6, #11	@ badAttr, tmp356,
	add	r6, r6, ip	@ badAttr, tmp406
@ Patches/../C_code.c:1692: 		if (attr & CA_LOCK_2) { badAttr &= ~IA_LOCK_2; } // myrm 
	lsls	r3, r0, #14	@ tmp370, _5,
	bpl	.L1033		@,
@ Patches/../C_code.c:1692: 		if (attr & CA_LOCK_2) { badAttr &= ~IA_LOCK_2; } // myrm 
	ldr	r3, .L1149+4	@ tmp240,
	ands	r6, r3	@ badAttr, tmp240
.L1033:
@ Patches/../C_code.c:1693: 		if (attr & CA_LOCK_3) { badAttr &= ~IA_LOCK_3; } // manakete 
	lsls	r3, r0, #13	@ tmp371, _5,
	bpl	.L1034		@,
@ Patches/../C_code.c:1693: 		if (attr & CA_LOCK_3) { badAttr &= ~IA_LOCK_3; } // manakete 
	ldr	r3, .L1149+8	@ tmp245,
	ands	r6, r3	@ badAttr, tmp245
.L1034:
@ Patches/../C_code.c:1694: 		if (attr & CA_LOCK_4) { badAttr &= ~IA_LOCK_4; } // eliwood 
	lsls	r3, r0, #3	@ tmp372, _5,
	bpl	.L1035		@,
@ Patches/../C_code.c:1694: 		if (attr & CA_LOCK_4) { badAttr &= ~IA_LOCK_4; } // eliwood 
	ldr	r3, .L1149+12	@ tmp250,
	ands	r6, r3	@ badAttr, tmp250
.L1035:
@ Patches/../C_code.c:1696: 		if (attr & CA_LOCK_5) { badAttr &= ~IA_LOCK_5; } // hector 
	lsls	r3, r0, #2	@ tmp373, _5,
	bpl	.L1036		@,
@ Patches/../C_code.c:1696: 		if (attr & CA_LOCK_5) { badAttr &= ~IA_LOCK_5; } // hector 
	ldr	r3, .L1149+16	@ tmp255,
	ands	r6, r3	@ badAttr, tmp255
.L1036:
@ Patches/../C_code.c:1697: 		if (attr & CA_LOCK_6) { badAttr &= ~IA_LOCK_6; } // lyn 
	lsls	r3, r0, #1	@ tmp374, _5,
	bpl	.LCB6287	@
	b	.L1143	@long jump	@
.LCB6287:
.L1037:
@ Patches/../C_code.c:1700: 		allowStatBoosts = true; 
	movs	r3, #1	@ allowStatBoosts,
	str	r3, [sp, #8]	@ allowStatBoosts, %sfp
@ Patches/../C_code.c:1698: 		if (attr & CA_LOCK_7) { badAttr &= ~IA_LOCK_7; } // athos 
	cmp	r0, #0	@ _5,
	bge	.L1031		@,
@ Patches/../C_code.c:1698: 		if (attr & CA_LOCK_7) { badAttr &= ~IA_LOCK_7; } // athos 
	ldr	r3, .L1149+20	@ tmp263,
	ands	r6, r3	@ badAttr, tmp263
.L1031:
@ Patches/../C_code.c:1702: 	if (IncludeMonstersWithoutWEXP && (attr & CA_LOCK_3)) { badAttr &= ~IA_LOCK_3; } // manakete 
	ldr	r3, .L1149+24	@ tmp264,
	ldr	r3, [r3]	@ IncludeMonstersWithoutWEXP.117_6, IncludeMonstersWithoutWEXP
	mov	r8, r3	@ IncludeMonstersWithoutWEXP.117_6, IncludeMonstersWithoutWEXP.117_6
@ Patches/../C_code.c:1702: 	if (IncludeMonstersWithoutWEXP && (attr & CA_LOCK_3)) { badAttr &= ~IA_LOCK_3; } // manakete 
	cmp	r3, #0	@ IncludeMonstersWithoutWEXP.117_6,
	beq	.L1038		@,
@ Patches/../C_code.c:1702: 	if (IncludeMonstersWithoutWEXP && (attr & CA_LOCK_3)) { badAttr &= ~IA_LOCK_3; } // manakete 
	lsls	r3, r0, #13	@ tmp375, _5,
	bpl	.LCB6305	@
	b	.L1144	@long jump	@
.LCB6305:
.L1038:
@ Patches/../C_code.c:1705: 	ranks[0] = unit->ranks[0]; 
	ldr	r7, [r1, #40]	@ vect__7.1182, MEM <vector(4) unsigned char> [(unsigned char *)unit_64(D) + 40B]
@ Patches/../C_code.c:1713: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	lsls	r3, r7, #8	@ tmp271, vect__7.1182,
	orrs	r3, r7	@ tmp271, vect__7.1182
	mov	ip, r3	@ tmp272, tmp271
	mov	r4, ip	@ tmp272, tmp272
	lsls	r3, r7, #16	@ tmp275, vect__7.1182,
	orrs	r3, r4	@ tmp274, tmp272
@ Patches/../C_code.c:1714: 	if (IncludeMonstersWithoutWEXP && (attr & CA_LOCK_3)) { 
	mov	r4, r8	@ IncludeMonstersWithoutWEXP.117_6, IncludeMonstersWithoutWEXP.117_6
@ Patches/../C_code.c:1705: 	ranks[0] = unit->ranks[0]; 
	ldr	r5, [r1, #44]	@ vect__7.1183, MEM <vector(4) unsigned char> [(unsigned char *)unit_64(D) + 44B]
@ Patches/../C_code.c:1713: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	lsrs	r3, r3, #24	@ tmp277, tmp274,
	orrs	r3, r7	@ tmp280, vect__7.1182
@ Patches/../C_code.c:1705: 	ranks[0] = unit->ranks[0]; 
	str	r7, [sp, #16]	@ vect__7.1182, MEM <vector(4) unsigned char> [(unsigned char *)&ranks]
@ Patches/../C_code.c:1713: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	lsrs	r7, r5, #24	@ tmp281, vect__7.1183,
	orrs	r3, r7	@ tmp283, tmp281
	lsls	r7, r5, #8	@ tmp285, vect__7.1183,
@ Patches/../C_code.c:1705: 	ranks[0] = unit->ranks[0]; 
	str	r5, [sp, #20]	@ vect__7.1183, MEM <vector(4) unsigned char> [(unsigned char *)&ranks + 4B]
@ Patches/../C_code.c:1713: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	lsrs	r7, r7, #24	@ tmp284, tmp285,
	lsls	r5, r5, #16	@ tmp289, vect__7.1183,
	orrs	r3, r7	@ tmp287, tmp284
	lsrs	r5, r5, #24	@ tmp288, tmp289,
	orrs	r3, r5	@ tmp291, tmp288
	lsls	r3, r3, #24	@ tmp292, tmp291,
	lsrs	r3, r3, #24	@ _20, tmp292,
@ Patches/../C_code.c:1714: 	if (IncludeMonstersWithoutWEXP && (attr & CA_LOCK_3)) { 
	cmp	r4, #0	@ IncludeMonstersWithoutWEXP.117_6,
	beq	.L1039		@,
@ Patches/../C_code.c:1714: 	if (IncludeMonstersWithoutWEXP && (attr & CA_LOCK_3)) { 
	lsls	r0, r0, #13	@ tmp376, _5,
	bpl	.L1039		@,
@ Patches/../C_code.c:1723: 	if (doWeHaveNonStaff) { ranks[4] = 0; doWeHaveNonStaff = 0; } // do not include staves at first 
	movs	r3, #0	@ tmp299,
	add	r0, sp, #16	@ tmp413,,
	strb	r3, [r0, #4]	@ tmp299, ranks[4]
@ Patches/../C_code.c:1723: 	if (doWeHaveNonStaff) { ranks[4] = 0; doWeHaveNonStaff = 0; } // do not include staves at first 
	str	r3, [sp, #4]	@ doWeHaveNonStaff, %sfp
.L1041:
@ Patches/../C_code.c:1726: 	list[0] = 0; // count  
	movs	r3, #0	@ tmp301,
	mov	r0, fp	@ list, list
	strb	r3, [r0]	@ tmp301, *list_91(D)
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	ldr	r3, .L1149+28	@ tmp357,
	mov	r8, r3	@ tmp357, tmp357
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	ldr	r3, .L1149+32	@ tmp358,
	mov	r9, r3	@ tmp358, tmp358
	mov	r3, r8	@ tmp357, tmp357
@ Patches/../C_code.c:1728: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	movs	r4, #1	@ i,
	mov	r8, r6	@ badAttr, badAttr
	mov	r10, r2	@ result, result
	movs	r6, r3	@ tmp357, tmp357
	ldr	r5, .L1149+36	@ ivtmp.1201,
	ldr	r7, .L1149+40	@ tmp351,
	str	r1, [sp, #12]	@ unit, %sfp
.L1042:
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	ldr	r3, [r7]	@ MaxItems_Link.75_122, MaxItems_Link
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	cmp	r3, #0	@ MaxItems_Link.75_122,
	bne	.L1061		@,
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	ldr	r3, [r6]	@ MaxItems, MaxItems
	ldrb	r3, [r3]	@ _124, *MaxItems.76_123
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	cmp	r3, #0	@ _124,
	bne	.L1061		@,
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	movs	r0, #1	@,
	bl	.L557		@
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	movs	r3, #1	@ i,
	b	.L1065		@
.L1063:
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1217: 		table++; 
	adds	r0, r0, #36	@ table,
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	cmp	r3, #255	@ i,
	beq	.L1064		@,
.L1065:
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	ldrb	r2, [r0, #6]	@ MEM[(unsigned char *)table_163 + 6B], MEM[(unsigned char *)table_163 + 6B]
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	cmp	r2, r3	@ MEM[(unsigned char *)table_163 + 6B], i
	beq	.L1063		@,
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	subs	r0, r0, #36	@ table,
.L1064:
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	ldr	r2, [r6]	@ MaxItems.78_137, MaxItems
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	ldrb	r3, [r0, #6]	@ _139,
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	strb	r3, [r2]	@ _139, *MaxItems.78_137
.L1061:
@ Patches/../C_code.c:1728: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	cmp	r4, r3	@ i, MaxItems_Link.75_122
	bgt	.L1145		@,
@ Patches/../C_code.c:1729: 		if (ItemExceptions[i].NeverChangeInto) { continue; } 
	ldrb	r3, [r5]	@ MEM[(unsigned char *)_83], MEM[(unsigned char *)_83]
	cmp	r3, #0	@ MEM[(unsigned char *)_83],
	bne	.L1044		@,
@ Patches/../C_code.c:1730: 		table = GetItemData(i);  
	movs	r0, r4	@, i
	bl	.L557		@
@ Patches/../C_code.c:1733: 		if ((attr & badAttr) || (!(attr & (IA_WEAPON|doWeHaveNonStaff)))) { // must be equippable (or a staff if we have no other weapons) 
	mov	r2, r8	@ badAttr, badAttr
@ Patches/../C_code.c:1731: 		attr = table->attributes; 
	ldr	r3, [r0, #8]	@ _22, table_98->attributes
@ Patches/../C_code.c:1733: 		if ((attr & badAttr) || (!(attr & (IA_WEAPON|doWeHaveNonStaff)))) { // must be equippable (or a staff if we have no other weapons) 
	tst	r3, r2	@ _22, badAttr
	bne	.L1044		@,
@ Patches/../C_code.c:1733: 		if ((attr & badAttr) || (!(attr & (IA_WEAPON|doWeHaveNonStaff)))) { // must be equippable (or a staff if we have no other weapons) 
	movs	r2, #1	@ tmp306,
	ldr	r1, [sp, #4]	@ doWeHaveNonStaff, %sfp
	orrs	r2, r1	@ tmp307, doWeHaveNonStaff
@ Patches/../C_code.c:1733: 		if ((attr & badAttr) || (!(attr & (IA_WEAPON|doWeHaveNonStaff)))) { // must be equippable (or a staff if we have no other weapons) 
	tst	r3, r2	@ _22, tmp307
	beq	.L1044		@,
@ Patches/../C_code.c:1738: 		rank = table->weaponRank;
	ldrb	r1, [r0, #28]	@ rank,
@ Patches/../C_code.c:1737: 		type = table->weaponType; 
	ldrb	r2, [r0, #7]	@ type,
@ Patches/../C_code.c:1738: 		rank = table->weaponRank;
	str	r1, [sp]	@ rank, %sfp
@ Patches/../C_code.c:1755: 		if ((table->weaponEffectId == 4) && (rank < 101)) { rank = 71; } // devil weapons are considered C rank
	ldrb	r1, [r0, #31]	@ pretmp_182,
	mov	ip, r1	@ pretmp_182, pretmp_182
@ Patches/../C_code.c:1742: 		if ((!rank) && (!(attr & (IA_LOCK_1|IA_LOCK_2|IA_LOCK_3|IA_LOCK_4|IA_LOCK_5|IA_LOCK_6|IA_LOCK_7)))) { 
	ldr	r1, [sp]	@ rank, %sfp
	cmp	r1, #0	@ rank,
	beq	.L1046		@,
@ Patches/../C_code.c:1755: 		if ((table->weaponEffectId == 4) && (rank < 101)) { rank = 71; } // devil weapons are considered C rank
	mov	r1, ip	@ pretmp_182, pretmp_182
@ Patches/../C_code.c:1749: 		if (type <= 7) { if (!rank) { rank = 1; } } // PRFs require at least 1 wexp in that type 
	cmp	r2, #7	@ type,
	ble	.L1146		@,
.L1047:
@ Patches/../C_code.c:1755: 		if ((table->weaponEffectId == 4) && (rank < 101)) { rank = 71; } // devil weapons are considered C rank
	cmp	r1, #4	@ pretmp_182,
	beq	.L1139		@,
.L1054:
@ Patches/../C_code.c:1771: 		if ((!allowStatBoosts) && (table->pStatBonuses)) { continue; } 
	ldr	r2, [sp, #8]	@ allowStatBoosts, %sfp
	cmp	r2, #0	@ allowStatBoosts,
	bne	.L1057		@,
@ Patches/../C_code.c:1771: 		if ((!allowStatBoosts) && (table->pStatBonuses)) { continue; } 
	ldr	r2, [r0, #12]	@ table_98->pStatBonuses, table_98->pStatBonuses
	cmp	r2, #0	@ table_98->pStatBonuses,
	beq	.L1057		@,
.L1044:
@ Patches/../C_code.c:1728: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	adds	r4, r4, #1	@ i,
	adds	r5, r5, #2	@ ivtmp.1201,
	b	.L1042		@
.L1039:
@ Patches/../C_code.c:1724: 	else { doWeHaveNonStaff = IA_STAFF; } 
	movs	r0, #4	@ doWeHaveNonStaff,
	str	r0, [sp, #4]	@ doWeHaveNonStaff, %sfp
@ Patches/../C_code.c:1719: 	else if (doWeHaveNonStaff){ 
	cmp	r3, #0	@ _20,
	beq	.L1041		@,
@ Patches/../C_code.c:1720: 		badAttr |= IA_LOCK_3;
	movs	r3, #128	@ tmp297,
	lsls	r3, r3, #3	@ tmp297, tmp297,
	orrs	r6, r3	@ badAttr, tmp297
@ Patches/../C_code.c:1723: 	if (doWeHaveNonStaff) { ranks[4] = 0; doWeHaveNonStaff = 0; } // do not include staves at first 
	movs	r3, #0	@ tmp299,
	add	r0, sp, #16	@ tmp413,,
	strb	r3, [r0, #4]	@ tmp299, ranks[4]
@ Patches/../C_code.c:1723: 	if (doWeHaveNonStaff) { ranks[4] = 0; doWeHaveNonStaff = 0; } // do not include staves at first 
	str	r3, [sp, #4]	@ doWeHaveNonStaff, %sfp
	b	.L1041		@
.L1057:
@ Patches/../C_code.c:1773: 		if (WepLockExInstalled) { 
	ldr	r2, .L1149+44	@ tmp322,
@ Patches/../C_code.c:1773: 		if (WepLockExInstalled) { 
	ldr	r2, [r2]	@ WepLockExInstalled, WepLockExInstalled
	cmp	r2, #0	@ WepLockExInstalled,
	beq	.L1060		@,
@ Patches/../C_code.c:1774: 			if (attr & IA_STAFF) { if (!CanUnitUseStaff(unit, i|0x100)) { continue; } } 
	movs	r1, #128	@ tmp330,
	lsls	r1, r1, #1	@ tmp330, tmp330,
	ldr	r0, [sp, #12]	@, %sfp
	orrs	r1, r4	@ _46, i
@ Patches/../C_code.c:1774: 			if (attr & IA_STAFF) { if (!CanUnitUseStaff(unit, i|0x100)) { continue; } } 
	lsls	r3, r3, #29	@ tmp377, _22,
	bpl	.L1059		@,
@ Patches/../C_code.c:1774: 			if (attr & IA_STAFF) { if (!CanUnitUseStaff(unit, i|0x100)) { continue; } } 
	ldr	r3, .L1149+48	@ tmp333,
	bl	.L14		@
@ Patches/../C_code.c:1774: 			if (attr & IA_STAFF) { if (!CanUnitUseStaff(unit, i|0x100)) { continue; } } 
	cmp	r0, #0	@ tmp364,
	beq	.L1044		@,
.L1060:
@ Patches/../C_code.c:1778: 		list[0]++; 
	mov	r3, fp	@ list, list
	mov	r2, fp	@ list, list
	ldrb	r3, [r3]	@ *list_91(D), *list_91(D)
	adds	r3, r3, #1	@ tmp326,
	lsls	r3, r3, #24	@ tmp327, tmp326,
	lsrs	r3, r3, #24	@ _40, tmp327,
	strb	r3, [r2]	@ _40, *list_91(D)
@ Patches/../C_code.c:1779: 		list[list[0]] = i; 
	strb	r4, [r2, r3]	@ i, *_42
.L1148:
@ Patches/../C_code.c:1728: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	adds	r4, r4, #1	@ i,
	adds	r5, r5, #2	@ ivtmp.1201,
	b	.L1042		@
.L1145:
@ Patches/../C_code.c:1782: } 
	mov	r0, fp	@, list
	add	sp, sp, #28	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1046:
@ Patches/../C_code.c:1742: 		if ((!rank) && (!(attr & (IA_LOCK_1|IA_LOCK_2|IA_LOCK_3|IA_LOCK_4|IA_LOCK_5|IA_LOCK_6|IA_LOCK_7)))) { 
	ldr	r1, .L1149+52	@ tmp310,
	tst	r3, r1	@ _22, tmp310
	bne	.L1051		@,
@ Patches/../C_code.c:1755: 		if ((table->weaponEffectId == 4) && (rank < 101)) { rank = 71; } // devil weapons are considered C rank
	mov	r1, ip	@ pretmp_182, pretmp_182
@ Patches/../C_code.c:1749: 		if (type <= 7) { if (!rank) { rank = 1; } } // PRFs require at least 1 wexp in that type 
	cmp	r2, #7	@ type,
	bgt	.L1047		@,
@ Patches/../C_code.c:1755: 		if ((table->weaponEffectId == 4) && (rank < 101)) { rank = 71; } // devil weapons are considered C rank
	cmp	r1, #4	@ pretmp_182,
	beq	.L1072		@,
@ Patches/../C_code.c:1747: 			rank = 251; 
	movs	r1, #251	@ rank,
	str	r1, [sp]	@ rank, %sfp
	b	.L1048		@
.L1051:
@ Patches/../C_code.c:1755: 		if ((table->weaponEffectId == 4) && (rank < 101)) { rank = 71; } // devil weapons are considered C rank
	mov	r1, ip	@ pretmp_182, pretmp_182
@ Patches/../C_code.c:1749: 		if (type <= 7) { if (!rank) { rank = 1; } } // PRFs require at least 1 wexp in that type 
	cmp	r2, #7	@ type,
	bgt	.L1047		@,
@ Patches/../C_code.c:1755: 		if ((table->weaponEffectId == 4) && (rank < 101)) { rank = 71; } // devil weapons are considered C rank
	cmp	r1, #4	@ pretmp_182,
	beq	.L1049		@,
@ Patches/../C_code.c:1749: 		if (type <= 7) { if (!rank) { rank = 1; } } // PRFs require at least 1 wexp in that type 
	movs	r1, #1	@ rank,
	str	r1, [sp]	@ rank, %sfp
	b	.L1048		@
.L1146:
@ Patches/../C_code.c:1755: 		if ((table->weaponEffectId == 4) && (rank < 101)) { rank = 71; } // devil weapons are considered C rank
	cmp	r1, #4	@ pretmp_182,
	beq	.L1147		@,
.L1048:
@ Patches/../C_code.c:1759: 			if (rank > ranks[type]) { 
	add	r1, sp, #16	@ tmp436,,
	ldrb	r1, [r1, r2]	@ tmp349, ranks
	mov	ip, r1	@ tmp349, tmp349
@ Patches/../C_code.c:1759: 			if (rank > ranks[type]) { 
	ldr	r1, [sp]	@ rank, %sfp
	cmp	ip, r1	@ tmp349, rank
	blt	.L1044		@,
.L1139:
@ Patches/../C_code.c:1765: 		type = 1<<(type); // now bitmask only 
	movs	r1, #1	@ tmp319,
	lsls	r1, r1, r2	@ type, tmp319, type
@ Patches/../C_code.c:1767: 			if (!(type & wexpMask)) { 
	mov	r2, r10	@ result, result
	tst	r1, r2	@ type, result
	bne	.L1054		@,
.L1140:
@ Patches/../C_code.c:1728: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	adds	r4, r4, #1	@ i,
	adds	r5, r5, #2	@ ivtmp.1201,
	b	.L1042		@
.L1143:
@ Patches/../C_code.c:1697: 		if (attr & CA_LOCK_6) { badAttr &= ~IA_LOCK_6; } // lyn 
	ldr	r3, .L1149+56	@ tmp260,
	ands	r6, r3	@ badAttr, tmp260
	b	.L1037		@
.L1142:
@ Patches/../C_code.c:1690: 	if ((IsUnitAlliedOrPlayable(unit)) || (attr & CA_BOSS)) { // only player units / bosses can start with wep locked weps 
	lsls	r3, r0, #16	@ tmp369, _5,
	bpl	.LCB6566	@
	b	.L1030	@long jump	@
.LCB6566:
@ Patches/../C_code.c:1682: 	int allowStatBoosts = false; 
	movs	r3, #0	@ allowStatBoosts,
@ Patches/../C_code.c:1687: 	badAttr = IA_LOCK_1|IA_LOCK_2|IA_LOCK_3|IA_LOCK_4|IA_LOCK_5|IA_LOCK_6|IA_LOCK_7|IA_UNCOUNTERABLE; 
	ldr	r6, .L1149	@ badAttr,
@ Patches/../C_code.c:1682: 	int allowStatBoosts = false; 
	str	r3, [sp, #8]	@ allowStatBoosts, %sfp
	b	.L1031		@
.L1144:
@ Patches/../C_code.c:1702: 	if (IncludeMonstersWithoutWEXP && (attr & CA_LOCK_3)) { badAttr &= ~IA_LOCK_3; } // manakete 
	ldr	r3, .L1149+8	@ tmp269,
	ands	r6, r3	@ badAttr, tmp269
	b	.L1038		@
.L1059:
@ Patches/../C_code.c:1775: 			else if (!CanUnitUseWeapon(unit, i|0x100)) { continue; } 
	ldr	r3, .L1149+60	@ tmp336,
	bl	.L14		@
@ Patches/../C_code.c:1775: 			else if (!CanUnitUseWeapon(unit, i|0x100)) { continue; } 
	cmp	r0, #0	@ tmp365,
	beq	.L1044		@,
@ Patches/../C_code.c:1778: 		list[0]++; 
	mov	r3, fp	@ list, list
	mov	r2, fp	@ list, list
	ldrb	r3, [r3]	@ *list_91(D), *list_91(D)
	adds	r3, r3, #1	@ tmp326,
	lsls	r3, r3, #24	@ tmp327, tmp326,
	lsrs	r3, r3, #24	@ _40, tmp327,
	strb	r3, [r2]	@ _40, *list_91(D)
@ Patches/../C_code.c:1779: 		list[list[0]] = i; 
	strb	r4, [r2, r3]	@ i, *_42
	b	.L1148		@
.L1049:
@ Patches/../C_code.c:1759: 			if (rank > ranks[type]) { 
	add	r1, sp, #16	@ tmp430,,
	ldrb	r1, [r1, r2]	@ tmp318, ranks
	cmp	r1, #70	@ tmp318,
	bhi	.LCB6601	@
	b	.L1044	@long jump	@
.LCB6601:
@ Patches/../C_code.c:1765: 		type = 1<<(type); // now bitmask only 
	movs	r1, #1	@ tmp319,
	lsls	r1, r1, r2	@ type, tmp319, type
@ Patches/../C_code.c:1767: 			if (!(type & wexpMask)) { 
	mov	r2, r10	@ result, result
	tst	r1, r2	@ type, result
	beq	.LCB6606	@
	b	.L1054	@long jump	@
.LCB6606:
	b	.L1140		@
.L1147:
@ Patches/../C_code.c:1755: 		if ((table->weaponEffectId == 4) && (rank < 101)) { rank = 71; } // devil weapons are considered C rank
	ldr	r1, [sp]	@ rank, %sfp
	cmp	r1, #100	@ rank,
	ble	.L1049		@,
.L1050:
@ Patches/../C_code.c:1759: 			if (rank > ranks[type]) { 
	add	r1, sp, #16	@ tmp428,,
	ldrb	r1, [r1, r2]	@ tmp312, ranks
	mov	ip, r1	@ tmp312, tmp312
@ Patches/../C_code.c:1759: 			if (rank > ranks[type]) { 
	ldr	r1, [sp]	@ rank, %sfp
	cmp	ip, r1	@ tmp312, rank
	bge	.LCB6621	@
	b	.L1044	@long jump	@
.LCB6621:
@ Patches/../C_code.c:1765: 		type = 1<<(type); // now bitmask only 
	movs	r1, #1	@ tmp319,
	lsls	r1, r1, r2	@ type, tmp319, type
@ Patches/../C_code.c:1767: 			if (!(type & wexpMask)) { 
	mov	r2, r10	@ result, result
	tst	r1, r2	@ type, result
	beq	.LCB6626	@
	b	.L1054	@long jump	@
.LCB6626:
	b	.L1140		@
.L1072:
@ Patches/../C_code.c:1747: 			rank = 251; 
	movs	r1, #251	@ rank,
	str	r1, [sp]	@ rank, %sfp
	b	.L1050		@
.L1150:
	.align	2
.L1149:
	.word	3939456
	.word	-4097
	.word	-1025
	.word	-262145
	.word	-524289
	.word	-2097153
	.word	IncludeMonstersWithoutWEXP
	.word	MaxItems
	.word	GetItemData
	.word	ItemExceptions+3
	.word	MaxItems_Link
	.word	WepLockExInstalled
	.word	CanUnitUseStaff
	.word	3939328
	.word	-1048577
	.word	CanUnitUseWeapon
	.size	BuildAvailableWeaponList, .-BuildAvailableWeaponList
	.align	1
	.p2align 2,,3
	.global	AppendAvailableStaffList
	.syntax unified
	.code	16
	.thumb_func
	.type	AppendAvailableStaffList, %function
AppendAvailableStaffList:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r5, r8	@,
	mov	r7, r10	@,
	mov	lr, fp	@,
	mov	r6, r9	@,
	mov	r8, r0	@ list, tmp247
	push	{r5, r6, r7, lr}	@
@ Patches/../C_code.c:1665:     for (int i = 0; i < 8; ++i) {
	movs	r3, #0	@ i,
@ Patches/../C_code.c:1663: 	int result = 0; 
	movs	r7, #0	@ result,
@ Patches/../C_code.c:1668: 			result |= 1<<i;
	movs	r0, #1	@ tmp246,
@ Patches/../C_code.c:1784: u8* AppendAvailableStaffList(u8 list[], struct Unit* unit) { 
	movs	r5, r1	@ unit, tmp248
	sub	sp, sp, #12	@,,
	adds	r1, r1, #40	@ tmp242,
.L1153:
@ Patches/../C_code.c:1667: 		if (wexp) { 
	ldrb	r2, [r1, r3]	@ MEM[(unsigned char *)_90 + _77 * 1], MEM[(unsigned char *)_90 + _77 * 1]
	cmp	r2, #0	@ MEM[(unsigned char *)_90 + _77 * 1],
	beq	.L1152		@,
@ Patches/../C_code.c:1668: 			result |= 1<<i;
	movs	r2, r0	@ tmp167, tmp246
	lsls	r2, r2, r3	@ tmp167, tmp167, i
@ Patches/../C_code.c:1668: 			result |= 1<<i;
	orrs	r7, r2	@ result, tmp167
.L1152:
@ Patches/../C_code.c:1665:     for (int i = 0; i < 8; ++i) {
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1665:     for (int i = 0; i < 8; ++i) {
	cmp	r3, #8	@ i,
	bne	.L1153		@,
@ Patches/../C_code.c:1800: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	movs	r2, #41	@ tmp171,
@ Patches/../C_code.c:1796: 	ranks[4] = unit->ranks[4]; 
	adds	r3, r3, #36	@ tmp169,
	ldrb	r1, [r5, r3]	@ _5,
	str	r1, [sp, #4]	@ _5, %sfp
@ Patches/../C_code.c:1800: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	subs	r3, r3, #4	@ tmp170,
	ldrb	r2, [r5, r2]	@ tmp175,
	ldrb	r3, [r5, r3]	@ tmp173,
	orrs	r3, r2	@ tmp176, tmp175
@ Patches/../C_code.c:1794: 	ranks[2] = unit->ranks[2]; 
	movs	r2, #42	@ tmp177,
@ Patches/../C_code.c:1800: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	ldrb	r2, [r5, r2]	@ tmp180,
	orrs	r3, r2	@ tmp181, tmp180
@ Patches/../C_code.c:1795: 	ranks[3] = unit->ranks[3]; 
	movs	r2, #43	@ tmp182,
@ Patches/../C_code.c:1800: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	ldrb	r2, [r5, r2]	@ tmp185,
	orrs	r3, r2	@ tmp186, tmp185
@ Patches/../C_code.c:1797: 	ranks[5] = unit->ranks[5]; 
	movs	r2, #45	@ tmp187,
@ Patches/../C_code.c:1800: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	ldrb	r2, [r5, r2]	@ tmp190,
	orrs	r3, r2	@ tmp191, tmp190
@ Patches/../C_code.c:1798: 	ranks[6] = unit->ranks[6]; 
	movs	r2, #46	@ tmp192,
@ Patches/../C_code.c:1800: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	ldrb	r2, [r5, r2]	@ tmp195,
	orrs	r3, r2	@ tmp196, tmp195
@ Patches/../C_code.c:1799: 	ranks[7] = unit->ranks[7]; 
	movs	r2, #47	@ tmp197,
@ Patches/../C_code.c:1800: 	int doWeHaveNonStaff = ranks[0] | ranks[1] | ranks[2] | ranks[3] | ranks[5] | ranks[6] | ranks[7];
	ldrb	r2, [r5, r2]	@ tmp200,
@ Patches/../C_code.c:1801: 	if (!doWeHaveNonStaff) { return list; } // only append staves if we had other weapon ranks before 
	orrs	r3, r2	@ tmp203, tmp200
@ Patches/../C_code.c:1802: 	if (!ranks[4]) { return list; } // we cannot use staves 
	beq	.L1173		@,
	cmp	r1, #0	@ _5,
	beq	.L1173		@,
	ldr	r3, .L1188	@ tmp240,
	mov	r9, r3	@ tmp240, tmp240
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	ldr	r3, .L1188+4	@ tmp243,
	mov	r10, r3	@ tmp243, tmp243
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	ldr	r3, .L1188+8	@ tmp244,
@ Patches/../C_code.c:1803: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	movs	r4, #1	@ i,
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	mov	fp, r3	@ tmp244, tmp244
	ldr	r6, .L1188+12	@ ivtmp.1232,
.L1155:
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	mov	r3, r9	@ tmp240, tmp240
	ldr	r3, [r3]	@ MaxItems_Link.75_54, MaxItems_Link
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	cmp	r3, #0	@ MaxItems_Link.75_54,
	bne	.L1162		@,
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	mov	r3, r10	@ tmp243, tmp243
	ldr	r3, [r3]	@ MaxItems, MaxItems
	ldrb	r3, [r3]	@ _56, *MaxItems.76_55
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	cmp	r3, #0	@ _56,
	bne	.L1162		@,
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	movs	r0, #1	@,
	bl	.L434		@
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	movs	r3, #1	@ i,
	b	.L1166		@
.L1164:
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1217: 		table++; 
	adds	r0, r0, #36	@ table,
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	cmp	r3, #255	@ i,
	beq	.L1165		@,
.L1166:
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	ldrb	r2, [r0, #6]	@ MEM[(unsigned char *)table_80 + 6B], MEM[(unsigned char *)table_80 + 6B]
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	cmp	r2, r3	@ MEM[(unsigned char *)table_80 + 6B], i
	beq	.L1164		@,
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	subs	r0, r0, #36	@ table,
.L1165:
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	mov	r3, r10	@ tmp243, tmp243
	ldr	r2, [r3]	@ MaxItems.78_69, MaxItems
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	ldrb	r3, [r0, #6]	@ _71,
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	strb	r3, [r2]	@ _71, *MaxItems.78_69
.L1162:
@ Patches/../C_code.c:1803: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	cmp	r4, r3	@ i, MaxItems_Link.75_54
	bgt	.L1173		@,
@ Patches/../C_code.c:1804: 		if (ItemExceptions[i].NeverChangeInto) { continue; } 
	ldrb	r3, [r6]	@ MEM[(unsigned char *)_48], MEM[(unsigned char *)_48]
	cmp	r3, #0	@ MEM[(unsigned char *)_48],
	bne	.L1157		@,
@ Patches/../C_code.c:1805: 		table = GetItemData(i);  
	movs	r0, r4	@, i
	bl	.L434		@
@ Patches/../C_code.c:1808: 		if (!(attr & IA_STAFF)) { // must be staff
	ldr	r3, [r0, #8]	@ table_41->attributes, table_41->attributes
	lsls	r3, r3, #29	@ tmp252, table_41->attributes,
	bpl	.L1157		@,
@ Patches/../C_code.c:1813: 		rank = table->weaponRank;
	ldrb	r3, [r0, #28]	@ _17,
@ Patches/../C_code.c:1815: 		if (!rank) { rank = 1; } // PRFs require at least 1 wexp in that type 
	cmp	r3, #0	@ _17,
	beq	.L1159		@,
@ Patches/../C_code.c:1817: 		if (rank > ranks[4]) { // staves 
	ldr	r2, [sp, #4]	@ _5, %sfp
	cmp	r2, r3	@ _5, _17
	bcs	.L1159		@,
.L1157:
@ Patches/../C_code.c:1803: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	adds	r4, r4, #1	@ i,
	adds	r6, r6, #2	@ ivtmp.1232,
	b	.L1155		@
.L1173:
@ Patches/../C_code.c:1837: } 
	mov	r0, r8	@, list
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1159:
@ Patches/../C_code.c:1824: 			if (!(type & wexpMask)) { 
	lsls	r3, r7, #27	@ tmp253, result,
	bpl	.L1157		@,
@ Patches/../C_code.c:1829: 		if (WepLockExInstalled) { 
	ldr	r3, .L1188+16	@ tmp222,
@ Patches/../C_code.c:1829: 		if (WepLockExInstalled) { 
	ldr	r3, [r3]	@ WepLockExInstalled, WepLockExInstalled
	cmp	r3, #0	@ WepLockExInstalled,
	bne	.L1160		@,
.L1161:
@ Patches/../C_code.c:1833: 		list[0]++; 
	mov	r3, r8	@ list, list
	mov	r2, r8	@ list, list
	ldrb	r3, [r3]	@ *list_39(D), *list_39(D)
	adds	r3, r3, #1	@ tmp226,
	lsls	r3, r3, #24	@ tmp227, tmp226,
	lsrs	r3, r3, #24	@ _23, tmp227,
	strb	r3, [r2]	@ _23, *list_39(D)
@ Patches/../C_code.c:1834: 		list[list[0]] = i; 
	strb	r4, [r2, r3]	@ i, *_25
	b	.L1157		@
.L1160:
@ Patches/../C_code.c:1830: 			if (!CanUnitUseStaff(unit, i)) { continue; } 
	movs	r1, r4	@, i
	movs	r0, r5	@, unit
	ldr	r3, .L1188+20	@ tmp230,
	bl	.L14		@
@ Patches/../C_code.c:1830: 			if (!CanUnitUseStaff(unit, i)) { continue; } 
	cmp	r0, #0	@ tmp250,
	bne	.L1161		@,
	b	.L1157		@
.L1189:
	.align	2
.L1188:
	.word	MaxItems_Link
	.word	MaxItems
	.word	GetItemData
	.word	ItemExceptions+3
	.word	WepLockExInstalled
	.word	CanUnitUseStaff
	.size	AppendAvailableStaffList, .-AppendAvailableStaffList
	.align	1
	.p2align 2,,3
	.global	BuildRingItemList
	.syntax unified
	.code	16
	.thumb_func
	.type	BuildRingItemList, %function
BuildRingItemList:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
	mov	r7, r8	@,
	mov	lr, r9	@,
@ Patches/../C_code.c:1841: 	list[0] = 0; 
	movs	r3, #0	@ tmp138,
@ Patches/../C_code.c:1839: u8* BuildRingItemList(u8 list[], struct Unit* unit) { 
	push	{r7, lr}	@
@ Patches/../C_code.c:1841: 	list[0] = 0; 
	strb	r3, [r0]	@ tmp138, *list_14(D)
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	ldr	r3, .L1206	@ tmp161,
@ Patches/../C_code.c:1839: u8* BuildRingItemList(u8 list[], struct Unit* unit) { 
	mov	r8, r0	@ list, tmp163
@ Patches/../C_code.c:1843: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	movs	r4, #1	@ i,
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	mov	r9, r3	@ tmp161, tmp161
	ldr	r5, .L1206+4	@ ivtmp.1261,
	ldr	r6, .L1206+8	@ tmp158,
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	ldr	r7, .L1206+12	@ tmp160,
.L1191:
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	ldr	r3, [r6]	@ MaxItems_Link.75_22, MaxItems_Link
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	cmp	r3, #0	@ MaxItems_Link.75_22,
	bne	.L1195		@,
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	ldr	r3, [r7]	@ MaxItems, MaxItems
	ldrb	r3, [r3]	@ _24, *MaxItems.76_23
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	cmp	r3, #0	@ _24,
	bne	.L1195		@,
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	movs	r0, #1	@,
	bl	.L557		@
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	movs	r3, #1	@ i,
	b	.L1199		@
.L1197:
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1217: 		table++; 
	adds	r0, r0, #36	@ table,
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	cmp	r3, #255	@ i,
	beq	.L1198		@,
.L1199:
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	ldrb	r2, [r0, #6]	@ MEM[(unsigned char *)table_33 + 6B], MEM[(unsigned char *)table_33 + 6B]
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	cmp	r2, r3	@ MEM[(unsigned char *)table_33 + 6B], i
	beq	.L1197		@,
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	subs	r0, r0, #36	@ table,
.L1198:
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	ldr	r2, [r7]	@ MaxItems.78_37, MaxItems
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	ldrb	r3, [r0, #6]	@ _39,
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	strb	r3, [r2]	@ _39, *MaxItems.78_37
.L1195:
@ Patches/../C_code.c:1843: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	cmp	r4, r3	@ i, MaxItems_Link.75_22
	bgt	.L1205		@,
@ Patches/../C_code.c:1844: 		if (ItemExceptions[i].NeverChangeInto) { continue; } 
	ldrb	r3, [r5]	@ MEM[(unsigned char *)_51], MEM[(unsigned char *)_51]
	cmp	r3, #0	@ MEM[(unsigned char *)_51],
	bne	.L1193		@,
@ Patches/../C_code.c:1845: 		table = GetItemData(i);  
	movs	r0, r4	@, i
	bl	.L557		@
@ Patches/../C_code.c:1847: 		if (!table->useEffectId) { // must have effect
	ldrb	r3, [r0, #30]	@ tmp142,
	cmp	r3, #0	@ tmp142,
	beq	.L1193		@,
@ Patches/../C_code.c:1851: 		if (table->weaponType != 0xC) { // must be ring 
	ldrb	r3, [r0, #7]	@ tmp143,
	cmp	r3, #12	@ tmp143,
	bne	.L1193		@,
@ Patches/../C_code.c:1854: 		list[0]++; 
	mov	r3, r8	@ list, list
	mov	r2, r8	@ list, list
	ldrb	r3, [r3]	@ *list_14(D), *list_14(D)
	adds	r3, r3, #1	@ tmp146,
	lsls	r3, r3, #24	@ tmp147, tmp146,
	lsrs	r3, r3, #24	@ _5, tmp147,
	strb	r3, [r2]	@ _5, *list_14(D)
@ Patches/../C_code.c:1855: 		list[list[0]] = i; 
	strb	r4, [r2, r3]	@ i, *_7
.L1193:
@ Patches/../C_code.c:1843: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	adds	r4, r4, #1	@ i,
	adds	r5, r5, #2	@ ivtmp.1261,
	b	.L1191		@
.L1205:
@ Patches/../C_code.c:1858: } 
	mov	r0, r8	@, list
	@ sp needed	@
	pop	{r6, r7}
	mov	r9, r7
	mov	r8, r6
	pop	{r3, r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1207:
	.align	2
.L1206:
	.word	GetItemData
	.word	ItemExceptions+3
	.word	MaxItems_Link
	.word	MaxItems
	.size	BuildRingItemList, .-BuildRingItemList
	.align	1
	.p2align 2,,3
	.global	BuildSimilarPriceItemList
	.syntax unified
	.code	16
	.thumb_func
	.type	BuildSimilarPriceItemList, %function
BuildSimilarPriceItemList:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, fp	@,
	mov	r7, r10	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
	push	{r5, r6, r7, lr}	@
	sub	sp, sp, #12	@,,
@ Patches/../C_code.c:1861: u8* BuildSimilarPriceItemList(u8 list[], int item, int noWeapons, int costReq) { 
	str	r3, [sp]	@ tmp289, %sfp
@ Patches/../C_code.c:1865: 	int badAttr = IA_LOCK_3; // manakete lock 
	subs	r3, r2, #1	@ tmp261, tmp288
	sbcs	r2, r2, r3	@ tmp260, tmp288, tmp261
	movs	r3, #5	@ tmp263,
	rsbs	r2, r2, #0	@ tmp262, tmp260
	ands	r3, r2	@ tmp263, tmp262
	mov	r9, r3	@ badAttr, tmp263
	movs	r3, #128	@ tmp329,
	lsls	r3, r3, #3	@ tmp329, tmp329,
	mov	ip, r3	@ tmp329, tmp329
@ Patches/../C_code.c:1868: 	int originalPrice = GetItemData(item)->costPerUse; 
	ldr	r7, .L1247	@ tmp257,
@ Patches/../C_code.c:1861: u8* BuildSimilarPriceItemList(u8 list[], int item, int noWeapons, int costReq) { 
	mov	fp, r0	@ list, tmp286
@ Patches/../C_code.c:1868: 	int originalPrice = GetItemData(item)->costPerUse; 
	movs	r0, r1	@, item
@ Patches/../C_code.c:1861: u8* BuildSimilarPriceItemList(u8 list[], int item, int noWeapons, int costReq) { 
	movs	r5, r1	@ item, tmp287
@ Patches/../C_code.c:1865: 	int badAttr = IA_LOCK_3; // manakete lock 
	add	r9, r9, ip	@ badAttr, tmp329
@ Patches/../C_code.c:1868: 	int originalPrice = GetItemData(item)->costPerUse; 
	bl	.L223		@
@ Patches/../C_code.c:1870: 	originalPrice += 200 + (Div1((originalPrice * RandValues->variance), 100) * 5);
	ldr	r3, .L1247+4	@ tmp179,
	ldr	r3, [r3]	@ RandValues, RandValues
@ Patches/../C_code.c:1868: 	int originalPrice = GetItemData(item)->costPerUse; 
	ldrh	r4, [r0, #26]	@ originalPrice,
@ Patches/../C_code.c:1870: 	originalPrice += 200 + (Div1((originalPrice * RandValues->variance), 100) * 5);
	ldrh	r0, [r3, #2]	@ *RandValues.121_3, *RandValues.121_3
	lsls	r0, r0, #23	@ tmp184, *RandValues.121_3,
	lsrs	r0, r0, #27	@ tmp185, tmp184,
@ Patches/../C_code.c:1870: 	originalPrice += 200 + (Div1((originalPrice * RandValues->variance), 100) * 5);
	ldr	r3, .L1247+8	@ tmp188,
	movs	r1, #100	@,
	muls	r0, r4	@ tmp187, originalPrice
	bl	.L14		@
@ Patches/../C_code.c:1870: 	originalPrice += 200 + (Div1((originalPrice * RandValues->variance), 100) * 5);
	lsls	r3, r0, #2	@ tmp190, tmp291,
	adds	r3, r3, r0	@ tmp191, tmp190, tmp291
@ Patches/../C_code.c:1870: 	originalPrice += 200 + (Div1((originalPrice * RandValues->variance), 100) * 5);
	adds	r3, r3, #200	@ tmp192,
@ Patches/../C_code.c:1871: 	int uses = GetItemData(item)->maxUses;
	movs	r0, r5	@, item
@ Patches/../C_code.c:1870: 	originalPrice += 200 + (Div1((originalPrice * RandValues->variance), 100) * 5);
	mov	r10, r3	@ tmp192, tmp192
@ Patches/../C_code.c:1871: 	int uses = GetItemData(item)->maxUses;
	bl	.L223		@
@ Patches/../C_code.c:1871: 	int uses = GetItemData(item)->maxUses;
	ldrb	r3, [r0, #20]	@ uses,
@ Patches/../C_code.c:1870: 	originalPrice += 200 + (Div1((originalPrice * RandValues->variance), 100) * 5);
	add	r10, r10, r4	@ tmp192, originalPrice
@ Patches/../C_code.c:1872: 	if (!uses) { uses = 1; } 
	cmp	r3, #0	@ uses,
	beq	.L1210		@,
@ Patches/../C_code.c:1873: 	originalPrice = originalPrice * uses; 
	mov	r2, r10	@ originalPrice, originalPrice
	muls	r2, r3	@ originalPrice, uses
	mov	r10, r2	@ originalPrice, originalPrice
@ Patches/../C_code.c:1874: 	minPrice = minPrice * uses; 
	muls	r4, r3	@ originalPrice, uses
.L1210:
@ Patches/../C_code.c:1875: 	if (minPrice < 2000) { minPrice = 0; } 
	movs	r3, #250	@ tmp194,
@ Patches/../C_code.c:1875: 	if (minPrice < 2000) { minPrice = 0; } 
	movs	r2, #0	@ _22,
@ Patches/../C_code.c:1875: 	if (minPrice < 2000) { minPrice = 0; } 
	lsls	r3, r3, #3	@ tmp194, tmp194,
	cmp	r4, r3	@ originalPrice, tmp194
	blt	.L1211		@,
@ Patches/../C_code.c:1876: 	else { minPrice = minPrice >> 2; if (minPrice > 4000) { minPrice = 4000; } } 
	movs	r3, #250	@ tmp195,
@ Patches/../C_code.c:1876: 	else { minPrice = minPrice >> 2; if (minPrice > 4000) { minPrice = 4000; } } 
	asrs	r2, r4, #2	@ _22, originalPrice,
@ Patches/../C_code.c:1876: 	else { minPrice = minPrice >> 2; if (minPrice > 4000) { minPrice = 4000; } } 
	lsls	r3, r3, #4	@ tmp195, tmp195,
	cmp	r2, r3	@ _22, tmp195
	bgt	.L1243		@,
.L1211:
@ Patches/../C_code.c:1878: 	list[0] = 0; // count 
	movs	r3, #0	@ tmp196,
	mov	r1, fp	@ list, list
	strb	r3, [r1]	@ tmp196, *list_53(D)
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	ldr	r3, .L1247+12	@ tmp284,
	mov	r8, r7	@ tmp257, tmp257
@ Patches/../C_code.c:1879: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	movs	r4, #1	@ i,
	movs	r7, r3	@ tmp284, tmp284
	ldr	r5, .L1247+16	@ ivtmp.1283,
	ldr	r6, .L1247+20	@ tmp258,
	str	r2, [sp, #4]	@ _22, %sfp
.L1213:
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	ldr	r3, [r6]	@ MaxItems_Link.75_64, MaxItems_Link
@ Patches/../C_code.c:1212: 	if (MaxItems_Link) { return MaxItems_Link; } 
	cmp	r3, #0	@ MaxItems_Link.75_64,
	bne	.L1221		@,
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	ldr	r3, [r7]	@ MaxItems, MaxItems
	ldrb	r3, [r3]	@ _66, *MaxItems.76_65
@ Patches/../C_code.c:1213: 	if (*MaxItems) { return *MaxItems; } 
	cmp	r3, #0	@ _66,
	bne	.L1221		@,
@ Patches/../C_code.c:1214: 	const struct ItemData* table = GetItemData(1); 
	movs	r0, #1	@,
	bl	.L179		@
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	movs	r3, #1	@ i,
	b	.L1225		@
.L1223:
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:1217: 		table++; 
	adds	r0, r0, #36	@ table,
@ Patches/../C_code.c:1215: 	for (int i = 1; i < 255; i++) { 
	cmp	r3, #255	@ i,
	beq	.L1224		@,
.L1225:
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	ldrb	r2, [r0, #6]	@ MEM[(unsigned char *)table_90 + 6B], MEM[(unsigned char *)table_90 + 6B]
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	cmp	r2, r3	@ MEM[(unsigned char *)table_90 + 6B], i
	beq	.L1223		@,
@ Patches/../C_code.c:1216: 		if (table->number != i) { table--; break; } 
	subs	r0, r0, #36	@ table,
.L1224:
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	ldr	r2, [r7]	@ MaxItems.78_79, MaxItems
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	ldrb	r3, [r0, #6]	@ _81,
@ Patches/../C_code.c:1219: 	*MaxItems = table->number; 
	strb	r3, [r2]	@ _81, *MaxItems.78_79
.L1221:
@ Patches/../C_code.c:1879: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	cmp	r4, r3	@ i, MaxItems_Link.75_64
	bgt	.L1244		@,
@ Patches/../C_code.c:1880: 		if (ItemExceptions[i].NeverChangeInto) { continue; } 
	ldrb	r3, [r5]	@ MEM[(unsigned char *)_55], MEM[(unsigned char *)_55]
	cmp	r3, #0	@ MEM[(unsigned char *)_55],
	bne	.L1215		@,
@ Patches/../C_code.c:1881: 		table = GetItemData(i);  		
	movs	r0, r4	@, i
	bl	.L179		@
@ Patches/../C_code.c:1882: 		if (table->attributes & badAttr) { // must not be equippable/staff 
	mov	r2, r9	@ badAttr, badAttr
@ Patches/../C_code.c:1882: 		if (table->attributes & badAttr) { // must not be equippable/staff 
	ldr	r3, [r0, #8]	@ table_57->attributes, table_57->attributes
@ Patches/../C_code.c:1882: 		if (table->attributes & badAttr) { // must not be equippable/staff 
	tst	r3, r2	@ table_57->attributes, badAttr
	bne	.L1215		@,
@ Patches/../C_code.c:1888: 		if ((effectID == 0x33) || (effectID == 0x34) || (effectID == 0x35)) { // fe7 / fe8 (fe6 doesn't go this high) 
	ldrb	r3, [r0, #30]	@ tmp202,
	subs	r3, r3, #51	@ tmp203,
@ Patches/../C_code.c:1888: 		if ((effectID == 0x33) || (effectID == 0x34) || (effectID == 0x35)) { // fe7 / fe8 (fe6 doesn't go this high) 
	cmp	r3, #2	@ tmp203,
	bls	.L1215		@,
@ Patches/../C_code.c:1891: 		if (table->weaponType == 0xC) { // no rings for now 
	ldrb	r3, [r0, #7]	@ tmp204,
	cmp	r3, #12	@ tmp204,
	beq	.L1215		@,
@ Patches/../C_code.c:1895: 		if (table->descTextId == MONEYBAG_DESC) { // bags of gold description text id 
	ldrh	r3, [r0, #2]	@ _20,
@ Patches/../C_code.c:1895: 		if (table->descTextId == MONEYBAG_DESC) { // bags of gold description text id 
	ldr	r2, .L1247+24	@ tmp338,
	cmp	r3, r2	@ _20, tmp338
	beq	.L1215		@,
@ Patches/../C_code.c:1898: 		if (!table->nameTextId) { continue; }
	ldrh	r2, [r0]	@ *table_57, *table_57
@ Patches/../C_code.c:1903: 		if (table->descTextId == 0x4AB) { // dummy item description text id 
	cmp	r2, #0	@ *table_57,
	beq	.L1215		@,
	ldr	r2, .L1247+28	@ tmp339,
	mov	ip, r2	@ tmp339, tmp339
	add	r3, r3, ip	@ tmp217, tmp339
	cmp	r3, #0	@ tmp217,
	beq	.L1215		@,
@ Patches/../C_code.c:1910: 		if ((costReq) && (!cost)) { continue; } 
	ldr	r1, [sp]	@ costReq, %sfp
@ Patches/../C_code.c:1908: 		uses = table->maxUses; 
	ldrb	r2, [r0, #20]	@ _23,
@ Patches/../C_code.c:1909: 		int cost = table->costPerUse; 
	ldrh	r3, [r0, #26]	@ cost,
@ Patches/../C_code.c:1910: 		if ((costReq) && (!cost)) { continue; } 
	cmp	r1, #0	@ costReq,
	beq	.L1229		@,
	cmp	r3, #0	@ cost,
	beq	.L1215		@,
.L1229:
@ Patches/../C_code.c:1911: 		if (!uses) { uses = 1; } 
	cmp	r2, #0	@ _23,
	beq	.L1218		@,
@ Patches/../C_code.c:1912: 		if ((cost*uses) > originalPrice) { 
	muls	r3, r2	@ cost, _23
.L1218:
@ Patches/../C_code.c:1912: 		if ((cost*uses) > originalPrice) { 
	movs	r2, #1	@ tmp231,
	cmp	r10, r3	@ originalPrice, cost
	blt	.L1219		@,
	movs	r2, #0	@ tmp231,
.L1219:
@ Patches/../C_code.c:1915: 		if ((cost*uses) < minPrice) { 
	lsls	r2, r2, #24	@ tmp236, tmp231,
	bne	.L1215		@,
	ldr	r1, [sp, #4]	@ _22, %sfp
	movs	r2, #1	@ tmp237,
	cmp	r1, r3	@ _22, cost
	ble	.L1245		@,
	lsls	r2, r2, #24	@ tmp242, tmp237,
	bne	.L1215		@,
.L1246:
@ Patches/../C_code.c:1918: 		list[0]++; 
	mov	r3, fp	@ list, list
	mov	r2, fp	@ list, list
	ldrb	r3, [r3]	@ *list_53(D), *list_53(D)
	adds	r3, r3, #1	@ tmp245,
	lsls	r3, r3, #24	@ tmp246, tmp245,
	lsrs	r3, r3, #24	@ _30, tmp246,
	strb	r3, [r2]	@ _30, *list_53(D)
@ Patches/../C_code.c:1919: 		list[list[0]] = i; 
	strb	r4, [r2, r3]	@ i, *_32
.L1215:
@ Patches/../C_code.c:1879: 	for (int i = 1; i <= GetMaxItems(); i++) { 
	adds	r4, r4, #1	@ i,
	adds	r5, r5, #2	@ ivtmp.1283,
	b	.L1213		@
.L1244:
@ Patches/../C_code.c:1925: } 
	mov	r0, fp	@, list
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1243:
@ Patches/../C_code.c:1876: 	else { minPrice = minPrice >> 2; if (minPrice > 4000) { minPrice = 4000; } } 
	movs	r2, r3	@ _22, tmp195
	b	.L1211		@
.L1245:
@ Patches/../C_code.c:1915: 		if ((cost*uses) < minPrice) { 
	movs	r2, #0	@ tmp237,
	lsls	r2, r2, #24	@ tmp242, tmp237,
	beq	.L1246		@,
	b	.L1215		@
.L1248:
	.align	2
.L1247:
	.word	GetItemData
	.word	RandValues
	.word	Div1
	.word	MaxItems
	.word	ItemExceptions+3
	.word	MaxItems_Link
	.word	1185
	.word	-1195
	.size	BuildSimilarPriceItemList, .-BuildSimilarPriceItemList
	.align	1
	.p2align 2,,3
	.syntax unified
	.code	16
	.thumb_func
	.type	RandNewItem.part.0, %function
RandNewItem.part.0:
	@ Function supports interworking.
	@ args = 8, pretend = 0, frame = 256
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:1946: 	item &= 0xFF; 
	movs	r4, #255	@ tmp136,
	ands	r4, r0	@ item, tmp160
@ Patches/../C_code.c:1947: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	ldr	r0, .L1266	@ tmp137,
@ Patches/../C_code.c:1944: int RandNewItem(int item, int noise[], int offset, int costReq, int varyByCh, int noWeapons) { 
	movs	r6, r2	@ offset, tmp162
@ Patches/../C_code.c:1947: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	lsls	r2, r4, #1	@ tmp138, item,
@ Patches/../C_code.c:1947: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	ldrb	r2, [r2, r0]	@ tmp139, ItemExceptions
@ Patches/../C_code.c:1944: int RandNewItem(int item, int noise[], int offset, int costReq, int varyByCh, int noWeapons) { 
	movs	r5, r1	@ noise, tmp161
	sub	sp, sp, #256	@,,
@ Patches/../C_code.c:1947: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	cmp	r2, #0	@ tmp139,
	bne	.L1252		@,
@ Patches/../C_code.c:1949: 	list[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	movs	r2, #99	@ tmp143,
	mov	r1, sp	@ tmp170,
@ Patches/../C_code.c:1951: 	BuildSimilarPriceItemList(list, item, noWeapons, costReq); 
	mov	r0, sp	@,
@ Patches/../C_code.c:1949: 	list[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	strb	r2, [r1]	@ tmp143, list[0]
@ Patches/../C_code.c:1951: 	BuildSimilarPriceItemList(list, item, noWeapons, costReq); 
	movs	r1, r4	@, item
	ldr	r2, [sp, #276]	@, noWeapons
	bl	BuildSimilarPriceItemList		@
@ Patches/../C_code.c:1952: 	if (list[0]) { 
	mov	r3, sp	@ tmp171,
	ldrb	r1, [r3]	@ _7, list
@ Patches/../C_code.c:1952: 	if (list[0]) { 
	cmp	r1, #0	@ _7,
	beq	.L1252		@,
@ Patches/../C_code.c:1953: 		if (varyByCh) { 
	ldr	r3, [sp, #272]	@ tmp172, varyByCh
@ Patches/../C_code.c:1954: 			c = HashByte_Ch(item, list[0]+1, noise, offset); 
	adds	r1, r1, #1	@ _53,
@ Patches/../C_code.c:1953: 		if (varyByCh) { 
	cmp	r3, #0	@ tmp172,
	bne	.L1264		@,
.L1253:
@ Patches/../C_code.c:1957: 			c = HashByte_Global(item, list[0]+1, noise, offset); 
	movs	r3, r6	@, offset
	movs	r2, r5	@, noise
	movs	r0, r4	@, item
	bl	HashByte_Global		@
@ Patches/../C_code.c:1959: 		if (!c) { c = 1; } // never 0  
	cmp	r0, #0	@ c,
	bne	.L1258		@,
@ Patches/../C_code.c:1959: 		if (!c) { c = 1; } // never 0  
	adds	r0, r0, #1	@ c,
.L1258:
@ Patches/../C_code.c:1960: 		item = list[c]; 
	mov	r3, sp	@ tmp174,
	ldrb	r4, [r3, r0]	@ item, list
.L1252:
@ Patches/../C_code.c:1962: 	return MakeNewItem(item); 
	movs	r0, r4	@, item
	ldr	r3, .L1266+4	@ tmp157,
	bl	.L14		@
@ Patches/../C_code.c:1963: } 
	add	sp, sp, #256	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1264:
	movs	r0, r5	@ _16, noise
	movs	r3, r5	@ ivtmp.1295, noise
	adds	r0, r0, #16	@ _16,
.L1256:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_39], MEM[(int *)_39]
	cmp	r2, #0	@ MEM[(int *)_39],
	beq	.L1265		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.1295,
	cmp	r0, r3	@ _16, ivtmp.1295
	bne	.L1256		@,
	b	.L1253		@
.L1265:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, .L1266+8	@ tmp149,
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r3]	@ gCh, *_39
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L1253		@
.L1267:
	.align	2
.L1266:
	.word	ItemExceptions
	.word	MakeNewItem
	.word	gCh
	.size	RandNewItem.part.0, .-RandNewItem.part.0
	.align	1
	.p2align 2,,3
	.syntax unified
	.code	16
	.thumb_func
	.type	RandNewWeapon.part.0, %function
RandNewWeapon.part.0:
	@ Function supports interworking.
	@ args = 4, pretend = 0, frame = 256
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
@ Patches/../C_code.c:1968: 	item &= 0xFF; 
	movs	r4, #255	@ tmp188,
@ Patches/../C_code.c:1966: int RandNewWeapon(struct Unit* unit, int item, int noise[], int offset, u8 list[]) { 
	push	{lr}	@
	movs	r5, r0	@ unit, tmp286
	sub	sp, sp, #256	@,,
@ Patches/../C_code.c:1966: int RandNewWeapon(struct Unit* unit, int item, int noise[], int offset, u8 list[]) { 
	movs	r7, r2	@ noise, tmp288
	mov	r8, r3	@ offset, tmp289
@ Patches/../C_code.c:1968: 	item &= 0xFF; 
	ands	r4, r1	@ item, tmp287
@ Patches/../C_code.c:1182: 	int result = ShouldRandomizeClass(unit); 
	bl	ShouldRandomizeClass		@
@ Patches/../C_code.c:1183: 	result |= ShouldRandomizeRecruitmentForUnitID(unit->pCharacterData->number); 
	ldr	r3, [r5]	@ unit_3(D)->pCharacterData, unit_3(D)->pCharacterData
@ Patches/../C_code.c:1182: 	int result = ShouldRandomizeClass(unit); 
	movs	r6, r0	@ result, tmp290
@ Patches/../C_code.c:1183: 	result |= ShouldRandomizeRecruitmentForUnitID(unit->pCharacterData->number); 
	ldrb	r0, [r3, #4]	@ tmp190,
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldr	r3, .L1346	@ tmp191,
	bl	.L14		@
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldrh	r3, [r0, #6]	@ tmp192,
	cmp	r3, #0	@ tmp192,
	beq	.L1269		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L1346+4	@ tmp194,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r1, [r3]	@ *RecruitValues.0_108, *RecruitValues.0_108
	lsls	r1, r1, #29	@ tmp199, *RecruitValues.0_108,
	lsrs	r1, r1, #29	@ tmp200, tmp199,
@ Patches/../C_code.c:1183: 	result |= ShouldRandomizeRecruitmentForUnitID(unit->pCharacterData->number); 
	orrs	r6, r1	@ result, tmp200
.L1269:
@ Patches/../C_code.c:1969: 	if (!IsClassOrRecruitmentRandomized(unit)) { return MakeNewItem(item); } 
	cmp	r6, #0	@ result,
	beq	.L1298		@,
@ Patches/../C_code.c:1970: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	ldr	r3, .L1346+8	@ tmp203,
	lsls	r2, r4, #1	@ tmp204, item,
@ Patches/../C_code.c:1970: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	ldrb	r3, [r2, r3]	@ tmp205, ItemExceptions
@ Patches/../C_code.c:1970: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	movs	r0, r4	@, item
@ Patches/../C_code.c:1970: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	cmp	r3, #0	@ tmp205,
	bne	.L1333		@,
@ Patches/../C_code.c:1974: 	if (!((GetItemData(item)->attributes) & (IA_REQUIRES_WEXP))) { // not a wep/staff 
	ldr	r3, .L1346+12	@ tmp207,
	bl	.L14		@
@ Patches/../C_code.c:1974: 	if (!((GetItemData(item)->attributes) & (IA_REQUIRES_WEXP))) { // not a wep/staff 
	movs	r3, #5	@ tmp208,
	ldr	r2, [r0, #8]	@ _8->attributes, _8->attributes
@ Patches/../C_code.c:1974: 	if (!((GetItemData(item)->attributes) & (IA_REQUIRES_WEXP))) { // not a wep/staff 
	tst	r2, r3	@ _8->attributes, tmp208
	bne	.L1273		@,
@ Patches/../C_code.c:1975: 		if ((unit->pClassData->number == CLASS_THIEF_A) || (unit->pClassData->number == CLASS_THIEF_B)) { // Thief 
	ldr	r3, [r5, #4]	@ unit_3(D)->pClassData, unit_3(D)->pClassData
	ldrb	r3, [r3, #4]	@ _12,
@ Patches/../C_code.c:1975: 		if ((unit->pClassData->number == CLASS_THIEF_A) || (unit->pClassData->number == CLASS_THIEF_B)) { // Thief 
	cmp	r3, #13	@ _12,
	beq	.L1281		@,
	cmp	r3, #51	@ _12,
	beq	.L1281		@,
@ Patches/../C_code.c:1978: 		if (item == CHEST_KEY_A) { return MakeNewItem(CHEST_KEY_A); } 
	cmp	r4, #105	@ item,
	bne	.LCB7353	@
	b	.L1337	@long jump	@
.LCB7353:
@ Patches/../C_code.c:1979: 		if (item == CHEST_KEY_B) { return MakeNewItem(CHEST_KEY_B); } 
	cmp	r4, #121	@ item,
	bne	.LCB7355	@
	b	.L1338	@long jump	@
.LCB7355:
@ Patches/../C_code.c:1980: 		if (item == DOOR_KEY) { return MakeNewItem(DOOR_KEY); }  
	cmp	r4, #106	@ item,
	bne	.LCB7357	@
	b	.L1339	@long jump	@
.LCB7357:
@ Patches/../C_code.c:1981: 		if (UNIT_FACTION(unit) != FACTION_BLUE) { 
	movs	r2, #192	@ tmp229,
	movs	r3, #11	@ tmp228,
	movs	r1, r2	@ _22, tmp229
	ldrsb	r3, [r5, r3]	@ tmp228,
	ands	r1, r3	@ _22, tmp228
@ Patches/../C_code.c:1981: 		if (UNIT_FACTION(unit) != FACTION_BLUE) { 
	tst	r2, r3	@ tmp229, tmp228
	beq	.L1331		@,
@ Patches/../C_code.c:1982: 			if (item == LOCKPICK) { return MakeNewItem(LOCKPICK); } // lockpick  
	cmp	r4, #107	@ item,
	beq	.L1281		@,
@ Patches/../C_code.c:1517: 	int uid = unit->pCharacterData->number; 
	ldr	r3, [r5]	@ unit_3(D)->pCharacterData, unit_3(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ _25,
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	cmp	r1, #128	@ _22,
	bne	.L1331		@,
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	cmp	r3, #44	@ _25,
	bhi	.L1286		@,
.L1331:
@ Patches/../C_code.c:1985: 		if (IsUnitAlliedOrPlayable(unit)) { if (item == VULNERARY) { return MakeNewItem(VULNERARY); } }
	cmp	r4, #108	@ item,
	bne	.LCB7375	@
	b	.L1340	@long jump	@
.LCB7375:
@ Patches/../C_code.c:1986: 		if (IsUnitAlliedOrPlayable(unit)) { if (item == ELIXIR) { return MakeNewItem(ELIXIR); } }
	cmp	r4, #109	@ item,
	bne	.LCB7377	@
	b	.L1341	@long jump	@
.LCB7377:
.L1286:
@ Patches/../C_code.c:1988: 		list2[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	mov	r6, sp	@ tmp285,
	movs	r3, #99	@ tmp237,
@ Patches/../C_code.c:1989: 		BuildSimilarPriceItemList(list2, item, true, false); 
	movs	r1, r4	@, item
@ Patches/../C_code.c:1988: 		list2[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	strb	r3, [r6]	@ tmp237, MEM[(u8[255] *)_163][0]
@ Patches/../C_code.c:1989: 		BuildSimilarPriceItemList(list2, item, true, false); 
	movs	r2, #1	@,
	movs	r3, #0	@,
	movs	r0, r6	@, tmp285
	bl	BuildSimilarPriceItemList		@
@ Patches/../C_code.c:1990: 		if (list2[0]) { 
	ldrb	r1, [r6]	@ _28, MEM[(u8[255] *)_163]
@ Patches/../C_code.c:1990: 		if (list2[0]) { 
	cmp	r1, #0	@ _28,
	bne	.L1342		@,
.L1298:
@ Patches/../C_code.c:2025: 	return MakeNewItem(item); 
	movs	r0, r4	@, item
.L1333:
	ldr	r3, .L1346+16	@ tmp283,
	bl	.L14		@
.L1268:
@ Patches/../C_code.c:2026: } 
	add	sp, sp, #256	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1273:
@ Patches/../C_code.c:1998: 	if ((unit->pCharacterData->attributes | unit->pClassData->attributes)& (CA_DANCE|CA_PLAY)) { 
	ldr	r3, [r5]	@ unit_3(D)->pCharacterData, unit_3(D)->pCharacterData
@ Patches/../C_code.c:1998: 	if ((unit->pCharacterData->attributes | unit->pClassData->attributes)& (CA_DANCE|CA_PLAY)) { 
	ldr	r2, [r5, #4]	@ unit_3(D)->pClassData, unit_3(D)->pClassData
@ Patches/../C_code.c:1998: 	if ((unit->pCharacterData->attributes | unit->pClassData->attributes)& (CA_DANCE|CA_PLAY)) { 
	ldr	r3, [r3, #40]	@ _40->attributes, _40->attributes
	ldr	r2, [r2, #40]	@ _42->attributes, _42->attributes
	orrs	r3, r2	@ tmp252, _42->attributes
@ Patches/../C_code.c:1998: 	if ((unit->pCharacterData->attributes | unit->pClassData->attributes)& (CA_DANCE|CA_PLAY)) { 
	movs	r2, #48	@ tmp255,
@ Patches/../C_code.c:1998: 	if ((unit->pCharacterData->attributes | unit->pClassData->attributes)& (CA_DANCE|CA_PLAY)) { 
	tst	r2, r3	@ tmp255, tmp252
	bne	.L1343		@,
@ Patches/../C_code.c:2020: 	if (list[0]) { 
	ldr	r3, [sp, #280]	@ tmp312, list
	ldrb	r1, [r3]	@ _57, *list_56(D)
@ Patches/../C_code.c:2020: 	if (list[0]) { 
	cmp	r1, #0	@ _57,
	beq	.L1298		@,
	movs	r0, r7	@ _23, noise
	movs	r3, r7	@ ivtmp.1322, noise
@ Patches/../C_code.c:2021: 		c = HashByte_Ch(item, list[0]+1, noise, offset); 
	adds	r1, r1, #1	@ _59,
	adds	r0, r0, #16	@ _23,
.L1301:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_135], MEM[(int *)_135]
	cmp	r2, #0	@ MEM[(int *)_135],
	beq	.L1344		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.1322,
	cmp	r0, r3	@ _23, ivtmp.1322
	bne	.L1301		@,
.L1300:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	mov	r3, r8	@, offset
	movs	r2, r7	@, noise
	movs	r0, r4	@, item
	bl	HashByte_Global		@
@ Patches/../C_code.c:2023: 		item = list[c]; 
	adds	r3, r0, #0	@ _141, tmp275
	cmp	r0, #0	@ tmp275,
	beq	.L1345		@,
.L1302:
@ Patches/../C_code.c:2023: 		item = list[c]; 
	ldr	r2, [sp, #280]	@ tmp314, list
@ Patches/../C_code.c:2023: 		item = list[c]; 
	lsls	r3, r3, #16	@ tmp282, _141,
	lsrs	r3, r3, #16	@ tmp281, tmp282,
@ Patches/../C_code.c:2023: 		item = list[c]; 
	ldrb	r4, [r2, r3]	@ item, *_64
@ Patches/../C_code.c:2025: 	return MakeNewItem(item); 
	movs	r0, r4	@, item
	b	.L1333		@
.L1281:
@ Patches/../C_code.c:1976: 			return MakeNewItem(LOCKPICK); // Non weapons become lockpick for thieves  
	ldr	r3, .L1346+16	@ tmp224,
	movs	r0, #107	@,
	bl	.L14		@
	b	.L1268		@
.L1343:
@ Patches/../C_code.c:2008: 		list2[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	mov	r6, sp	@ tmp285,
	movs	r3, #99	@ tmp259,
@ Patches/../C_code.c:2009: 		BuildRingItemList(list2, unit);
	movs	r1, r5	@, unit
	movs	r0, r6	@, tmp285
@ Patches/../C_code.c:2008: 		list2[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	strb	r3, [r6]	@ tmp259, MEM[(u8[255] *)_163][0]
@ Patches/../C_code.c:2009: 		BuildRingItemList(list2, unit);
	bl	BuildRingItemList		@
@ Patches/../C_code.c:2010: 		if (list2[0]) { 
	ldrb	r1, [r6]	@ _46, MEM[(u8[255] *)_163]
@ Patches/../C_code.c:2010: 		if (list2[0]) { 
	cmp	r1, #0	@ _46,
	beq	.L1298		@,
	movs	r0, r7	@ _139, noise
	movs	r3, r7	@ ivtmp.1315, noise
@ Patches/../C_code.c:2011: 			c = HashByte_Ch(item, list2[0]+1, noise, offset); 
	adds	r1, r1, #1	@ _48,
	adds	r0, r0, #16	@ _139,
.L1296:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_125], MEM[(int *)_125]
	cmp	r2, #0	@ MEM[(int *)_125],
	beq	.L1336		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.1315,
	cmp	r3, r0	@ ivtmp.1315, _139
	bne	.L1296		@,
.L1295:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	mov	r3, r8	@, offset
	movs	r2, r7	@, noise
	movs	r0, r4	@, item
	bl	HashByte_Global		@
@ Patches/../C_code.c:2012: 			if (!c) { c = 1; } // never 0  
	cmp	r0, #0	@ c,
	bne	.L1297		@,
@ Patches/../C_code.c:2012: 			if (!c) { c = 1; } // never 0  
	adds	r0, r0, #1	@ c,
.L1297:
@ Patches/../C_code.c:2013: 			item = list2[c]; 
	ldrb	r4, [r6, r0]	@ item, MEM[(u8[255] *)_163]
@ Patches/../C_code.c:2025: 	return MakeNewItem(item); 
	movs	r0, r4	@, item
	b	.L1333		@
.L1342:
	movs	r0, r7	@ _112, noise
	movs	r3, r7	@ ivtmp.1308, noise
@ Patches/../C_code.c:1991: 			c = HashByte_Ch(item, list2[0]+1, noise, offset); 
	adds	r1, r1, #1	@ _30,
	adds	r0, r0, #16	@ _112,
.L1290:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_115], MEM[(int *)_115]
	cmp	r2, #0	@ MEM[(int *)_115],
	beq	.L1336		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.1308,
	cmp	r3, r0	@ ivtmp.1308, _112
	bne	.L1290		@,
	b	.L1295		@
.L1345:
@ Patches/../C_code.c:2023: 		item = list[c]; 
	movs	r3, #1	@ _141,
	b	.L1302		@
.L1337:
@ Patches/../C_code.c:1978: 		if (item == CHEST_KEY_A) { return MakeNewItem(CHEST_KEY_A); } 
	ldr	r3, .L1346+16	@ tmp225,
	movs	r0, #105	@,
	bl	.L14		@
@ Patches/../C_code.c:1978: 		if (item == CHEST_KEY_A) { return MakeNewItem(CHEST_KEY_A); } 
	b	.L1268		@
.L1338:
@ Patches/../C_code.c:1979: 		if (item == CHEST_KEY_B) { return MakeNewItem(CHEST_KEY_B); } 
	ldr	r3, .L1346+16	@ tmp226,
	movs	r0, #121	@,
	bl	.L14		@
@ Patches/../C_code.c:1979: 		if (item == CHEST_KEY_B) { return MakeNewItem(CHEST_KEY_B); } 
	b	.L1268		@
.L1339:
@ Patches/../C_code.c:1980: 		if (item == DOOR_KEY) { return MakeNewItem(DOOR_KEY); }  
	ldr	r3, .L1346+16	@ tmp227,
	movs	r0, #106	@,
	bl	.L14		@
@ Patches/../C_code.c:1980: 		if (item == DOOR_KEY) { return MakeNewItem(DOOR_KEY); }  
	b	.L1268		@
.L1341:
@ Patches/../C_code.c:1986: 		if (IsUnitAlliedOrPlayable(unit)) { if (item == ELIXIR) { return MakeNewItem(ELIXIR); } }
	ldr	r3, .L1346+16	@ tmp234,
	movs	r0, #109	@,
	bl	.L14		@
@ Patches/../C_code.c:1986: 		if (IsUnitAlliedOrPlayable(unit)) { if (item == ELIXIR) { return MakeNewItem(ELIXIR); } }
	b	.L1268		@
.L1344:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, .L1346+20	@ tmp273,
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r3]	@ gCh, *_135
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L1300		@
.L1340:
@ Patches/../C_code.c:1985: 		if (IsUnitAlliedOrPlayable(unit)) { if (item == VULNERARY) { return MakeNewItem(VULNERARY); } }
	ldr	r3, .L1346+16	@ tmp233,
	movs	r0, #108	@,
	bl	.L14		@
@ Patches/../C_code.c:1985: 		if (IsUnitAlliedOrPlayable(unit)) { if (item == VULNERARY) { return MakeNewItem(VULNERARY); } }
	b	.L1268		@
.L1336:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, .L1346+20	@ tmp265,
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r3]	@ gCh,* ivtmp.1315
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L1295		@
.L1347:
	.align	2
.L1346:
	.word	GetCharacterData
	.word	RecruitValues
	.word	ItemExceptions
	.word	GetItemData
	.word	MakeNewItem
	.word	gCh
	.size	RandNewWeapon.part.0, .-RandNewWeapon.part.0
	.align	1
	.p2align 2,,3
	.global	RandRareItem
	.syntax unified
	.code	16
	.thumb_func
	.type	RandRareItem, %function
RandRareItem:
	@ Function supports interworking.
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:1929: int RandRareItem(int item, int noise[], int offset, int costReq, int varyByCh) { 
	movs	r3, r2	@ offset, tmp153
	movs	r5, r1	@ noise, tmp152
@ Patches/../C_code.c:1930: 	if (!item) { return item; } 
	cmp	r0, #0	@ item,
	beq	.L1356		@,
@ Patches/../C_code.c:1931: 	item &= 0xFF; 
	movs	r2, #255	@ tmp134,
@ Patches/../C_code.c:1932: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	ldr	r4, .L1361	@ tmp135,
@ Patches/../C_code.c:1931: 	item &= 0xFF; 
	ands	r0, r2	@ item, tmp134
@ Patches/../C_code.c:1932: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	lsls	r2, r0, #1	@ tmp136, item,
@ Patches/../C_code.c:1932: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	ldrb	r2, [r2, r4]	@ tmp137, ItemExceptions
	cmp	r2, #0	@ tmp137,
	bne	.L1358		@,
@ Patches/../C_code.c:1935: 		c = HashByte_Ch(item, RareItemTableSize, noise, offset); 
	ldr	r2, .L1361+4	@ tmp139,
	ldr	r1, [r2]	@ pretmp_44, RareItemTableSize
@ Patches/../C_code.c:1934: 	if (varyByCh) { 
	ldr	r2, [sp, #16]	@ tmp160, varyByCh
	cmp	r2, #0	@ tmp160,
	bne	.L1359		@,
.L1351:
@ Patches/../C_code.c:1938: 		c = HashByte_Global(item, RareItemTableSize, noise, offset); 
	movs	r2, r5	@, noise
	bl	HashByte_Global		@
@ Patches/../C_code.c:1940: 	item = RareItemTable[c]; 
	ldr	r3, .L1361+8	@ tmp147,
@ Patches/../C_code.c:1940: 	item = RareItemTable[c]; 
	ldrb	r0, [r3, r0]	@ item, RareItemTable
.L1358:
@ Patches/../C_code.c:1941: 	return MakeNewItem(item); 
	ldr	r3, .L1361+12	@ tmp149,
	bl	.L14		@
.L1348:
@ Patches/../C_code.c:1942: } 
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1356:
@ Patches/../C_code.c:1930: 	if (!item) { return item; } 
	movs	r0, #0	@ <retval>,
	b	.L1348		@
.L1359:
	movs	r6, r5	@ _7, noise
	movs	r4, r5	@ ivtmp.1333, noise
	adds	r6, r6, #16	@ _7,
.L1354:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r4]	@ MEM[(int *)_28], MEM[(int *)_28]
	cmp	r2, #0	@ MEM[(int *)_28],
	beq	.L1360		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r4, r4, #4	@ ivtmp.1333,
	cmp	r6, r4	@ _7, ivtmp.1333
	bne	.L1354		@,
	b	.L1351		@
.L1360:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, .L1361+16	@ tmp141,
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r4]	@ gCh, *_28
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L1351		@
.L1362:
	.align	2
.L1361:
	.word	ItemExceptions
	.word	RareItemTableSize
	.word	RareItemTable
	.word	MakeNewItem
	.word	gCh
	.size	RandRareItem, .-RandRareItem
	.align	1
	.p2align 2,,3
	.global	RandNewItem
	.syntax unified
	.code	16
	.thumb_func
	.type	RandNewItem, %function
RandNewItem:
	@ Function supports interworking.
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
	sub	sp, sp, #8	@,,
@ Patches/../C_code.c:1945: 	if (!item) { return item; } 
	cmp	r0, #0	@ item,
	beq	.L1365		@,
	ldr	r4, [sp, #20]	@ tmp128, noWeapons
	str	r4, [sp, #4]	@ tmp128,
	ldr	r4, [sp, #16]	@ tmp129, varyByCh
	str	r4, [sp]	@ tmp129,
	bl	RandNewItem.part.0		@
.L1363:
@ Patches/../C_code.c:1963: } 
	add	sp, sp, #8	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L1365:
@ Patches/../C_code.c:1945: 	if (!item) { return item; } 
	movs	r0, #0	@ <retval>,
	b	.L1363		@
	.size	RandNewItem, .-RandNewItem
	.align	1
	.p2align 2,,3
	.global	RandNewWeapon
	.syntax unified
	.code	16
	.thumb_func
	.type	RandNewWeapon, %function
RandNewWeapon:
	@ Function supports interworking.
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
	sub	sp, sp, #8	@,,
@ Patches/../C_code.c:1967: 	if (!item) { return item; } 
	cmp	r1, #0	@ item,
	beq	.L1367		@,
	ldr	r4, [sp, #16]	@ tmp127, list
	str	r4, [sp]	@ tmp127,
	bl	RandNewWeapon.part.0		@
	movs	r1, r0	@ item, tmp125
.L1367:
@ Patches/../C_code.c:2026: } 
	movs	r0, r1	@, item
	add	sp, sp, #8	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
	.size	RandNewWeapon, .-RandNewWeapon
	.align	1
	.p2align 2,,3
	.global	NewPopup_ItemGot
	.syntax unified
	.code	16
	.thumb_func
	.type	NewPopup_ItemGot, %function
NewPopup_ItemGot:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	movs	r3, r0	@ parent, tmp168
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2048:          ? Proc_Start(ProcScr_GotItem, parent)
	ldr	r0, .L1383	@ tmp133,
@ Patches/../C_code.c:2044: {
	movs	r5, r1	@ unit, tmp169
	movs	r4, r2	@ item, tmp170
@ Patches/../C_code.c:2048:          ? Proc_Start(ProcScr_GotItem, parent)
	movs	r1, r3	@, parent
@ Patches/../C_code.c:2044: {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:2047:     proc = (PROC_IS_ROOT(parent))
	cmp	r3, #7	@ parent,
	bhi	.L1372		@,
@ Patches/../C_code.c:2048:          ? Proc_Start(ProcScr_GotItem, parent)
	ldr	r3, .L1383+4	@ tmp134,
	bl	.L14		@
	movs	r6, r0	@ iftmp.127_17, tmp171
.L1373:
@ Patches/../C_code.c:2051: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #8	@,
	ldr	r3, .L1383+8	@ tmp140,
	movs	r1, #0	@,
	add	r0, sp, #16	@,,
	bl	.L14		@
@ Patches/../C_code.c:2052: 	noise[0] = unit->xPos; 
	movs	r3, #16	@ tmp144,
	ldrsb	r3, [r5, r3]	@ tmp144,
	str	r3, [sp, #8]	@ tmp144, noise[0]
@ Patches/../C_code.c:2053: 	noise[1] = unit->yPos; 
	movs	r3, #17	@ tmp146,
@ Patches/../C_code.c:2055: 	if (RandBitflags->foundItems) { item = RandNewItem(item, noise, 0, false, true, false); } 
	movs	r2, #48	@ tmp154,
@ Patches/../C_code.c:2053: 	noise[1] = unit->yPos; 
	ldrsb	r3, [r5, r3]	@ tmp146,
	str	r3, [sp, #12]	@ tmp146, noise[1]
@ Patches/../C_code.c:2055: 	if (RandBitflags->foundItems) { item = RandNewItem(item, noise, 0, false, true, false); } 
	ldr	r3, .L1383+12	@ tmp148,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #1]	@ *RandBitflags.129_6, *RandBitflags.129_6
@ Patches/../C_code.c:2055: 	if (RandBitflags->foundItems) { item = RandNewItem(item, noise, 0, false, true, false); } 
	movs	r0, r4	@ prephitmp_61, item
@ Patches/../C_code.c:2055: 	if (RandBitflags->foundItems) { item = RandNewItem(item, noise, 0, false, true, false); } 
	tst	r2, r3	@ tmp154, *RandBitflags.129_6
	beq	.L1374		@,
@ Patches/../C_code.c:1945: 	if (!item) { return item; } 
	cmp	r4, #0	@ prephitmp_61,
	beq	.L1374		@,
	movs	r3, #0	@ tmp159,
	str	r3, [sp, #4]	@ tmp159,
	adds	r3, r3, #1	@ tmp160,
	str	r3, [sp]	@ tmp160,
	movs	r2, #0	@,
	movs	r3, #0	@,
	add	r1, sp, #8	@ tmp178,,
	bl	RandNewItem.part.0		@
	lsls	r0, r0, #16	@ tmp161, tmp173,
	lsrs	r0, r0, #16	@ prephitmp_61, tmp161,
.L1374:
@ Patches/../C_code.c:2060:     if (FACTION_RED == UNIT_FACTION(unit))
	movs	r2, #11	@ tmp162,
	movs	r3, #192	@ tmp163,
@ Patches/../C_code.c:2057:     proc->item = item;
	str	r0, [r6, #88]	@ prephitmp_61, MEM[(struct GotItemPopupProc *)iftmp.127_17].item
@ Patches/../C_code.c:2058:     proc->unit = unit;
	str	r5, [r6, #84]	@ unit, MEM[(struct GotItemPopupProc *)iftmp.127_17].unit
@ Patches/../C_code.c:2060:     if (FACTION_RED == UNIT_FACTION(unit))
	ldrsb	r2, [r5, r2]	@ tmp162,
	ands	r3, r2	@ tmp164, tmp162
@ Patches/../C_code.c:2060:     if (FACTION_RED == UNIT_FACTION(unit))
	cmp	r3, #128	@ tmp164,
	bne	.L1371		@,
@ Patches/../C_code.c:2061:         unit->state |= US_DROP_ITEM;
	movs	r3, #128	@ tmp167,
	ldr	r2, [r5, #12]	@ unit_28(D)->state, unit_28(D)->state
	lsls	r3, r3, #5	@ tmp167, tmp167,
	orrs	r3, r2	@ tmp165, unit_28(D)->state
	str	r3, [r5, #12]	@ tmp165, unit_28(D)->state
.L1371:
@ Patches/../C_code.c:2062: }
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1372:
@ Patches/../C_code.c:2049:          : Proc_StartBlocking(ProcScr_GotItem, parent);
	ldr	r3, .L1383+16	@ tmp136,
	bl	.L14		@
	movs	r6, r0	@ iftmp.127_17, tmp172
	b	.L1373		@
.L1384:
	.align	2
.L1383:
	.word	ProcScr_GotItem
	.word	Proc_Start
	.word	memset
	.word	RandBitflags
	.word	Proc_StartBlocking
	.size	NewPopup_ItemGot, .-NewPopup_ItemGot
	.align	1
	.p2align 2,,3
	.global	NewPopup_ItemGot_NoRand
	.syntax unified
	.code	16
	.thumb_func
	.type	NewPopup_ItemGot_NoRand, %function
NewPopup_ItemGot_NoRand:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2074:          ? Proc_Start(ProcScr_GotItem, parent)
	ldr	r3, .L1389	@ tmp125,
@ Patches/../C_code.c:2070: {
	movs	r4, r1	@ unit, tmp136
	movs	r5, r2	@ item, tmp137
@ Patches/../C_code.c:2074:          ? Proc_Start(ProcScr_GotItem, parent)
	movs	r1, r0	@, parent
@ Patches/../C_code.c:2073:     proc = (PROC_IS_ROOT(parent))
	cmp	r0, #7	@ parent,
	bhi	.L1386		@,
@ Patches/../C_code.c:2074:          ? Proc_Start(ProcScr_GotItem, parent)
	movs	r0, r3	@ tmp125, tmp125
	ldr	r3, .L1389+4	@ tmp126,
	bl	.L14		@
.L1387:
@ Patches/../C_code.c:2081:     if (FACTION_RED == UNIT_FACTION(unit))
	movs	r2, #11	@ tmp129,
	movs	r3, #192	@ tmp130,
@ Patches/../C_code.c:2078:     proc->item = item;
	str	r5, [r0, #88]	@ item, MEM[(struct GotItemPopupProc *)iftmp.130_8].item
@ Patches/../C_code.c:2079:     proc->unit = unit;
	str	r4, [r0, #84]	@ unit, MEM[(struct GotItemPopupProc *)iftmp.130_8].unit
@ Patches/../C_code.c:2081:     if (FACTION_RED == UNIT_FACTION(unit))
	ldrsb	r2, [r4, r2]	@ tmp129,
	ands	r3, r2	@ tmp131, tmp129
@ Patches/../C_code.c:2081:     if (FACTION_RED == UNIT_FACTION(unit))
	cmp	r3, #128	@ tmp131,
	bne	.L1385		@,
@ Patches/../C_code.c:2082:         unit->state |= US_DROP_ITEM;
	movs	r3, #128	@ tmp134,
	ldr	r2, [r4, #12]	@ unit_19(D)->state, unit_19(D)->state
	lsls	r3, r3, #5	@ tmp134, tmp134,
	orrs	r3, r2	@ tmp132, unit_19(D)->state
	str	r3, [r4, #12]	@ tmp132, unit_19(D)->state
.L1385:
@ Patches/../C_code.c:2083: }
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1386:
@ Patches/../C_code.c:2075:          : Proc_StartBlocking(ProcScr_GotItem, parent);
	movs	r0, r3	@ tmp127, tmp127
	ldr	r3, .L1389+8	@ tmp128,
	bl	.L14		@
	b	.L1387		@
.L1390:
	.align	2
.L1389:
	.word	ProcScr_GotItem
	.word	Proc_Start
	.word	Proc_StartBlocking
	.size	NewPopup_ItemGot_NoRand, .-NewPopup_ItemGot_NoRand
	.align	1
	.p2align 2,,3
	.global	NewPopup_GoldGot
	.syntax unified
	.code	16
	.thumb_func
	.type	NewPopup_GoldGot, %function
NewPopup_GoldGot:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:2101: {
	movs	r5, r1	@ unit, tmp167
@ Patches/../C_code.c:2105: 	int noise[4] = {0, 0, 0, 0}; 
	ldr	r3, .L1401	@ tmp133,
@ Patches/../C_code.c:2101: {
	movs	r6, r0	@ parent, tmp166
	movs	r4, r2	@ value, tmp168
@ Patches/../C_code.c:2105: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	movs	r2, #8	@,
	add	r0, sp, #16	@,,
	bl	.L14		@
@ Patches/../C_code.c:2106: 	noise[0] = unit->xPos; 
	movs	r3, #16	@ tmp137,
	ldrsb	r3, [r5, r3]	@ tmp137,
	str	r3, [sp, #8]	@ tmp137, noise[0]
@ Patches/../C_code.c:2107: 	noise[1] = unit->yPos; 
	movs	r3, #17	@ tmp139,
@ Patches/../C_code.c:2110: 	if (RandBitflags->foundItems) { value = HashByPercent_Ch(value, noise, 13, false); if (!value) { value = 1; } } 
	movs	r2, #48	@ tmp147,
@ Patches/../C_code.c:2107: 	noise[1] = unit->yPos; 
	ldrsb	r3, [r5, r3]	@ tmp139,
	str	r3, [sp, #12]	@ tmp139, noise[1]
@ Patches/../C_code.c:2110: 	if (RandBitflags->foundItems) { value = HashByPercent_Ch(value, noise, 13, false); if (!value) { value = 1; } } 
	ldr	r3, .L1401+4	@ tmp141,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #1]	@ *RandBitflags.132_5, *RandBitflags.132_5
@ Patches/../C_code.c:2110: 	if (RandBitflags->foundItems) { value = HashByPercent_Ch(value, noise, 13, false); if (!value) { value = 1; } } 
	tst	r2, r3	@ tmp147, *RandBitflags.132_5
	bne	.L1400		@,
.L1392:
@ Patches/../C_code.c:2111:     SetPopupNumber(value); 
	ldr	r3, .L1401+8	@ tmp155,
	movs	r0, r4	@, value
	bl	.L14		@
@ Patches/../C_code.c:2113:     if (FACTION_BLUE == UNIT_FACTION(unit)) {
	movs	r3, #11	@ tmp156,
	movs	r2, #192	@ tmp157,
	ldrsb	r3, [r5, r3]	@ tmp156,
@ Patches/../C_code.c:2113:     if (FACTION_BLUE == UNIT_FACTION(unit)) {
	tst	r2, r3	@ tmp157, tmp156
	bne	.L1393		@,
@ Patches/../C_code.c:2114:         value += GetPartyGoldAmount(); 
	ldr	r3, .L1401+12	@ tmp159,
	bl	.L14		@
@ Patches/../C_code.c:2115:         SetPartyGoldAmount(value); 
	ldr	r3, .L1401+16	@ tmp161,
@ Patches/../C_code.c:2114:         value += GetPartyGoldAmount(); 
	adds	r0, r4, r0	@ value, value, tmp170
@ Patches/../C_code.c:2115:         SetPartyGoldAmount(value); 
	bl	.L14		@
@ Patches/../C_code.c:2116:         NewPopup_Simple(PopupScr_GotGold, 0x60, 0x0, parent); // 0D720 //5C3FE4 fe6 
	ldr	r0, .L1401+20	@ tmp162,
.L1399:
@ Patches/../C_code.c:2118:         NewPopup_Simple(PopupScr_GoldWasStole, 0x60, 0x0, parent);
	movs	r3, r6	@, parent
	movs	r2, #0	@,
	movs	r1, #96	@,
	ldr	r4, .L1401+24	@ tmp165,
	bl	.L240		@
@ Patches/../C_code.c:2119: }
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L1393:
@ Patches/../C_code.c:2118:         NewPopup_Simple(PopupScr_GoldWasStole, 0x60, 0x0, parent);
	ldr	r0, .L1401+28	@ tmp164,
	b	.L1399		@
.L1400:
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	movs	r3, #0	@ tmp152,
	movs	r0, r4	@, value
	str	r3, [sp]	@ tmp152,
	subs	r2, r2, #35	@,
	add	r1, sp, #8	@ tmp174,,
	bl	HashPercent		@
	subs	r4, r0, #0	@ value, tmp169,
@ Patches/../C_code.c:2110: 	if (RandBitflags->foundItems) { value = HashByPercent_Ch(value, noise, 13, false); if (!value) { value = 1; } } 
	bne	.L1392		@,
@ Patches/../C_code.c:2110: 	if (RandBitflags->foundItems) { value = HashByPercent_Ch(value, noise, 13, false); if (!value) { value = 1; } } 
	adds	r4, r4, #1	@ value,
	b	.L1392		@
.L1402:
	.align	2
.L1401:
	.word	memset
	.word	RandBitflags
	.word	SetPopupNumber
	.word	GetPartyGoldAmount
	.word	SetPartyGoldAmount
	.word	PopupScr_GotGold
	.word	NewPopup_Simple
	.word	PopupScr_GoldWasStole
	.size	NewPopup_GoldGot, .-NewPopup_GoldGot
	.align	1
	.p2align 2,,3
	.global	AdjustGrowthForStatInflation
	.syntax unified
	.code	16
	.thumb_func
	.type	AdjustGrowthForStatInflation, %function
AdjustGrowthForStatInflation:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2123: 	switch (RandBitflags->caps) { 
	ldr	r3, .L1412	@ tmp124,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrh	r3, [r3]	@ *RandBitflags.133_1, *RandBitflags.133_1
	lsls	r3, r3, #23	@ tmp129, *RandBitflags.133_1,
@ Patches/../C_code.c:2121: int AdjustGrowthForStatInflation(int growth) { 
	movs	r2, r0	@ growth, tmp167
@ Patches/../C_code.c:2123: 	switch (RandBitflags->caps) { 
	lsrs	r3, r3, #29	@ _2, tmp129,
@ Patches/../C_code.c:2123: 	switch (RandBitflags->caps) { 
	cmp	r3, #5	@ _2,
	beq	.L1404		@,
	bhi	.L1405		@,
	movs	r0, #0	@ <retval>,
	cmp	r3, #2	@ _2,
	beq	.L1403		@,
	cmp	r3, #3	@ _2,
	bne	.L1411		@,
@ Patches/../C_code.c:2127: 		case 3: { result = (3 * growth) / 4; break; } 
	lsls	r1, r2, #1	@ tmp134, growth,
	adds	r2, r1, r2	@ tmp135, tmp134, growth
@ Patches/../C_code.c:2127: 		case 3: { result = (3 * growth) / 4; break; } 
	asrs	r1, r2, #31	@ tmp138, tmp135,
	ands	r3, r1	@ tmp140, tmp138
	adds	r0, r3, r2	@ tmp141, tmp140, tmp135
	asrs	r0, r0, #2	@ <retval>, tmp141,
@ Patches/../C_code.c:2127: 		case 3: { result = (3 * growth) / 4; break; } 
	b	.L1403		@
.L1405:
@ Patches/../C_code.c:2123: 	switch (RandBitflags->caps) { 
	cmp	r3, #6	@ _2,
	bne	.L1411		@,
@ Patches/../C_code.c:2130: 		case 6: { result = ((6 * growth) / 4) + 20; break; } 
	lsls	r3, r0, #1	@ tmp155, growth,
	adds	r3, r3, r0	@ tmp156, tmp155, growth
@ Patches/../C_code.c:2130: 		case 6: { result = ((6 * growth) / 4) + 20; break; } 
	movs	r0, #3	@ tmp162,
@ Patches/../C_code.c:2130: 		case 6: { result = ((6 * growth) / 4) + 20; break; } 
	lsls	r3, r3, #1	@ tmp157, tmp156,
@ Patches/../C_code.c:2130: 		case 6: { result = ((6 * growth) / 4) + 20; break; } 
	asrs	r2, r3, #31	@ tmp161, tmp157,
	ands	r0, r2	@ tmp163, tmp161
	adds	r0, r0, r3	@ tmp164, tmp163, tmp157
	asrs	r0, r0, #2	@ tmp165, tmp164,
@ Patches/../C_code.c:2130: 		case 6: { result = ((6 * growth) / 4) + 20; break; } 
	adds	r0, r0, #20	@ <retval>,
.L1403:
@ Patches/../C_code.c:2133: } 
	@ sp needed	@
	bx	lr
.L1411:
@ Patches/../C_code.c:2122: 	int result = growth; 
	movs	r0, r2	@ <retval>, growth
	b	.L1403		@
.L1404:
@ Patches/../C_code.c:2129: 		case 5: { result = ((5 * growth) / 4) + 10; break; } 
	lsls	r3, r0, #2	@ tmp144, growth,
	adds	r3, r3, r0	@ tmp145, tmp144, growth
@ Patches/../C_code.c:2129: 		case 5: { result = ((5 * growth) / 4) + 10; break; } 
	movs	r0, #3	@ tmp150,
	asrs	r2, r3, #31	@ tmp149, tmp145,
	ands	r0, r2	@ tmp151, tmp149
	adds	r0, r0, r3	@ tmp152, tmp151, tmp145
	asrs	r0, r0, #2	@ tmp153, tmp152,
@ Patches/../C_code.c:2129: 		case 5: { result = ((5 * growth) / 4) + 10; break; } 
	adds	r0, r0, #10	@ <retval>,
@ Patches/../C_code.c:2129: 		case 5: { result = ((5 * growth) / 4) + 10; break; } 
	b	.L1403		@
.L1413:
	.align	2
.L1412:
	.word	RandBitflags
	.size	AdjustGrowthForStatInflation, .-AdjustGrowthForStatInflation
	.align	1
	.p2align 2,,3
	.global	GetGeneralStatCap
	.syntax unified
	.code	16
	.thumb_func
	.type	GetGeneralStatCap, %function
GetGeneralStatCap:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	ldr	r3, .L1418	@ tmp125,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrh	r3, [r3]	@ *RandBitflags.134_1, *RandBitflags.134_1
	lsls	r3, r3, #23	@ tmp130, *RandBitflags.134_1,
	lsrs	r3, r3, #29	@ _2, tmp130,
	subs	r2, r3, #2	@ tmp132, _2,
	lsls	r2, r2, #24	@ tmp136, tmp132,
	lsrs	r2, r2, #24	@ tmp135, tmp136,
	cmp	r2, #4	@ tmp135,
	bhi	.L1417		@,
	lsls	r2, r3, #4	@ tmp138, _2,
	subs	r3, r2, r3	@ tmp139, tmp138, _2
	subs	r3, r3, #30	@ result,
.L1415:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r2, .L1418+4	@ tmp141,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r0, [r2]	@ maxStat, maxStat
	cmp	r0, r3	@ maxStat, result
	ble	.L1416		@,
	movs	r0, r3	@ maxStat, result
.L1416:
@ Patches/../C_code.c:2148: } 
	@ sp needed	@
	bx	lr
.L1417:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r3, #1	@ result,
	rsbs	r3, r3, #0	@ result, result
	b	.L1415		@
.L1419:
	.align	2
.L1418:
	.word	RandBitflags
	.word	maxStat
	.size	GetGeneralStatCap, .-GetGeneralStatCap
	.align	1
	.p2align 2,,3
	.global	GetGlobalStatCap
	.syntax unified
	.code	16
	.thumb_func
	.type	GetGlobalStatCap, %function
GetGlobalStatCap:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	ldr	r3, .L1428	@ tmp125,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrh	r3, [r3]	@ *RandBitflags.134_4, *RandBitflags.134_4
	lsls	r3, r3, #23	@ tmp130, *RandBitflags.134_4,
	lsrs	r3, r3, #29	@ _5, tmp130,
	subs	r2, r3, #2	@ tmp132, _5,
	lsls	r2, r2, #24	@ tmp136, tmp132,
	lsrs	r2, r2, #24	@ tmp135, tmp136,
	cmp	r2, #4	@ tmp135,
	bhi	.L1424		@,
	lsls	r2, r3, #4	@ tmp138, _5,
	subs	r3, r2, r3	@ tmp139, tmp138, _5
	subs	r3, r3, #30	@ result,
.L1421:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r2, .L1428+4	@ tmp140,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r0, [r2]	@ <retval>, maxStat
	cmp	r0, r3	@ <retval>, result
	ble	.L1422		@,
	movs	r0, r3	@ <retval>, result
.L1422:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r0, #1	@ tmp143, <retval>,
	beq	.L1427		@,
.L1420:
@ Patches/../C_code.c:2154: }  
	@ sp needed	@
	bx	lr
.L1424:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r3, #1	@ result,
	rsbs	r3, r3, #0	@ result, result
	b	.L1421		@
.L1427:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r0, r0, #31	@ <retval>,
@ Patches/../C_code.c:2153: 	return result; 
	b	.L1420		@
.L1429:
	.align	2
.L1428:
	.word	RandBitflags
	.word	maxStat
	.size	GetGlobalStatCap, .-GetGlobalStatCap
	.align	1
	.p2align 2,,3
	.global	AdjustStatForInflatedNumbers
	.syntax unified
	.code	16
	.thumb_func
	.type	AdjustStatForInflatedNumbers, %function
AdjustStatForInflatedNumbers:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2158: 	switch (RandBitflags->caps) { 
	ldr	r2, .L1440	@ tmp125,
	ldr	r2, [r2]	@ RandBitflags, RandBitflags
	ldrh	r2, [r2]	@ *RandBitflags.136_1, *RandBitflags.136_1
	lsls	r2, r2, #23	@ tmp130, *RandBitflags.136_1,
@ Patches/../C_code.c:2156: int AdjustStatForInflatedNumbers(int stat) { 
	movs	r3, r0	@ stat, tmp171
@ Patches/../C_code.c:2158: 	switch (RandBitflags->caps) { 
	lsrs	r2, r2, #29	@ _2, tmp130,
@ Patches/../C_code.c:2158: 	switch (RandBitflags->caps) { 
	cmp	r2, #5	@ _2,
	beq	.L1431		@,
	bhi	.L1432		@,
	movs	r0, #0	@ <retval>,
	cmp	r2, #2	@ _2,
	beq	.L1430		@,
	cmp	r2, #3	@ _2,
	bne	.L1435		@,
@ Patches/../C_code.c:2162: 		case 3: { result = ((3 * stat) / 4) - 2; break; } 
	lsls	r1, r3, #1	@ tmp135, stat,
	adds	r3, r1, r3	@ tmp136, tmp135, stat
@ Patches/../C_code.c:2162: 		case 3: { result = ((3 * stat) / 4) - 2; break; } 
	asrs	r1, r3, #31	@ tmp140, tmp136,
	ands	r2, r1	@ tmp142, tmp140
	adds	r3, r2, r3	@ tmp143, tmp142, tmp136
	asrs	r3, r3, #2	@ tmp144, tmp143,
@ Patches/../C_code.c:2162: 		case 3: { result = ((3 * stat) / 4) - 2; break; } 
	subs	r3, r3, #2	@ stat,
@ Patches/../C_code.c:2162: 		case 3: { result = ((3 * stat) / 4) - 2; break; } 
	b	.L1435		@
.L1432:
@ Patches/../C_code.c:2158: 	switch (RandBitflags->caps) { 
	cmp	r2, #6	@ _2,
	bne	.L1435		@,
@ Patches/../C_code.c:2165: 		case 6: { result = ((6 * stat) / 4) + 2; break; } 
	movs	r3, #3	@ tmp164,
@ Patches/../C_code.c:2165: 		case 6: { result = ((6 * stat) / 4) + 2; break; } 
	lsls	r2, r0, #1	@ tmp157, stat,
	adds	r2, r2, r0	@ tmp158, tmp157, stat
	lsls	r2, r2, #1	@ tmp159, tmp158,
@ Patches/../C_code.c:2165: 		case 6: { result = ((6 * stat) / 4) + 2; break; } 
	asrs	r1, r2, #31	@ tmp163, tmp159,
	ands	r3, r1	@ tmp165, tmp163
	adds	r3, r3, r2	@ tmp166, tmp165, tmp159
	asrs	r3, r3, #2	@ tmp167, tmp166,
@ Patches/../C_code.c:2165: 		case 6: { result = ((6 * stat) / 4) + 2; break; } 
	adds	r3, r3, #2	@ stat,
.L1435:
@ Patches/../C_code.c:2167: 	if (result < 0) { result = 0; } 
	mvns	r0, r3	@ tmp170, stat
	asrs	r0, r0, #31	@ tmp169, tmp170,
	ands	r0, r3	@ <retval>, stat
.L1430:
@ Patches/../C_code.c:2169: } 
	@ sp needed	@
	bx	lr
.L1431:
@ Patches/../C_code.c:2164: 		case 5: { result = ((5 * stat) / 4) + 1; break; } 
	movs	r3, #3	@ tmp152,
@ Patches/../C_code.c:2164: 		case 5: { result = ((5 * stat) / 4) + 1; break; } 
	lsls	r2, r0, #2	@ tmp146, stat,
	adds	r2, r2, r0	@ tmp147, tmp146, stat
@ Patches/../C_code.c:2164: 		case 5: { result = ((5 * stat) / 4) + 1; break; } 
	asrs	r1, r2, #31	@ tmp151, tmp147,
	ands	r3, r1	@ tmp153, tmp151
	adds	r3, r3, r2	@ tmp154, tmp153, tmp147
	asrs	r3, r3, #2	@ tmp155, tmp154,
@ Patches/../C_code.c:2164: 		case 5: { result = ((5 * stat) / 4) + 1; break; } 
	adds	r3, r3, #1	@ stat,
@ Patches/../C_code.c:2164: 		case 5: { result = ((5 * stat) / 4) + 1; break; } 
	b	.L1435		@
.L1441:
	.align	2
.L1440:
	.word	RandBitflags
	.size	AdjustStatForInflatedNumbers, .-AdjustStatForInflatedNumbers
	.align	1
	.p2align 2,,3
	.global	SlightlyAdjustStatForInflatedNumbers
	.syntax unified
	.code	16
	.thumb_func
	.type	SlightlyAdjustStatForInflatedNumbers, %function
SlightlyAdjustStatForInflatedNumbers:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2173: 	switch (RandBitflags->caps) { 
	ldr	r2, .L1452	@ tmp124,
	ldr	r2, [r2]	@ RandBitflags, RandBitflags
	ldrh	r2, [r2]	@ *RandBitflags.137_1, *RandBitflags.137_1
	lsls	r2, r2, #23	@ tmp129, *RandBitflags.137_1,
@ Patches/../C_code.c:2171: int SlightlyAdjustStatForInflatedNumbers(int stat) { 
	movs	r3, r0	@ stat, tmp169
@ Patches/../C_code.c:2173: 	switch (RandBitflags->caps) { 
	lsrs	r2, r2, #29	@ _2, tmp129,
@ Patches/../C_code.c:2173: 	switch (RandBitflags->caps) { 
	cmp	r2, #5	@ _2,
	beq	.L1443		@,
	bhi	.L1444		@,
	movs	r0, #0	@ <retval>,
	cmp	r2, #2	@ _2,
	beq	.L1442		@,
	cmp	r2, #3	@ _2,
	bne	.L1447		@,
@ Patches/../C_code.c:2177: 		case 3: { result = ((7 * stat) / 8) - 1; break; } 
	lsls	r2, r3, #3	@ tmp134, stat,
	subs	r2, r2, r3	@ tmp135, tmp134, stat
@ Patches/../C_code.c:2177: 		case 3: { result = ((7 * stat) / 8) - 1; break; } 
	movs	r3, #7	@ tmp140,
	asrs	r1, r2, #31	@ tmp139, tmp135,
	ands	r3, r1	@ tmp141, tmp139
	adds	r3, r3, r2	@ tmp142, tmp141, tmp135
	asrs	r3, r3, #3	@ tmp143, tmp142,
@ Patches/../C_code.c:2177: 		case 3: { result = ((7 * stat) / 8) - 1; break; } 
	subs	r3, r3, #1	@ stat,
@ Patches/../C_code.c:2177: 		case 3: { result = ((7 * stat) / 8) - 1; break; } 
	b	.L1447		@
.L1444:
@ Patches/../C_code.c:2173: 	switch (RandBitflags->caps) { 
	cmp	r2, #6	@ _2,
	bne	.L1447		@,
@ Patches/../C_code.c:2180: 		case 6: { result = ((10 * stat) / 8) + 1; break; } 
	movs	r3, #7	@ tmp162,
@ Patches/../C_code.c:2180: 		case 6: { result = ((10 * stat) / 8) + 1; break; } 
	lsls	r2, r0, #2	@ tmp155, stat,
	adds	r2, r2, r0	@ tmp156, tmp155, stat
	lsls	r2, r2, #1	@ tmp157, tmp156,
@ Patches/../C_code.c:2180: 		case 6: { result = ((10 * stat) / 8) + 1; break; } 
	asrs	r1, r2, #31	@ tmp161, tmp157,
	ands	r3, r1	@ tmp163, tmp161
	adds	r3, r3, r2	@ tmp164, tmp163, tmp157
	asrs	r3, r3, #3	@ tmp165, tmp164,
@ Patches/../C_code.c:2180: 		case 6: { result = ((10 * stat) / 8) + 1; break; } 
	adds	r3, r3, #1	@ stat,
.L1447:
@ Patches/../C_code.c:2182: 	if (result < 0) { result = 0; } 
	mvns	r0, r3	@ tmp168, stat
	asrs	r0, r0, #31	@ tmp167, tmp168,
	ands	r0, r3	@ <retval>, stat
.L1442:
@ Patches/../C_code.c:2184: }
	@ sp needed	@
	bx	lr
.L1443:
@ Patches/../C_code.c:2179: 		case 5: { result = ((9 * stat) / 8) + 0; break; } 
	movs	r3, #7	@ tmp150,
@ Patches/../C_code.c:2179: 		case 5: { result = ((9 * stat) / 8) + 0; break; } 
	lsls	r2, r0, #3	@ tmp145, stat,
	adds	r2, r2, r0	@ tmp146, tmp145, stat
@ Patches/../C_code.c:2179: 		case 5: { result = ((9 * stat) / 8) + 0; break; } 
	asrs	r1, r2, #31	@ tmp149, tmp146,
	ands	r3, r1	@ tmp151, tmp149
	adds	r3, r3, r2	@ tmp152, tmp151, tmp146
	asrs	r3, r3, #3	@ stat, tmp152,
@ Patches/../C_code.c:2179: 		case 5: { result = ((9 * stat) / 8) + 0; break; } 
	b	.L1447		@
.L1453:
	.align	2
.L1452:
	.word	RandBitflags
	.size	SlightlyAdjustStatForInflatedNumbers, .-SlightlyAdjustStatForInflatedNumbers
	.align	1
	.p2align 2,,3
	.global	HashStat
	.syntax unified
	.code	16
	.thumb_func
	.type	HashStat, %function
HashStat:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{lr}	@
	sub	sp, sp, #12	@,,
	str	r3, [sp]	@ tmp125,
	movs	r3, #0	@,
	bl	HashPercent		@
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r1}
	bx	r1
	.size	HashStat, .-HashStat
	.align	1
	.p2align 2,,3
	.global	RandHPStat
	.syntax unified
	.code	16
	.thumb_func
	.type	RandHPStat, %function
RandHPStat:
	@ Function supports interworking.
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r7, r9	@,
	mov	r6, r8	@,
	mov	lr, r10	@,
	push	{r6, r7, lr}	@
	movs	r7, r2	@ noise, tmp180
@ Patches/../C_code.c:2220: 	if (!RandBitflags->base) { return stat; } 
	movs	r2, #3	@ tmp141,
@ Patches/../C_code.c:2219: int RandHPStat(struct Unit* unit, int stat, int noise[], int offset, int promoted) { 
	movs	r6, r3	@ offset, tmp181
@ Patches/../C_code.c:2220: 	if (!RandBitflags->base) { return stat; } 
	ldr	r3, .L1469	@ tmp139,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3]	@ *RandBitflags.139_1, *RandBitflags.139_1
@ Patches/../C_code.c:2219: int RandHPStat(struct Unit* unit, int stat, int noise[], int offset, int promoted) { 
	movs	r5, r0	@ unit, tmp178
	movs	r4, r1	@ stat, tmp179
	sub	sp, sp, #8	@,,
@ Patches/../C_code.c:2220: 	if (!RandBitflags->base) { return stat; } 
	tst	r2, r3	@ tmp141, *RandBitflags.139_1
	beq	.L1456		@,
@ Patches/../C_code.c:2221: 	if (CharExceptions[unit->pCharacterData->number].NeverChangeFrom) { return stat; } 
	ldr	r3, [r0]	@ unit_7(D)->pCharacterData, unit_7(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ _15,
	mov	r8, r3	@ _15, _15
@ Patches/../C_code.c:2221: 	if (CharExceptions[unit->pCharacterData->number].NeverChangeFrom) { return stat; } 
	mov	r1, r8	@ _15, _15
	ldr	r3, .L1469+4	@ tmp150,
	lsls	r1, r1, #1	@ tmp151, _15,
@ Patches/../C_code.c:2221: 	if (CharExceptions[unit->pCharacterData->number].NeverChangeFrom) { return stat; } 
	ldrb	r3, [r1, r3]	@ tmp152, CharExceptions
	cmp	r3, #0	@ tmp152,
	beq	.L1467		@,
.L1456:
@ Patches/../C_code.c:2231: } 
	movs	r0, r4	@, stat
	add	sp, sp, #8	@,,
	@ sp needed	@
	pop	{r5, r6, r7}
	mov	r10, r7
	mov	r9, r6
	mov	r8, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1467:
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	str	r2, [sp]	@ tmp141,
	movs	r1, r7	@, noise
	movs	r2, r6	@, offset
	movs	r0, r4	@, stat
	bl	HashPercent		@
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	movs	r2, #11	@ tmp156,
	movs	r3, #192	@ tmp157,
	ldrsb	r2, [r5, r2]	@ tmp156,
	ands	r3, r2	@ tmp158, tmp156
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	subs	r3, r3, #128	@ tmp161,
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	subs	r2, r3, #1	@ tmp162, tmp161
	sbcs	r3, r3, r2	@ tmp163, tmp161, tmp162
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	mov	r9, r0	@ tmp154, tmp182
@ Patches/../C_code.c:2222: 	int result = HashStat(stat, noise, offset, 3); // by 2/3rds percent 
	mov	r10, r0	@ result, tmp154
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	cmp	r3, #0	@ tmp163,
	bne	.L1460		@,
	mov	r3, r8	@ _15, _15
	cmp	r3, #44	@ _15,
	bhi	.L1457		@,
.L1460:
@ Patches/../C_code.c:2224: 		if (result < stat) { 
	cmp	r4, r9	@ stat, tmp154
	bgt	.L1468		@,
.L1457:
@ Patches/../C_code.c:2229: 	result = SlightlyAdjustStatForInflatedNumbers(result); 
	mov	r0, r10	@, result
	bl	SlightlyAdjustStatForInflatedNumbers		@
	movs	r4, r0	@ stat, tmp184
@ Patches/../C_code.c:2230: 	return result; 
	b	.L1456		@
.L1468:
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	movs	r3, #3	@ tmp174,
@ Patches/../C_code.c:2225: 			stat = HashStat(result, noise, offset+13, 3); 
	movs	r2, r6	@ offset, offset
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	str	r3, [sp]	@ tmp174,
	movs	r1, r7	@, noise
	movs	r3, #0	@,
	mov	r0, r9	@, tmp154
@ Patches/../C_code.c:2225: 			stat = HashStat(result, noise, offset+13, 3); 
	adds	r2, r2, #13	@ offset,
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	bl	HashPercent		@
@ Patches/../C_code.c:2226: 			if (stat > result) { result = stat; } 
	cmp	r9, r0	@ tmp154, tmp175
	bge	.L1457		@,
	mov	r10, r0	@ result, tmp175
	b	.L1457		@
.L1470:
	.align	2
.L1469:
	.word	RandBitflags
	.word	CharExceptions
	.size	RandHPStat, .-RandHPStat
	.align	1
	.p2align 2,,3
	.global	RandStat
	.syntax unified
	.code	16
	.thumb_func
	.type	RandStat, %function
RandStat:
	@ Function supports interworking.
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r7, r9	@,
	mov	r6, r8	@,
	mov	lr, r10	@,
	push	{r6, r7, lr}	@
	movs	r6, r3	@ offset, tmp179
@ Patches/../C_code.c:2233: 	if (!RandBitflags->base) { return stat; } 
	ldr	r3, .L1486	@ tmp139,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3]	@ *RandBitflags.140_1, *RandBitflags.140_1
@ Patches/../C_code.c:2232: int RandStat(struct Unit* unit, int stat, int noise[], int offset, int promoted) { 
	movs	r5, r0	@ unit, tmp176
	movs	r4, r1	@ stat, tmp177
	movs	r7, r2	@ noise, tmp178
	sub	sp, sp, #8	@,,
@ Patches/../C_code.c:2233: 	if (!RandBitflags->base) { return stat; } 
	lsls	r3, r3, #30	@ tmp183, *RandBitflags.140_1,
	beq	.L1472		@,
@ Patches/../C_code.c:2234: 	if (CharExceptions[unit->pCharacterData->number].NeverChangeFrom) { return stat; } 
	ldr	r3, [r0]	@ unit_7(D)->pCharacterData, unit_7(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ _15,
	mov	r8, r3	@ _15, _15
@ Patches/../C_code.c:2234: 	if (CharExceptions[unit->pCharacterData->number].NeverChangeFrom) { return stat; } 
	mov	r2, r8	@ _15, _15
	ldr	r3, .L1486+4	@ tmp150,
	lsls	r2, r2, #1	@ tmp151, _15,
@ Patches/../C_code.c:2234: 	if (CharExceptions[unit->pCharacterData->number].NeverChangeFrom) { return stat; } 
	ldrb	r3, [r2, r3]	@ tmp152, CharExceptions
	cmp	r3, #0	@ tmp152,
	beq	.L1484		@,
.L1472:
@ Patches/../C_code.c:2244: } 
	movs	r0, r4	@, stat
	add	sp, sp, #8	@,,
	@ sp needed	@
	pop	{r5, r6, r7}
	mov	r10, r7
	mov	r9, r6
	mov	r8, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1484:
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	ldr	r3, [sp, #40]	@ tmp188, promoted
	movs	r2, r6	@, offset
	str	r3, [sp]	@ tmp188,
	movs	r1, r7	@, noise
	movs	r3, #0	@,
	movs	r0, r4	@, stat
	bl	HashPercent		@
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	movs	r2, #11	@ tmp155,
	movs	r3, #192	@ tmp156,
	ldrsb	r2, [r5, r2]	@ tmp155,
	ands	r3, r2	@ tmp157, tmp155
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	subs	r3, r3, #128	@ tmp160,
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	subs	r2, r3, #1	@ tmp161, tmp160
	sbcs	r3, r3, r2	@ tmp162, tmp160, tmp161
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	mov	r9, r0	@ tmp153, tmp180
@ Patches/../C_code.c:2235: 	int result = HashStat(stat, noise, offset, promoted); 
	mov	r10, r0	@ result, tmp153
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	cmp	r3, #0	@ tmp162,
	bne	.L1476		@,
	mov	r3, r8	@ _15, _15
	cmp	r3, #44	@ _15,
	bhi	.L1473		@,
.L1476:
@ Patches/../C_code.c:2237: 		if (result < stat) { 
	cmp	r4, r9	@ stat, tmp153
	bgt	.L1485		@,
.L1473:
@ Patches/../C_code.c:2242: 	result = SlightlyAdjustStatForInflatedNumbers(result); 
	mov	r0, r10	@, result
	bl	SlightlyAdjustStatForInflatedNumbers		@
	movs	r4, r0	@ stat, tmp182
@ Patches/../C_code.c:2243: 	return result; 
	b	.L1472		@
.L1485:
@ Patches/../C_code.c:2238: 			stat = HashStat(result, noise, offset+13, promoted); 
	movs	r2, r6	@ offset, offset
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	ldr	r3, [sp, #40]	@ tmp191, promoted
	movs	r1, r7	@, noise
	str	r3, [sp]	@ tmp191,
	mov	r0, r9	@, tmp153
	movs	r3, #0	@,
@ Patches/../C_code.c:2238: 			stat = HashStat(result, noise, offset+13, promoted); 
	adds	r2, r2, #13	@ offset,
@ Patches/../C_code.c:1472: 	return HashPercent(number, noise, offset, false, earlygamePromo);
	bl	HashPercent		@
@ Patches/../C_code.c:2239: 			if (stat > result) { result = stat; } 
	cmp	r9, r0	@ tmp153, tmp173
	bge	.L1473		@,
	mov	r10, r0	@ result, tmp173
	b	.L1473		@
.L1487:
	.align	2
.L1486:
	.word	RandBitflags
	.word	CharExceptions
	.size	RandStat, .-RandStat
	.align	1
	.p2align 2,,3
	.global	HashWexp
	.syntax unified
	.code	16
	.thumb_func
	.type	HashWexp, %function
HashWexp:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
	sub	sp, sp, #8	@,,
@ Patches/../C_code.c:2248: 	if (!number) { return number; } 
	cmp	r0, #0	@ number,
	beq	.L1492		@,
@ Patches/../C_code.c:2249: 	if (!RandBitflags->class) { return number; } 
	movs	r4, #6	@ tmp132,
	ldr	r3, .L1493	@ tmp126,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #1]	@ *RandBitflags.141_1, *RandBitflags.141_1
@ Patches/../C_code.c:2249: 	if (!RandBitflags->class) { return number; } 
	tst	r4, r3	@ tmp132, *RandBitflags.141_1
	bne	.L1490		@,
.L1491:
@ Patches/../C_code.c:2252: 	return number; 
	lsls	r0, r0, #16	@ <retval>, number,
	asrs	r0, r0, #16	@ <retval>, <retval>,
.L1489:
@ Patches/../C_code.c:2253: } 
	add	sp, sp, #8	@,,
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L1490:
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp136,
	str	r3, [sp]	@ tmp136,
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2250: 	number = HashByPercent(number, noise, offset)+1; 
	adds	r0, r0, #1	@ number,
@ Patches/../C_code.c:2251: 	if (number > 255) { number = 255; } 
	cmp	r0, #255	@ number,
	ble	.L1491		@,
	movs	r0, #255	@ number,
	b	.L1491		@
.L1492:
@ Patches/../C_code.c:2248: 	if (!number) { return number; } 
	movs	r0, #0	@ <retval>,
	b	.L1489		@
.L1494:
	.align	2
.L1493:
	.word	RandBitflags
	.size	HashWexp, .-HashWexp
	.align	1
	.p2align 2,,3
	.global	GetGrowthModifiers
	.syntax unified
	.code	16
	.thumb_func
	.type	GetGrowthModifiers, %function
GetGrowthModifiers:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	movs	r3, #128	@ tmp120,
@ Patches/../C_code.c:2257: } 
	@ sp needed	@
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	ldr	r0, [r0, #12]	@ unit_5(D)->state, unit_5(D)->state
	lsls	r3, r3, #6	@ tmp120, tmp120,
	ands	r0, r3	@ tmp118, tmp120
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	rsbs	r3, r0, #0	@ tmp123, tmp118
	adcs	r0, r0, r3	@ tmp122, tmp118, tmp123
	movs	r3, #4	@ tmp125,
	rsbs	r0, r0, #0	@ tmp124, tmp122
	bics	r0, r3	@ <retval>, tmp125
	adds	r0, r0, #5	@ <retval>,
@ Patches/../C_code.c:2257: } 
	bx	lr
	.size	GetGrowthModifiers, .-GetGrowthModifiers
	.align	1
	.p2align 2,,3
	.global	GetClassMagGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetClassMagGrowth, %function
GetClassMagGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2286: 	growth += MagClassTable[unit->pClassData->number].growth; 
	ldr	r3, [r0, #4]	@ unit_13(D)->pClassData, unit_13(D)->pClassData
	ldrb	r6, [r3, #4]	@ _3,
@ Patches/../C_code.c:2286: 	growth += MagClassTable[unit->pClassData->number].growth; 
	ldr	r3, .L1506	@ tmp136,
	lsls	r2, r6, #2	@ tmp137, _3,
	adds	r3, r3, r2	@ tmp138, tmp136, tmp137
	ldrb	r5, [r3, #1]	@ <retval>, MagClassTable
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1506+4	@ tmp141,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_23, *RandBitflags.53_23
	ldr	r3, .L1506+8	@ tmp144,
@ Patches/../C_code.c:2284: int GetClassMagGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_23, tmp144
	beq	.L1498		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_13(D)], MEM[(const struct CharacterData * *)unit_13(D)]
	ldrb	r2, [r2, #4]	@ tmp147,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1506+12	@ tmp145,
	lsls	r2, r2, #1	@ tmp148, tmp147,
@ Patches/../C_code.c:2287: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	ldrb	r3, [r2, r3]	@ tmp150, CharExceptions
@ Patches/../C_code.c:2287: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	cmp	r3, #0	@ tmp150,
	bne	.L1498		@,
	rsbs	r4, r1, #0	@ tmp158, modifiersBool
	adcs	r4, r4, r1	@ tmp158, modifiersBool
	cmp	r4, #0	@ tmp158,
	bne	.L1498		@,
@ Patches/../C_code.c:2288: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L1506+16	@ tmp163,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #1	@,
	movs	r2, #81	@,
	movs	r0, r5	@, <retval>
	str	r4, [sp]	@ tmp158,
	add	r1, sp, #8	@,,
@ Patches/../C_code.c:2289: 	noise[0] = unit->pClassData->number; 
	str	r6, [sp, #8]	@ _3, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	bl	HashPercent		@
@ Patches/../C_code.c:2291: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r0, r5	@ tmp171, tmp169, <retval>
@ Patches/../C_code.c:2291: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp171,
	bgt	.L1505		@,
@ Patches/../C_code.c:2292: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r0	@ tmp172, <retval>, tmp169
@ Patches/../C_code.c:2292: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp172,
	ble	.L1501		@,
@ Patches/../C_code.c:2292: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r5, r5, #99	@ <retval>,
.L1498:
@ Patches/../C_code.c:2294: }
	movs	r0, r5	@, <retval>
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1505:
@ Patches/../C_code.c:2291: 	if ((result-growth) > 99) { result = growth+99; } 
	adds	r5, r5, #99	@ <retval>,
	b	.L1498		@
.L1501:
	movs	r5, r0	@ <retval>, tmp169
	b	.L1498		@
.L1507:
	.align	2
.L1506:
	.word	MagClassTable
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	memset
	.size	GetClassMagGrowth, .-GetClassMagGrowth
	.align	1
	.p2align 2,,3
	.global	GetUnitMagGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMagGrowth, %function
GetUnitMagGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	push	{lr}	@
	movs	r4, r0	@ unit, tmp282
	movs	r5, r1	@ modifiersBool, tmp283
@ Patches/../C_code.c:2297: 	int add = 0; 
	movs	r6, #0	@ add,
@ Patches/../C_code.c:2295: int GetUnitMagGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:2298: 	if (modifiersBool) { add = GetGrowthModifiers(unit); } 
	cmp	r1, #0	@ modifiersBool,
	beq	.L1509		@,
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	ldr	r3, [r0, #12]	@ unit_55(D)->state, unit_55(D)->state
	lsls	r3, r3, #18	@ tmp175, unit_55(D)->state,
@ Patches/../C_code.c:2297: 	int add = 0; 
	asrs	r3, r3, #31	@ tmp280, tmp175,
	adds	r6, r6, #5	@ tmp281,
	ands	r6, r3	@ add, tmp280
.L1509:
@ Patches/../C_code.c:294: 	return GetReorderedCharacter(unit->pCharacterData)->number; 
	ldr	r0, [r4]	@ _78, unit_55(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp178,
	movs	r1, r0	@ pretmp_103, _78
	cmp	r3, #0	@ tmp178,
	beq	.L1510		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_78 + 4B], MEM[(unsigned char *)_78 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2300: 	int originalGrowth = MagCharTable[unit->pCharacterData->number].growth;  
	ldr	r1, [r4]	@ pretmp_103, unit_55(D)->pCharacterData
.L1510:
@ Patches/../C_code.c:294: 	return GetReorderedCharacter(unit->pCharacterData)->number; 
	ldrb	r3, [r0, #4]	@ tmp181,
@ Patches/../C_code.c:2299: 	baseGrowth = MagCharTable[GetReorderedUnitID(unit)].growth;  
	ldr	r2, .L1549	@ tmp274,
	lsls	r3, r3, #1	@ tmp182, tmp181,
	adds	r3, r2, r3	@ tmp183, tmp274, tmp182
	ldrb	r7, [r3, #1]	@ _2, MagCharTable
@ Patches/../C_code.c:2301: 	if (ClassBasedGrowths) { baseGrowth = MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r3, .L1549+4	@ tmp185,
@ Patches/../C_code.c:2301: 	if (ClassBasedGrowths) { baseGrowth = MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r3, [r3]	@ ClassBasedGrowths, ClassBasedGrowths
	cmp	r3, #0	@ ClassBasedGrowths,
	beq	.L1511		@,
@ Patches/../C_code.c:2301: 	if (ClassBasedGrowths) { baseGrowth = MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r0, [r4, #4]	@ unit_55(D)->pClassData, unit_55(D)->pClassData
	ldrb	r0, [r0, #4]	@ tmp189,
@ Patches/../C_code.c:2301: 	if (ClassBasedGrowths) { baseGrowth = MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r3, .L1549+8	@ tmp187,
	lsls	r0, r0, #2	@ tmp190, tmp189,
	adds	r3, r3, r0	@ tmp191, tmp187, tmp190
	ldrb	r7, [r3, #1]	@ _2, MagClassTable
.L1511:
@ Patches/../C_code.c:2302: 	if (CombinedGrowths) { baseGrowth += MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r3, .L1549+12	@ tmp193,
@ Patches/../C_code.c:2302: 	if (CombinedGrowths) { baseGrowth += MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r3, [r3]	@ CombinedGrowths, CombinedGrowths
	cmp	r3, #0	@ CombinedGrowths,
	beq	.L1512		@,
@ Patches/../C_code.c:2302: 	if (CombinedGrowths) { baseGrowth += MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r0, [r4, #4]	@ unit_55(D)->pClassData, unit_55(D)->pClassData
	ldrb	r0, [r0, #4]	@ tmp197,
@ Patches/../C_code.c:2302: 	if (CombinedGrowths) { baseGrowth += MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r3, .L1549+8	@ tmp195,
	lsls	r0, r0, #2	@ tmp198, tmp197,
	adds	r3, r3, r0	@ tmp199, tmp195, tmp198
	ldrb	r3, [r3, #1]	@ tmp201, MagClassTable
@ Patches/../C_code.c:2302: 	if (CombinedGrowths) { baseGrowth += MagClassTable[unit->pClassData->number].growth;  } 
	adds	r7, r7, r3	@ baseGrowth, baseGrowth, tmp201
.L1512:
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1549+16	@ tmp275,
	mov	r8, r3	@ tmp275, tmp275
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r0, [r3]	@ *RandBitflags.53_85, *RandBitflags.53_85
	ldr	r3, .L1549+20	@ tmp206,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r0, r3	@ *RandBitflags.53_85, tmp206
	beq	.L1513		@,
@ Patches/../C_code.c:2300: 	int originalGrowth = MagCharTable[unit->pCharacterData->number].growth;  
	ldrb	r3, [r1, #4]	@ _5,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r1, .L1549+24	@ tmp207,
	lsls	r3, r3, #1	@ tmp208, _5,
@ Patches/../C_code.c:2303: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	ldrb	r1, [r3, r1]	@ tmp210, CharExceptions
@ Patches/../C_code.c:2303: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	cmp	r1, #0	@ tmp210,
	bne	.L1513		@,
	cmp	r5, #0	@ modifiersBool,
	beq	.L1513		@,
@ Patches/../C_code.c:2300: 	int originalGrowth = MagCharTable[unit->pCharacterData->number].growth;  
	adds	r2, r2, r3	@ tmp222, tmp274, tmp208
@ Patches/../C_code.c:2304: 	int growth = CallGet_Mag_Growth(unit); 
	movs	r0, r4	@, unit
	ldr	r3, .L1549+28	@ tmp224,
@ Patches/../C_code.c:2300: 	int originalGrowth = MagCharTable[unit->pCharacterData->number].growth;  
	ldrb	r5, [r2, #1]	@ _6, MagCharTable
@ Patches/../C_code.c:2304: 	int growth = CallGet_Mag_Growth(unit); 
	bl	.L14		@
@ Patches/../C_code.c:2306: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	adds	r3, r0, #1	@ tmp289, growth,
	beq	.L1517		@,
@ Patches/../C_code.c:2306: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	subs	r6, r0, r5	@ add, growth, _6
.L1517:
@ Patches/../C_code.c:2308: 	int player = (UNIT_FACTION(unit) == FACTION_BLUE); 
	movs	r2, #192	@ tmp226,
	movs	r3, #11	@ tmp225,
	movs	r0, r2	@ <retval>, tmp226
	ldrsb	r3, [r4, r3]	@ tmp225,
	ands	r0, r3	@ <retval>, tmp225
@ Patches/../C_code.c:2309: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	tst	r2, r3	@ tmp226, tmp225
	bne	.L1518		@,
@ Patches/../C_code.c:2309: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	mov	r3, r8	@ tmp275, tmp275
	ldr	r2, [r3]	@ RandBitflags.145_23, RandBitflags
@ Patches/../C_code.c:2309: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	ldrb	r3, [r2, #3]	@ *RandBitflags.145_23, *RandBitflags.145_23
@ Patches/../C_code.c:2309: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	lsls	r3, r3, #27	@ tmp290, *RandBitflags.145_23,
	bmi	.L1527		@,
@ Patches/../C_code.c:2310: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	movs	r3, #12	@ tmp242,
	ldrb	r2, [r2]	@ *RandBitflags.145_23, *RandBitflags.145_23
	ands	r3, r2	@ _27, *RandBitflags.145_23
@ Patches/../C_code.c:2310: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	cmp	r3, #8	@ _27,
	beq	.L1508		@,
@ Patches/../C_code.c:2311: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	cmp	r3, #12	@ _27,
	beq	.L1528		@,
.L1518:
@ Patches/../C_code.c:2312: 	if (MagClassTable[unit->pClassData->number].growth > growth) { growth = MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r2, [r4, #4]	@ unit_55(D)->pClassData, unit_55(D)->pClassData
	ldrb	r2, [r2, #4]	@ tmp247,
@ Patches/../C_code.c:2312: 	if (MagClassTable[unit->pClassData->number].growth > growth) { growth = MagClassTable[unit->pClassData->number].growth;  } 
	ldr	r3, .L1549+8	@ tmp245,
	lsls	r2, r2, #2	@ tmp248, tmp247,
	adds	r3, r3, r2	@ tmp249, tmp245, tmp248
	ldrb	r0, [r3, #1]	@ baseGrowth, MagClassTable
@ Patches/../C_code.c:2312: 	if (MagClassTable[unit->pClassData->number].growth > growth) { growth = MagClassTable[unit->pClassData->number].growth;  } 
	cmp	r0, r7	@ baseGrowth, baseGrowth
	blt	.L1547		@,
.L1519:
@ Patches/../C_code.c:2313: 	growth = AdjustGrowthForStatInflation(growth);
	bl	AdjustGrowthForStatInflation		@
@ Patches/../C_code.c:2314: 	int noise[4] = {0, 0, 0, 0};  
	movs	r2, #12	@,
@ Patches/../C_code.c:2313: 	growth = AdjustGrowthForStatInflation(growth);
	movs	r5, r0	@ growth, tmp286
@ Patches/../C_code.c:2314: 	int noise[4] = {0, 0, 0, 0};  
	movs	r1, #0	@,
	ldr	r3, .L1549+32	@ tmp255,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2315: 	noise[0] = unit->pCharacterData->number; 
	ldr	r3, [r4]	@ unit_55(D)->pCharacterData, unit_55(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp260,
	str	r3, [sp, #8]	@ tmp260, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp262,
	add	r1, sp, #8	@ tmp300,,
	str	r3, [sp]	@ tmp262,
	movs	r2, #81	@,
	movs	r0, r5	@, growth
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2317: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 89); } 
	lsrs	r1, r5, #31	@ tmp265, growth,
	adds	r1, r1, r5	@ tmp266, tmp265, growth
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r4, r0	@ result, tmp287
@ Patches/../C_code.c:2317: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 89); } 
	asrs	r1, r1, #1	@ tmp267, tmp266,
@ Patches/../C_code.c:2317: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 89); } 
	cmp	r1, r0	@ tmp267, result
	ble	.L1520		@,
@ Patches/../C_code.c:2317: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 89); } 
	movs	r3, #89	@,
	movs	r0, r5	@, growth
	add	r2, sp, #8	@ tmp301,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:2317: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 89); } 
	adds	r4, r4, r0	@ result, result, tmp288
.L1520:
@ Patches/../C_code.c:2318: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r4, r5	@ tmp271, result, growth
@ Patches/../C_code.c:2318: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp271,
	bgt	.L1548		@,
@ Patches/../C_code.c:2319: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r4	@ tmp272, growth, result
@ Patches/../C_code.c:2319: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp272,
	ble	.L1522		@,
@ Patches/../C_code.c:2319: 	if ((growth-result) > 99) { result = growth-99; } 
	movs	r4, r5	@ growth, growth
	subs	r4, r4, #99	@ growth,
.L1522:
@ Patches/../C_code.c:2320: 	result += add; 
	adds	r0, r6, r4	@ <retval>, add, result
@ Patches/../C_code.c:2321: 	if (result < 0) { result = 0; } 
	mvns	r3, r0	@ tmp277, <retval>
	asrs	r3, r3, #31	@ tmp276, tmp277,
	ands	r0, r3	@ <retval>, tmp276
	b	.L1508		@
.L1513:
@ Patches/../C_code.c:2303: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	adds	r0, r7, r6	@ <retval>, baseGrowth, add
.L1508:
@ Patches/../C_code.c:2323: }
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1548:
@ Patches/../C_code.c:2318: 	if ((result-growth) > 99) { result = growth+99; } 
	movs	r4, r5	@ growth, growth
	adds	r4, r4, #99	@ growth,
	b	.L1522		@
.L1547:
@ Patches/../C_code.c:2312: 	if (MagClassTable[unit->pClassData->number].growth > growth) { growth = MagClassTable[unit->pClassData->number].growth;  } 
	movs	r0, r7	@ baseGrowth, baseGrowth
	b	.L1519		@
.L1528:
@ Patches/../C_code.c:2311: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	movs	r0, #100	@ <retval>,
	b	.L1508		@
.L1527:
@ Patches/../C_code.c:2309: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	movs	r0, #50	@ <retval>,
	b	.L1508		@
.L1550:
	.align	2
.L1549:
	.word	MagCharTable
	.word	ClassBasedGrowths
	.word	MagClassTable
	.word	CombinedGrowths
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	CallGet_Mag_Growth
	.word	memset
	.size	GetUnitMagGrowth, .-GetUnitMagGrowth
	.align	1
	.p2align 2,,3
	.global	GetUnitMaxMag
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMaxMag, %function
GetUnitMaxMag:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:2327: 	if (StrMagInstalled) { cap = MagClassTable[unit->pClassData->number].cap; } 
	ldr	r3, .L1575	@ tmp147,
	ldr	r4, [r3]	@ cap, StrMagInstalled
@ Patches/../C_code.c:2325: int GetUnitMaxMag(struct Unit* unit) { 
	movs	r5, r0	@ unit, tmp201
	sub	sp, sp, #28	@,,
@ Patches/../C_code.c:2327: 	if (StrMagInstalled) { cap = MagClassTable[unit->pClassData->number].cap; } 
	cmp	r4, #0	@ cap,
	beq	.L1552		@,
@ Patches/../C_code.c:2327: 	if (StrMagInstalled) { cap = MagClassTable[unit->pClassData->number].cap; } 
	ldr	r2, [r0, #4]	@ unit_19(D)->pClassData, unit_19(D)->pClassData
	ldrb	r2, [r2, #4]	@ tmp150,
@ Patches/../C_code.c:2327: 	if (StrMagInstalled) { cap = MagClassTable[unit->pClassData->number].cap; } 
	ldr	r3, .L1575+4	@ tmp148,
	lsls	r2, r2, #2	@ tmp151, tmp150,
	adds	r3, r3, r2	@ tmp152, tmp148, tmp151
@ Patches/../C_code.c:2327: 	if (StrMagInstalled) { cap = MagClassTable[unit->pClassData->number].cap; } 
	ldrb	r4, [r3, #2]	@ cap, MagClassTable
.L1552:
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	movs	r2, #224	@ tmp158,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, .L1575+8	@ tmp154,
	ldr	r3, [r3]	@ RandBitflags.54_32, RandBitflags
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldrh	r3, [r3]	@ *RandBitflags.54_32, *RandBitflags.54_32
	lsls	r2, r2, #1	@ tmp158, tmp158,
@ Patches/../C_code.c:2328: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	movs	r0, r4	@ <retval>, cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	tst	r3, r2	@ *RandBitflags.54_32, tmp158
	beq	.L1551		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r1, [r5]	@ MEM[(const struct CharacterData * *)unit_19(D)], MEM[(const struct CharacterData * *)unit_19(D)]
	ldrb	r1, [r1, #4]	@ tmp164,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, .L1575+12	@ tmp162,
	lsls	r1, r1, #1	@ tmp165, tmp164,
@ Patches/../C_code.c:2328: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	ldrb	r2, [r1, r2]	@ tmp166, CharExceptions
	cmp	r2, #0	@ tmp166,
	bne	.L1551		@,
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	lsls	r3, r3, #23	@ tmp171, *RandBitflags.54_32,
	lsrs	r3, r3, #29	@ _46, tmp171,
	subs	r2, r3, #2	@ tmp173, _46,
	lsls	r2, r2, #24	@ tmp177, tmp173,
	lsrs	r2, r2, #24	@ tmp176, tmp177,
	cmp	r2, #4	@ tmp176,
	bhi	.L1563		@,
	lsls	r6, r3, #4	@ tmp179, _46,
	subs	r6, r6, r3	@ tmp180, tmp179, _46
	subs	r6, r6, #30	@ result,
.L1554:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r7, .L1575+16	@ tmp200,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r0, [r7]	@ <retval>, maxStat
	cmp	r0, r6	@ <retval>, result
	ble	.L1555		@,
	movs	r0, r6	@ <retval>, result
.L1555:
@ Patches/../C_code.c:2330: 	if (max != (-1)) { return max; } 
	adds	r3, r0, #1	@ tmp206, <retval>,
	bne	.L1551		@,
@ Patches/../C_code.c:2331: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L1575+20	@ tmp185,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2332: 	noise[0] = unit->pClassData->number; 
	ldr	r3, [r5, #4]	@ unit_19(D)->pClassData, unit_19(D)->pClassData
	ldrb	r3, [r3, #4]	@ tmp190,
	str	r3, [sp, #8]	@ tmp190, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp192,
	add	r1, sp, #8	@ tmp211,,
	str	r3, [sp]	@ tmp192,
	movs	r2, #77	@,
	movs	r0, r4	@, cap
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2334: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap >> 1), noise, 73); } 
	asrs	r1, r4, #1	@ _10, cap,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r5, r0	@ result, tmp202
@ Patches/../C_code.c:2334: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap >> 1), noise, 73); } 
	cmp	r1, r0	@ _10, result
	ble	.L1556		@,
@ Patches/../C_code.c:2334: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap >> 1), noise, 73); } 
	movs	r3, #73	@,
	movs	r0, r4	@, cap
	add	r2, sp, #8	@ tmp212,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:2334: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap >> 1), noise, 73); } 
	adds	r5, r5, r0	@ result, result, tmp203
.L1556:
@ Patches/../C_code.c:2335: 	if (result > cap) { result = cap; } 
	cmp	r4, r5	@ _16, result
	bgt	.L1571		@,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r3, [r7]	@ result, maxStat
	cmp	r3, r6	@ result, result
	bgt	.L1572		@,
.L1558:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp207, result,
	beq	.L1573		@,
.L1559:
@ Patches/../C_code.c:2336: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r4	@ <retval>, _16
	cmp	r4, r3	@ <retval>, result
	bgt	.L1574		@,
.L1551:
@ Patches/../C_code.c:2338: } 
	add	sp, sp, #28	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1563:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r6, #1	@ result,
	rsbs	r6, r6, #0	@ result, result
	b	.L1554		@
.L1574:
@ Patches/../C_code.c:2336: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r3	@ <retval>, result
	b	.L1551		@
.L1572:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	movs	r3, r6	@ result, result
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp207, result,
	bne	.L1559		@,
	b	.L1573		@
.L1571:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r3, [r7]	@ result, maxStat
@ Patches/../C_code.c:2335: 	if (result > cap) { result = cap; } 
	movs	r4, r5	@ _16, result
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	cmp	r3, r6	@ result, result
	ble	.L1558		@,
	b	.L1572		@
.L1573:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r3, #31	@ result,
	b	.L1559		@
.L1576:
	.align	2
.L1575:
	.word	StrMagInstalled
	.word	MagClassTable
	.word	RandBitflags
	.word	CharExceptions
	.word	maxStat
	.word	memset
	.size	GetUnitMaxMag, .-GetUnitMaxMag
	.align	1
	.p2align 2,,3
	.global	GetUnitBaseMag
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitBaseMag, %function
GetUnitBaseMag:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	ldr	r2, [r0, #4]	@ unit_10(D)->pClassData, unit_10(D)->pClassData
	ldrb	r2, [r2, #4]	@ tmp130,
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	ldr	r3, .L1582	@ tmp128,
@ Patches/../C_code.c:294: 	return GetReorderedCharacter(unit->pCharacterData)->number; 
	ldr	r0, [r0]	@ _13, unit_10(D)->pCharacterData
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	lsls	r2, r2, #2	@ tmp131, tmp130,
	ldrb	r4, [r2, r3]	@ _5, MagClassTable
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp132,
	cmp	r3, #0	@ tmp132,
	beq	.L1578		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_13 + 4B], MEM[(unsigned char *)_13 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
.L1578:
@ Patches/../C_code.c:2342: } 
	@ sp needed	@
@ Patches/../C_code.c:294: 	return GetReorderedCharacter(unit->pCharacterData)->number; 
	ldrb	r2, [r0, #4]	@ tmp136,
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	ldr	r3, .L1582+4	@ tmp135,
	lsls	r2, r2, #1	@ tmp137, tmp136,
	ldrb	r0, [r2, r3]	@ tmp138, MagCharTable
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	adds	r0, r0, r4	@ tmp134, tmp138, _5
@ Patches/../C_code.c:2342: } 
	pop	{r4}
	pop	{r1}
	bx	r1
.L1583:
	.align	2
.L1582:
	.word	MagClassTable
	.word	MagCharTable
	.size	GetUnitBaseMag, .-GetUnitBaseMag
	.align	1
	.p2align 2,,3
	.global	GetBaseMag
	.syntax unified
	.code	16
	.thumb_func
	.type	GetBaseMag, %function
GetBaseMag:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	ldr	r3, .L1585	@ tmp122,
@ Patches/../C_code.c:2345: } 
	@ sp needed	@
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	ldr	r2, .L1585+4	@ tmp125,
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	lsls	r1, r1, #2	@ tmp123, tmp129,
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	lsls	r0, r0, #1	@ tmp126, tmp128,
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	ldrb	r3, [r1, r3]	@ tmp124, MagClassTable
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	ldrb	r0, [r0, r2]	@ tmp127, MagCharTable
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	adds	r0, r3, r0	@ tmp121, tmp124, tmp127
@ Patches/../C_code.c:2345: } 
	bx	lr
.L1586:
	.align	2
.L1585:
	.word	MagClassTable
	.word	MagCharTable
	.size	GetBaseMag, .-GetBaseMag
	.align	1
	.p2align 2,,3
	.global	GetPromoMag
	.syntax unified
	.code	16
	.thumb_func
	.type	GetPromoMag, %function
GetPromoMag:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2348: 	return MagClassTable[classId].promo; 
	ldr	r3, .L1588	@ tmp118,
@ Patches/../C_code.c:2349: } 
	@ sp needed	@
@ Patches/../C_code.c:2348: 	return MagClassTable[classId].promo; 
	lsls	r0, r0, #2	@ tmp119, tmp122,
	adds	r3, r3, r0	@ tmp120, tmp118, tmp119
	ldrb	r0, [r3, #3]	@ tmp117, MagClassTable
@ Patches/../C_code.c:2349: } 
	bx	lr
.L1589:
	.align	2
.L1588:
	.word	MagClassTable
	.size	GetPromoMag, .-GetPromoMag
	.align	1
	.p2align 2,,3
	.global	GetClassHPGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetClassHPGrowth, %function
GetClassHPGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2372: 	growth += unit->pClassData->growthHP; 
	movs	r5, #27	@ <retval>,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1598	@ tmp136,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
@ Patches/../C_code.c:2372: 	growth += unit->pClassData->growthHP; 
	ldr	r6, [r0, #4]	@ _1, unit_13(D)->pClassData
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r2, [r3]	@ *RandBitflags.53_23, *RandBitflags.53_23
	ldr	r3, .L1598+4	@ tmp139,
@ Patches/../C_code.c:2372: 	growth += unit->pClassData->growthHP; 
	ldrsb	r5, [r6, r5]	@ <retval>,* <retval>
@ Patches/../C_code.c:2370: int GetClassHPGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_23, tmp139
	beq	.L1590		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_13(D)], MEM[(const struct CharacterData * *)unit_13(D)]
	ldrb	r2, [r2, #4]	@ tmp142,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1598+8	@ tmp140,
	lsls	r2, r2, #1	@ tmp143, tmp142,
@ Patches/../C_code.c:2373: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	ldrb	r3, [r2, r3]	@ tmp145, CharExceptions
@ Patches/../C_code.c:2373: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	cmp	r3, #0	@ tmp145,
	bne	.L1590		@,
	rsbs	r4, r1, #0	@ tmp153, modifiersBool
	adcs	r4, r4, r1	@ tmp153, modifiersBool
	cmp	r4, #0	@ tmp153,
	bne	.L1590		@,
@ Patches/../C_code.c:2374: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L1598+12	@ tmp158,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2375: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r6, #4]	@ tmp162,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r2, #11	@,
@ Patches/../C_code.c:2375: 	noise[0] = unit->pClassData->number; 
	str	r3, [sp, #8]	@ tmp162, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r0, r5	@, <retval>
	movs	r3, #1	@,
	str	r4, [sp]	@ tmp153,
	add	r1, sp, #8	@,,
	bl	HashPercent		@
@ Patches/../C_code.c:2377: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r0, r5	@ tmp167, tmp165, <retval>
@ Patches/../C_code.c:2377: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp167,
	bgt	.L1597		@,
@ Patches/../C_code.c:2378: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r0	@ tmp168, <retval>, tmp165
@ Patches/../C_code.c:2378: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp168,
	ble	.L1593		@,
@ Patches/../C_code.c:2378: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r5, r5, #99	@ <retval>,
.L1590:
@ Patches/../C_code.c:2380: }
	movs	r0, r5	@, <retval>
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1597:
@ Patches/../C_code.c:2377: 	if ((result-growth) > 99) { result = growth+99; } 
	adds	r5, r5, #99	@ <retval>,
	b	.L1590		@
.L1593:
	movs	r5, r0	@ <retval>, tmp165
	b	.L1590		@
.L1599:
	.align	2
.L1598:
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	memset
	.size	GetClassHPGrowth, .-GetClassHPGrowth
	.align	1
	.p2align 2,,3
	.global	GetClassPowGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetClassPowGrowth, %function
GetClassPowGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2384: 	growth += unit->pClassData->growthPow; 
	movs	r5, #28	@ <retval>,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1608	@ tmp136,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
@ Patches/../C_code.c:2384: 	growth += unit->pClassData->growthPow; 
	ldr	r6, [r0, #4]	@ _1, unit_13(D)->pClassData
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r2, [r3]	@ *RandBitflags.53_23, *RandBitflags.53_23
	ldr	r3, .L1608+4	@ tmp139,
@ Patches/../C_code.c:2384: 	growth += unit->pClassData->growthPow; 
	ldrsb	r5, [r6, r5]	@ <retval>,* <retval>
@ Patches/../C_code.c:2382: int GetClassPowGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_23, tmp139
	beq	.L1600		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_13(D)], MEM[(const struct CharacterData * *)unit_13(D)]
	ldrb	r2, [r2, #4]	@ tmp142,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1608+8	@ tmp140,
	lsls	r2, r2, #1	@ tmp143, tmp142,
@ Patches/../C_code.c:2385: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	ldrb	r3, [r2, r3]	@ tmp145, CharExceptions
@ Patches/../C_code.c:2385: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	cmp	r3, #0	@ tmp145,
	bne	.L1600		@,
	rsbs	r4, r1, #0	@ tmp153, modifiersBool
	adcs	r4, r4, r1	@ tmp153, modifiersBool
	cmp	r4, #0	@ tmp153,
	bne	.L1600		@,
@ Patches/../C_code.c:2386: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L1608+12	@ tmp158,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2387: 	noise[0] = unit->pClassData->number;  
	ldrb	r3, [r6, #4]	@ tmp162,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r2, #21	@,
@ Patches/../C_code.c:2387: 	noise[0] = unit->pClassData->number;  
	str	r3, [sp, #8]	@ tmp162, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r0, r5	@, <retval>
	movs	r3, #1	@,
	str	r4, [sp]	@ tmp153,
	add	r1, sp, #8	@,,
	bl	HashPercent		@
@ Patches/../C_code.c:2389: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r0, r5	@ tmp167, tmp165, <retval>
@ Patches/../C_code.c:2389: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp167,
	bgt	.L1607		@,
@ Patches/../C_code.c:2390: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r0	@ tmp168, <retval>, tmp165
@ Patches/../C_code.c:2390: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp168,
	ble	.L1603		@,
@ Patches/../C_code.c:2390: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r5, r5, #99	@ <retval>,
.L1600:
@ Patches/../C_code.c:2392: }
	movs	r0, r5	@, <retval>
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1607:
@ Patches/../C_code.c:2389: 	if ((result-growth) > 99) { result = growth+99; } 
	adds	r5, r5, #99	@ <retval>,
	b	.L1600		@
.L1603:
	movs	r5, r0	@ <retval>, tmp165
	b	.L1600		@
.L1609:
	.align	2
.L1608:
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	memset
	.size	GetClassPowGrowth, .-GetClassPowGrowth
	.align	1
	.p2align 2,,3
	.global	GetClassSklGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetClassSklGrowth, %function
GetClassSklGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2396: 	growth += unit->pClassData->growthSkl; 
	movs	r5, #29	@ <retval>,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1618	@ tmp136,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
@ Patches/../C_code.c:2396: 	growth += unit->pClassData->growthSkl; 
	ldr	r6, [r0, #4]	@ _1, unit_13(D)->pClassData
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r2, [r3]	@ *RandBitflags.53_23, *RandBitflags.53_23
	ldr	r3, .L1618+4	@ tmp139,
@ Patches/../C_code.c:2396: 	growth += unit->pClassData->growthSkl; 
	ldrsb	r5, [r6, r5]	@ <retval>,* <retval>
@ Patches/../C_code.c:2394: int GetClassSklGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_23, tmp139
	beq	.L1610		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_13(D)], MEM[(const struct CharacterData * *)unit_13(D)]
	ldrb	r2, [r2, #4]	@ tmp142,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1618+8	@ tmp140,
	lsls	r2, r2, #1	@ tmp143, tmp142,
@ Patches/../C_code.c:2397: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	ldrb	r3, [r2, r3]	@ tmp145, CharExceptions
@ Patches/../C_code.c:2397: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	cmp	r3, #0	@ tmp145,
	bne	.L1610		@,
	rsbs	r4, r1, #0	@ tmp153, modifiersBool
	adcs	r4, r4, r1	@ tmp153, modifiersBool
	cmp	r4, #0	@ tmp153,
	bne	.L1610		@,
@ Patches/../C_code.c:2398: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L1618+12	@ tmp158,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2399: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r6, #4]	@ tmp162,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r2, #31	@,
@ Patches/../C_code.c:2399: 	noise[0] = unit->pClassData->number; 
	str	r3, [sp, #8]	@ tmp162, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r0, r5	@, <retval>
	movs	r3, #1	@,
	str	r4, [sp]	@ tmp153,
	add	r1, sp, #8	@,,
	bl	HashPercent		@
@ Patches/../C_code.c:2401: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r0, r5	@ tmp167, tmp165, <retval>
@ Patches/../C_code.c:2401: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp167,
	bgt	.L1617		@,
@ Patches/../C_code.c:2402: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r0	@ tmp168, <retval>, tmp165
@ Patches/../C_code.c:2402: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp168,
	ble	.L1613		@,
@ Patches/../C_code.c:2402: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r5, r5, #99	@ <retval>,
.L1610:
@ Patches/../C_code.c:2404: }
	movs	r0, r5	@, <retval>
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1617:
@ Patches/../C_code.c:2401: 	if ((result-growth) > 99) { result = growth+99; } 
	adds	r5, r5, #99	@ <retval>,
	b	.L1610		@
.L1613:
	movs	r5, r0	@ <retval>, tmp165
	b	.L1610		@
.L1619:
	.align	2
.L1618:
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	memset
	.size	GetClassSklGrowth, .-GetClassSklGrowth
	.align	1
	.p2align 2,,3
	.global	GetClassSpdGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetClassSpdGrowth, %function
GetClassSpdGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2408: 	growth += unit->pClassData->growthSpd; 
	movs	r5, #30	@ <retval>,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1628	@ tmp136,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
@ Patches/../C_code.c:2408: 	growth += unit->pClassData->growthSpd; 
	ldr	r6, [r0, #4]	@ _1, unit_13(D)->pClassData
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r2, [r3]	@ *RandBitflags.53_23, *RandBitflags.53_23
	ldr	r3, .L1628+4	@ tmp139,
@ Patches/../C_code.c:2408: 	growth += unit->pClassData->growthSpd; 
	ldrsb	r5, [r6, r5]	@ <retval>,* <retval>
@ Patches/../C_code.c:2406: int GetClassSpdGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_23, tmp139
	beq	.L1620		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_13(D)], MEM[(const struct CharacterData * *)unit_13(D)]
	ldrb	r2, [r2, #4]	@ tmp142,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1628+8	@ tmp140,
	lsls	r2, r2, #1	@ tmp143, tmp142,
@ Patches/../C_code.c:2409: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	ldrb	r3, [r2, r3]	@ tmp145, CharExceptions
@ Patches/../C_code.c:2409: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	cmp	r3, #0	@ tmp145,
	bne	.L1620		@,
	rsbs	r4, r1, #0	@ tmp153, modifiersBool
	adcs	r4, r4, r1	@ tmp153, modifiersBool
	cmp	r4, #0	@ tmp153,
	bne	.L1620		@,
@ Patches/../C_code.c:2410: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L1628+12	@ tmp158,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2411: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r6, #4]	@ tmp162,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r2, #41	@,
@ Patches/../C_code.c:2411: 	noise[0] = unit->pClassData->number; 
	str	r3, [sp, #8]	@ tmp162, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r0, r5	@, <retval>
	movs	r3, #1	@,
	str	r4, [sp]	@ tmp153,
	add	r1, sp, #8	@,,
	bl	HashPercent		@
@ Patches/../C_code.c:2413: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r0, r5	@ tmp167, tmp165, <retval>
@ Patches/../C_code.c:2413: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp167,
	bgt	.L1627		@,
@ Patches/../C_code.c:2414: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r0	@ tmp168, <retval>, tmp165
@ Patches/../C_code.c:2414: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp168,
	ble	.L1623		@,
@ Patches/../C_code.c:2414: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r5, r5, #99	@ <retval>,
.L1620:
@ Patches/../C_code.c:2416: }
	movs	r0, r5	@, <retval>
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1627:
@ Patches/../C_code.c:2413: 	if ((result-growth) > 99) { result = growth+99; } 
	adds	r5, r5, #99	@ <retval>,
	b	.L1620		@
.L1623:
	movs	r5, r0	@ <retval>, tmp165
	b	.L1620		@
.L1629:
	.align	2
.L1628:
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	memset
	.size	GetClassSpdGrowth, .-GetClassSpdGrowth
	.align	1
	.p2align 2,,3
	.global	GetClassDefGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetClassDefGrowth, %function
GetClassDefGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2420: 	growth += unit->pClassData->growthDef; 
	movs	r5, #31	@ <retval>,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1638	@ tmp136,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
@ Patches/../C_code.c:2420: 	growth += unit->pClassData->growthDef; 
	ldr	r6, [r0, #4]	@ _1, unit_13(D)->pClassData
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r2, [r3]	@ *RandBitflags.53_23, *RandBitflags.53_23
	ldr	r3, .L1638+4	@ tmp139,
@ Patches/../C_code.c:2420: 	growth += unit->pClassData->growthDef; 
	ldrsb	r5, [r6, r5]	@ <retval>,* <retval>
@ Patches/../C_code.c:2418: int GetClassDefGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_23, tmp139
	beq	.L1630		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_13(D)], MEM[(const struct CharacterData * *)unit_13(D)]
	ldrb	r2, [r2, #4]	@ tmp142,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1638+8	@ tmp140,
	lsls	r2, r2, #1	@ tmp143, tmp142,
@ Patches/../C_code.c:2421: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	ldrb	r3, [r2, r3]	@ tmp145, CharExceptions
@ Patches/../C_code.c:2421: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	cmp	r3, #0	@ tmp145,
	bne	.L1630		@,
	rsbs	r4, r1, #0	@ tmp153, modifiersBool
	adcs	r4, r4, r1	@ tmp153, modifiersBool
	cmp	r4, #0	@ tmp153,
	bne	.L1630		@,
@ Patches/../C_code.c:2422: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L1638+12	@ tmp158,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2423: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r6, #4]	@ tmp162,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r2, #51	@,
@ Patches/../C_code.c:2423: 	noise[0] = unit->pClassData->number; 
	str	r3, [sp, #8]	@ tmp162, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r0, r5	@, <retval>
	movs	r3, #1	@,
	str	r4, [sp]	@ tmp153,
	add	r1, sp, #8	@,,
	bl	HashPercent		@
@ Patches/../C_code.c:2425: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r0, r5	@ tmp167, tmp165, <retval>
@ Patches/../C_code.c:2425: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp167,
	bgt	.L1637		@,
@ Patches/../C_code.c:2426: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r0	@ tmp168, <retval>, tmp165
@ Patches/../C_code.c:2426: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp168,
	ble	.L1633		@,
@ Patches/../C_code.c:2426: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r5, r5, #99	@ <retval>,
.L1630:
@ Patches/../C_code.c:2428: }
	movs	r0, r5	@, <retval>
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1637:
@ Patches/../C_code.c:2425: 	if ((result-growth) > 99) { result = growth+99; } 
	adds	r5, r5, #99	@ <retval>,
	b	.L1630		@
.L1633:
	movs	r5, r0	@ <retval>, tmp165
	b	.L1630		@
.L1639:
	.align	2
.L1638:
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	memset
	.size	GetClassDefGrowth, .-GetClassDefGrowth
	.align	1
	.p2align 2,,3
	.global	GetClassResGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetClassResGrowth, %function
GetClassResGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:2432: 	growth += unit->pClassData->growthRes; 
	movs	r3, #32	@ tmp135,
@ Patches/../C_code.c:2430: int GetClassResGrowth(struct Unit* unit, int modifiersBool) {
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2432: 	growth += unit->pClassData->growthRes; 
	ldr	r6, [r0, #4]	@ _1, unit_13(D)->pClassData
@ Patches/../C_code.c:2432: 	growth += unit->pClassData->growthRes; 
	ldrsb	r5, [r6, r3]	@ <retval>,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1648	@ tmp137,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_23, *RandBitflags.53_23
	ldr	r3, .L1648+4	@ tmp140,
@ Patches/../C_code.c:2430: int GetClassResGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_23, tmp140
	beq	.L1640		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_13(D)], MEM[(const struct CharacterData * *)unit_13(D)]
	ldrb	r2, [r2, #4]	@ tmp143,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1648+8	@ tmp141,
	lsls	r2, r2, #1	@ tmp144, tmp143,
@ Patches/../C_code.c:2433: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	ldrb	r3, [r2, r3]	@ tmp146, CharExceptions
@ Patches/../C_code.c:2433: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	cmp	r3, #0	@ tmp146,
	bne	.L1640		@,
	rsbs	r4, r1, #0	@ tmp154, modifiersBool
	adcs	r4, r4, r1	@ tmp154, modifiersBool
	cmp	r4, #0	@ tmp154,
	bne	.L1640		@,
@ Patches/../C_code.c:2434: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L1648+12	@ tmp159,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2435: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r6, #4]	@ tmp163,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r2, #61	@,
@ Patches/../C_code.c:2435: 	noise[0] = unit->pClassData->number; 
	str	r3, [sp, #8]	@ tmp163, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r0, r5	@, <retval>
	movs	r3, #1	@,
	str	r4, [sp]	@ tmp154,
	add	r1, sp, #8	@,,
	bl	HashPercent		@
@ Patches/../C_code.c:2437: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r0, r5	@ tmp168, tmp166, <retval>
@ Patches/../C_code.c:2437: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp168,
	bgt	.L1647		@,
@ Patches/../C_code.c:2438: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r0	@ tmp169, <retval>, tmp166
@ Patches/../C_code.c:2438: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp169,
	ble	.L1643		@,
@ Patches/../C_code.c:2438: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r5, r5, #99	@ <retval>,
.L1640:
@ Patches/../C_code.c:2440: }
	movs	r0, r5	@, <retval>
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1647:
@ Patches/../C_code.c:2437: 	if ((result-growth) > 99) { result = growth+99; } 
	adds	r5, r5, #99	@ <retval>,
	b	.L1640		@
.L1643:
	movs	r5, r0	@ <retval>, tmp166
	b	.L1640		@
.L1649:
	.align	2
.L1648:
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	memset
	.size	GetClassResGrowth, .-GetClassResGrowth
	.align	1
	.p2align 2,,3
	.global	GetClassLckGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetClassLckGrowth, %function
GetClassLckGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:2444: 	growth += unit->pClassData->growthLck; 
	movs	r3, #33	@ tmp135,
@ Patches/../C_code.c:2442: int GetClassLckGrowth(struct Unit* unit, int modifiersBool) { 
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2444: 	growth += unit->pClassData->growthLck; 
	ldr	r6, [r0, #4]	@ _1, unit_13(D)->pClassData
@ Patches/../C_code.c:2444: 	growth += unit->pClassData->growthLck; 
	ldrsb	r5, [r6, r3]	@ <retval>,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1658	@ tmp137,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_23, *RandBitflags.53_23
	ldr	r3, .L1658+4	@ tmp140,
@ Patches/../C_code.c:2442: int GetClassLckGrowth(struct Unit* unit, int modifiersBool) { 
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_23, tmp140
	beq	.L1650		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r0]	@ MEM[(const struct CharacterData * *)unit_13(D)], MEM[(const struct CharacterData * *)unit_13(D)]
	ldrb	r2, [r2, #4]	@ tmp143,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1658+8	@ tmp141,
	lsls	r2, r2, #1	@ tmp144, tmp143,
@ Patches/../C_code.c:2445: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	ldrb	r3, [r2, r3]	@ tmp146, CharExceptions
@ Patches/../C_code.c:2445: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return growth; } 
	cmp	r3, #0	@ tmp146,
	bne	.L1650		@,
	rsbs	r4, r1, #0	@ tmp154, modifiersBool
	adcs	r4, r4, r1	@ tmp154, modifiersBool
	cmp	r4, #0	@ tmp154,
	bne	.L1650		@,
@ Patches/../C_code.c:2446: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L1658+12	@ tmp159,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2447: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r6, #4]	@ tmp163,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r2, #71	@,
@ Patches/../C_code.c:2447: 	noise[0] = unit->pClassData->number; 
	str	r3, [sp, #8]	@ tmp163, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r0, r5	@, <retval>
	movs	r3, #1	@,
	str	r4, [sp]	@ tmp154,
	add	r1, sp, #8	@,,
	bl	HashPercent		@
@ Patches/../C_code.c:2449: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r0, r5	@ tmp168, tmp166, <retval>
@ Patches/../C_code.c:2449: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp168,
	bgt	.L1657		@,
@ Patches/../C_code.c:2450: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r0	@ tmp169, <retval>, tmp166
@ Patches/../C_code.c:2450: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp169,
	ble	.L1653		@,
@ Patches/../C_code.c:2450: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r5, r5, #99	@ <retval>,
.L1650:
@ Patches/../C_code.c:2452: }
	movs	r0, r5	@, <retval>
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L1657:
@ Patches/../C_code.c:2449: 	if ((result-growth) > 99) { result = growth+99; } 
	adds	r5, r5, #99	@ <retval>,
	b	.L1650		@
.L1653:
	movs	r5, r0	@ <retval>, tmp166
	b	.L1650		@
.L1659:
	.align	2
.L1658:
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	memset
	.size	GetClassLckGrowth, .-GetClassLckGrowth
	.align	1
	.p2align 2,,3
	.global	GetUnitHPGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitHPGrowth, %function
GetUnitHPGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	push	{lr}	@
	movs	r4, r0	@ unit, tmp248
	movs	r6, r1	@ modifiersBool, tmp249
@ Patches/../C_code.c:2457: 	int add = 0; 
	movs	r7, #0	@ add,
@ Patches/../C_code.c:2455: int GetUnitHPGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:2458: 	if (modifiersBool) { add = GetGrowthModifiers(unit); } 
	cmp	r1, #0	@ modifiersBool,
	beq	.L1661		@,
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	ldr	r3, [r0, #12]	@ unit_46(D)->state, unit_46(D)->state
	lsls	r3, r3, #18	@ tmp167, unit_46(D)->state,
@ Patches/../C_code.c:2457: 	int add = 0; 
	asrs	r3, r3, #31	@ tmp246, tmp167,
	adds	r7, r7, #5	@ tmp247,
	ands	r7, r3	@ add, tmp246
.L1661:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r0, [r4]	@ _70, unit_46(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp170,
	movs	r1, r0	@ pretmp_12, _70
	cmp	r3, #0	@ tmp170,
	beq	.L1662		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_70 + 4B], MEM[(unsigned char *)_70 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2460: 	int originalGrowth = unit->pCharacterData->growthHP; 
	ldr	r1, [r4]	@ pretmp_12, unit_46(D)->pCharacterData
.L1662:
@ Patches/../C_code.c:2461: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthHP; } 
	ldr	r3, .L1698	@ tmp172,
@ Patches/../C_code.c:2461: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthHP; } 
	ldr	r3, [r3]	@ ClassBasedGrowths, ClassBasedGrowths
@ Patches/../C_code.c:2459: 	baseGrowth = GetReorderedUnit(unit)->growthHP; 
	ldrb	r5, [r0, #28]	@ _2,
@ Patches/../C_code.c:2461: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthHP; } 
	cmp	r3, #0	@ ClassBasedGrowths,
	beq	.L1664		@,
@ Patches/../C_code.c:2461: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthHP; } 
	movs	r5, #27	@ baseGrowth,
@ Patches/../C_code.c:2461: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthHP; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
@ Patches/../C_code.c:2461: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthHP; } 
	ldrsb	r5, [r3, r5]	@ baseGrowth,* baseGrowth
.L1664:
@ Patches/../C_code.c:2462: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthHP; } 
	ldr	r3, .L1698+4	@ tmp175,
@ Patches/../C_code.c:2462: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthHP; } 
	ldr	r3, [r3]	@ CombinedGrowths, CombinedGrowths
	cmp	r3, #0	@ CombinedGrowths,
	beq	.L1665		@,
@ Patches/../C_code.c:2462: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthHP; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrb	r3, [r3, #27]	@ tmp178,
	lsls	r3, r3, #24	@ tmp178, tmp178,
	asrs	r3, r3, #24	@ tmp178, tmp178,
@ Patches/../C_code.c:2462: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthHP; } 
	adds	r5, r5, r3	@ baseGrowth, baseGrowth, tmp178
.L1665:
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1698+8	@ tmp243,
	mov	r8, r3	@ tmp243, tmp243
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_75, *RandBitflags.53_75
	ldr	r3, .L1698+12	@ tmp183,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_75, tmp183
	beq	.L1666		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r2, [r1, #4]	@ tmp185,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1698+16	@ tmp184,
	lsls	r2, r2, #1	@ tmp186, tmp185,
@ Patches/../C_code.c:2463: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	ldrb	r3, [r2, r3]	@ tmp188, CharExceptions
@ Patches/../C_code.c:2463: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	cmp	r3, #0	@ tmp188,
	bne	.L1666		@,
	cmp	r6, #0	@ modifiersBool,
	beq	.L1666		@,
@ Patches/../C_code.c:2464: 	int growth = CallGet_Hp_Growth(unit); 
	ldr	r3, .L1698+20	@ tmp198,
	movs	r0, r4	@, unit
@ Patches/../C_code.c:2460: 	int originalGrowth = unit->pCharacterData->growthHP; 
	ldrb	r6, [r1, #28]	@ _4,
@ Patches/../C_code.c:2464: 	int growth = CallGet_Hp_Growth(unit); 
	bl	.L14		@
@ Patches/../C_code.c:2466: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	adds	r3, r0, #1	@ tmp255, growth,
	beq	.L1670		@,
@ Patches/../C_code.c:2466: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	subs	r7, r0, r6	@ add, growth, _4
.L1670:
@ Patches/../C_code.c:2468: 	int player = (UNIT_FACTION(unit) == FACTION_BLUE); 
	movs	r2, #192	@ tmp200,
	movs	r3, #11	@ tmp199,
	movs	r0, r2	@ <retval>, tmp200
	ldrsb	r3, [r4, r3]	@ tmp199,
	ands	r0, r3	@ <retval>, tmp199
@ Patches/../C_code.c:2469: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	tst	r2, r3	@ tmp200, tmp199
	bne	.L1671		@,
@ Patches/../C_code.c:2469: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	mov	r3, r8	@ tmp243, tmp243
	ldr	r2, [r3]	@ RandBitflags.151_16, RandBitflags
@ Patches/../C_code.c:2469: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	ldrb	r3, [r2, #3]	@ *RandBitflags.151_16, *RandBitflags.151_16
@ Patches/../C_code.c:2469: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	lsls	r3, r3, #27	@ tmp256, *RandBitflags.151_16,
	bmi	.L1679		@,
@ Patches/../C_code.c:2470: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	movs	r3, #12	@ tmp216,
	ldrb	r2, [r2]	@ *RandBitflags.151_16, *RandBitflags.151_16
	ands	r3, r2	@ _20, *RandBitflags.151_16
@ Patches/../C_code.c:2470: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	cmp	r3, #8	@ _20,
	beq	.L1660		@,
@ Patches/../C_code.c:2471: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	cmp	r3, #12	@ _20,
	beq	.L1680		@,
.L1671:
@ Patches/../C_code.c:2472: 	if (unit->pClassData->growthHP > growth) { growth = unit->pClassData->growthHP; } 
	movs	r0, #27	@ tmp218,
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrsb	r0, [r3, r0]	@ tmp218,
@ Patches/../C_code.c:2472: 	if (unit->pClassData->growthHP > growth) { growth = unit->pClassData->growthHP; } 
	cmp	r0, r5	@ tmp218, baseGrowth
	blt	.L1696		@,
.L1672:
@ Patches/../C_code.c:2473: 	growth = AdjustGrowthForStatInflation(growth);
	bl	AdjustGrowthForStatInflation		@
@ Patches/../C_code.c:2474: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:2473: 	growth = AdjustGrowthForStatInflation(growth);
	movs	r5, r0	@ growth, tmp252
@ Patches/../C_code.c:2474: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L1698+24	@ tmp224,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2475: 	noise[0] = unit->pCharacterData->number;  
	ldr	r3, [r4]	@ unit_46(D)->pCharacterData, unit_46(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp229,
	str	r3, [sp, #8]	@ tmp229, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp231,
	add	r1, sp, #8	@ tmp263,,
	str	r3, [sp]	@ tmp231,
	movs	r2, #11	@,
	movs	r0, r5	@, growth
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2477: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 19); } // if really low, try to add some points 
	lsrs	r1, r5, #31	@ tmp234, growth,
	adds	r1, r1, r5	@ tmp235, tmp234, growth
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r4, r0	@ result, tmp253
@ Patches/../C_code.c:2477: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 19); } // if really low, try to add some points 
	asrs	r1, r1, #1	@ tmp236, tmp235,
@ Patches/../C_code.c:2477: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 19); } // if really low, try to add some points 
	cmp	r1, r0	@ tmp236, result
	ble	.L1673		@,
@ Patches/../C_code.c:2477: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 19); } // if really low, try to add some points 
	movs	r3, #19	@,
	movs	r0, r5	@, growth
	add	r2, sp, #8	@ tmp264,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:2477: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 19); } // if really low, try to add some points 
	adds	r4, r4, r0	@ result, result, tmp254
.L1673:
@ Patches/../C_code.c:2478: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r4, r5	@ tmp240, result, growth
@ Patches/../C_code.c:2478: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp240,
	bgt	.L1697		@,
@ Patches/../C_code.c:2479: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r4	@ tmp241, growth, result
@ Patches/../C_code.c:2479: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp241,
	ble	.L1675		@,
@ Patches/../C_code.c:2479: 	if ((growth-result) > 99) { result = growth-99; } 
	movs	r4, r5	@ growth, growth
	subs	r4, r4, #99	@ growth,
.L1675:
@ Patches/../C_code.c:2480: 	return result + add; 
	adds	r0, r7, r4	@ <retval>, add, result
	b	.L1660		@
.L1666:
@ Patches/../C_code.c:2463: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	adds	r0, r5, r7	@ <retval>, baseGrowth, add
.L1660:
@ Patches/../C_code.c:2481: }
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1697:
@ Patches/../C_code.c:2478: 	if ((result-growth) > 99) { result = growth+99; } 
	movs	r4, r5	@ growth, growth
	adds	r4, r4, #99	@ growth,
@ Patches/../C_code.c:2480: 	return result + add; 
	adds	r0, r7, r4	@ <retval>, add, result
	b	.L1660		@
.L1696:
@ Patches/../C_code.c:2472: 	if (unit->pClassData->growthHP > growth) { growth = unit->pClassData->growthHP; } 
	movs	r0, r5	@ tmp218, baseGrowth
	b	.L1672		@
.L1680:
@ Patches/../C_code.c:2471: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	movs	r0, #100	@ <retval>,
	b	.L1660		@
.L1679:
@ Patches/../C_code.c:2469: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	movs	r0, #50	@ <retval>,
	b	.L1660		@
.L1699:
	.align	2
.L1698:
	.word	ClassBasedGrowths
	.word	CombinedGrowths
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	CallGet_Hp_Growth
	.word	memset
	.size	GetUnitHPGrowth, .-GetUnitHPGrowth
	.align	1
	.p2align 2,,3
	.global	GetUnitPowGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitPowGrowth, %function
GetUnitPowGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	push	{lr}	@
	movs	r4, r0	@ unit, tmp251
	movs	r6, r1	@ modifiersBool, tmp252
@ Patches/../C_code.c:2485: 	int add = 0; 
	movs	r7, #0	@ add,
@ Patches/../C_code.c:2483: int GetUnitPowGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:2486: 	if (modifiersBool) { add = GetGrowthModifiers(unit); } 
	cmp	r1, #0	@ modifiersBool,
	beq	.L1701		@,
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	ldr	r3, [r0, #12]	@ unit_46(D)->state, unit_46(D)->state
	lsls	r3, r3, #18	@ tmp168, unit_46(D)->state,
@ Patches/../C_code.c:2485: 	int add = 0; 
	asrs	r3, r3, #31	@ tmp249, tmp168,
	adds	r7, r7, #5	@ tmp250,
	ands	r7, r3	@ add, tmp249
.L1701:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r0, [r4]	@ _71, unit_46(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp171,
	movs	r1, r0	@ pretmp_82, _71
	cmp	r3, #0	@ tmp171,
	beq	.L1702		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_71 + 4B], MEM[(unsigned char *)_71 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2488: 	int originalGrowth = unit->pCharacterData->growthPow; 
	ldr	r1, [r4]	@ pretmp_82, unit_46(D)->pCharacterData
.L1702:
@ Patches/../C_code.c:2489: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthPow; } 
	ldr	r3, .L1739	@ tmp173,
@ Patches/../C_code.c:2489: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthPow; } 
	ldr	r3, [r3]	@ ClassBasedGrowths, ClassBasedGrowths
@ Patches/../C_code.c:2487: 	baseGrowth = GetReorderedUnit(unit)->growthPow; 
	ldrb	r5, [r0, #29]	@ _2,
@ Patches/../C_code.c:2489: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthPow; } 
	cmp	r3, #0	@ ClassBasedGrowths,
	beq	.L1704		@,
@ Patches/../C_code.c:2489: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthPow; } 
	movs	r5, #28	@ baseGrowth,
@ Patches/../C_code.c:2489: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthPow; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
@ Patches/../C_code.c:2489: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthPow; } 
	ldrsb	r5, [r3, r5]	@ baseGrowth,* baseGrowth
.L1704:
@ Patches/../C_code.c:2490: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthPow; } 
	ldr	r3, .L1739+4	@ tmp176,
@ Patches/../C_code.c:2490: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthPow; } 
	ldr	r3, [r3]	@ CombinedGrowths, CombinedGrowths
	cmp	r3, #0	@ CombinedGrowths,
	beq	.L1705		@,
@ Patches/../C_code.c:2490: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthPow; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrb	r3, [r3, #28]	@ tmp179,
	lsls	r3, r3, #24	@ tmp179, tmp179,
	asrs	r3, r3, #24	@ tmp179, tmp179,
@ Patches/../C_code.c:2490: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthPow; } 
	adds	r5, r5, r3	@ baseGrowth, baseGrowth, tmp179
.L1705:
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1739+8	@ tmp244,
	mov	r8, r3	@ tmp244, tmp244
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_76, *RandBitflags.53_76
	ldr	r3, .L1739+12	@ tmp184,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_76, tmp184
	beq	.L1706		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r2, [r1, #4]	@ tmp186,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1739+16	@ tmp185,
	lsls	r2, r2, #1	@ tmp187, tmp186,
@ Patches/../C_code.c:2491: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	ldrb	r3, [r2, r3]	@ tmp189, CharExceptions
@ Patches/../C_code.c:2491: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	cmp	r3, #0	@ tmp189,
	bne	.L1706		@,
	cmp	r6, #0	@ modifiersBool,
	beq	.L1706		@,
@ Patches/../C_code.c:2492: 	int growth = CallGet_Str_Growth(unit); 
	ldr	r3, .L1739+20	@ tmp199,
	movs	r0, r4	@, unit
@ Patches/../C_code.c:2488: 	int originalGrowth = unit->pCharacterData->growthPow; 
	ldrb	r6, [r1, #29]	@ _4,
@ Patches/../C_code.c:2492: 	int growth = CallGet_Str_Growth(unit); 
	bl	.L14		@
@ Patches/../C_code.c:2493: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	adds	r3, r0, #1	@ tmp258, growth,
	beq	.L1710		@,
@ Patches/../C_code.c:2493: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	subs	r7, r0, r6	@ add, growth, _4
.L1710:
@ Patches/../C_code.c:2495: 	int player = (UNIT_FACTION(unit) == FACTION_BLUE); 
	movs	r2, #192	@ tmp201,
	movs	r3, #11	@ tmp200,
	movs	r0, r2	@ <retval>, tmp201
	ldrsb	r3, [r4, r3]	@ tmp200,
	ands	r0, r3	@ <retval>, tmp200
@ Patches/../C_code.c:2496: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	tst	r2, r3	@ tmp201, tmp200
	bne	.L1711		@,
@ Patches/../C_code.c:2496: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	mov	r3, r8	@ tmp244, tmp244
	ldr	r2, [r3]	@ RandBitflags.156_16, RandBitflags
@ Patches/../C_code.c:2496: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	ldrb	r3, [r2, #3]	@ *RandBitflags.156_16, *RandBitflags.156_16
@ Patches/../C_code.c:2496: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	lsls	r3, r3, #27	@ tmp259, *RandBitflags.156_16,
	bmi	.L1720		@,
@ Patches/../C_code.c:2497: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	movs	r3, #12	@ tmp217,
	ldrb	r2, [r2]	@ *RandBitflags.156_16, *RandBitflags.156_16
	ands	r3, r2	@ _20, *RandBitflags.156_16
@ Patches/../C_code.c:2497: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	cmp	r3, #8	@ _20,
	beq	.L1700		@,
@ Patches/../C_code.c:2498: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	cmp	r3, #12	@ _20,
	beq	.L1721		@,
.L1711:
@ Patches/../C_code.c:2499: 	if (unit->pClassData->growthPow > growth) { growth = unit->pClassData->growthPow; } 
	movs	r0, #28	@ tmp219,
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrsb	r0, [r3, r0]	@ tmp219,
@ Patches/../C_code.c:2499: 	if (unit->pClassData->growthPow > growth) { growth = unit->pClassData->growthPow; } 
	cmp	r0, r5	@ tmp219, baseGrowth
	blt	.L1737		@,
.L1712:
@ Patches/../C_code.c:2500: 	growth = AdjustGrowthForStatInflation(growth);
	bl	AdjustGrowthForStatInflation		@
@ Patches/../C_code.c:2501: 	int noise[4] = {0, 0, 0, 0};  
	movs	r2, #12	@,
@ Patches/../C_code.c:2500: 	growth = AdjustGrowthForStatInflation(growth);
	movs	r5, r0	@ growth, tmp255
@ Patches/../C_code.c:2501: 	int noise[4] = {0, 0, 0, 0};  
	movs	r1, #0	@,
	ldr	r3, .L1739+24	@ tmp225,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2502: 	noise[0] = unit->pCharacterData->number; 
	ldr	r3, [r4]	@ unit_46(D)->pCharacterData, unit_46(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp230,
	str	r3, [sp, #8]	@ tmp230, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp232,
	add	r1, sp, #8	@ tmp266,,
	str	r3, [sp]	@ tmp232,
	movs	r2, #21	@,
	movs	r0, r5	@, growth
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2504: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 29); } 
	lsrs	r1, r5, #31	@ tmp235, growth,
	adds	r1, r1, r5	@ tmp236, tmp235, growth
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r4, r0	@ result, tmp256
@ Patches/../C_code.c:2504: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 29); } 
	asrs	r1, r1, #1	@ tmp237, tmp236,
@ Patches/../C_code.c:2504: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 29); } 
	cmp	r1, r0	@ tmp237, result
	ble	.L1713		@,
@ Patches/../C_code.c:2504: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 29); } 
	movs	r3, #29	@,
	movs	r0, r5	@, growth
	add	r2, sp, #8	@ tmp267,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:2504: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 29); } 
	adds	r4, r4, r0	@ result, result, tmp257
.L1713:
@ Patches/../C_code.c:2505: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r4, r5	@ tmp241, result, growth
@ Patches/../C_code.c:2505: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp241,
	bgt	.L1738		@,
@ Patches/../C_code.c:2506: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r4	@ tmp242, growth, result
@ Patches/../C_code.c:2506: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp242,
	ble	.L1715		@,
@ Patches/../C_code.c:2506: 	if ((growth-result) > 99) { result = growth-99; } 
	movs	r4, r5	@ growth, growth
	subs	r4, r4, #99	@ growth,
.L1715:
@ Patches/../C_code.c:2507: 	result += add; 
	adds	r0, r7, r4	@ <retval>, add, result
@ Patches/../C_code.c:2508: 	if (result < 0) { result = 0; } 
	mvns	r3, r0	@ tmp246, <retval>
	asrs	r3, r3, #31	@ tmp245, tmp246,
	ands	r0, r3	@ <retval>, tmp245
	b	.L1700		@
.L1706:
@ Patches/../C_code.c:2491: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	adds	r0, r5, r7	@ <retval>, baseGrowth, add
.L1700:
@ Patches/../C_code.c:2510: }
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1738:
@ Patches/../C_code.c:2505: 	if ((result-growth) > 99) { result = growth+99; } 
	movs	r4, r5	@ growth, growth
	adds	r4, r4, #99	@ growth,
	b	.L1715		@
.L1737:
@ Patches/../C_code.c:2499: 	if (unit->pClassData->growthPow > growth) { growth = unit->pClassData->growthPow; } 
	movs	r0, r5	@ tmp219, baseGrowth
	b	.L1712		@
.L1721:
@ Patches/../C_code.c:2498: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	movs	r0, #100	@ <retval>,
	b	.L1700		@
.L1720:
@ Patches/../C_code.c:2496: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	movs	r0, #50	@ <retval>,
	b	.L1700		@
.L1740:
	.align	2
.L1739:
	.word	ClassBasedGrowths
	.word	CombinedGrowths
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	CallGet_Str_Growth
	.word	memset
	.size	GetUnitPowGrowth, .-GetUnitPowGrowth
	.align	1
	.p2align 2,,3
	.global	GetUnitSklGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitSklGrowth, %function
GetUnitSklGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	push	{lr}	@
	movs	r4, r0	@ unit, tmp251
	movs	r6, r1	@ modifiersBool, tmp252
@ Patches/../C_code.c:2514: 	int add = 0; 
	movs	r7, #0	@ add,
@ Patches/../C_code.c:2512: int GetUnitSklGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:2515: 	if (modifiersBool) { add = GetGrowthModifiers(unit); } 
	cmp	r1, #0	@ modifiersBool,
	beq	.L1742		@,
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	ldr	r3, [r0, #12]	@ unit_46(D)->state, unit_46(D)->state
	lsls	r3, r3, #18	@ tmp168, unit_46(D)->state,
@ Patches/../C_code.c:2514: 	int add = 0; 
	asrs	r3, r3, #31	@ tmp249, tmp168,
	adds	r7, r7, #5	@ tmp250,
	ands	r7, r3	@ add, tmp249
.L1742:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r0, [r4]	@ _71, unit_46(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp171,
	movs	r1, r0	@ pretmp_82, _71
	cmp	r3, #0	@ tmp171,
	beq	.L1743		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_71 + 4B], MEM[(unsigned char *)_71 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2517: 	int originalGrowth = unit->pCharacterData->growthSkl; 
	ldr	r1, [r4]	@ pretmp_82, unit_46(D)->pCharacterData
.L1743:
@ Patches/../C_code.c:2518: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSkl; } 
	ldr	r3, .L1780	@ tmp173,
@ Patches/../C_code.c:2518: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSkl; } 
	ldr	r3, [r3]	@ ClassBasedGrowths, ClassBasedGrowths
@ Patches/../C_code.c:2516: 	baseGrowth = GetReorderedUnit(unit)->growthSkl; 
	ldrb	r5, [r0, #30]	@ _2,
@ Patches/../C_code.c:2518: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSkl; } 
	cmp	r3, #0	@ ClassBasedGrowths,
	beq	.L1745		@,
@ Patches/../C_code.c:2518: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSkl; } 
	movs	r5, #29	@ baseGrowth,
@ Patches/../C_code.c:2518: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSkl; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
@ Patches/../C_code.c:2518: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSkl; } 
	ldrsb	r5, [r3, r5]	@ baseGrowth,* baseGrowth
.L1745:
@ Patches/../C_code.c:2519: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthSkl; } 
	ldr	r3, .L1780+4	@ tmp176,
@ Patches/../C_code.c:2519: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthSkl; } 
	ldr	r3, [r3]	@ CombinedGrowths, CombinedGrowths
	cmp	r3, #0	@ CombinedGrowths,
	beq	.L1746		@,
@ Patches/../C_code.c:2519: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthSkl; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrb	r3, [r3, #29]	@ tmp179,
	lsls	r3, r3, #24	@ tmp179, tmp179,
	asrs	r3, r3, #24	@ tmp179, tmp179,
@ Patches/../C_code.c:2519: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthSkl; } 
	adds	r5, r5, r3	@ baseGrowth, baseGrowth, tmp179
.L1746:
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1780+8	@ tmp244,
	mov	r8, r3	@ tmp244, tmp244
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_76, *RandBitflags.53_76
	ldr	r3, .L1780+12	@ tmp184,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_76, tmp184
	beq	.L1747		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r2, [r1, #4]	@ tmp186,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1780+16	@ tmp185,
	lsls	r2, r2, #1	@ tmp187, tmp186,
@ Patches/../C_code.c:2520: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	ldrb	r3, [r2, r3]	@ tmp189, CharExceptions
@ Patches/../C_code.c:2520: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	cmp	r3, #0	@ tmp189,
	bne	.L1747		@,
	cmp	r6, #0	@ modifiersBool,
	beq	.L1747		@,
@ Patches/../C_code.c:2521: 	int growth = CallGet_Skl_Growth(unit); 
	ldr	r3, .L1780+20	@ tmp199,
	movs	r0, r4	@, unit
@ Patches/../C_code.c:2517: 	int originalGrowth = unit->pCharacterData->growthSkl; 
	ldrb	r6, [r1, #30]	@ _4,
@ Patches/../C_code.c:2521: 	int growth = CallGet_Skl_Growth(unit); 
	bl	.L14		@
@ Patches/../C_code.c:2522: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	adds	r3, r0, #1	@ tmp258, growth,
	beq	.L1751		@,
@ Patches/../C_code.c:2522: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	subs	r7, r0, r6	@ add, growth, _4
.L1751:
@ Patches/../C_code.c:2524: 	int player = (UNIT_FACTION(unit) == FACTION_BLUE); 
	movs	r2, #192	@ tmp201,
	movs	r3, #11	@ tmp200,
	movs	r0, r2	@ <retval>, tmp201
	ldrsb	r3, [r4, r3]	@ tmp200,
	ands	r0, r3	@ <retval>, tmp200
@ Patches/../C_code.c:2525: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	tst	r2, r3	@ tmp201, tmp200
	bne	.L1752		@,
@ Patches/../C_code.c:2525: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	mov	r3, r8	@ tmp244, tmp244
	ldr	r2, [r3]	@ RandBitflags.161_16, RandBitflags
@ Patches/../C_code.c:2525: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	ldrb	r3, [r2, #3]	@ *RandBitflags.161_16, *RandBitflags.161_16
@ Patches/../C_code.c:2525: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	lsls	r3, r3, #27	@ tmp259, *RandBitflags.161_16,
	bmi	.L1761		@,
@ Patches/../C_code.c:2526: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	movs	r3, #12	@ tmp217,
	ldrb	r2, [r2]	@ *RandBitflags.161_16, *RandBitflags.161_16
	ands	r3, r2	@ _20, *RandBitflags.161_16
@ Patches/../C_code.c:2526: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	cmp	r3, #8	@ _20,
	beq	.L1741		@,
@ Patches/../C_code.c:2527: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	cmp	r3, #12	@ _20,
	beq	.L1762		@,
.L1752:
@ Patches/../C_code.c:2528: 	if (unit->pClassData->growthSkl > growth) { growth = unit->pClassData->growthSkl; } 
	movs	r0, #29	@ tmp219,
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrsb	r0, [r3, r0]	@ tmp219,
@ Patches/../C_code.c:2528: 	if (unit->pClassData->growthSkl > growth) { growth = unit->pClassData->growthSkl; } 
	cmp	r0, r5	@ tmp219, baseGrowth
	blt	.L1778		@,
.L1753:
@ Patches/../C_code.c:2529: 	growth = AdjustGrowthForStatInflation(growth);
	bl	AdjustGrowthForStatInflation		@
@ Patches/../C_code.c:2530: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:2529: 	growth = AdjustGrowthForStatInflation(growth);
	movs	r5, r0	@ growth, tmp255
@ Patches/../C_code.c:2530: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L1780+24	@ tmp225,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2531: 	noise[0] = unit->pCharacterData->number; 
	ldr	r3, [r4]	@ unit_46(D)->pCharacterData, unit_46(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp230,
	str	r3, [sp, #8]	@ tmp230, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp232,
	add	r1, sp, #8	@ tmp266,,
	str	r3, [sp]	@ tmp232,
	movs	r2, #31	@,
	movs	r0, r5	@, growth
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2533: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 39); } 
	lsrs	r1, r5, #31	@ tmp235, growth,
	adds	r1, r1, r5	@ tmp236, tmp235, growth
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r4, r0	@ result, tmp256
@ Patches/../C_code.c:2533: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 39); } 
	asrs	r1, r1, #1	@ tmp237, tmp236,
@ Patches/../C_code.c:2533: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 39); } 
	cmp	r1, r0	@ tmp237, result
	ble	.L1754		@,
@ Patches/../C_code.c:2533: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 39); } 
	movs	r3, #39	@,
	movs	r0, r5	@, growth
	add	r2, sp, #8	@ tmp267,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:2533: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 39); } 
	adds	r4, r4, r0	@ result, result, tmp257
.L1754:
@ Patches/../C_code.c:2534: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r4, r5	@ tmp241, result, growth
@ Patches/../C_code.c:2534: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp241,
	bgt	.L1779		@,
@ Patches/../C_code.c:2535: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r4	@ tmp242, growth, result
@ Patches/../C_code.c:2535: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp242,
	ble	.L1756		@,
@ Patches/../C_code.c:2535: 	if ((growth-result) > 99) { result = growth-99; } 
	movs	r4, r5	@ growth, growth
	subs	r4, r4, #99	@ growth,
.L1756:
@ Patches/../C_code.c:2536: 	result += add; 
	adds	r0, r7, r4	@ <retval>, add, result
@ Patches/../C_code.c:2537: 	if (result < 0) { result = 0; } 
	mvns	r3, r0	@ tmp246, <retval>
	asrs	r3, r3, #31	@ tmp245, tmp246,
	ands	r0, r3	@ <retval>, tmp245
	b	.L1741		@
.L1747:
@ Patches/../C_code.c:2520: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	adds	r0, r5, r7	@ <retval>, baseGrowth, add
.L1741:
@ Patches/../C_code.c:2539: }
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1779:
@ Patches/../C_code.c:2534: 	if ((result-growth) > 99) { result = growth+99; } 
	movs	r4, r5	@ growth, growth
	adds	r4, r4, #99	@ growth,
	b	.L1756		@
.L1778:
@ Patches/../C_code.c:2528: 	if (unit->pClassData->growthSkl > growth) { growth = unit->pClassData->growthSkl; } 
	movs	r0, r5	@ tmp219, baseGrowth
	b	.L1753		@
.L1762:
@ Patches/../C_code.c:2527: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	movs	r0, #100	@ <retval>,
	b	.L1741		@
.L1761:
@ Patches/../C_code.c:2525: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	movs	r0, #50	@ <retval>,
	b	.L1741		@
.L1781:
	.align	2
.L1780:
	.word	ClassBasedGrowths
	.word	CombinedGrowths
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	CallGet_Skl_Growth
	.word	memset
	.size	GetUnitSklGrowth, .-GetUnitSklGrowth
	.align	1
	.p2align 2,,3
	.global	GetUnitSpdGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitSpdGrowth, %function
GetUnitSpdGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	push	{lr}	@
	movs	r4, r0	@ unit, tmp251
	movs	r6, r1	@ modifiersBool, tmp252
@ Patches/../C_code.c:2543: 	int add = 0; 
	movs	r7, #0	@ add,
@ Patches/../C_code.c:2541: int GetUnitSpdGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:2544: 	if (modifiersBool) { add = GetGrowthModifiers(unit); } 
	cmp	r1, #0	@ modifiersBool,
	beq	.L1783		@,
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	ldr	r3, [r0, #12]	@ unit_46(D)->state, unit_46(D)->state
	lsls	r3, r3, #18	@ tmp168, unit_46(D)->state,
@ Patches/../C_code.c:2543: 	int add = 0; 
	asrs	r3, r3, #31	@ tmp249, tmp168,
	adds	r7, r7, #5	@ tmp250,
	ands	r7, r3	@ add, tmp249
.L1783:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r0, [r4]	@ _71, unit_46(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp171,
	movs	r1, r0	@ pretmp_82, _71
	cmp	r3, #0	@ tmp171,
	beq	.L1784		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_71 + 4B], MEM[(unsigned char *)_71 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2546: 	int originalGrowth = unit->pCharacterData->growthSpd; 
	ldr	r1, [r4]	@ pretmp_82, unit_46(D)->pCharacterData
.L1784:
@ Patches/../C_code.c:2547: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSpd; } 
	ldr	r3, .L1821	@ tmp173,
@ Patches/../C_code.c:2547: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSpd; } 
	ldr	r3, [r3]	@ ClassBasedGrowths, ClassBasedGrowths
@ Patches/../C_code.c:2545: 	baseGrowth = GetReorderedUnit(unit)->growthSpd; 
	ldrb	r5, [r0, #31]	@ _2,
@ Patches/../C_code.c:2547: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSpd; } 
	cmp	r3, #0	@ ClassBasedGrowths,
	beq	.L1786		@,
@ Patches/../C_code.c:2547: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSpd; } 
	movs	r5, #30	@ baseGrowth,
@ Patches/../C_code.c:2547: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSpd; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
@ Patches/../C_code.c:2547: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthSpd; } 
	ldrsb	r5, [r3, r5]	@ baseGrowth,* baseGrowth
.L1786:
@ Patches/../C_code.c:2548: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthSpd; } 
	ldr	r3, .L1821+4	@ tmp176,
@ Patches/../C_code.c:2548: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthSpd; } 
	ldr	r3, [r3]	@ CombinedGrowths, CombinedGrowths
	cmp	r3, #0	@ CombinedGrowths,
	beq	.L1787		@,
@ Patches/../C_code.c:2548: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthSpd; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrb	r3, [r3, #30]	@ tmp179,
	lsls	r3, r3, #24	@ tmp179, tmp179,
	asrs	r3, r3, #24	@ tmp179, tmp179,
@ Patches/../C_code.c:2548: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthSpd; } 
	adds	r5, r5, r3	@ baseGrowth, baseGrowth, tmp179
.L1787:
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1821+8	@ tmp244,
	mov	r8, r3	@ tmp244, tmp244
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_76, *RandBitflags.53_76
	ldr	r3, .L1821+12	@ tmp184,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_76, tmp184
	beq	.L1788		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r2, [r1, #4]	@ tmp186,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1821+16	@ tmp185,
	lsls	r2, r2, #1	@ tmp187, tmp186,
@ Patches/../C_code.c:2549: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	ldrb	r3, [r2, r3]	@ tmp189, CharExceptions
@ Patches/../C_code.c:2549: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	cmp	r3, #0	@ tmp189,
	bne	.L1788		@,
	cmp	r6, #0	@ modifiersBool,
	beq	.L1788		@,
@ Patches/../C_code.c:2550: 	int growth = CallGet_Spd_Growth(unit); 
	ldr	r3, .L1821+20	@ tmp199,
	movs	r0, r4	@, unit
@ Patches/../C_code.c:2546: 	int originalGrowth = unit->pCharacterData->growthSpd; 
	ldrb	r6, [r1, #31]	@ _4,
@ Patches/../C_code.c:2550: 	int growth = CallGet_Spd_Growth(unit); 
	bl	.L14		@
@ Patches/../C_code.c:2551: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	adds	r3, r0, #1	@ tmp258, growth,
	beq	.L1792		@,
@ Patches/../C_code.c:2551: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	subs	r7, r0, r6	@ add, growth, _4
.L1792:
@ Patches/../C_code.c:2553: 	int player = (UNIT_FACTION(unit) == FACTION_BLUE); 
	movs	r2, #192	@ tmp201,
	movs	r3, #11	@ tmp200,
	movs	r0, r2	@ <retval>, tmp201
	ldrsb	r3, [r4, r3]	@ tmp200,
	ands	r0, r3	@ <retval>, tmp200
@ Patches/../C_code.c:2554: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	tst	r2, r3	@ tmp201, tmp200
	bne	.L1793		@,
@ Patches/../C_code.c:2554: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	mov	r3, r8	@ tmp244, tmp244
	ldr	r2, [r3]	@ RandBitflags.166_16, RandBitflags
@ Patches/../C_code.c:2554: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	ldrb	r3, [r2, #3]	@ *RandBitflags.166_16, *RandBitflags.166_16
@ Patches/../C_code.c:2554: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	lsls	r3, r3, #27	@ tmp259, *RandBitflags.166_16,
	bmi	.L1802		@,
@ Patches/../C_code.c:2555: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	movs	r3, #12	@ tmp217,
	ldrb	r2, [r2]	@ *RandBitflags.166_16, *RandBitflags.166_16
	ands	r3, r2	@ _20, *RandBitflags.166_16
@ Patches/../C_code.c:2555: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	cmp	r3, #8	@ _20,
	beq	.L1782		@,
@ Patches/../C_code.c:2556: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	cmp	r3, #12	@ _20,
	beq	.L1803		@,
.L1793:
@ Patches/../C_code.c:2557: 	if (unit->pClassData->growthSpd > growth) { growth = unit->pClassData->growthSpd; } 
	movs	r0, #30	@ tmp219,
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrsb	r0, [r3, r0]	@ tmp219,
@ Patches/../C_code.c:2557: 	if (unit->pClassData->growthSpd > growth) { growth = unit->pClassData->growthSpd; } 
	cmp	r0, r5	@ tmp219, baseGrowth
	blt	.L1819		@,
.L1794:
@ Patches/../C_code.c:2558: 	growth = AdjustGrowthForStatInflation(growth);
	bl	AdjustGrowthForStatInflation		@
@ Patches/../C_code.c:2559: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:2558: 	growth = AdjustGrowthForStatInflation(growth);
	movs	r5, r0	@ growth, tmp255
@ Patches/../C_code.c:2559: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L1821+24	@ tmp225,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2560: 	noise[0] = unit->pCharacterData->number;  
	ldr	r3, [r4]	@ unit_46(D)->pCharacterData, unit_46(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp230,
	str	r3, [sp, #8]	@ tmp230, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp232,
	add	r1, sp, #8	@ tmp266,,
	str	r3, [sp]	@ tmp232,
	movs	r2, #41	@,
	movs	r0, r5	@, growth
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2562: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 49); } 
	lsrs	r1, r5, #31	@ tmp235, growth,
	adds	r1, r1, r5	@ tmp236, tmp235, growth
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r4, r0	@ result, tmp256
@ Patches/../C_code.c:2562: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 49); } 
	asrs	r1, r1, #1	@ tmp237, tmp236,
@ Patches/../C_code.c:2562: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 49); } 
	cmp	r1, r0	@ tmp237, result
	ble	.L1795		@,
@ Patches/../C_code.c:2562: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 49); } 
	movs	r3, #49	@,
	movs	r0, r5	@, growth
	add	r2, sp, #8	@ tmp267,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:2562: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 49); } 
	adds	r4, r4, r0	@ result, result, tmp257
.L1795:
@ Patches/../C_code.c:2563: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r4, r5	@ tmp241, result, growth
@ Patches/../C_code.c:2563: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp241,
	bgt	.L1820		@,
@ Patches/../C_code.c:2564: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r4	@ tmp242, growth, result
@ Patches/../C_code.c:2564: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp242,
	ble	.L1797		@,
@ Patches/../C_code.c:2564: 	if ((growth-result) > 99) { result = growth-99; } 
	movs	r4, r5	@ growth, growth
	subs	r4, r4, #99	@ growth,
.L1797:
@ Patches/../C_code.c:2565: 	result += add; 
	adds	r0, r7, r4	@ <retval>, add, result
@ Patches/../C_code.c:2566: 	if (result < 0) { result = 0; } 
	mvns	r3, r0	@ tmp246, <retval>
	asrs	r3, r3, #31	@ tmp245, tmp246,
	ands	r0, r3	@ <retval>, tmp245
	b	.L1782		@
.L1788:
@ Patches/../C_code.c:2549: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	adds	r0, r5, r7	@ <retval>, baseGrowth, add
.L1782:
@ Patches/../C_code.c:2568: }
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1820:
@ Patches/../C_code.c:2563: 	if ((result-growth) > 99) { result = growth+99; } 
	movs	r4, r5	@ growth, growth
	adds	r4, r4, #99	@ growth,
	b	.L1797		@
.L1819:
@ Patches/../C_code.c:2557: 	if (unit->pClassData->growthSpd > growth) { growth = unit->pClassData->growthSpd; } 
	movs	r0, r5	@ tmp219, baseGrowth
	b	.L1794		@
.L1803:
@ Patches/../C_code.c:2556: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	movs	r0, #100	@ <retval>,
	b	.L1782		@
.L1802:
@ Patches/../C_code.c:2554: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	movs	r0, #50	@ <retval>,
	b	.L1782		@
.L1822:
	.align	2
.L1821:
	.word	ClassBasedGrowths
	.word	CombinedGrowths
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	CallGet_Spd_Growth
	.word	memset
	.size	GetUnitSpdGrowth, .-GetUnitSpdGrowth
	.align	1
	.p2align 2,,3
	.global	GetUnitDefGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitDefGrowth, %function
GetUnitDefGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r7, r8	@,
	mov	lr, r9	@,
	push	{r7, lr}	@
	movs	r4, r0	@ unit, tmp255
	movs	r5, r1	@ modifiersBool, tmp256
@ Patches/../C_code.c:2572: 	int add = 0; 
	movs	r7, #0	@ add,
@ Patches/../C_code.c:2570: int GetUnitDefGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #28	@,,
@ Patches/../C_code.c:2573: 	if (modifiersBool) { add = GetGrowthModifiers(unit); } 
	cmp	r1, #0	@ modifiersBool,
	beq	.L1824		@,
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	ldr	r3, [r0, #12]	@ unit_46(D)->state, unit_46(D)->state
	lsls	r3, r3, #18	@ tmp169, unit_46(D)->state,
@ Patches/../C_code.c:2572: 	int add = 0; 
	asrs	r3, r3, #31	@ tmp253, tmp169,
	adds	r7, r7, #5	@ tmp254,
	ands	r7, r3	@ add, tmp253
.L1824:
@ Patches/../C_code.c:2574: 	int originalGrowth = unit->pCharacterData->growthDef; 
	movs	r2, #32	@ tmp172,
@ Patches/../C_code.c:2574: 	int originalGrowth = unit->pCharacterData->growthDef; 
	ldr	r3, [r4]	@ _1, unit_46(D)->pCharacterData
@ Patches/../C_code.c:2574: 	int originalGrowth = unit->pCharacterData->growthDef; 
	mov	r9, r2	@ tmp172, tmp172
@ Patches/../C_code.c:2574: 	int originalGrowth = unit->pCharacterData->growthDef; 
	ldrb	r2, [r3, r2]	@ originalGrowth,
	mov	r8, r2	@ originalGrowth, originalGrowth
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r2, [r3, #6]	@ tmp173,
	mov	r6, r8	@ baseGrowth, originalGrowth
	cmp	r2, #0	@ tmp173,
	beq	.L1825		@,
	ldrb	r0, [r3, #4]	@ MEM[(unsigned char *)_1 + 4B], MEM[(unsigned char *)_1 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2575: 	baseGrowth = GetReorderedUnit(unit)->growthDef; 
	mov	r3, r9	@ tmp172, tmp172
	ldrb	r6, [r0, r3]	@ baseGrowth,
.L1825:
@ Patches/../C_code.c:2576: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthDef; } 
	ldr	r3, .L1864	@ tmp176,
@ Patches/../C_code.c:2576: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthDef; } 
	ldr	r3, [r3]	@ ClassBasedGrowths, ClassBasedGrowths
	cmp	r3, #0	@ ClassBasedGrowths,
	beq	.L1826		@,
@ Patches/../C_code.c:2576: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthDef; } 
	movs	r6, #31	@ baseGrowth,
@ Patches/../C_code.c:2576: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthDef; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
@ Patches/../C_code.c:2576: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthDef; } 
	ldrsb	r6, [r3, r6]	@ baseGrowth,* baseGrowth
.L1826:
@ Patches/../C_code.c:2577: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthDef; } 
	ldr	r3, .L1864+4	@ tmp179,
@ Patches/../C_code.c:2577: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthDef; } 
	ldr	r3, [r3]	@ CombinedGrowths, CombinedGrowths
	cmp	r3, #0	@ CombinedGrowths,
	beq	.L1827		@,
@ Patches/../C_code.c:2577: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthDef; } 
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrb	r3, [r3, #31]	@ tmp182,
	lsls	r3, r3, #24	@ tmp182, tmp182,
	asrs	r3, r3, #24	@ tmp182, tmp182,
@ Patches/../C_code.c:2577: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthDef; } 
	adds	r6, r6, r3	@ baseGrowth, baseGrowth, tmp182
.L1827:
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1864+8	@ tmp248,
	mov	r9, r3	@ tmp248, tmp248
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_76, *RandBitflags.53_76
	ldr	r3, .L1864+12	@ tmp187,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_76, tmp187
	beq	.L1828		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r4]	@ MEM[(const struct CharacterData * *)unit_46(D)], MEM[(const struct CharacterData * *)unit_46(D)]
	ldrb	r2, [r2, #4]	@ tmp190,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1864+16	@ tmp188,
	lsls	r2, r2, #1	@ tmp191, tmp190,
@ Patches/../C_code.c:2578: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	ldrb	r3, [r2, r3]	@ tmp193, CharExceptions
@ Patches/../C_code.c:2578: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	cmp	r3, #0	@ tmp193,
	bne	.L1828		@,
	cmp	r5, #0	@ modifiersBool,
	beq	.L1828		@,
@ Patches/../C_code.c:2579: 	int growth = CallGet_Def_Growth(unit); 
	ldr	r3, .L1864+20	@ tmp203,
	movs	r0, r4	@, unit
	bl	.L14		@
@ Patches/../C_code.c:2580: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	adds	r3, r0, #1	@ tmp262, growth,
	beq	.L1832		@,
@ Patches/../C_code.c:2580: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	mov	r3, r8	@ originalGrowth, originalGrowth
	subs	r7, r0, r3	@ add, growth, originalGrowth
.L1832:
@ Patches/../C_code.c:2582: 	int player = (UNIT_FACTION(unit) == FACTION_BLUE); 
	movs	r2, #192	@ tmp205,
	movs	r3, #11	@ tmp204,
	movs	r0, r2	@ <retval>, tmp205
	ldrsb	r3, [r4, r3]	@ tmp204,
	ands	r0, r3	@ <retval>, tmp204
@ Patches/../C_code.c:2583: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	tst	r2, r3	@ tmp205, tmp204
	bne	.L1833		@,
@ Patches/../C_code.c:2583: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	mov	r3, r9	@ tmp248, tmp248
	ldr	r2, [r3]	@ RandBitflags.171_16, RandBitflags
@ Patches/../C_code.c:2583: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	ldrb	r3, [r2, #3]	@ *RandBitflags.171_16, *RandBitflags.171_16
@ Patches/../C_code.c:2583: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	lsls	r3, r3, #27	@ tmp263, *RandBitflags.171_16,
	bmi	.L1842		@,
@ Patches/../C_code.c:2584: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	movs	r3, #12	@ tmp221,
	ldrb	r2, [r2]	@ *RandBitflags.171_16, *RandBitflags.171_16
	ands	r3, r2	@ _20, *RandBitflags.171_16
@ Patches/../C_code.c:2584: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	cmp	r3, #8	@ _20,
	beq	.L1823		@,
@ Patches/../C_code.c:2585: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	cmp	r3, #12	@ _20,
	beq	.L1843		@,
.L1833:
@ Patches/../C_code.c:2586: 	if (unit->pClassData->growthDef > growth) { growth = unit->pClassData->growthDef; } 
	movs	r0, #31	@ tmp223,
	ldr	r3, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrsb	r0, [r3, r0]	@ tmp223,
@ Patches/../C_code.c:2586: 	if (unit->pClassData->growthDef > growth) { growth = unit->pClassData->growthDef; } 
	cmp	r0, r6	@ tmp223, baseGrowth
	blt	.L1862		@,
.L1834:
@ Patches/../C_code.c:2587: 	growth = AdjustGrowthForStatInflation(growth);
	bl	AdjustGrowthForStatInflation		@
@ Patches/../C_code.c:2588: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:2587: 	growth = AdjustGrowthForStatInflation(growth);
	movs	r5, r0	@ growth, tmp259
@ Patches/../C_code.c:2588: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L1864+24	@ tmp229,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2589: 	noise[0] = unit->pCharacterData->number; 
	ldr	r3, [r4]	@ unit_46(D)->pCharacterData, unit_46(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp234,
	str	r3, [sp, #8]	@ tmp234, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp236,
	add	r1, sp, #8	@ tmp275,,
	str	r3, [sp]	@ tmp236,
	movs	r2, #51	@,
	movs	r0, r5	@, growth
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2591: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 59); } 
	lsrs	r1, r5, #31	@ tmp239, growth,
	adds	r1, r1, r5	@ tmp240, tmp239, growth
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r4, r0	@ result, tmp260
@ Patches/../C_code.c:2591: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 59); } 
	asrs	r1, r1, #1	@ tmp241, tmp240,
@ Patches/../C_code.c:2591: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 59); } 
	cmp	r1, r0	@ tmp241, result
	ble	.L1835		@,
@ Patches/../C_code.c:2591: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 59); } 
	movs	r3, #59	@,
	movs	r0, r5	@, growth
	add	r2, sp, #8	@ tmp276,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:2591: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 59); } 
	adds	r4, r4, r0	@ result, result, tmp261
.L1835:
@ Patches/../C_code.c:2592: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r4, r5	@ tmp245, result, growth
@ Patches/../C_code.c:2592: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp245,
	bgt	.L1863		@,
@ Patches/../C_code.c:2593: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r4	@ tmp246, growth, result
@ Patches/../C_code.c:2593: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp246,
	ble	.L1837		@,
@ Patches/../C_code.c:2593: 	if ((growth-result) > 99) { result = growth-99; } 
	movs	r4, r5	@ growth, growth
	subs	r4, r4, #99	@ growth,
.L1837:
@ Patches/../C_code.c:2594: 	result += add; 
	adds	r0, r7, r4	@ <retval>, add, result
@ Patches/../C_code.c:2595: 	if (result < 0) { result = 0; } 
	mvns	r3, r0	@ tmp250, <retval>
	asrs	r3, r3, #31	@ tmp249, tmp250,
	ands	r0, r3	@ <retval>, tmp249
	b	.L1823		@
.L1828:
@ Patches/../C_code.c:2578: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	adds	r0, r6, r7	@ <retval>, baseGrowth, add
.L1823:
@ Patches/../C_code.c:2597: }
	add	sp, sp, #28	@,,
	@ sp needed	@
	pop	{r6, r7}
	mov	r9, r7
	mov	r8, r6
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1863:
@ Patches/../C_code.c:2592: 	if ((result-growth) > 99) { result = growth+99; } 
	movs	r4, r5	@ growth, growth
	adds	r4, r4, #99	@ growth,
	b	.L1837		@
.L1862:
@ Patches/../C_code.c:2586: 	if (unit->pClassData->growthDef > growth) { growth = unit->pClassData->growthDef; } 
	movs	r0, r6	@ tmp223, baseGrowth
	b	.L1834		@
.L1843:
@ Patches/../C_code.c:2585: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	movs	r0, #100	@ <retval>,
	b	.L1823		@
.L1842:
@ Patches/../C_code.c:2583: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	movs	r0, #50	@ <retval>,
	b	.L1823		@
.L1865:
	.align	2
.L1864:
	.word	ClassBasedGrowths
	.word	CombinedGrowths
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	CallGet_Def_Growth
	.word	memset
	.size	GetUnitDefGrowth, .-GetUnitDefGrowth
	.align	1
	.p2align 2,,3
	.global	GetUnitResGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitResGrowth, %function
GetUnitResGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	push	{lr}	@
	movs	r4, r0	@ unit, tmp256
	movs	r6, r1	@ modifiersBool, tmp257
@ Patches/../C_code.c:2601: 	int add = 0; 
	movs	r7, #0	@ add,
@ Patches/../C_code.c:2599: int GetUnitResGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:2602: 	if (modifiersBool) { add = GetGrowthModifiers(unit); } 
	cmp	r1, #0	@ modifiersBool,
	beq	.L1867		@,
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	ldr	r3, [r0, #12]	@ unit_46(D)->state, unit_46(D)->state
	lsls	r3, r3, #18	@ tmp168, unit_46(D)->state,
@ Patches/../C_code.c:2601: 	int add = 0; 
	asrs	r3, r3, #31	@ tmp254, tmp168,
	adds	r7, r7, #5	@ tmp255,
	ands	r7, r3	@ add, tmp254
.L1867:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r0, [r4]	@ _71, unit_46(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp171,
	movs	r1, r0	@ pretmp_82, _71
	cmp	r3, #0	@ tmp171,
	beq	.L1868		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_71 + 4B], MEM[(unsigned char *)_71 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2604: 	int originalGrowth = unit->pCharacterData->growthRes; 
	ldr	r1, [r4]	@ pretmp_82, unit_46(D)->pCharacterData
.L1868:
@ Patches/../C_code.c:2603: 	baseGrowth = GetReorderedUnit(unit)->growthRes; 
	movs	r3, #33	@ tmp173,
	ldrb	r5, [r0, r3]	@ _2,
@ Patches/../C_code.c:2605: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthRes; } 
	ldr	r3, .L1905	@ tmp174,
@ Patches/../C_code.c:2605: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthRes; } 
	ldr	r3, [r3]	@ ClassBasedGrowths, ClassBasedGrowths
	cmp	r3, #0	@ ClassBasedGrowths,
	beq	.L1870		@,
@ Patches/../C_code.c:2605: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthRes; } 
	movs	r3, #32	@ tmp177,
	ldr	r2, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
@ Patches/../C_code.c:2605: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthRes; } 
	ldrsb	r5, [r2, r3]	@ baseGrowth,
.L1870:
@ Patches/../C_code.c:2606: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthRes; } 
	ldr	r3, .L1905+4	@ tmp178,
@ Patches/../C_code.c:2606: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthRes; } 
	ldr	r3, [r3]	@ CombinedGrowths, CombinedGrowths
	cmp	r3, #0	@ CombinedGrowths,
	beq	.L1871		@,
@ Patches/../C_code.c:2606: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthRes; } 
	movs	r3, #32	@ tmp181,
	ldr	r2, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrsb	r3, [r2, r3]	@ tmp182,
@ Patches/../C_code.c:2606: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthRes; } 
	adds	r5, r5, r3	@ baseGrowth, baseGrowth, tmp182
.L1871:
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1905+8	@ tmp249,
	mov	r8, r3	@ tmp249, tmp249
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_76, *RandBitflags.53_76
	ldr	r3, .L1905+12	@ tmp187,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_76, tmp187
	beq	.L1872		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r2, [r1, #4]	@ tmp189,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1905+16	@ tmp188,
	lsls	r2, r2, #1	@ tmp190, tmp189,
@ Patches/../C_code.c:2607: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	ldrb	r3, [r2, r3]	@ tmp192, CharExceptions
@ Patches/../C_code.c:2607: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	cmp	r3, #0	@ tmp192,
	bne	.L1872		@,
	cmp	r6, #0	@ modifiersBool,
	beq	.L1872		@,
@ Patches/../C_code.c:2604: 	int originalGrowth = unit->pCharacterData->growthRes; 
	movs	r3, #33	@ tmp202,
@ Patches/../C_code.c:2608: 	int growth = CallGet_Res_Growth(unit); 
	movs	r0, r4	@, unit
@ Patches/../C_code.c:2604: 	int originalGrowth = unit->pCharacterData->growthRes; 
	ldrb	r6, [r1, r3]	@ _4,
@ Patches/../C_code.c:2608: 	int growth = CallGet_Res_Growth(unit); 
	ldr	r3, .L1905+20	@ tmp203,
	bl	.L14		@
@ Patches/../C_code.c:2609: 	if (growth != (-1)) { add = growth - originalGrowth; }  
	adds	r3, r0, #1	@ tmp263, growth,
	beq	.L1876		@,
@ Patches/../C_code.c:2609: 	if (growth != (-1)) { add = growth - originalGrowth; }  
	subs	r7, r0, r6	@ add, growth, _4
.L1876:
@ Patches/../C_code.c:2611: 	int player = (UNIT_FACTION(unit) == FACTION_BLUE); 
	movs	r2, #192	@ tmp205,
	movs	r3, #11	@ tmp204,
	movs	r0, r2	@ <retval>, tmp205
	ldrsb	r3, [r4, r3]	@ tmp204,
	ands	r0, r3	@ <retval>, tmp204
@ Patches/../C_code.c:2612: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	tst	r2, r3	@ tmp205, tmp204
	bne	.L1877		@,
@ Patches/../C_code.c:2612: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	mov	r3, r8	@ tmp249, tmp249
	ldr	r2, [r3]	@ RandBitflags.176_16, RandBitflags
@ Patches/../C_code.c:2612: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	ldrb	r3, [r2, #3]	@ *RandBitflags.176_16, *RandBitflags.176_16
@ Patches/../C_code.c:2612: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	lsls	r3, r3, #27	@ tmp264, *RandBitflags.176_16,
	bmi	.L1886		@,
@ Patches/../C_code.c:2613: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	movs	r3, #12	@ tmp221,
	ldrb	r2, [r2]	@ *RandBitflags.176_16, *RandBitflags.176_16
	ands	r3, r2	@ _20, *RandBitflags.176_16
@ Patches/../C_code.c:2613: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	cmp	r3, #8	@ _20,
	beq	.L1866		@,
@ Patches/../C_code.c:2614: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	cmp	r3, #12	@ _20,
	beq	.L1887		@,
.L1877:
@ Patches/../C_code.c:2615: 	if (unit->pClassData->growthRes > growth) { growth = unit->pClassData->growthRes; } 
	movs	r3, #32	@ tmp225,
	ldr	r2, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrsb	r0, [r2, r3]	@ tmp223,
@ Patches/../C_code.c:2615: 	if (unit->pClassData->growthRes > growth) { growth = unit->pClassData->growthRes; } 
	cmp	r0, r5	@ tmp223, baseGrowth
	blt	.L1903		@,
.L1878:
@ Patches/../C_code.c:2616: 	growth = AdjustGrowthForStatInflation(growth);
	bl	AdjustGrowthForStatInflation		@
@ Patches/../C_code.c:2617: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:2616: 	growth = AdjustGrowthForStatInflation(growth);
	movs	r5, r0	@ growth, tmp260
@ Patches/../C_code.c:2617: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L1905+24	@ tmp230,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2618: 	noise[0] = unit->pCharacterData->number; 
	ldr	r3, [r4]	@ unit_46(D)->pCharacterData, unit_46(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp235,
	str	r3, [sp, #8]	@ tmp235, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp237,
	add	r1, sp, #8	@ tmp271,,
	str	r3, [sp]	@ tmp237,
	movs	r2, #61	@,
	movs	r0, r5	@, growth
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2620: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 69); } 
	lsrs	r1, r5, #31	@ tmp240, growth,
	adds	r1, r1, r5	@ tmp241, tmp240, growth
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r4, r0	@ result, tmp261
@ Patches/../C_code.c:2620: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 69); } 
	asrs	r1, r1, #1	@ tmp242, tmp241,
@ Patches/../C_code.c:2620: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 69); } 
	cmp	r1, r0	@ tmp242, result
	ble	.L1879		@,
@ Patches/../C_code.c:2620: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 69); } 
	movs	r3, #69	@,
	movs	r0, r5	@, growth
	add	r2, sp, #8	@ tmp272,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:2620: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 69); } 
	adds	r4, r4, r0	@ result, result, tmp262
.L1879:
@ Patches/../C_code.c:2621: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r4, r5	@ tmp246, result, growth
@ Patches/../C_code.c:2621: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp246,
	bgt	.L1904		@,
@ Patches/../C_code.c:2622: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r4	@ tmp247, growth, result
@ Patches/../C_code.c:2622: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp247,
	ble	.L1881		@,
@ Patches/../C_code.c:2622: 	if ((growth-result) > 99) { result = growth-99; } 
	movs	r4, r5	@ growth, growth
	subs	r4, r4, #99	@ growth,
.L1881:
@ Patches/../C_code.c:2623: 	result += add; 
	adds	r0, r7, r4	@ <retval>, add, result
@ Patches/../C_code.c:2624: 	if (result < 0) { result = 0; } 
	mvns	r3, r0	@ tmp251, <retval>
	asrs	r3, r3, #31	@ tmp250, tmp251,
	ands	r0, r3	@ <retval>, tmp250
	b	.L1866		@
.L1872:
@ Patches/../C_code.c:2607: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	adds	r0, r5, r7	@ <retval>, baseGrowth, add
.L1866:
@ Patches/../C_code.c:2626: }
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1904:
@ Patches/../C_code.c:2621: 	if ((result-growth) > 99) { result = growth+99; } 
	movs	r4, r5	@ growth, growth
	adds	r4, r4, #99	@ growth,
	b	.L1881		@
.L1903:
@ Patches/../C_code.c:2615: 	if (unit->pClassData->growthRes > growth) { growth = unit->pClassData->growthRes; } 
	movs	r0, r5	@ tmp223, baseGrowth
	b	.L1878		@
.L1887:
@ Patches/../C_code.c:2614: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	movs	r0, #100	@ <retval>,
	b	.L1866		@
.L1886:
@ Patches/../C_code.c:2612: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 
	movs	r0, #50	@ <retval>,
	b	.L1866		@
.L1906:
	.align	2
.L1905:
	.word	ClassBasedGrowths
	.word	CombinedGrowths
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	CallGet_Res_Growth
	.word	memset
	.size	GetUnitResGrowth, .-GetUnitResGrowth
	.align	1
	.p2align 2,,3
	.global	GetUnitLckGrowth
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitLckGrowth, %function
GetUnitLckGrowth:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	push	{lr}	@
	movs	r4, r0	@ unit, tmp256
	movs	r6, r1	@ modifiersBool, tmp257
@ Patches/../C_code.c:2630: 	int add = 0; 
	movs	r7, #0	@ add,
@ Patches/../C_code.c:2628: int GetUnitLckGrowth(struct Unit* unit, int modifiersBool) {
	sub	sp, sp, #24	@,,
@ Patches/../C_code.c:2631: 	if (modifiersBool) { add = GetGrowthModifiers(unit); } 
	cmp	r1, #0	@ modifiersBool,
	beq	.L1908		@,
@ Patches/../C_code.c:2256: 	return (unit->state & US_GROWTH_BOOST) ? 5: 0;
	ldr	r3, [r0, #12]	@ unit_46(D)->state, unit_46(D)->state
	lsls	r3, r3, #18	@ tmp168, unit_46(D)->state,
@ Patches/../C_code.c:2630: 	int add = 0; 
	asrs	r3, r3, #31	@ tmp254, tmp168,
	adds	r7, r7, #5	@ tmp255,
	ands	r7, r3	@ add, tmp254
.L1908:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r0, [r4]	@ _71, unit_46(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp171,
	movs	r1, r0	@ pretmp_82, _71
	cmp	r3, #0	@ tmp171,
	beq	.L1909		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_71 + 4B], MEM[(unsigned char *)_71 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2633: 	int originalGrowth = unit->pCharacterData->growthLck; 
	ldr	r1, [r4]	@ pretmp_82, unit_46(D)->pCharacterData
.L1909:
@ Patches/../C_code.c:2632: 	baseGrowth = GetReorderedUnit(unit)->growthLck; 
	movs	r3, #34	@ tmp173,
	ldrb	r5, [r0, r3]	@ _2,
@ Patches/../C_code.c:2634: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthLck; } 
	ldr	r3, .L1946	@ tmp174,
@ Patches/../C_code.c:2634: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthLck; } 
	ldr	r3, [r3]	@ ClassBasedGrowths, ClassBasedGrowths
	cmp	r3, #0	@ ClassBasedGrowths,
	beq	.L1911		@,
@ Patches/../C_code.c:2634: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthLck; } 
	movs	r3, #33	@ tmp177,
	ldr	r2, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
@ Patches/../C_code.c:2634: 	if (ClassBasedGrowths) { baseGrowth = unit->pClassData->growthLck; } 
	ldrsb	r5, [r2, r3]	@ baseGrowth,
.L1911:
@ Patches/../C_code.c:2635: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthLck; } 
	ldr	r3, .L1946+4	@ tmp178,
@ Patches/../C_code.c:2635: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthLck; } 
	ldr	r3, [r3]	@ CombinedGrowths, CombinedGrowths
	cmp	r3, #0	@ CombinedGrowths,
	beq	.L1912		@,
@ Patches/../C_code.c:2635: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthLck; } 
	movs	r3, #33	@ tmp181,
	ldr	r2, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrsb	r3, [r2, r3]	@ tmp182,
@ Patches/../C_code.c:2635: 	if (CombinedGrowths) { baseGrowth += unit->pClassData->growthLck; } 
	adds	r5, r5, r3	@ baseGrowth, baseGrowth, tmp182
.L1912:
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	ldr	r3, .L1946+8	@ tmp249,
	mov	r8, r3	@ tmp249, tmp249
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldr	r2, [r3]	@ *RandBitflags.53_76, *RandBitflags.53_76
	ldr	r3, .L1946+12	@ tmp187,
@ Patches/../C_code.c:1165: 	if ((!RandBitflags->growth) && (!RandBitflags->grow50)) { return false; } 
	tst	r2, r3	@ *RandBitflags.53_76, tmp187
	beq	.L1913		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldrb	r2, [r1, #4]	@ tmp189,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L1946+16	@ tmp188,
	lsls	r2, r2, #1	@ tmp190, tmp189,
@ Patches/../C_code.c:2636: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	ldrb	r3, [r2, r3]	@ tmp192, CharExceptions
@ Patches/../C_code.c:2636: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	cmp	r3, #0	@ tmp192,
	bne	.L1913		@,
	cmp	r6, #0	@ modifiersBool,
	beq	.L1913		@,
@ Patches/../C_code.c:2633: 	int originalGrowth = unit->pCharacterData->growthLck; 
	movs	r3, #34	@ tmp202,
@ Patches/../C_code.c:2637: 	int growth = CallGet_Luk_Growth(unit); 
	movs	r0, r4	@, unit
@ Patches/../C_code.c:2633: 	int originalGrowth = unit->pCharacterData->growthLck; 
	ldrb	r6, [r1, r3]	@ _4,
@ Patches/../C_code.c:2637: 	int growth = CallGet_Luk_Growth(unit); 
	ldr	r3, .L1946+20	@ tmp203,
	bl	.L14		@
@ Patches/../C_code.c:2638: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	adds	r3, r0, #1	@ tmp263, growth,
	beq	.L1917		@,
@ Patches/../C_code.c:2638: 	if (growth != (-1)) { add = growth - originalGrowth; } 
	subs	r7, r0, r6	@ add, growth, _4
.L1917:
@ Patches/../C_code.c:2640: 	int player = (UNIT_FACTION(unit) == FACTION_BLUE);
	movs	r2, #192	@ tmp205,
	movs	r3, #11	@ tmp204,
	movs	r0, r2	@ <retval>, tmp205
	ldrsb	r3, [r4, r3]	@ tmp204,
	ands	r0, r3	@ <retval>, tmp204
@ Patches/../C_code.c:2641: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 	
	tst	r2, r3	@ tmp205, tmp204
	bne	.L1918		@,
@ Patches/../C_code.c:2641: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 	
	mov	r3, r8	@ tmp249, tmp249
	ldr	r2, [r3]	@ RandBitflags.181_16, RandBitflags
@ Patches/../C_code.c:2641: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 	
	ldrb	r3, [r2, #3]	@ *RandBitflags.181_16, *RandBitflags.181_16
@ Patches/../C_code.c:2641: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 	
	lsls	r3, r3, #27	@ tmp264, *RandBitflags.181_16,
	bmi	.L1927		@,
@ Patches/../C_code.c:2642: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	movs	r3, #12	@ tmp221,
	ldrb	r2, [r2]	@ *RandBitflags.181_16, *RandBitflags.181_16
	ands	r3, r2	@ _20, *RandBitflags.181_16
@ Patches/../C_code.c:2642: 	if (player && (RandBitflags->growth == 2)) { return 0; } // 0% growths 
	cmp	r3, #8	@ _20,
	beq	.L1907		@,
@ Patches/../C_code.c:2643: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	cmp	r3, #12	@ _20,
	beq	.L1928		@,
.L1918:
@ Patches/../C_code.c:2644: 	if (unit->pClassData->growthLck > growth) { growth = unit->pClassData->growthLck; } 
	movs	r3, #33	@ tmp225,
	ldr	r2, [r4, #4]	@ unit_46(D)->pClassData, unit_46(D)->pClassData
	ldrsb	r0, [r2, r3]	@ tmp223,
@ Patches/../C_code.c:2644: 	if (unit->pClassData->growthLck > growth) { growth = unit->pClassData->growthLck; } 
	cmp	r0, r5	@ tmp223, baseGrowth
	blt	.L1944		@,
.L1919:
@ Patches/../C_code.c:2645: 	growth = AdjustGrowthForStatInflation(growth);
	bl	AdjustGrowthForStatInflation		@
@ Patches/../C_code.c:2646: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
@ Patches/../C_code.c:2645: 	growth = AdjustGrowthForStatInflation(growth);
	movs	r5, r0	@ growth, tmp260
@ Patches/../C_code.c:2646: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r1, #0	@,
	ldr	r3, .L1946+24	@ tmp230,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:2647: 	noise[0] = unit->pCharacterData->number; 
	ldr	r3, [r4]	@ unit_46(D)->pCharacterData, unit_46(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp235,
	str	r3, [sp, #8]	@ tmp235, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp237,
	add	r1, sp, #8	@ tmp271,,
	str	r3, [sp]	@ tmp237,
	movs	r2, #71	@,
	movs	r0, r5	@, growth
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2649: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 79); } 
	lsrs	r1, r5, #31	@ tmp240, growth,
	adds	r1, r1, r5	@ tmp241, tmp240, growth
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r4, r0	@ result, tmp261
@ Patches/../C_code.c:2649: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 79); } 
	asrs	r1, r1, #1	@ tmp242, tmp241,
@ Patches/../C_code.c:2649: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 79); } 
	cmp	r1, r0	@ tmp242, result
	ble	.L1920		@,
@ Patches/../C_code.c:2649: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 79); } 
	movs	r3, #79	@,
	movs	r0, r5	@, growth
	add	r2, sp, #8	@ tmp272,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:2649: 	if (result < (growth/2)) { result += HashByte_Global(growth, (growth/2), noise, 79); } 
	adds	r4, r4, r0	@ result, result, tmp262
.L1920:
@ Patches/../C_code.c:2650: 	if ((result-growth) > 99) { result = growth+99; } 
	subs	r3, r4, r5	@ tmp246, result, growth
@ Patches/../C_code.c:2650: 	if ((result-growth) > 99) { result = growth+99; } 
	cmp	r3, #99	@ tmp246,
	bgt	.L1945		@,
@ Patches/../C_code.c:2651: 	if ((growth-result) > 99) { result = growth-99; } 
	subs	r3, r5, r4	@ tmp247, growth, result
@ Patches/../C_code.c:2651: 	if ((growth-result) > 99) { result = growth-99; } 
	cmp	r3, #99	@ tmp247,
	ble	.L1922		@,
@ Patches/../C_code.c:2651: 	if ((growth-result) > 99) { result = growth-99; } 
	movs	r4, r5	@ growth, growth
	subs	r4, r4, #99	@ growth,
.L1922:
@ Patches/../C_code.c:2652: 	result += add; 
	adds	r0, r7, r4	@ <retval>, add, result
@ Patches/../C_code.c:2653: 	if (result < 0) { result = 0; } 
	mvns	r3, r0	@ tmp251, <retval>
	asrs	r3, r3, #31	@ tmp250, tmp251,
	ands	r0, r3	@ <retval>, tmp250
	b	.L1907		@
.L1913:
@ Patches/../C_code.c:2636: 	if ((!ShouldRandomizeGrowth(unit)) || (!modifiersBool)) { return baseGrowth + add; } 
	adds	r0, r5, r7	@ <retval>, baseGrowth, add
.L1907:
@ Patches/../C_code.c:2655: }
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L1945:
@ Patches/../C_code.c:2650: 	if ((result-growth) > 99) { result = growth+99; } 
	movs	r4, r5	@ growth, growth
	adds	r4, r4, #99	@ growth,
	b	.L1922		@
.L1944:
@ Patches/../C_code.c:2644: 	if (unit->pClassData->growthLck > growth) { growth = unit->pClassData->growthLck; } 
	movs	r0, r5	@ tmp223, baseGrowth
	b	.L1919		@
.L1928:
@ Patches/../C_code.c:2643: 	if (player && (RandBitflags->growth == 3)) { return 100; } // 100% growths 
	movs	r0, #100	@ <retval>,
	b	.L1907		@
.L1927:
@ Patches/../C_code.c:2641: 	if (player && (RandBitflags->grow50 == 1)) { return 50; } // 50% growths 	
	movs	r0, #50	@ <retval>,
	b	.L1907		@
.L1947:
	.align	2
.L1946:
	.word	ClassBasedGrowths
	.word	CombinedGrowths
	.word	RandBitflags
	.word	268435468
	.word	CharExceptions
	.word	CallGet_Luk_Growth
	.word	memset
	.size	GetUnitLckGrowth, .-GetUnitLckGrowth
	.align	1
	.p2align 2,,3
	.global	UnitCheckStatMins
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitCheckStatMins, %function
UnitCheckStatMins:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:2666: 	if (MinClassBase) { 
	ldr	r3, .L2020	@ tmp250,
@ Patches/../C_code.c:2666: 	if (MinClassBase) { 
	ldr	r3, [r3]	@ MinClassBase, MinClassBase
@ Patches/../C_code.c:2665: void UnitCheckStatMins(struct Unit* unit) { 
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2665: void UnitCheckStatMins(struct Unit* unit) { 
	movs	r4, r0	@ unit, tmp426
@ Patches/../C_code.c:2666: 	if (MinClassBase) { 
	cmp	r3, #0	@ MinClassBase,
	bne	.L2009		@,
@ Patches/../C_code.c:2683: 		if (unit->pow < 0) { unit->pow = 0; } 
	ldrb	r2, [r0, #20]	@ tmp308,
	cmp	r2, #127	@ tmp308,
	bhi	.L2010		@,
@ Patches/../C_code.c:2684: 		if (unit->skl < 0) { unit->skl = 0; } 
	ldrb	r3, [r4, #21]	@ tmp313,
	cmp	r3, #127	@ tmp313,
	bhi	.L2011		@,
.L1977:
@ Patches/../C_code.c:2685: 		if (unit->spd < 0) { unit->spd = 0; } 
	ldrb	r3, [r4, #22]	@ tmp318,
	cmp	r3, #127	@ tmp318,
	bhi	.L2012		@,
.L1978:
@ Patches/../C_code.c:2686: 		if (unit->def < 0) { unit->def = 0; } 
	ldrb	r3, [r4, #23]	@ tmp323,
	cmp	r3, #127	@ tmp323,
	bhi	.L2013		@,
.L1979:
@ Patches/../C_code.c:2687: 		if (unit->res < 0) { unit->res = 0; } 
	ldrb	r3, [r4, #24]	@ tmp328,
	cmp	r3, #127	@ tmp328,
	bhi	.L2014		@,
.L1980:
@ Patches/../C_code.c:2688: 		if (unit->lck < 0) { unit->lck = 0; } 
	ldrb	r3, [r4, #25]	@ tmp333,
	cmp	r3, #127	@ tmp333,
	bhi	.L2015		@,
.L1981:
@ Patches/../C_code.c:2689: 		if (StrMagInstalled) {  
	ldr	r3, .L2020+4	@ tmp336,
@ Patches/../C_code.c:2689: 		if (StrMagInstalled) {  
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	beq	.L1948		@,
.L2017:
@ Patches/../C_code.c:2690: 		if ((unit->_u3A < 0) || (unit->_u3A > 127)) { unit->_u3A = 0; } } // _u3A is unsigned 
	movs	r3, #58	@ tmp338,
@ Patches/../C_code.c:2690: 		if ((unit->_u3A < 0) || (unit->_u3A > 127)) { unit->_u3A = 0; } } // _u3A is unsigned 
	ldrb	r2, [r4, r3]	@ tmp341,
	cmp	r2, #127	@ tmp341,
	bls	.LCB11299	@
	b	.L2016	@long jump	@
.LCB11299:
.L1948:
@ Patches/../C_code.c:2692: } 
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2015:
@ Patches/../C_code.c:2688: 		if (unit->lck < 0) { unit->lck = 0; } 
	movs	r3, #0	@ tmp334,
	strb	r3, [r4, #25]	@ tmp334, unit_79(D)->lck
@ Patches/../C_code.c:2689: 		if (StrMagInstalled) {  
	ldr	r3, .L2020+4	@ tmp336,
@ Patches/../C_code.c:2689: 		if (StrMagInstalled) {  
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	beq	.L1948		@,
	b	.L2017		@
.L2014:
@ Patches/../C_code.c:2687: 		if (unit->res < 0) { unit->res = 0; } 
	movs	r3, #0	@ tmp329,
	strb	r3, [r4, #24]	@ tmp329, unit_79(D)->res
@ Patches/../C_code.c:2688: 		if (unit->lck < 0) { unit->lck = 0; } 
	ldrb	r3, [r4, #25]	@ tmp333,
	cmp	r3, #127	@ tmp333,
	bls	.L1981		@,
	b	.L2015		@
.L2013:
@ Patches/../C_code.c:2686: 		if (unit->def < 0) { unit->def = 0; } 
	movs	r3, #0	@ tmp324,
	strb	r3, [r4, #23]	@ tmp324, unit_79(D)->def
@ Patches/../C_code.c:2687: 		if (unit->res < 0) { unit->res = 0; } 
	ldrb	r3, [r4, #24]	@ tmp328,
	cmp	r3, #127	@ tmp328,
	bls	.L1980		@,
	b	.L2014		@
.L2012:
@ Patches/../C_code.c:2685: 		if (unit->spd < 0) { unit->spd = 0; } 
	movs	r3, #0	@ tmp319,
	strb	r3, [r4, #22]	@ tmp319, unit_79(D)->spd
@ Patches/../C_code.c:2686: 		if (unit->def < 0) { unit->def = 0; } 
	ldrb	r3, [r4, #23]	@ tmp323,
	cmp	r3, #127	@ tmp323,
	bls	.L1979		@,
	b	.L2013		@
.L2011:
@ Patches/../C_code.c:2684: 		if (unit->skl < 0) { unit->skl = 0; } 
	movs	r3, #0	@ tmp314,
	strb	r3, [r4, #21]	@ tmp314, unit_79(D)->skl
@ Patches/../C_code.c:2685: 		if (unit->spd < 0) { unit->spd = 0; } 
	ldrb	r3, [r4, #22]	@ tmp318,
	cmp	r3, #127	@ tmp318,
	bls	.L1978		@,
	b	.L2012		@
.L2010:
@ Patches/../C_code.c:2683: 		if (unit->pow < 0) { unit->pow = 0; } 
	strb	r3, [r0, #20]	@ MinClassBase, unit_79(D)->pow
@ Patches/../C_code.c:2684: 		if (unit->skl < 0) { unit->skl = 0; } 
	ldrb	r3, [r4, #21]	@ tmp313,
	cmp	r3, #127	@ tmp313,
	bls	.L1977		@,
	b	.L2011		@
.L2009:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r0, [r0]	@ _115, unit_79(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r6, [r0, #6]	@ _116,
	movs	r3, r0	@ prephitmp_397, _115
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	cmp	r6, #0	@ _116,
	beq	.LCB11368	@
	b	.L2018	@long jump	@
.LCB11368:
.L1950:
@ Patches/../C_code.c:2667: 		int minStat = GetReorderedUnit(unit)->basePow + unit->pClassData->basePow; if (minStat < 0) { minStat = 0; } 
	movs	r2, #13	@ tmp253,
	ldrsb	r2, [r0, r2]	@ tmp253,
@ Patches/../C_code.c:2667: 		int minStat = GetReorderedUnit(unit)->basePow + unit->pClassData->basePow; if (minStat < 0) { minStat = 0; } 
	movs	r0, #12	@ tmp254,
@ Patches/../C_code.c:2667: 		int minStat = GetReorderedUnit(unit)->basePow + unit->pClassData->basePow; if (minStat < 0) { minStat = 0; } 
	ldr	r1, [r4, #4]	@ prephitmp_400, unit_79(D)->pClassData
@ Patches/../C_code.c:2667: 		int minStat = GetReorderedUnit(unit)->basePow + unit->pClassData->basePow; if (minStat < 0) { minStat = 0; } 
	ldrsb	r0, [r1, r0]	@ tmp254,
@ Patches/../C_code.c:2667: 		int minStat = GetReorderedUnit(unit)->basePow + unit->pClassData->basePow; if (minStat < 0) { minStat = 0; } 
	adds	r2, r2, r0	@ _113, tmp253, tmp254
@ Patches/../C_code.c:2667: 		int minStat = GetReorderedUnit(unit)->basePow + unit->pClassData->basePow; if (minStat < 0) { minStat = 0; } 
	mvns	r0, r2	@ tmp364, _113
	asrs	r0, r0, #31	@ tmp363, tmp364,
	ands	r2, r0	@ _113, tmp363
@ Patches/../C_code.c:2668: 		if (unit->pow < minStat) { unit->pow = minStat; } 
	movs	r0, #20	@ tmp255,
	ldrsb	r0, [r4, r0]	@ tmp255,
@ Patches/../C_code.c:2667: 		int minStat = GetReorderedUnit(unit)->basePow + unit->pClassData->basePow; if (minStat < 0) { minStat = 0; } 
	movs	r5, r1	@ prephitmp_400, prephitmp_400
@ Patches/../C_code.c:2668: 		if (unit->pow < minStat) { unit->pow = minStat; } 
	cmp	r0, r2	@ tmp255, _113
	bge	.L1952		@,
@ Patches/../C_code.c:2668: 		if (unit->pow < minStat) { unit->pow = minStat; } 
	strb	r2, [r4, #20]	@ _113, unit_79(D)->pow
.L1952:
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	cmp	r6, #0	@ _116,
	beq	.LCB11388	@
	b	.L2019	@long jump	@
.LCB11388:
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	movs	r2, #13	@ tmp357,
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	movs	r0, #14	@ tmp358,
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	ldrsb	r2, [r1, r2]	@ tmp357,
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	ldrsb	r0, [r3, r0]	@ tmp358,
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	adds	r2, r2, r0	@ _411, tmp357, tmp358
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	mvns	r0, r2	@ tmp396, _411
	asrs	r0, r0, #31	@ tmp395, tmp396,
	ands	r2, r0	@ _411, tmp395
@ Patches/../C_code.c:2670: 		if (unit->skl < minStat) { unit->skl = minStat; } 
	movs	r0, #21	@ tmp359,
	ldrsb	r0, [r4, r0]	@ tmp359,
@ Patches/../C_code.c:2670: 		if (unit->skl < minStat) { unit->skl = minStat; } 
	cmp	r0, r2	@ tmp359, _411
	bge	.L1956		@,
@ Patches/../C_code.c:2670: 		if (unit->skl < minStat) { unit->skl = minStat; } 
	strb	r2, [r4, #21]	@ _411, unit_79(D)->skl
.L1956:
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	movs	r0, #14	@ tmp349,
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	movs	r2, #15	@ tmp350,
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	ldrsb	r0, [r1, r0]	@ tmp349,
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	ldrsb	r2, [r3, r2]	@ tmp350,
@ Patches/../C_code.c:2672: 		if (unit->spd < minStat) { unit->spd = minStat; } 
	movs	r6, #22	@ tmp351,
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	adds	r0, r0, r2	@ _184, tmp349, tmp350
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	mvns	r2, r0	@ tmp392, _184
@ Patches/../C_code.c:2672: 		if (unit->spd < minStat) { unit->spd = minStat; } 
	ldrsb	r6, [r4, r6]	@ tmp351,
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	asrs	r2, r2, #31	@ tmp391, tmp392,
	ands	r0, r2	@ _184, tmp391
@ Patches/../C_code.c:2672: 		if (unit->spd < minStat) { unit->spd = minStat; } 
	movs	r2, r3	@ _142, prephitmp_397
	cmp	r0, r6	@ _184, tmp351
	ble	.L1961		@,
@ Patches/../C_code.c:2672: 		if (unit->spd < minStat) { unit->spd = minStat; } 
	strb	r0, [r4, #22]	@ _184, unit_79(D)->spd
.L1986:
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	movs	r5, r1	@ prephitmp_400, prephitmp_400
	movs	r2, r3	@ _142, prephitmp_397
.L1961:
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	ldrb	r1, [r1, #15]	@ tmp353,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	ldrb	r3, [r3, #16]	@ tmp354,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	lsls	r1, r1, #24	@ tmp353, tmp353,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	lsls	r3, r3, #24	@ tmp354, tmp354,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	asrs	r1, r1, #24	@ tmp353, tmp353,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	asrs	r3, r3, #24	@ tmp354, tmp354,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	adds	r3, r1, r3	@ _425, tmp353, tmp354
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	mvns	r1, r3	@ tmp394, _425
	asrs	r1, r1, #31	@ tmp393, tmp394,
	ands	r3, r1	@ _425, tmp393
@ Patches/../C_code.c:2674: 		if (unit->def < minStat) { unit->def = minStat; } 
	movs	r1, #23	@ tmp355,
	ldrsb	r1, [r4, r1]	@ tmp355,
@ Patches/../C_code.c:2674: 		if (unit->def < minStat) { unit->def = minStat; } 
	cmp	r1, r3	@ tmp355, _425
	bge	.L1964		@,
@ Patches/../C_code.c:2674: 		if (unit->def < minStat) { unit->def = minStat; } 
	strb	r3, [r4, #23]	@ _425, unit_79(D)->def
.L1964:
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	movs	r3, #17	@ tmp345,
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	movs	r1, #16	@ tmp346,
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	ldrsb	r3, [r2, r3]	@ tmp345,
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	ldrsb	r1, [r5, r1]	@ tmp346,
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	adds	r3, r3, r1	@ _175, tmp345, tmp346
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	mvns	r1, r3	@ tmp390, _175
	asrs	r1, r1, #31	@ tmp389, tmp390,
	ands	r3, r1	@ _175, tmp389
@ Patches/../C_code.c:2676: 		if (unit->res < minStat) { unit->res = minStat; } 
	movs	r1, #24	@ tmp347,
	ldrsb	r1, [r4, r1]	@ tmp347,
@ Patches/../C_code.c:2676: 		if (unit->res < minStat) { unit->res = minStat; } 
	cmp	r3, r1	@ _175, tmp347
	ble	.L1968		@,
@ Patches/../C_code.c:2676: 		if (unit->res < minStat) { unit->res = minStat; } 
	strb	r3, [r4, #24]	@ _175, unit_79(D)->res
.L1968:
@ Patches/../C_code.c:2677: 		minStat = GetReorderedUnit(unit)->baseLck; if (minStat < 0) { minStat = 0; } 
	ldrb	r2, [r2, #18]	@ _48,
	lsls	r2, r2, #24	@ _48, _48,
	asrs	r2, r2, #24	@ _48, _48,
@ Patches/../C_code.c:2678: 		if (unit->lck < minStat) { unit->lck = minStat; } 
	movs	r1, #25	@ tmp280,
@ Patches/../C_code.c:2677: 		minStat = GetReorderedUnit(unit)->baseLck; if (minStat < 0) { minStat = 0; } 
	mvns	r3, r2	@ tmp374, _48
@ Patches/../C_code.c:2678: 		if (unit->lck < minStat) { unit->lck = minStat; } 
	ldrsb	r1, [r4, r1]	@ tmp280,
@ Patches/../C_code.c:2677: 		minStat = GetReorderedUnit(unit)->baseLck; if (minStat < 0) { minStat = 0; } 
	asrs	r3, r3, #31	@ tmp373, tmp374,
	ands	r3, r2	@ minStat, _48
@ Patches/../C_code.c:2678: 		if (unit->lck < minStat) { unit->lck = minStat; } 
	cmp	r1, r3	@ tmp280, minStat
	bge	.L1969		@,
@ Patches/../C_code.c:2678: 		if (unit->lck < minStat) { unit->lck = minStat; } 
	mvns	r3, r2	@ tmp376, _48
	asrs	r3, r3, #31	@ tmp380, tmp376,
	ands	r3, r2	@ tmp379, _48
	strb	r3, [r4, #25]	@ tmp379, unit_79(D)->lck
.L1969:
@ Patches/../C_code.c:2679: 		if (StrMagInstalled) { minStat = GetUnitBaseMag(unit); if (minStat < 0) { minStat = 0; } 
	ldr	r3, .L2020+4	@ tmp289,
@ Patches/../C_code.c:2679: 		if (StrMagInstalled) { minStat = GetUnitBaseMag(unit); if (minStat < 0) { minStat = 0; } 
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	bne	.LCB11480	@
	b	.L1948	@long jump	@
.LCB11480:
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	ldr	r2, [r4, #4]	@ unit_79(D)->pClassData, unit_79(D)->pClassData
	ldrb	r2, [r2, #4]	@ tmp293,
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	ldr	r3, .L2020+8	@ tmp291,
@ Patches/../C_code.c:294: 	return GetReorderedCharacter(unit->pCharacterData)->number; 
	ldr	r0, [r4]	@ _154, unit_79(D)->pCharacterData
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	lsls	r2, r2, #2	@ tmp294, tmp293,
	ldrb	r5, [r2, r3]	@ _148, MagClassTable
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp295,
	cmp	r3, #0	@ tmp295,
	beq	.L1974		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_154 + 4B], MEM[(unsigned char *)_154 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
.L1974:
@ Patches/../C_code.c:294: 	return GetReorderedCharacter(unit->pCharacterData)->number; 
	ldrb	r2, [r0, #4]	@ tmp298,
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	ldr	r3, .L2020+12	@ tmp297,
	lsls	r2, r2, #1	@ tmp299, tmp298,
	ldrb	r3, [r2, r3]	@ _151, MagCharTable
@ Patches/../C_code.c:2680: 			if (unit->_u3A < minStat) { unit->_u3A = minStat; } } 
	movs	r2, #58	@ tmp300,
	ldrb	r1, [r4, r2]	@ tmp301,
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	adds	r3, r3, r5	@ tmp361, _151, _148
@ Patches/../C_code.c:2680: 			if (unit->_u3A < minStat) { unit->_u3A = minStat; } } 
	cmp	r1, r3	@ tmp301, tmp361
	blt	.LCB11502	@
	b	.L1948	@long jump	@
.LCB11502:
@ Patches/../C_code.c:2680: 			if (unit->_u3A < minStat) { unit->_u3A = minStat; } } 
	strb	r3, [r4, r2]	@ tmp361, unit_79(D)->_u3A
	b	.L1948		@
.L2018:
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_115 + 4B], MEM[(unsigned char *)_115 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r3, [r4]	@ prephitmp_397, unit_79(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r6, [r3, #6]	@ _116,
	b	.L1950		@
.L2019:
	ldrb	r0, [r3, #4]	@ MEM[(unsigned char *)prephitmp_253 + 4B], MEM[(unsigned char *)prephitmp_253 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	movs	r2, #14	@ tmp258,
	ldrsb	r2, [r0, r2]	@ tmp258,
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	movs	r0, #13	@ tmp259,
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	ldr	r1, [r4, #4]	@ prephitmp_400, unit_79(D)->pClassData
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	ldrsb	r0, [r1, r0]	@ tmp259,
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	adds	r2, r2, r0	@ _109, tmp258, tmp259
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	mvns	r0, r2	@ tmp366, _109
	asrs	r0, r0, #31	@ tmp365, tmp366,
	ands	r2, r0	@ _109, tmp365
@ Patches/../C_code.c:2670: 		if (unit->skl < minStat) { unit->skl = minStat; } 
	movs	r0, #21	@ tmp260,
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r3, [r4]	@ prephitmp_397, unit_79(D)->pCharacterData
@ Patches/../C_code.c:2670: 		if (unit->skl < minStat) { unit->skl = minStat; } 
	ldrsb	r0, [r4, r0]	@ tmp260,
@ Patches/../C_code.c:2669: 		minStat = GetReorderedUnit(unit)->baseSkl + unit->pClassData->baseSkl; if (minStat < 0) { minStat = 0; } 
	movs	r5, r1	@ prephitmp_400, prephitmp_400
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r6, [r3, #6]	@ pretmp_260,
@ Patches/../C_code.c:2670: 		if (unit->skl < minStat) { unit->skl = minStat; } 
	cmp	r0, r2	@ tmp260, _109
	bge	.L1955		@,
@ Patches/../C_code.c:2670: 		if (unit->skl < minStat) { unit->skl = minStat; } 
	strb	r2, [r4, #21]	@ _109, unit_79(D)->skl
.L1955:
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	cmp	r6, #0	@ pretmp_260,
	bne	.LCB11539	@
	b	.L1956	@long jump	@
.LCB11539:
	ldrb	r0, [r3, #4]	@ MEM[(unsigned char *)pretmp_258 + 4B], MEM[(unsigned char *)pretmp_258 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	movs	r2, #14	@ tmp264,
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	movs	r3, #15	@ tmp265,
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	ldr	r1, [r4, #4]	@ prephitmp_400, unit_79(D)->pClassData
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	ldrsb	r3, [r0, r3]	@ tmp265,
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	ldrsb	r2, [r1, r2]	@ tmp264,
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	adds	r2, r2, r3	@ _105, tmp264, tmp265
@ Patches/../C_code.c:2671: 		minStat = GetReorderedUnit(unit)->baseSpd + unit->pClassData->baseSpd; if (minStat < 0) { minStat = 0; } 
	mvns	r3, r2	@ tmp368, _105
	asrs	r3, r3, #31	@ tmp367, tmp368,
	ands	r2, r3	@ _105, tmp367
@ Patches/../C_code.c:2672: 		if (unit->spd < minStat) { unit->spd = minStat; } 
	movs	r3, #22	@ tmp266,
	ldrsb	r3, [r4, r3]	@ tmp266,
@ Patches/../C_code.c:2672: 		if (unit->spd < minStat) { unit->spd = minStat; } 
	cmp	r3, r2	@ tmp266, _105
	blt	.L1958		@,
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r3, [r4]	@ prephitmp_397, unit_79(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r0, [r3, #6]	@ pretmp_268,
.L1959:
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	cmp	r0, #0	@ pretmp_268,
	bne	.LCB11561	@
	b	.L1986	@long jump	@
.LCB11561:
	ldrb	r0, [r3, #4]	@ MEM[(unsigned char *)prephitmp_267 + 4B], MEM[(unsigned char *)prephitmp_267 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	movs	r3, #16	@ tmp269,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	movs	r1, #15	@ tmp270,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	ldr	r5, [r4, #4]	@ prephitmp_400, unit_79(D)->pClassData
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	ldrsb	r3, [r0, r3]	@ tmp269,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	ldrsb	r1, [r5, r1]	@ tmp270,
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	adds	r3, r3, r1	@ _101, tmp269, tmp270
@ Patches/../C_code.c:2673: 		minStat = GetReorderedUnit(unit)->baseDef + unit->pClassData->baseDef; if (minStat < 0) { minStat = 0; } 
	mvns	r1, r3	@ tmp370, _101
	asrs	r1, r1, #31	@ tmp369, tmp370,
	ands	r3, r1	@ _101, tmp369
@ Patches/../C_code.c:2674: 		if (unit->def < minStat) { unit->def = minStat; } 
	movs	r1, #23	@ tmp271,
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r2, [r4]	@ _142, unit_79(D)->pCharacterData
@ Patches/../C_code.c:2674: 		if (unit->def < minStat) { unit->def = minStat; } 
	ldrsb	r1, [r4, r1]	@ tmp271,
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r6, [r2, #6]	@ pretmp_275,
@ Patches/../C_code.c:2674: 		if (unit->def < minStat) { unit->def = minStat; } 
	cmp	r1, r3	@ tmp271, _101
	bge	.L1963		@,
@ Patches/../C_code.c:2674: 		if (unit->def < minStat) { unit->def = minStat; } 
	strb	r3, [r4, #23]	@ _101, unit_79(D)->def
.L1963:
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	cmp	r6, #0	@ pretmp_275,
	bne	.LCB11584	@
	b	.L1964	@long jump	@
.LCB11584:
	ldrb	r0, [r2, #4]	@ MEM[(unsigned char *)pretmp_273 + 4B], MEM[(unsigned char *)pretmp_273 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	movs	r2, #17	@ tmp276,
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	ldr	r3, [r4, #4]	@ unit_79(D)->pClassData, unit_79(D)->pClassData
	ldrb	r3, [r3, #16]	@ tmp275,
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	ldrsb	r2, [r0, r2]	@ tmp276,
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	lsls	r3, r3, #24	@ tmp275, tmp275,
	asrs	r3, r3, #24	@ tmp275, tmp275,
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	adds	r3, r3, r2	@ _97, tmp275, tmp276
@ Patches/../C_code.c:2675: 		minStat = GetReorderedUnit(unit)->baseRes + unit->pClassData->baseRes; if (minStat < 0) { minStat = 0; } 
	mvns	r2, r3	@ tmp372, _97
	asrs	r2, r2, #31	@ tmp371, tmp372,
	ands	r3, r2	@ _97, tmp371
@ Patches/../C_code.c:2676: 		if (unit->res < minStat) { unit->res = minStat; } 
	movs	r2, #24	@ tmp277,
	ldrsb	r2, [r4, r2]	@ tmp277,
@ Patches/../C_code.c:2676: 		if (unit->res < minStat) { unit->res = minStat; } 
	cmp	r2, r3	@ tmp277, _97
	blt	.L1966		@,
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r2, [r4]	@ _142, unit_79(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r1, [r2, #6]	@ pretmp_283,
.L1967:
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	cmp	r1, #0	@ pretmp_283,
	bne	.LCB11607	@
	b	.L1968	@long jump	@
.LCB11607:
	ldrb	r0, [r2, #4]	@ MEM[(unsigned char *)prephitmp_282 + 4B], MEM[(unsigned char *)prephitmp_282 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
	movs	r2, r0	@ _142, tmp432
	b	.L1968		@
.L2016:
@ Patches/../C_code.c:2690: 		if ((unit->_u3A < 0) || (unit->_u3A > 127)) { unit->_u3A = 0; } } // _u3A is unsigned 
	movs	r2, #0	@ tmp343,
	strb	r2, [r4, r3]	@ tmp343, unit_79(D)->_u3A
@ Patches/../C_code.c:2692: } 
	b	.L1948		@
.L1958:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r3, [r4]	@ prephitmp_397, unit_79(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r0, [r3, #6]	@ pretmp_268,
@ Patches/../C_code.c:2672: 		if (unit->spd < minStat) { unit->spd = minStat; } 
	strb	r2, [r4, #22]	@ _105, unit_79(D)->spd
	b	.L1959		@
.L1966:
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	ldr	r2, [r4]	@ _142, unit_79(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r1, [r2, #6]	@ pretmp_283,
@ Patches/../C_code.c:2676: 		if (unit->res < minStat) { unit->res = minStat; } 
	strb	r3, [r4, #24]	@ _97, unit_79(D)->res
	b	.L1967		@
.L2021:
	.align	2
.L2020:
	.word	MinClassBase
	.word	StrMagInstalled
	.word	MagClassTable
	.word	MagCharTable
	.size	UnitCheckStatMins, .-UnitCheckStatMins
	.align	1
	.p2align 2,,3
	.global	MakePromotedUnitHaveMinStats
	.syntax unified
	.code	16
	.thumb_func
	.type	MakePromotedUnitHaveMinStats, %function
MakePromotedUnitHaveMinStats:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2696: 	if (UNIT_CATTRIBUTES(unit) & CA_PROMOTED) { 
	ldr	r3, [r0]	@ unit_10(D)->pCharacterData, unit_10(D)->pCharacterData
	ldr	r2, [r0, #4]	@ unit_10(D)->pClassData, unit_10(D)->pClassData
	ldr	r3, [r3, #40]	@ _1->attributes, _1->attributes
	ldr	r2, [r2, #40]	@ _3->attributes, _3->attributes
	orrs	r3, r2	@ tmp151, _3->attributes
@ Patches/../C_code.c:2696: 	if (UNIT_CATTRIBUTES(unit) & CA_PROMOTED) { 
	lsls	r3, r3, #23	@ tmp212, tmp151,
	bpl	.L2022		@,
@ Patches/../C_code.c:2697: 		if (unit->pow < (MinPromotedStat+2)) { unit->pow += MinPromotedStat; } 
	movs	r3, #20	@ _11,
	ldrsb	r3, [r0, r3]	@ _11,* _11
@ Patches/../C_code.c:2697: 		if (unit->pow < (MinPromotedStat+2)) { unit->pow += MinPromotedStat; } 
	cmp	r3, #3	@ _11,
	bgt	.L2025		@,
@ Patches/../C_code.c:2697: 		if (unit->pow < (MinPromotedStat+2)) { unit->pow += MinPromotedStat; } 
	adds	r3, r3, #2	@ tmp159,
	strb	r3, [r0, #20]	@ tmp159, unit_10(D)->pow
.L2025:
@ Patches/../C_code.c:2698: 		if (unit->skl < MinPromotedStat) { unit->skl += MinPromotedStat; } 
	movs	r3, #21	@ _15,
	ldrsb	r3, [r0, r3]	@ _15,* _15
@ Patches/../C_code.c:2698: 		if (unit->skl < MinPromotedStat) { unit->skl += MinPromotedStat; } 
	cmp	r3, #1	@ _15,
	ble	.L2036		@,
@ Patches/../C_code.c:2699: 		if (unit->spd < MinPromotedStat) { unit->spd += MinPromotedStat; } 
	movs	r3, #22	@ _19,
	ldrsb	r3, [r0, r3]	@ _19,* _19
@ Patches/../C_code.c:2699: 		if (unit->spd < MinPromotedStat) { unit->spd += MinPromotedStat; } 
	cmp	r3, #1	@ _19,
	ble	.L2037		@,
.L2027:
@ Patches/../C_code.c:2700: 		if (unit->def < MinPromotedStat) { unit->def += MinPromotedStat; } 
	movs	r3, #23	@ _23,
	ldrsb	r3, [r0, r3]	@ _23,* _23
@ Patches/../C_code.c:2700: 		if (unit->def < MinPromotedStat) { unit->def += MinPromotedStat; } 
	cmp	r3, #1	@ _23,
	ble	.L2038		@,
.L2028:
@ Patches/../C_code.c:2701: 		if (unit->res < MinPromotedStat) { unit->res += MinPromotedStat; } 
	movs	r3, #24	@ _27,
	ldrsb	r3, [r0, r3]	@ _27,* _27
@ Patches/../C_code.c:2701: 		if (unit->res < MinPromotedStat) { unit->res += MinPromotedStat; } 
	cmp	r3, #1	@ _27,
	ble	.L2039		@,
.L2029:
@ Patches/../C_code.c:2702: 		if (unit->lck < MinPromotedStat) { unit->lck += MinPromotedStat; } 
	movs	r3, #25	@ _31,
	ldrsb	r3, [r0, r3]	@ _31,* _31
@ Patches/../C_code.c:2702: 		if (unit->lck < MinPromotedStat) { unit->lck += MinPromotedStat; } 
	cmp	r3, #1	@ _31,
	ble	.L2040		@,
.L2030:
@ Patches/../C_code.c:2703: 		if (StrMagInstalled) {  
	ldr	r3, .L2042	@ tmp186,
@ Patches/../C_code.c:2703: 		if (StrMagInstalled) {  
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	beq	.L2022		@,
.L2041:
@ Patches/../C_code.c:2704: 		if ((unit->_u3A < (MinPromotedStat+2)) || (unit->_u3A > 127)) { unit->_u3A += MinPromotedStat; } } // _u3A is unsigned 
	movs	r1, #58	@ tmp188,
	ldrb	r2, [r0, r1]	@ _36,
@ Patches/../C_code.c:2704: 		if ((unit->_u3A < (MinPromotedStat+2)) || (unit->_u3A > 127)) { unit->_u3A += MinPromotedStat; } } // _u3A is unsigned 
	subs	r3, r2, #4	@ tmp189, _36,
@ Patches/../C_code.c:2704: 		if ((unit->_u3A < (MinPromotedStat+2)) || (unit->_u3A > 127)) { unit->_u3A += MinPromotedStat; } } // _u3A is unsigned 
	lsls	r3, r3, #24	@ tmp193, tmp189,
	lsrs	r3, r3, #24	@ tmp192, tmp193,
	cmp	r3, #123	@ tmp192,
	bls	.L2022		@,
@ Patches/../C_code.c:2704: 		if ((unit->_u3A < (MinPromotedStat+2)) || (unit->_u3A > 127)) { unit->_u3A += MinPromotedStat; } } // _u3A is unsigned 
	adds	r2, r2, #2	@ tmp194,
	strb	r2, [r0, r1]	@ tmp194, unit_10(D)->_u3A
.L2022:
@ Patches/../C_code.c:2706: } 
	@ sp needed	@
	bx	lr
.L2036:
@ Patches/../C_code.c:2698: 		if (unit->skl < MinPromotedStat) { unit->skl += MinPromotedStat; } 
	adds	r3, r3, #2	@ tmp164,
	strb	r3, [r0, #21]	@ tmp164, unit_10(D)->skl
@ Patches/../C_code.c:2699: 		if (unit->spd < MinPromotedStat) { unit->spd += MinPromotedStat; } 
	movs	r3, #22	@ _19,
	ldrsb	r3, [r0, r3]	@ _19,* _19
@ Patches/../C_code.c:2699: 		if (unit->spd < MinPromotedStat) { unit->spd += MinPromotedStat; } 
	cmp	r3, #1	@ _19,
	bgt	.L2027		@,
	b	.L2037		@
.L2040:
@ Patches/../C_code.c:2702: 		if (unit->lck < MinPromotedStat) { unit->lck += MinPromotedStat; } 
	adds	r3, r3, #2	@ tmp184,
	strb	r3, [r0, #25]	@ tmp184, unit_10(D)->lck
@ Patches/../C_code.c:2703: 		if (StrMagInstalled) {  
	ldr	r3, .L2042	@ tmp186,
@ Patches/../C_code.c:2703: 		if (StrMagInstalled) {  
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	beq	.L2022		@,
	b	.L2041		@
.L2039:
@ Patches/../C_code.c:2701: 		if (unit->res < MinPromotedStat) { unit->res += MinPromotedStat; } 
	adds	r3, r3, #2	@ tmp179,
	strb	r3, [r0, #24]	@ tmp179, unit_10(D)->res
@ Patches/../C_code.c:2702: 		if (unit->lck < MinPromotedStat) { unit->lck += MinPromotedStat; } 
	movs	r3, #25	@ _31,
	ldrsb	r3, [r0, r3]	@ _31,* _31
@ Patches/../C_code.c:2702: 		if (unit->lck < MinPromotedStat) { unit->lck += MinPromotedStat; } 
	cmp	r3, #1	@ _31,
	bgt	.L2030		@,
	b	.L2040		@
.L2038:
@ Patches/../C_code.c:2700: 		if (unit->def < MinPromotedStat) { unit->def += MinPromotedStat; } 
	adds	r3, r3, #2	@ tmp174,
	strb	r3, [r0, #23]	@ tmp174, unit_10(D)->def
@ Patches/../C_code.c:2701: 		if (unit->res < MinPromotedStat) { unit->res += MinPromotedStat; } 
	movs	r3, #24	@ _27,
	ldrsb	r3, [r0, r3]	@ _27,* _27
@ Patches/../C_code.c:2701: 		if (unit->res < MinPromotedStat) { unit->res += MinPromotedStat; } 
	cmp	r3, #1	@ _27,
	bgt	.L2029		@,
	b	.L2039		@
.L2037:
@ Patches/../C_code.c:2699: 		if (unit->spd < MinPromotedStat) { unit->spd += MinPromotedStat; } 
	adds	r3, r3, #2	@ tmp169,
	strb	r3, [r0, #22]	@ tmp169, unit_10(D)->spd
@ Patches/../C_code.c:2700: 		if (unit->def < MinPromotedStat) { unit->def += MinPromotedStat; } 
	movs	r3, #23	@ _23,
	ldrsb	r3, [r0, r3]	@ _23,* _23
@ Patches/../C_code.c:2700: 		if (unit->def < MinPromotedStat) { unit->def += MinPromotedStat; } 
	cmp	r3, #1	@ _23,
	bgt	.L2028		@,
	b	.L2038		@
.L2043:
	.align	2
.L2042:
	.word	StrMagInstalled
	.size	MakePromotedUnitHaveMinStats, .-MakePromotedUnitHaveMinStats
	.align	1
	.p2align 2,,3
	.global	NewGetStatDecrease
	.syntax unified
	.code	16
	.thumb_func
	.type	NewGetStatDecrease, %function
NewGetStatDecrease:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:2710:     int result = 0;
	movs	r4, #0	@ <retval>,
@ Patches/../C_code.c:2712:     while (growth > 100) {
	cmp	r0, #100	@ growth,
	ble	.L2045		@,
.L2046:
@ Patches/../C_code.c:2714:         growth -= 100;
	subs	r0, r0, #100	@ growth,
@ Patches/../C_code.c:2713:         result++;
	adds	r4, r4, #1	@ <retval>,
@ Patches/../C_code.c:2712:     while (growth > 100) {
	cmp	r0, #100	@ growth,
	bgt	.L2046		@,
.L2045:
@ Patches/../C_code.c:2728: }
	@ sp needed	@
@ Patches/../C_code.c:2719: 	if (Roll1RN(growth)) { // 50 
	ldr	r3, .L2052	@ tmp117,
	bl	.L14		@
@ Patches/../C_code.c:2720: 	result++; } 
	subs	r3, r0, #1	@ tmp123, tmp125
	sbcs	r0, r0, r3	@ tmp122, tmp125, tmp123
	adds	r4, r4, r0	@ <retval>, <retval>, tmp122
@ Patches/../C_code.c:2728: }
	movs	r0, r4	@, <retval>
	pop	{r4}
	pop	{r1}
	bx	r1
.L2053:
	.align	2
.L2052:
	.word	Roll1RN
	.size	NewGetStatDecrease, .-NewGetStatDecrease
	.align	1
	.p2align 2,,3
	.global	GetAutoleveledStatDecrease
	.syntax unified
	.code	16
	.thumb_func
	.type	GetAutoleveledStatDecrease, %function
GetAutoleveledStatDecrease:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:2732: 	levelCount = ABS(levelCount);
	asrs	r3, r1, #31	@ tmp161, tmp157,
@ Patches/../C_code.c:2731: int GetAutoleveledStatDecrease(int growth, int levelCount, int stat) {
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2732: 	levelCount = ABS(levelCount);
	adds	r4, r1, r3	@ levelCount, tmp157, tmp161
	eors	r4, r3	@ levelCount, tmp161
@ Patches/../C_code.c:2734: 	int result = stat - NewGetStatDecrease((growth * levelCount) + (NextRN_N((growth * levelCount) / 4) - (growth * levelCount) / 8));
	muls	r4, r0	@ _1, tmp156
@ Patches/../C_code.c:2734: 	int result = stat - NewGetStatDecrease((growth * levelCount) + (NextRN_N((growth * levelCount) / 4) - (growth * levelCount) / 8));
	movs	r0, #3	@ tmp133,
	asrs	r6, r4, #31	@ tmp132, _1,
	ands	r0, r6	@ tmp134, tmp132
	adds	r0, r0, r4	@ tmp135, tmp134, _1
	ldr	r3, .L2063	@ tmp137,
	asrs	r0, r0, #2	@ tmp136, tmp135,
@ Patches/../C_code.c:2731: int GetAutoleveledStatDecrease(int growth, int levelCount, int stat) {
	movs	r5, r2	@ stat, tmp158
@ Patches/../C_code.c:2734: 	int result = stat - NewGetStatDecrease((growth * levelCount) + (NextRN_N((growth * levelCount) / 4) - (growth * levelCount) / 8));
	bl	.L14		@
@ Patches/../C_code.c:2734: 	int result = stat - NewGetStatDecrease((growth * levelCount) + (NextRN_N((growth * levelCount) / 4) - (growth * levelCount) / 8));
	movs	r3, #7	@ tmp142,
	ands	r3, r6	@ tmp143, tmp132
	adds	r3, r3, r4	@ tmp144, tmp143, _1
	asrs	r3, r3, #3	@ tmp145, tmp144,
@ Patches/../C_code.c:2734: 	int result = stat - NewGetStatDecrease((growth * levelCount) + (NextRN_N((growth * levelCount) / 4) - (growth * levelCount) / 8));
	subs	r0, r0, r3	@ tmp146, tmp159, tmp145
@ Patches/../C_code.c:2734: 	int result = stat - NewGetStatDecrease((growth * levelCount) + (NextRN_N((growth * levelCount) / 4) - (growth * levelCount) / 8));
	adds	r0, r0, r4	@ growth, tmp146, _1
@ Patches/../C_code.c:2710:     int result = 0;
	movs	r4, #0	@ result,
@ Patches/../C_code.c:2712:     while (growth > 100) {
	cmp	r0, #100	@ growth,
	ble	.L2055		@,
.L2056:
@ Patches/../C_code.c:2714:         growth -= 100;
	subs	r0, r0, #100	@ growth,
@ Patches/../C_code.c:2713:         result++;
	adds	r4, r4, #1	@ result,
@ Patches/../C_code.c:2712:     while (growth > 100) {
	cmp	r0, #100	@ growth,
	bgt	.L2056		@,
.L2055:
@ Patches/../C_code.c:2738: }
	@ sp needed	@
@ Patches/../C_code.c:2719: 	if (Roll1RN(growth)) { // 50 
	ldr	r3, .L2063+4	@ tmp147,
	bl	.L14		@
@ Patches/../C_code.c:2720: 	result++; } 
	subs	r3, r0, #1	@ tmp153, tmp160
	sbcs	r0, r0, r3	@ tmp152, tmp160, tmp153
	adds	r4, r4, r0	@ result, result, tmp152
@ Patches/../C_code.c:2734: 	int result = stat - NewGetStatDecrease((growth * levelCount) + (NextRN_N((growth * levelCount) / 4) - (growth * levelCount) / 8));
	subs	r0, r5, r4	@ result, stat, result
@ Patches/../C_code.c:2736: 	if (result < 0) { result = 0; } 
	mvns	r3, r0	@ tmp155, result
	asrs	r3, r3, #31	@ tmp154, tmp155,
	ands	r0, r3	@ result, tmp154
@ Patches/../C_code.c:2738: }
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L2064:
	.align	2
.L2063:
	.word	NextRN_N
	.word	Roll1RN
	.size	GetAutoleveledStatDecrease, .-GetAutoleveledStatDecrease
	.align	1
	.p2align 2,,3
	.global	AdjustGrowthForLosingLevels
	.syntax unified
	.code	16
	.thumb_func
	.type	AdjustGrowthForLosingLevels, %function
AdjustGrowthForLosingLevels:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	lsls	r1, r1, #1	@ tmp120, tmp122,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r1, r0	@ num, tmp120, tmp121
@ Patches/../C_code.c:2775: 	if (num < MinCharAutolevelBonusGrowth) { num = MinCharAutolevelBonusGrowth; } 
	cmp	r0, #20	@ num,
	bge	.L2066		@,
	movs	r0, #20	@ num,
.L2066:
@ Patches/../C_code.c:2777: } 
	@ sp needed	@
	bx	lr
	.size	AdjustGrowthForLosingLevels, .-AdjustGrowthForLosingLevels
	.align	1
	.p2align 2,,3
	.global	GetAdjustedLevel
	.syntax unified
	.code	16
	.thumb_func
	.type	GetAdjustedLevel, %function
GetAdjustedLevel:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:2863: int GetAdjustedLevel(const struct CharacterData* table, const struct ClassData* classTable) { 
	movs	r3, r0	@ table, tmp128
@ Patches/../C_code.c:2865: 	int level = table->baseLevel; 
	movs	r0, #11	@ <retval>,
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	ldr	r2, [r1, #40]	@ classTable_8(D)->attributes, classTable_8(D)->attributes
@ Patches/../C_code.c:2865: 	int level = table->baseLevel; 
	ldrsb	r0, [r3, r0]	@ <retval>,* <retval>
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	ldr	r3, [r3, #40]	@ table_7(D)->attributes, table_7(D)->attributes
	orrs	r3, r2	@ tmp122, classTable_8(D)->attributes
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	lsls	r3, r3, #23	@ tmp130, tmp122,
	bpl	.L2067		@,
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	adds	r0, r0, #15	@ <retval>,
.L2067:
@ Patches/../C_code.c:2868: } 
	@ sp needed	@
	bx	lr
	.size	GetAdjustedLevel, .-GetAdjustedLevel
	.align	1
	.p2align 2,,3
	.global	GetHPStatMaxBonus
	.syntax unified
	.code	16
	.thumb_func
	.type	GetHPStatMaxBonus, %function
GetHPStatMaxBonus:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:2872: 	int result = (stat + avg) / 2; 
	adds	r3, r1, r2	@ tmp131, stat, avg
@ Patches/../C_code.c:2871: int GetHPStatMaxBonus(struct Unit* unit, int stat, int avg) { 
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2872: 	int result = (stat + avg) / 2; 
	lsrs	r5, r3, #31	@ tmp132, tmp131,
	adds	r5, r5, r3	@ tmp133, tmp132, tmp131
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	ldr	r3, .L2085	@ tmp136,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldrh	r0, [r3, #2]	@ *RandValues.193_2, *RandValues.193_2
@ Patches/../C_code.c:2158: 	switch (RandBitflags->caps) { 
	ldr	r3, .L2085+4	@ tmp144,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrh	r3, [r3]	@ *RandBitflags.136_16, *RandBitflags.136_16
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r0, r0, #23	@ tmp141, *RandValues.193_2,
@ Patches/../C_code.c:2158: 	switch (RandBitflags->caps) { 
	lsls	r3, r3, #23	@ tmp149, *RandBitflags.136_16,
@ Patches/../C_code.c:2871: int GetHPStatMaxBonus(struct Unit* unit, int stat, int avg) { 
	movs	r4, r1	@ stat, tmp192
	movs	r6, r2	@ avg, tmp193
@ Patches/../C_code.c:2872: 	int result = (stat + avg) / 2; 
	asrs	r5, r5, #1	@ result, tmp133,
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsrs	r0, r0, #27	@ _4, tmp141,
@ Patches/../C_code.c:2158: 	switch (RandBitflags->caps) { 
	lsrs	r3, r3, #29	@ _17, tmp149,
@ Patches/../C_code.c:2158: 	switch (RandBitflags->caps) { 
	cmp	r3, #5	@ _17,
	beq	.L2074		@,
	bhi	.L2075		@,
	cmp	r3, #2	@ _17,
	beq	.L2076		@,
	cmp	r3, #3	@ _17,
	bne	.L2078		@,
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r3, r0, #3	@ tmp168, _4,
	subs	r0, r3, r0	@ tmp169, tmp168, _4
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	movs	r1, #20	@,
	ldr	r3, .L2085+8	@ tmp178,
	bl	.L14		@
@ Patches/../C_code.c:2874: 	result += bonus; 
	adds	r5, r5, r0	@ result, result, tmp195
@ Patches/../C_code.c:2162: 		case 3: { result = ((3 * stat) / 4) - 2; break; } 
	b	.L2076		@
.L2075:
@ Patches/../C_code.c:2158: 	switch (RandBitflags->caps) { 
	cmp	r3, #6	@ _17,
	bne	.L2078		@,
@ Patches/../C_code.c:2874: 	result += bonus; 
	adds	r5, r5, r0	@ result, result, _4
.L2076:
@ Patches/../C_code.c:2875: 	if (result < stat) { result = stat; } 
	movs	r0, r4	@ <retval>, stat
	cmp	r4, r5	@ <retval>, result
	bge	.L2080		@,
	movs	r0, r5	@ <retval>, result
.L2080:
@ Patches/../C_code.c:2876: 	if (result < (avg + 1)) { result = avg+1; } 
	cmp	r6, r0	@ avg, <retval>
	blt	.L2073		@,
@ Patches/../C_code.c:2876: 	if (result < (avg + 1)) { result = avg+1; } 
	adds	r0, r6, #1	@ <retval>, avg,
.L2073:
@ Patches/../C_code.c:2878: } 
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L2078:
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r3, r0, #1	@ tmp154, _4,
	adds	r0, r3, r0	@ tmp155, tmp154, _4
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	movs	r1, #20	@,
	ldr	r3, .L2085+8	@ tmp165,
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r0, r0, #2	@ tmp156, tmp155,
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	bl	.L14		@
@ Patches/../C_code.c:2874: 	result += bonus; 
	adds	r5, r5, r0	@ result, result, tmp194
	b	.L2076		@
.L2074:
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	movs	r1, #20	@,
	ldr	r3, .L2085+8	@ tmp189,
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r0, r0, #4	@ tmp180, _4,
@ Patches/../C_code.c:2873: 	int bonus = (AdjustStatForInflatedNumbers(HPStatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	bl	.L14		@
@ Patches/../C_code.c:2874: 	result += bonus; 
	adds	r5, r5, r0	@ result, result, tmp196
@ Patches/../C_code.c:2164: 		case 5: { result = ((5 * stat) / 4) + 1; break; } 
	b	.L2076		@
.L2086:
	.align	2
.L2085:
	.word	RandValues
	.word	RandBitflags
	.word	__aeabi_idiv
	.size	GetHPStatMaxBonus, .-GetHPStatMaxBonus
	.align	1
	.p2align 2,,3
	.global	GetStatMaxBonus
	.syntax unified
	.code	16
	.thumb_func
	.type	GetStatMaxBonus, %function
GetStatMaxBonus:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:2881: 	int result = (stat + avg) / 2; 
	adds	r3, r1, r2	@ tmp133, stat, avg
@ Patches/../C_code.c:2880: int GetStatMaxBonus(struct Unit* unit, int stat, int avg) { 
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2881: 	int result = (stat + avg) / 2; 
	lsrs	r5, r3, #31	@ tmp134, tmp133,
	adds	r5, r5, r3	@ tmp135, tmp134, tmp133
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	ldr	r3, .L2100	@ tmp138,
	ldr	r3, [r3]	@ RandValues, RandValues
@ Patches/../C_code.c:2880: int GetStatMaxBonus(struct Unit* unit, int stat, int avg) { 
	movs	r4, r1	@ stat, tmp209
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	ldrh	r1, [r3, #2]	@ *RandValues.194_2, *RandValues.194_2
@ Patches/../C_code.c:2173: 	switch (RandBitflags->caps) { 
	ldr	r3, .L2100+4	@ tmp146,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrh	r3, [r3]	@ *RandBitflags.137_16, *RandBitflags.137_16
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r1, r1, #23	@ tmp143, *RandValues.194_2,
@ Patches/../C_code.c:2173: 	switch (RandBitflags->caps) { 
	lsls	r3, r3, #23	@ tmp151, *RandBitflags.137_16,
@ Patches/../C_code.c:2880: int GetStatMaxBonus(struct Unit* unit, int stat, int avg) { 
	movs	r6, r2	@ avg, tmp210
@ Patches/../C_code.c:2881: 	int result = (stat + avg) / 2; 
	asrs	r5, r5, #1	@ result, tmp135,
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsrs	r1, r1, #27	@ _4, tmp143,
@ Patches/../C_code.c:2173: 	switch (RandBitflags->caps) { 
	lsrs	r3, r3, #29	@ _17, tmp151,
@ Patches/../C_code.c:2173: 	switch (RandBitflags->caps) { 
	cmp	r3, #5	@ _17,
	beq	.L2088		@,
	bhi	.L2089		@,
	cmp	r3, #2	@ _17,
	beq	.L2090		@,
	cmp	r3, #3	@ _17,
	bne	.L2092		@,
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r0, r1, #1	@ tmp167, _4,
	adds	r0, r0, r1	@ tmp168, tmp167, _4
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	ldr	r3, .L2100+8	@ tmp178,
	movs	r1, #20	@,
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r0, r0, #1	@ tmp169, tmp168,
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	bl	.L14		@
@ Patches/../C_code.c:2883: 	result += bonus; 
	adds	r5, r5, r0	@ result, result, tmp212
@ Patches/../C_code.c:2177: 		case 3: { result = ((7 * stat) / 8) - 1; break; } 
	b	.L2090		@
.L2089:
@ Patches/../C_code.c:2173: 	switch (RandBitflags->caps) { 
	cmp	r3, #6	@ _17,
	bne	.L2092		@,
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r0, r1, #2	@ tmp194, _4,
	adds	r0, r0, r1	@ tmp195, tmp194, _4
	lsls	r0, r0, #1	@ tmp196, tmp195,
.L2099:
	adds	r0, r0, r1	@ tmp197, tmp196, _4
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	ldr	r3, .L2100+8	@ tmp206,
	movs	r1, #20	@,
	bl	.L14		@
@ Patches/../C_code.c:2883: 	result += bonus; 
	adds	r5, r5, r0	@ result, result, tmp214
.L2090:
@ Patches/../C_code.c:2884: 	if (result < stat) { result = stat; } 
	movs	r0, r4	@ <retval>, stat
	cmp	r4, r5	@ <retval>, result
	bge	.L2094		@,
	movs	r0, r5	@ <retval>, result
.L2094:
@ Patches/../C_code.c:2885: 	if (result < (avg + 1)) { result = avg+1; } 
	cmp	r6, r0	@ avg, <retval>
	blt	.L2087		@,
@ Patches/../C_code.c:2885: 	if (result < (avg + 1)) { result = avg+1; } 
	adds	r0, r6, #1	@ <retval>, avg,
.L2087:
@ Patches/../C_code.c:2887: } 
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L2092:
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r0, r1, #3	@ tmp155, _4,
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	ldr	r3, .L2100+8	@ tmp164,
	movs	r1, #20	@,
	bl	.L14		@
@ Patches/../C_code.c:2883: 	result += bonus; 
	adds	r5, r5, r0	@ result, result, tmp211
	b	.L2090		@
.L2088:
@ Patches/../C_code.c:2882: 	int bonus = (SlightlyAdjustStatForInflatedNumbers(StatMaxBonus) * ((RandValues->variance)*5)) / 100; 
	lsls	r0, r1, #3	@ tmp181, _4,
	b	.L2099		@
.L2101:
	.align	2
.L2100:
	.word	RandValues
	.word	RandBitflags
	.word	__aeabi_idiv
	.size	GetStatMaxBonus, .-GetStatMaxBonus
	.align	1
	.p2align 2,,3
	.global	UnitLoadItemsFromDefinition
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitLoadItemsFromDefinition, %function
UnitLoadItemsFromDefinition:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	push	{lr}	@
@ Patches/../C_code.c:3229:     UnitClearInventory(unit);
	ldr	r3, .L2111	@ tmp130,
@ Patches/../C_code.c:3226: void UnitLoadItemsFromDefinition(struct Unit* unit, const struct UnitDefinition* uDef) {
	sub	sp, sp, #64	@,,
@ Patches/../C_code.c:3226: void UnitLoadItemsFromDefinition(struct Unit* unit, const struct UnitDefinition* uDef) {
	movs	r7, r1	@ uDef, tmp166
	movs	r6, r0	@ unit, tmp165
@ Patches/../C_code.c:3229:     UnitClearInventory(unit);
	bl	.L14		@
@ Patches/../C_code.c:3230: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r3, #0	@ tmp132,
	str	r3, [sp, #20]	@ tmp132, MEM <char[4]> [(int[4] *)&noise + 12B]
@ Patches/../C_code.c:3231: 	noise[0] = unit->pCharacterData->number;
	ldr	r3, [r6]	@ unit_15(D)->pCharacterData, unit_15(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp135,
	str	r3, [sp, #8]	@ tmp135, noise[0]
@ Patches/../C_code.c:3237: 	noise[1] = uDef->xPosition; 
	ldrb	r3, [r7, #4]	@ *uDef_19(D), *uDef_19(D)
	lsls	r3, r3, #26	@ tmp141, *uDef_19(D),
	lsrs	r3, r3, #26	@ tmp142, tmp141,
	str	r3, [sp, #12]	@ tmp142, noise[1]
@ Patches/../C_code.c:3238: 	noise[2] = uDef->yPosition;  
	ldrh	r3, [r7, #4]	@ *uDef_19(D), *uDef_19(D)
	lsls	r3, r3, #20	@ tmp149, *uDef_19(D),
	lsrs	r3, r3, #26	@ tmp150, tmp149,
	str	r3, [sp, #16]	@ tmp150, noise[2]
@ Patches/../C_code.c:3241: 	list[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	movs	r3, #99	@ tmp153,
	add	r5, sp, #24	@ tmp162,,
@ Patches/../C_code.c:3242: 	BuildAvailableWeaponList(list, unit); 
	movs	r1, r6	@, unit
	movs	r0, r5	@, tmp162
@ Patches/../C_code.c:3241: 	list[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	strb	r3, [r5]	@ tmp153, list[0]
@ Patches/../C_code.c:3242: 	BuildAvailableWeaponList(list, unit); 
	bl	BuildAvailableWeaponList		@
@ Patches/../C_code.c:3245:         UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list));
	ldr	r3, .L2111+4	@ tmp164,
@ Patches/../C_code.c:3243:     for (i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	movs	r4, #0	@ i,
@ Patches/../C_code.c:3245:         UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list));
	mov	r8, r3	@ tmp164, tmp164
	adds	r7, r7, #12	@ _40,
.L2103:
@ Patches/../C_code.c:3243:     for (i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	ldrb	r1, [r7, r4]	@ _10, MEM[(unsigned char *)_40 + _39 * 1]
@ Patches/../C_code.c:3243:     for (i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	cmp	r1, #0	@ _10,
	beq	.L2102		@,
@ Patches/../C_code.c:3244: 		if (i == 1) { AppendAvailableStaffList(list, unit); } // first item will always be a weapon if possible 
	cmp	r4, #1	@ i,
	beq	.L2110		@,
.L2105:
	movs	r3, r4	@, i
	add	r2, sp, #8	@ tmp170,,
	movs	r0, r6	@, unit
	str	r5, [sp]	@ tmp162,
	bl	RandNewWeapon.part.0		@
@ Patches/../C_code.c:3243:     for (i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	adds	r4, r4, #1	@ i,
	movs	r1, r0	@ _29, tmp167
@ Patches/../C_code.c:3245:         UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list));
	movs	r0, r6	@, unit
	bl	.L179		@
@ Patches/../C_code.c:3243:     for (i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	cmp	r4, #4	@ i,
	bne	.L2103		@,
.L2102:
@ Patches/../C_code.c:3247: }
	add	sp, sp, #64	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2110:
@ Patches/../C_code.c:3244: 		if (i == 1) { AppendAvailableStaffList(list, unit); } // first item will always be a weapon if possible 
	movs	r1, r6	@, unit
	movs	r0, r5	@, tmp162
	bl	AppendAvailableStaffList		@
@ Patches/../C_code.c:3245:         UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list));
	ldrb	r1, [r7, #1]	@ _13, MEM[(unsigned char *)_40 + 1B]
@ Patches/../C_code.c:1967: 	if (!item) { return item; } 
	cmp	r1, #0	@ _13,
	bne	.L2105		@,
@ Patches/../C_code.c:3245:         UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list));
	movs	r1, #0	@,
	movs	r0, r6	@, unit
	ldr	r3, .L2111+4	@ tmp160,
	bl	.L14		@
@ Patches/../C_code.c:3243:     for (i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	movs	r4, #2	@ i,
	b	.L2103		@
.L2112:
	.align	2
.L2111:
	.word	UnitClearInventory
	.word	UnitAddItem
	.size	UnitLoadItemsFromDefinition, .-UnitLoadItemsFromDefinition
	.align	1
	.p2align 2,,3
	.global	UnitLoadStatsFromCharacter
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitLoadStatsFromCharacter, %function
UnitLoadStatsFromCharacter:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:3255: }
	@ sp needed	@
	bx	lr
	.size	UnitLoadStatsFromCharacter, .-UnitLoadStatsFromCharacter
	.align	1
	.p2align 2,,3
	.global	GetUnitHPCap
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitHPCap, %function
GetUnitHPCap:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:3262: 	if (UNIT_CATTRIBUTES(unit) & CA_BOSS) { if (unit->pCharacterData->number > 0x3F) { return EnemyBossMaxHP; } } 
	ldr	r2, [r0]	@ _1, unit_13(D)->pCharacterData
	ldr	r3, [r0, #4]	@ unit_13(D)->pClassData, unit_13(D)->pClassData
	ldr	r1, [r2, #40]	@ _1->attributes, _1->attributes
	ldr	r3, [r3, #40]	@ _3->attributes, _3->attributes
	orrs	r3, r1	@ tmp127, _1->attributes
@ Patches/../C_code.c:3262: 	if (UNIT_CATTRIBUTES(unit) & CA_BOSS) { if (unit->pCharacterData->number > 0x3F) { return EnemyBossMaxHP; } } 
	lsls	r3, r3, #16	@ tmp143, tmp127,
	bpl	.L2115		@,
@ Patches/../C_code.c:3262: 	if (UNIT_CATTRIBUTES(unit) & CA_BOSS) { if (unit->pCharacterData->number > 0x3F) { return EnemyBossMaxHP; } } 
	ldrb	r3, [r2, #4]	@ tmp134,
	cmp	r3, #63	@ tmp134,
	bhi	.L2121		@,
.L2116:
@ Patches/../C_code.c:3264: 	return EnemyMaxHP; 
	ldr	r3, .L2122	@ tmp140,
	ldr	r0, [r3]	@ <retval>,
.L2114:
@ Patches/../C_code.c:3265: } 
	@ sp needed	@
	bx	lr
.L2115:
@ Patches/../C_code.c:3263: 	else { if (UNIT_FACTION(unit) != FACTION_RED) { return PlayerMaxHP; } } 
	movs	r2, #11	@ tmp136,
	movs	r3, #192	@ tmp137,
	ldrsb	r2, [r0, r2]	@ tmp136,
	ands	r3, r2	@ tmp138, tmp136
@ Patches/../C_code.c:3263: 	else { if (UNIT_FACTION(unit) != FACTION_RED) { return PlayerMaxHP; } } 
	cmp	r3, #128	@ tmp138,
	beq	.L2116		@,
@ Patches/../C_code.c:3263: 	else { if (UNIT_FACTION(unit) != FACTION_RED) { return PlayerMaxHP; } } 
	ldr	r3, .L2122+4	@ tmp139,
	ldr	r0, [r3]	@ <retval>,
@ Patches/../C_code.c:3263: 	else { if (UNIT_FACTION(unit) != FACTION_RED) { return PlayerMaxHP; } } 
	b	.L2114		@
.L2121:
@ Patches/../C_code.c:3262: 	if (UNIT_CATTRIBUTES(unit) & CA_BOSS) { if (unit->pCharacterData->number > 0x3F) { return EnemyBossMaxHP; } } 
	ldr	r3, .L2122+8	@ tmp135,
	ldr	r0, [r3]	@ <retval>,
@ Patches/../C_code.c:3262: 	if (UNIT_CATTRIBUTES(unit) & CA_BOSS) { if (unit->pCharacterData->number > 0x3F) { return EnemyBossMaxHP; } } 
	b	.L2114		@
.L2123:
	.align	2
.L2122:
	.word	EnemyMaxHP
	.word	PlayerMaxHP
	.word	EnemyBossMaxHP
	.size	GetUnitHPCap, .-GetUnitHPCap
	.align	1
	.p2align 2,,3
	.global	GetUnitMaxPow
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMaxPow, %function
GetUnitMaxPow:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:3268: 	int cap = ((unit)->pClassData->maxPow); //return cap;
	movs	r4, #20	@ cap,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	movs	r1, #224	@ tmp148,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, .L2142	@ tmp144,
@ Patches/../C_code.c:3268: 	int cap = ((unit)->pClassData->maxPow); //return cap;
	ldr	r5, [r0, #4]	@ _1, unit_14(D)->pClassData
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, [r3]	@ RandBitflags.54_27, RandBitflags
@ Patches/../C_code.c:3268: 	int cap = ((unit)->pClassData->maxPow); //return cap;
	ldrsb	r4, [r5, r4]	@ cap,* cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldrh	r3, [r3]	@ *RandBitflags.54_27, *RandBitflags.54_27
	lsls	r1, r1, #1	@ tmp148, tmp148,
@ Patches/../C_code.c:3267: int GetUnitMaxPow(struct Unit* unit) { 
	movs	r2, r0	@ unit, tmp195
	sub	sp, sp, #28	@,,
@ Patches/../C_code.c:3269: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	movs	r0, r4	@ <retval>, cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	tst	r3, r1	@ *RandBitflags.54_27, tmp148
	beq	.L2124		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r2]	@ MEM[(const struct CharacterData * *)unit_14(D)], MEM[(const struct CharacterData * *)unit_14(D)]
	ldrb	r1, [r2, #4]	@ tmp154,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r6, .L2142+4	@ tmp152,
	lsls	r1, r1, #1	@ tmp155, tmp154,
@ Patches/../C_code.c:3269: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	ldrb	r2, [r1, r6]	@ tmp156, CharExceptions
	cmp	r2, #0	@ tmp156,
	bne	.L2124		@,
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	lsls	r3, r3, #23	@ tmp161, *RandBitflags.54_27,
	lsrs	r3, r3, #29	@ _41, tmp161,
	subs	r2, r3, #2	@ tmp163, _41,
	lsls	r2, r2, #24	@ tmp167, tmp163,
	lsrs	r2, r2, #24	@ tmp166, tmp167,
	cmp	r2, #4	@ tmp166,
	bhi	.L2134		@,
	lsls	r6, r3, #4	@ tmp169, _41,
	subs	r6, r6, r3	@ tmp170, tmp169, _41
	subs	r6, r6, #30	@ result,
.L2126:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r7, .L2142+8	@ tmp194,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r0, [r7]	@ <retval>, maxStat
	cmp	r0, r6	@ <retval>, result
	ble	.L2127		@,
	movs	r0, r6	@ <retval>, result
.L2127:
@ Patches/../C_code.c:3271: 	if (max != (-1)) { return max; } 
	adds	r3, r0, #1	@ tmp200, <retval>,
	bne	.L2124		@,
@ Patches/../C_code.c:3272: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L2142+12	@ tmp175,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:3273: 	noise[0] = unit->pClassData->number;  
	ldrb	r3, [r5, #4]	@ tmp179,
	str	r3, [sp, #8]	@ tmp179, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp181,
	movs	r2, #17	@,
	str	r3, [sp]	@ tmp181,
	movs	r0, r4	@, cap
	adds	r3, r3, #1	@,
	add	r1, sp, #8	@ tmp204,,
	bl	HashPercent		@
@ Patches/../C_code.c:3275: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 13); }  
	asrs	r3, r4, #1	@ tmp184, cap,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r5, r0	@ result, tmp196
@ Patches/../C_code.c:3275: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 13); }  
	cmp	r3, r0	@ tmp184, result
	ble	.L2128		@,
@ Patches/../C_code.c:3275: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 13); }  
	lsrs	r1, r4, #31	@ tmp187, cap,
	adds	r1, r1, r4	@ tmp188, tmp187, cap
	movs	r3, #13	@,
	movs	r0, r4	@, cap
	asrs	r1, r1, #1	@ tmp189, tmp188,
	add	r2, sp, #8	@ tmp205,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3275: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 13); }  
	adds	r5, r5, r0	@ result, result, tmp197
.L2128:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r3, [r7]	@ result, maxStat
	cmp	r3, r6	@ result, result
	bgt	.L2139		@,
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	beq	.L2140		@,
.L2130:
@ Patches/../C_code.c:3276: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r5	@ <retval>, result
	cmp	r5, r3	@ <retval>, result
	bgt	.L2141		@,
.L2124:
@ Patches/../C_code.c:3278: } 
	add	sp, sp, #28	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2134:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r6, #1	@ result,
	rsbs	r6, r6, #0	@ result, result
	b	.L2126		@
.L2141:
@ Patches/../C_code.c:3276: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r3	@ <retval>, result
	b	.L2124		@
.L2139:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	movs	r3, r6	@ result, result
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	bne	.L2130		@,
.L2140:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r3, #31	@ result,
	b	.L2130		@
.L2143:
	.align	2
.L2142:
	.word	RandBitflags
	.word	CharExceptions
	.word	maxStat
	.word	memset
	.size	GetUnitMaxPow, .-GetUnitMaxPow
	.align	1
	.p2align 2,,3
	.global	GetUnitMaxSkl
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMaxSkl, %function
GetUnitMaxSkl:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:3281: 	int cap = ((unit)->pClassData->maxSkl); //return cap;
	movs	r4, #21	@ cap,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	movs	r1, #224	@ tmp148,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, .L2162	@ tmp144,
@ Patches/../C_code.c:3281: 	int cap = ((unit)->pClassData->maxSkl); //return cap;
	ldr	r5, [r0, #4]	@ _1, unit_14(D)->pClassData
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, [r3]	@ RandBitflags.54_27, RandBitflags
@ Patches/../C_code.c:3281: 	int cap = ((unit)->pClassData->maxSkl); //return cap;
	ldrsb	r4, [r5, r4]	@ cap,* cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldrh	r3, [r3]	@ *RandBitflags.54_27, *RandBitflags.54_27
	lsls	r1, r1, #1	@ tmp148, tmp148,
@ Patches/../C_code.c:3280: int GetUnitMaxSkl(struct Unit* unit) { 
	movs	r2, r0	@ unit, tmp195
	sub	sp, sp, #28	@,,
@ Patches/../C_code.c:3282: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	movs	r0, r4	@ <retval>, cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	tst	r3, r1	@ *RandBitflags.54_27, tmp148
	beq	.L2144		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r2]	@ MEM[(const struct CharacterData * *)unit_14(D)], MEM[(const struct CharacterData * *)unit_14(D)]
	ldrb	r1, [r2, #4]	@ tmp154,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r6, .L2162+4	@ tmp152,
	lsls	r1, r1, #1	@ tmp155, tmp154,
@ Patches/../C_code.c:3282: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	ldrb	r2, [r1, r6]	@ tmp156, CharExceptions
	cmp	r2, #0	@ tmp156,
	bne	.L2144		@,
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	lsls	r3, r3, #23	@ tmp161, *RandBitflags.54_27,
	lsrs	r3, r3, #29	@ _41, tmp161,
	subs	r2, r3, #2	@ tmp163, _41,
	lsls	r2, r2, #24	@ tmp167, tmp163,
	lsrs	r2, r2, #24	@ tmp166, tmp167,
	cmp	r2, #4	@ tmp166,
	bhi	.L2154		@,
	lsls	r6, r3, #4	@ tmp169, _41,
	subs	r6, r6, r3	@ tmp170, tmp169, _41
	subs	r6, r6, #30	@ result,
.L2146:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r7, .L2162+8	@ tmp194,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r0, [r7]	@ <retval>, maxStat
	cmp	r0, r6	@ <retval>, result
	ble	.L2147		@,
	movs	r0, r6	@ <retval>, result
.L2147:
@ Patches/../C_code.c:3284: 	if (max != (-1)) { return max; } 
	adds	r3, r0, #1	@ tmp200, <retval>,
	bne	.L2144		@,
@ Patches/../C_code.c:3285: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L2162+12	@ tmp175,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:3286: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r5, #4]	@ tmp179,
	str	r3, [sp, #8]	@ tmp179, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp181,
	movs	r2, #27	@,
	str	r3, [sp]	@ tmp181,
	movs	r0, r4	@, cap
	adds	r3, r3, #1	@,
	add	r1, sp, #8	@ tmp204,,
	bl	HashPercent		@
@ Patches/../C_code.c:3288: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 23); } 
	asrs	r3, r4, #1	@ tmp184, cap,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r5, r0	@ result, tmp196
@ Patches/../C_code.c:3288: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 23); } 
	cmp	r3, r0	@ tmp184, result
	ble	.L2148		@,
@ Patches/../C_code.c:3288: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 23); } 
	lsrs	r1, r4, #31	@ tmp187, cap,
	adds	r1, r1, r4	@ tmp188, tmp187, cap
	movs	r3, #23	@,
	movs	r0, r4	@, cap
	asrs	r1, r1, #1	@ tmp189, tmp188,
	add	r2, sp, #8	@ tmp205,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3288: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 23); } 
	adds	r5, r5, r0	@ result, result, tmp197
.L2148:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r3, [r7]	@ result, maxStat
	cmp	r3, r6	@ result, result
	bgt	.L2159		@,
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	beq	.L2160		@,
.L2150:
@ Patches/../C_code.c:3289: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r5	@ <retval>, result
	cmp	r5, r3	@ <retval>, result
	bgt	.L2161		@,
.L2144:
@ Patches/../C_code.c:3291: } 
	add	sp, sp, #28	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2154:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r6, #1	@ result,
	rsbs	r6, r6, #0	@ result, result
	b	.L2146		@
.L2161:
@ Patches/../C_code.c:3289: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r3	@ <retval>, result
	b	.L2144		@
.L2159:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	movs	r3, r6	@ result, result
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	bne	.L2150		@,
.L2160:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r3, #31	@ result,
	b	.L2150		@
.L2163:
	.align	2
.L2162:
	.word	RandBitflags
	.word	CharExceptions
	.word	maxStat
	.word	memset
	.size	GetUnitMaxSkl, .-GetUnitMaxSkl
	.align	1
	.p2align 2,,3
	.global	GetUnitMaxSpd
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMaxSpd, %function
GetUnitMaxSpd:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:3294: 	int cap = ((unit)->pClassData->maxSpd); //return cap;
	movs	r4, #22	@ cap,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	movs	r1, #224	@ tmp148,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, .L2182	@ tmp144,
@ Patches/../C_code.c:3294: 	int cap = ((unit)->pClassData->maxSpd); //return cap;
	ldr	r5, [r0, #4]	@ _1, unit_14(D)->pClassData
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, [r3]	@ RandBitflags.54_27, RandBitflags
@ Patches/../C_code.c:3294: 	int cap = ((unit)->pClassData->maxSpd); //return cap;
	ldrsb	r4, [r5, r4]	@ cap,* cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldrh	r3, [r3]	@ *RandBitflags.54_27, *RandBitflags.54_27
	lsls	r1, r1, #1	@ tmp148, tmp148,
@ Patches/../C_code.c:3293: int GetUnitMaxSpd(struct Unit* unit) { 
	movs	r2, r0	@ unit, tmp195
	sub	sp, sp, #28	@,,
@ Patches/../C_code.c:3295: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	movs	r0, r4	@ <retval>, cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	tst	r3, r1	@ *RandBitflags.54_27, tmp148
	beq	.L2164		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r2]	@ MEM[(const struct CharacterData * *)unit_14(D)], MEM[(const struct CharacterData * *)unit_14(D)]
	ldrb	r1, [r2, #4]	@ tmp154,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r6, .L2182+4	@ tmp152,
	lsls	r1, r1, #1	@ tmp155, tmp154,
@ Patches/../C_code.c:3295: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	ldrb	r2, [r1, r6]	@ tmp156, CharExceptions
	cmp	r2, #0	@ tmp156,
	bne	.L2164		@,
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	lsls	r3, r3, #23	@ tmp161, *RandBitflags.54_27,
	lsrs	r3, r3, #29	@ _41, tmp161,
	subs	r2, r3, #2	@ tmp163, _41,
	lsls	r2, r2, #24	@ tmp167, tmp163,
	lsrs	r2, r2, #24	@ tmp166, tmp167,
	cmp	r2, #4	@ tmp166,
	bhi	.L2174		@,
	lsls	r6, r3, #4	@ tmp169, _41,
	subs	r6, r6, r3	@ tmp170, tmp169, _41
	subs	r6, r6, #30	@ result,
.L2166:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r7, .L2182+8	@ tmp194,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r0, [r7]	@ <retval>, maxStat
	cmp	r0, r6	@ <retval>, result
	ble	.L2167		@,
	movs	r0, r6	@ <retval>, result
.L2167:
@ Patches/../C_code.c:3297: 	if (max != (-1)) { return max; } 
	adds	r3, r0, #1	@ tmp200, <retval>,
	bne	.L2164		@,
@ Patches/../C_code.c:3298: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L2182+12	@ tmp175,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:3299: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r5, #4]	@ tmp179,
	str	r3, [sp, #8]	@ tmp179, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp181,
	movs	r2, #37	@,
	str	r3, [sp]	@ tmp181,
	movs	r0, r4	@, cap
	adds	r3, r3, #1	@,
	add	r1, sp, #8	@ tmp204,,
	bl	HashPercent		@
@ Patches/../C_code.c:3301: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 33); } 
	asrs	r3, r4, #1	@ tmp184, cap,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r5, r0	@ result, tmp196
@ Patches/../C_code.c:3301: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 33); } 
	cmp	r3, r0	@ tmp184, result
	ble	.L2168		@,
@ Patches/../C_code.c:3301: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 33); } 
	lsrs	r1, r4, #31	@ tmp187, cap,
	adds	r1, r1, r4	@ tmp188, tmp187, cap
	movs	r3, #33	@,
	movs	r0, r4	@, cap
	asrs	r1, r1, #1	@ tmp189, tmp188,
	add	r2, sp, #8	@ tmp205,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3301: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 33); } 
	adds	r5, r5, r0	@ result, result, tmp197
.L2168:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r3, [r7]	@ result, maxStat
	cmp	r3, r6	@ result, result
	bgt	.L2179		@,
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	beq	.L2180		@,
.L2170:
@ Patches/../C_code.c:3302: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r5	@ <retval>, result
	cmp	r5, r3	@ <retval>, result
	bgt	.L2181		@,
.L2164:
@ Patches/../C_code.c:3304: } 
	add	sp, sp, #28	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2174:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r6, #1	@ result,
	rsbs	r6, r6, #0	@ result, result
	b	.L2166		@
.L2181:
@ Patches/../C_code.c:3302: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r3	@ <retval>, result
	b	.L2164		@
.L2179:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	movs	r3, r6	@ result, result
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	bne	.L2170		@,
.L2180:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r3, #31	@ result,
	b	.L2170		@
.L2183:
	.align	2
.L2182:
	.word	RandBitflags
	.word	CharExceptions
	.word	maxStat
	.word	memset
	.size	GetUnitMaxSpd, .-GetUnitMaxSpd
	.align	1
	.p2align 2,,3
	.global	GetUnitMaxDef
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMaxDef, %function
GetUnitMaxDef:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:3307: 	int cap = ((unit)->pClassData->maxDef); //return cap;
	movs	r4, #23	@ cap,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	movs	r1, #224	@ tmp148,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, .L2202	@ tmp144,
@ Patches/../C_code.c:3307: 	int cap = ((unit)->pClassData->maxDef); //return cap;
	ldr	r5, [r0, #4]	@ _1, unit_14(D)->pClassData
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, [r3]	@ RandBitflags.54_27, RandBitflags
@ Patches/../C_code.c:3307: 	int cap = ((unit)->pClassData->maxDef); //return cap;
	ldrsb	r4, [r5, r4]	@ cap,* cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldrh	r3, [r3]	@ *RandBitflags.54_27, *RandBitflags.54_27
	lsls	r1, r1, #1	@ tmp148, tmp148,
@ Patches/../C_code.c:3306: int GetUnitMaxDef(struct Unit* unit) { 
	movs	r2, r0	@ unit, tmp195
	sub	sp, sp, #28	@,,
@ Patches/../C_code.c:3308: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	movs	r0, r4	@ <retval>, cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	tst	r3, r1	@ *RandBitflags.54_27, tmp148
	beq	.L2184		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r2]	@ MEM[(const struct CharacterData * *)unit_14(D)], MEM[(const struct CharacterData * *)unit_14(D)]
	ldrb	r1, [r2, #4]	@ tmp154,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r6, .L2202+4	@ tmp152,
	lsls	r1, r1, #1	@ tmp155, tmp154,
@ Patches/../C_code.c:3308: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	ldrb	r2, [r1, r6]	@ tmp156, CharExceptions
	cmp	r2, #0	@ tmp156,
	bne	.L2184		@,
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	lsls	r3, r3, #23	@ tmp161, *RandBitflags.54_27,
	lsrs	r3, r3, #29	@ _41, tmp161,
	subs	r2, r3, #2	@ tmp163, _41,
	lsls	r2, r2, #24	@ tmp167, tmp163,
	lsrs	r2, r2, #24	@ tmp166, tmp167,
	cmp	r2, #4	@ tmp166,
	bhi	.L2194		@,
	lsls	r6, r3, #4	@ tmp169, _41,
	subs	r6, r6, r3	@ tmp170, tmp169, _41
	subs	r6, r6, #30	@ result,
.L2186:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r7, .L2202+8	@ tmp194,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r0, [r7]	@ <retval>, maxStat
	cmp	r0, r6	@ <retval>, result
	ble	.L2187		@,
	movs	r0, r6	@ <retval>, result
.L2187:
@ Patches/../C_code.c:3310: 	if (max != (-1)) { return max; } 
	adds	r3, r0, #1	@ tmp200, <retval>,
	bne	.L2184		@,
@ Patches/../C_code.c:3311: 	int noise[4] = {0, 0, 0, 0};  
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L2202+12	@ tmp175,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:3312: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r5, #4]	@ tmp179,
	str	r3, [sp, #8]	@ tmp179, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp181,
	movs	r2, #47	@,
	str	r3, [sp]	@ tmp181,
	movs	r0, r4	@, cap
	adds	r3, r3, #1	@,
	add	r1, sp, #8	@ tmp204,,
	bl	HashPercent		@
@ Patches/../C_code.c:3314: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 43); } 
	asrs	r3, r4, #1	@ tmp184, cap,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r5, r0	@ result, tmp196
@ Patches/../C_code.c:3314: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 43); } 
	cmp	r3, r0	@ tmp184, result
	ble	.L2188		@,
@ Patches/../C_code.c:3314: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 43); } 
	lsrs	r1, r4, #31	@ tmp187, cap,
	adds	r1, r1, r4	@ tmp188, tmp187, cap
	movs	r3, #43	@,
	movs	r0, r4	@, cap
	asrs	r1, r1, #1	@ tmp189, tmp188,
	add	r2, sp, #8	@ tmp205,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3314: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 43); } 
	adds	r5, r5, r0	@ result, result, tmp197
.L2188:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r3, [r7]	@ result, maxStat
	cmp	r3, r6	@ result, result
	bgt	.L2199		@,
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	beq	.L2200		@,
.L2190:
@ Patches/../C_code.c:3315: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r5	@ <retval>, result
	cmp	r5, r3	@ <retval>, result
	bgt	.L2201		@,
.L2184:
@ Patches/../C_code.c:3317: } 
	add	sp, sp, #28	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2194:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r6, #1	@ result,
	rsbs	r6, r6, #0	@ result, result
	b	.L2186		@
.L2201:
@ Patches/../C_code.c:3315: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r3	@ <retval>, result
	b	.L2184		@
.L2199:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	movs	r3, r6	@ result, result
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	bne	.L2190		@,
.L2200:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r3, #31	@ result,
	b	.L2190		@
.L2203:
	.align	2
.L2202:
	.word	RandBitflags
	.word	CharExceptions
	.word	maxStat
	.word	memset
	.size	GetUnitMaxDef, .-GetUnitMaxDef
	.align	1
	.p2align 2,,3
	.global	GetUnitMaxRes
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMaxRes, %function
GetUnitMaxRes:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:3320: 	int cap = ((unit)->pClassData->maxRes); //return cap;
	movs	r4, #24	@ cap,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	movs	r1, #224	@ tmp148,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, .L2222	@ tmp144,
@ Patches/../C_code.c:3320: 	int cap = ((unit)->pClassData->maxRes); //return cap;
	ldr	r5, [r0, #4]	@ _1, unit_14(D)->pClassData
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldr	r3, [r3]	@ RandBitflags.54_27, RandBitflags
@ Patches/../C_code.c:3320: 	int cap = ((unit)->pClassData->maxRes); //return cap;
	ldrsb	r4, [r5, r4]	@ cap,* cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	ldrh	r3, [r3]	@ *RandBitflags.54_27, *RandBitflags.54_27
	lsls	r1, r1, #1	@ tmp148, tmp148,
@ Patches/../C_code.c:3319: int GetUnitMaxRes(struct Unit* unit) { 
	movs	r2, r0	@ unit, tmp195
	sub	sp, sp, #28	@,,
@ Patches/../C_code.c:3321: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	movs	r0, r4	@ <retval>, cap
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	tst	r3, r1	@ *RandBitflags.54_27, tmp148
	beq	.L2204		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r2]	@ MEM[(const struct CharacterData * *)unit_14(D)], MEM[(const struct CharacterData * *)unit_14(D)]
	ldrb	r1, [r2, #4]	@ tmp154,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r6, .L2222+4	@ tmp152,
	lsls	r1, r1, #1	@ tmp155, tmp154,
@ Patches/../C_code.c:3321: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	ldrb	r2, [r1, r6]	@ tmp156, CharExceptions
	cmp	r2, #0	@ tmp156,
	bne	.L2204		@,
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	lsls	r3, r3, #23	@ tmp161, *RandBitflags.54_27,
	lsrs	r3, r3, #29	@ _41, tmp161,
	subs	r2, r3, #2	@ tmp163, _41,
	lsls	r2, r2, #24	@ tmp167, tmp163,
	lsrs	r2, r2, #24	@ tmp166, tmp167,
	cmp	r2, #4	@ tmp166,
	bhi	.L2214		@,
	lsls	r6, r3, #4	@ tmp169, _41,
	subs	r6, r6, r3	@ tmp170, tmp169, _41
	subs	r6, r6, #30	@ result,
.L2206:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r7, .L2222+8	@ tmp194,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r0, [r7]	@ <retval>, maxStat
	cmp	r0, r6	@ <retval>, result
	ble	.L2207		@,
	movs	r0, r6	@ <retval>, result
.L2207:
@ Patches/../C_code.c:3323: 	if (max != (-1)) { return max; } 
	adds	r3, r0, #1	@ tmp200, <retval>,
	bne	.L2204		@,
@ Patches/../C_code.c:3324: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L2222+12	@ tmp175,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:3325: 	noise[0] = unit->pClassData->number; 
	ldrb	r3, [r5, #4]	@ tmp179,
	str	r3, [sp, #8]	@ tmp179, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp181,
	movs	r2, #57	@,
	str	r3, [sp]	@ tmp181,
	movs	r0, r4	@, cap
	adds	r3, r3, #1	@,
	add	r1, sp, #8	@ tmp204,,
	bl	HashPercent		@
@ Patches/../C_code.c:3327: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 53); } 
	asrs	r3, r4, #1	@ tmp184, cap,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r5, r0	@ result, tmp196
@ Patches/../C_code.c:3327: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 53); } 
	cmp	r3, r0	@ tmp184, result
	ble	.L2208		@,
@ Patches/../C_code.c:3327: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 53); } 
	lsrs	r1, r4, #31	@ tmp187, cap,
	adds	r1, r1, r4	@ tmp188, tmp187, cap
	movs	r3, #53	@,
	movs	r0, r4	@, cap
	asrs	r1, r1, #1	@ tmp189, tmp188,
	add	r2, sp, #8	@ tmp205,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3327: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 53); } 
	adds	r5, r5, r0	@ result, result, tmp197
.L2208:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r3, [r7]	@ result, maxStat
	cmp	r3, r6	@ result, result
	bgt	.L2219		@,
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	beq	.L2220		@,
.L2210:
@ Patches/../C_code.c:3328: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r5	@ <retval>, result
	cmp	r5, r3	@ <retval>, result
	bgt	.L2221		@,
.L2204:
@ Patches/../C_code.c:3330: } 
	add	sp, sp, #28	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2214:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r6, #1	@ result,
	rsbs	r6, r6, #0	@ result, result
	b	.L2206		@
.L2221:
@ Patches/../C_code.c:3328: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r3	@ <retval>, result
	b	.L2204		@
.L2219:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	movs	r3, r6	@ result, result
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp201, result,
	bne	.L2210		@,
.L2220:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r3, #31	@ result,
	b	.L2210		@
.L2223:
	.align	2
.L2222:
	.word	RandBitflags
	.word	CharExceptions
	.word	maxStat
	.word	memset
	.size	GetUnitMaxRes, .-GetUnitMaxRes
	.align	1
	.p2align 2,,3
	.global	GetUnitMaxLck
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMaxLck, %function
GetUnitMaxLck:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	ldr	r3, .L2243	@ tmp143,
	ldr	r3, [r3]	@ RandBitflags.134_26, RandBitflags
	ldrh	r1, [r3]	@ *RandBitflags.134_26, *RandBitflags.134_26
@ Patches/../C_code.c:3332: int GetUnitMaxLck(struct Unit* unit) { 
	push	{lr}	@
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	lsls	r2, r1, #23	@ tmp148, *RandBitflags.134_26,
	lsrs	r2, r2, #29	@ _27, tmp148,
	subs	r3, r2, #2	@ tmp150, _27,
	lsls	r3, r3, #24	@ tmp154, tmp150,
@ Patches/../C_code.c:3332: int GetUnitMaxLck(struct Unit* unit) { 
	movs	r5, r0	@ unit, tmp196
	sub	sp, sp, #24	@,,
	lsrs	r3, r3, #24	@ tmp153, tmp154,
	cmp	r3, #4	@ tmp153,
	bhi	.L2233		@,
	lsls	r4, r2, #4	@ tmp156, _27,
	subs	r4, r4, r2	@ tmp157, tmp156, _27
	subs	r4, r4, #30	@ result,
.L2225:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r6, .L2243+4	@ tmp194,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r0, [r6]	@ <retval>, maxStat
	cmp	r0, r4	@ <retval>, result
	ble	.L2226		@,
	movs	r0, r4	@ <retval>, result
.L2226:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r0, #1	@ tmp201, <retval>,
	beq	.L2234		@,
@ Patches/../C_code.c:2151: 	int result = GetGeneralStatCap(); 
	movs	r7, r0	@ result, <retval>
.L2227:
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	movs	r3, #224	@ tmp162,
	lsls	r3, r3, #1	@ tmp162, tmp162,
@ Patches/../C_code.c:1169: 	if (!RandBitflags->caps) { return false; } 
	tst	r1, r3	@ *RandBitflags.134_26, tmp162
	beq	.L2236		@,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r5]	@ MEM[(const struct CharacterData * *)unit_13(D)], MEM[(const struct CharacterData * *)unit_13(D)]
	ldrb	r2, [r2, #4]	@ tmp168,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L2243+8	@ tmp166,
	lsls	r2, r2, #1	@ tmp169, tmp168,
@ Patches/../C_code.c:3334: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	ldrb	r3, [r2, r3]	@ tmp170, CharExceptions
	mov	r8, r3	@ tmp170, tmp170
	cmp	r3, #0	@ tmp170,
	bne	.L2236		@,
@ Patches/../C_code.c:3336: 	if (max != (-1)) { return max; } 
	adds	r3, r0, #1	@ tmp202, <retval>,
	beq	.L2240		@,
.L2224:
@ Patches/../C_code.c:3343: } 
	add	sp, sp, #24	@,,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2233:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r4, #1	@ result,
	rsbs	r4, r4, #0	@ result, result
	b	.L2225		@
.L2240:
@ Patches/../C_code.c:3337: 	int noise[4] = {0, 0, 0, 0}; 
	movs	r2, #12	@,
	movs	r1, #0	@,
	ldr	r3, .L2243+12	@ tmp174,
	add	r0, sp, #12	@,,
	bl	.L14		@
@ Patches/../C_code.c:3338: 	noise[0] = unit->pClassData->number; 
	ldr	r3, [r5, #4]	@ unit_13(D)->pClassData, unit_13(D)->pClassData
	ldrb	r3, [r3, #4]	@ tmp179,
	str	r3, [sp, #8]	@ tmp179, noise[0]
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	mov	r3, r8	@ tmp170, tmp170
	movs	r2, #67	@,
	str	r3, [sp]	@ tmp170,
	movs	r0, r7	@, result
	movs	r3, #1	@,
	add	r1, sp, #8	@ tmp209,,
	bl	HashPercent		@
@ Patches/../C_code.c:3340: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 63); } 
	asrs	r3, r7, #1	@ tmp184, result,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r5, r0	@ result, tmp197
@ Patches/../C_code.c:3340: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 63); } 
	cmp	r3, r0	@ tmp184, result
	ble	.L2229		@,
@ Patches/../C_code.c:3340: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 63); } 
	lsrs	r1, r7, #31	@ tmp187, result,
	adds	r1, r1, r7	@ tmp188, tmp187, result
	movs	r3, #63	@,
	movs	r0, r7	@, result
	asrs	r1, r1, #1	@ tmp189, tmp188,
	add	r2, sp, #8	@ tmp210,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3340: 	if (result < (cap >> 1)) { result += HashByte_Global(cap, (cap/2), noise, 63); } 
	adds	r5, r5, r0	@ result, result, tmp198
.L2229:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r3, [r6]	@ result, maxStat
	cmp	r3, r4	@ result, result
	bgt	.L2241		@,
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp203, result,
	beq	.L2242		@,
.L2231:
@ Patches/../C_code.c:3341: 	if (result > GetGlobalStatCap()) { result = GetGlobalStatCap(); } 
	movs	r0, r5	@ <retval>, result
	cmp	r5, r3	@ <retval>, result
	ble	.L2224		@,
	movs	r0, r3	@ <retval>, result
	b	.L2224		@
.L2236:
@ Patches/../C_code.c:3334: 	if (!ShouldRandomizeStatCaps(unit)) { return cap; } 
	movs	r0, r7	@ <retval>, result
	b	.L2224		@
.L2234:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	movs	r7, #30	@ result,
	b	.L2227		@
.L2241:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	movs	r3, r4	@ result, result
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r2, r3, #1	@ tmp203, result,
	bne	.L2231		@,
.L2242:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r3, #31	@ result,
	b	.L2231		@
.L2244:
	.align	2
.L2243:
	.word	RandBitflags
	.word	maxStat
	.word	CharExceptions
	.word	memset
	.size	GetUnitMaxLck, .-GetUnitMaxLck
	.align	1
	.p2align 2,,3
	.global	NewGetStatIncrease
	.syntax unified
	.code	16
	.thumb_func
	.type	NewGetStatIncrease, %function
NewGetStatIncrease:
	@ Function supports interworking.
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	movs	r4, r0	@ growth, tmp170
@ Patches/../C_code.c:3357:     int result = 0;
	movs	r5, #0	@ <retval>,
@ Patches/../C_code.c:3356: int NewGetStatIncrease(int growth, int noise[], int level, int offset, int useRN) {
	push	{lr}	@
@ Patches/../C_code.c:3359:     while (growth > 100) {
	cmp	r0, #100	@ growth,
	ble	.L2246		@,
.L2247:
@ Patches/../C_code.c:3361:         growth -= 100;
	subs	r4, r4, #100	@ growth,
@ Patches/../C_code.c:3360:         result++;
	adds	r5, r5, #1	@ <retval>,
@ Patches/../C_code.c:3359:     while (growth > 100) {
	cmp	r4, #100	@ growth,
	bgt	.L2247		@,
.L2246:
@ Patches/../C_code.c:3365: 	if ((RandBitflags->levelups == 2)) { 
	ldr	r0, .L2259	@ tmp136,
	ldr	r0, [r0]	@ RandBitflags, RandBitflags
	ldrb	r6, [r0]	@ *RandBitflags.207_1, *RandBitflags.207_1
	movs	r0, #48	@ tmp142,
	ands	r0, r6	@ _3, *RandBitflags.207_1
@ Patches/../C_code.c:3365: 	if ((RandBitflags->levelups == 2)) { 
	cmp	r0, #32	@ _3,
	beq	.L2256		@,
@ Patches/../C_code.c:3376: 	if (!(RandBitflags->levelups)) { if (Roll1RN(growth)) { // 50 
	cmp	r0, #0	@ _3,
	beq	.L2257		@,
@ Patches/../C_code.c:3374: 	offset += (level*15) + level; 
	lsls	r2, r2, #4	@ tmp152, level,
@ Patches/../C_code.c:3374: 	offset += (level*15) + level; 
	adds	r3, r2, r3	@ offset, tmp152, offset
@ Patches/../C_code.c:3378: 	else if (HashByte_Global(growth, 100, noise, offset) >= (100 - growth)) {
	movs	r0, r4	@, growth
	movs	r2, r1	@, noise
	movs	r1, #100	@,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3378: 	else if (HashByte_Global(growth, 100, noise, offset) >= (100 - growth)) {
	movs	r3, #100	@ tmp156,
	subs	r3, r3, r4	@ tmp157, tmp156, growth
@ Patches/../C_code.c:3380: 	result++; } 
	asrs	r2, r0, #31	@ tmp166, tmp154,
	lsrs	r1, r3, #31	@ tmp167, tmp157,
	cmp	r0, r3	@ tmp154, tmp157
	adcs	r2, r2, r1	@ tmp165, tmp166, tmp167
	adds	r5, r5, r2	@ <retval>, <retval>, tmp165
.L2245:
@ Patches/../C_code.c:3384: }
	movs	r0, r5	@, <retval>
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2257:
@ Patches/../C_code.c:3376: 	if (!(RandBitflags->levelups)) { if (Roll1RN(growth)) { // 50 
	ldr	r3, .L2259+4	@ tmp149,
	movs	r0, r4	@, growth
	bl	.L14		@
@ Patches/../C_code.c:3377: 	result++; } }
	subs	r3, r0, #1	@ tmp163, tmp176
	sbcs	r0, r0, r3	@ tmp162, tmp176, tmp163
	adds	r5, r5, r0	@ <retval>, <retval>, tmp162
	b	.L2245		@
.L2256:
@ Patches/../C_code.c:3366: 		if (level < 1) { level = 1; } 
	cmp	r2, #0	@ level,
	ble	.L2258		@,
.L2249:
@ Patches/../C_code.c:3368: 		if (Div1((growth * (level)), 100) < Div1(((growth * level+1) + growth), 100)) { 
	movs	r6, r4	@ _4, growth
	muls	r6, r2	@ _4, level
	ldr	r3, .L2259+8	@ tmp145,
	movs	r1, #100	@,
	movs	r0, r6	@, _4
	mov	r8, r3	@ tmp145, tmp145
	bl	.L14		@
@ Patches/../C_code.c:3368: 		if (Div1((growth * (level)), 100) < Div1(((growth * level+1) + growth), 100)) { 
	adds	r6, r6, #1	@ tmp146,
@ Patches/../C_code.c:3368: 		if (Div1((growth * (level)), 100) < Div1(((growth * level+1) + growth), 100)) { 
	movs	r7, r0	@ _5, tmp174
@ Patches/../C_code.c:3368: 		if (Div1((growth * (level)), 100) < Div1(((growth * level+1) + growth), 100)) { 
	movs	r1, #100	@,
	adds	r0, r6, r4	@ tmp147, tmp146, growth
	bl	.L179		@
@ Patches/../C_code.c:3368: 		if (Div1((growth * (level)), 100) < Div1(((growth * level+1) + growth), 100)) { 
	cmp	r7, r0	@ _5, tmp175
	bge	.L2245		@,
@ Patches/../C_code.c:3369: 			result++; 
	adds	r5, r5, #1	@ <retval>,
	b	.L2245		@
.L2258:
@ Patches/../C_code.c:3366: 		if (level < 1) { level = 1; } 
	movs	r2, #1	@ level,
	b	.L2249		@
.L2260:
	.align	2
.L2259:
	.word	RandBitflags
	.word	Roll1RN
	.word	Div1
	.size	NewGetStatIncrease, .-NewGetStatIncrease
	.align	1
	.p2align 2,,3
	.global	UnitLevelUp
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitLevelUp, %function
UnitLevelUp:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 96
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r7, r10	@,
	mov	lr, fp	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
	push	{r5, r6, r7, lr}	@
@ Patches/../C_code.c:3389:     if (unit->level != 20) {
	movs	r7, #8	@ _1,
	ldrsb	r7, [r0, r7]	@ _1,* _1
@ Patches/../C_code.c:3388: void UnitLevelUp(struct Unit* unit) {
	movs	r4, r0	@ unit, tmp367
	sub	sp, sp, #108	@,,
@ Patches/../C_code.c:3389:     if (unit->level != 20) {
	cmp	r7, #20	@ _1,
	bne	.LCB13187	@
	b	.L2261	@long jump	@
.LCB13187:
@ Patches/../C_code.c:3394:         unit->level++;
	adds	r7, r7, #1	@ tmp247,
	lsls	r7, r7, #24	@ tmp248, tmp247,
	asrs	r7, r7, #24	@ _4, tmp248,
	strb	r7, [r0, #8]	@ _4, unit_168(D)->level
@ Patches/../C_code.c:3396: 		int noise[4] = {0, 0, 0, 0}; 
	ldr	r3, .L2364	@ tmp253,
	movs	r2, #12	@,
	movs	r1, #0	@,
	add	r0, sp, #92	@,,
	bl	.L14		@
@ Patches/../C_code.c:3397: 		noise[0] = unit->pCharacterData->number;
	ldr	r3, [r4]	@ unit_168(D)->pCharacterData, unit_168(D)->pCharacterData
	ldrb	r3, [r3, #4]	@ tmp258,
	str	r3, [sp, #88]	@ tmp258, noise[0]
@ Patches/../C_code.c:3398: 		int level = unit->level + (((unit->pClassData->attributes & CA_PROMOTED) != 0)*20); 
	ldr	r3, [r4, #4]	@ unit_168(D)->pClassData, unit_168(D)->pClassData
@ Patches/../C_code.c:3398: 		int level = unit->level + (((unit->pClassData->attributes & CA_PROMOTED) != 0)*20); 
	ldr	r3, [r3, #40]	@ _9->attributes, _9->attributes
@ Patches/../C_code.c:3398: 		int level = unit->level + (((unit->pClassData->attributes & CA_PROMOTED) != 0)*20); 
	movs	r6, r7	@ _8, _4
@ Patches/../C_code.c:3398: 		int level = unit->level + (((unit->pClassData->attributes & CA_PROMOTED) != 0)*20); 
	lsls	r3, r3, #23	@ tmp397, _9->attributes,
	bpl	.L2263		@,
@ Patches/../C_code.c:3398: 		int level = unit->level + (((unit->pClassData->attributes & CA_PROMOTED) != 0)*20); 
	adds	r6, r6, #20	@ _8,
.L2263:
@ Patches/../C_code.c:3401:         if (unit->level == 20) { 
	subs	r7, r7, #20	@ tmp268,
	rsbs	r3, r7, #0	@ tmp269, tmp268
	adcs	r7, r7, r3	@ tmp267, tmp268, tmp269
@ Patches/../C_code.c:3399: 		int useRN = !(IsAnythingRandomized());
	bl	IsAnythingRandomized		@
@ Patches/../C_code.c:3401:         if (unit->level == 20) { 
	rsbs	r7, r7, #0	@ tmp270, tmp267
@ Patches/../C_code.c:3399: 		int useRN = !(IsAnythingRandomized());
	rsbs	r5, r0, #0	@ tmp264, tmp368
	adcs	r5, r5, r0	@ tmp264, tmp368
@ Patches/../C_code.c:3406: 		int hpGrowth = GetUnitHPGrowth(unit, true);
	movs	r1, #1	@,
	strb	r7, [r4, #9]	@ tmp270, MEM <struct Unit> [(void *)unit_168(D)].exp
	movs	r0, r4	@, unit
	bl	GetUnitHPGrowth		@
@ Patches/../C_code.c:3407: 		int powGrowth = GetUnitPowGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3406: 		int hpGrowth = GetUnitHPGrowth(unit, true);
	movs	r7, r0	@ hpGrowth, tmp369
	str	r0, [sp, #76]	@ hpGrowth, %sfp
@ Patches/../C_code.c:3407: 		int powGrowth = GetUnitPowGrowth(unit, true);
	movs	r0, r4	@, unit
	bl	GetUnitPowGrowth		@
@ Patches/../C_code.c:3408: 		int sklGrowth = GetUnitSklGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3407: 		int powGrowth = GetUnitPowGrowth(unit, true);
	str	r0, [sp, #36]	@ tmp370, %sfp
@ Patches/../C_code.c:3408: 		int sklGrowth = GetUnitSklGrowth(unit, true);
	movs	r0, r4	@, unit
	bl	GetUnitSklGrowth		@
@ Patches/../C_code.c:3409: 		int spdGrowth = GetUnitSpdGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3408: 		int sklGrowth = GetUnitSklGrowth(unit, true);
	str	r0, [sp, #44]	@ tmp371, %sfp
@ Patches/../C_code.c:3409: 		int spdGrowth = GetUnitSpdGrowth(unit, true);
	movs	r0, r4	@, unit
	bl	GetUnitSpdGrowth		@
@ Patches/../C_code.c:3410: 		int defGrowth = GetUnitDefGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3409: 		int spdGrowth = GetUnitSpdGrowth(unit, true);
	str	r0, [sp, #48]	@ tmp372, %sfp
@ Patches/../C_code.c:3410: 		int defGrowth = GetUnitDefGrowth(unit, true);
	movs	r0, r4	@, unit
	bl	GetUnitDefGrowth		@
@ Patches/../C_code.c:3411: 		int resGrowth = GetUnitResGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3410: 		int defGrowth = GetUnitDefGrowth(unit, true);
	str	r0, [sp, #52]	@ tmp373, %sfp
@ Patches/../C_code.c:3411: 		int resGrowth = GetUnitResGrowth(unit, true);
	movs	r0, r4	@, unit
	bl	GetUnitResGrowth		@
@ Patches/../C_code.c:3412: 		int lckGrowth = GetUnitLckGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3411: 		int resGrowth = GetUnitResGrowth(unit, true);
	str	r0, [sp, #56]	@ tmp374, %sfp
@ Patches/../C_code.c:3412: 		int lckGrowth = GetUnitLckGrowth(unit, true);
	movs	r0, r4	@, unit
	bl	GetUnitLckGrowth		@
@ Patches/../C_code.c:3414: 		int maxHP = CallGetMaxHP(unit); 
	ldr	r3, .L2364+4	@ tmp272,
@ Patches/../C_code.c:3412: 		int lckGrowth = GetUnitLckGrowth(unit, true);
	str	r0, [sp, #60]	@ tmp375, %sfp
@ Patches/../C_code.c:3414: 		int maxHP = CallGetMaxHP(unit); 
	movs	r0, r4	@, unit
	bl	.L14		@
	str	r0, [sp, #68]	@ maxHP, %sfp
	mov	r9, r0	@ maxHP, tmp376
@ Patches/../C_code.c:3415: 		int maxPow = GetUnitMaxPow(unit); 
	movs	r0, r4	@, unit
	bl	GetUnitMaxPow		@
	str	r0, [sp, #20]	@ tmp377, %sfp
@ Patches/../C_code.c:3416: 		int maxSkl = GetUnitMaxSkl(unit); 
	movs	r0, r4	@, unit
	bl	GetUnitMaxSkl		@
	str	r0, [sp, #24]	@ tmp378, %sfp
@ Patches/../C_code.c:3417: 		int maxSpd = GetUnitMaxSpd(unit); 
	movs	r0, r4	@, unit
	bl	GetUnitMaxSpd		@
	str	r0, [sp, #28]	@ tmp379, %sfp
@ Patches/../C_code.c:3418: 		int maxDef = GetUnitMaxDef(unit); 
	movs	r0, r4	@, unit
	bl	GetUnitMaxDef		@
	str	r0, [sp, #32]	@ tmp380, %sfp
@ Patches/../C_code.c:3419: 		int maxRes = GetUnitMaxRes(unit); 
	movs	r0, r4	@, unit
	bl	GetUnitMaxRes		@
	str	r0, [sp, #40]	@ tmp381, %sfp
@ Patches/../C_code.c:3420: 		int maxLck = GetUnitMaxLck(unit); 
	movs	r0, r4	@, unit
	bl	GetUnitMaxLck		@
@ Patches/../C_code.c:3422:         hpGain  = NewGetStatIncrease(hpGrowth, noise, level, 1, useRN); 
	movs	r3, #1	@,
@ Patches/../C_code.c:3420: 		int maxLck = GetUnitMaxLck(unit); 
	str	r0, [sp, #64]	@ tmp382, %sfp
@ Patches/../C_code.c:3422:         hpGain  = NewGetStatIncrease(hpGrowth, noise, level, 1, useRN); 
	movs	r2, r6	@, _8
	movs	r0, r7	@, hpGrowth
	str	r5, [sp]	@ tmp264,
	add	r1, sp, #88	@ tmp428,,
	bl	NewGetStatIncrease		@
	mov	r8, r0	@ hpGain, tmp383
@ Patches/../C_code.c:3423: 		if (hpGain && (unit->maxHP + hpGain) <= maxHP)
	cmp	r0, #0	@ hpGain,
	beq	.L2264		@,
@ Patches/../C_code.c:3423: 		if (hpGain && (unit->maxHP + hpGain) <= maxHP)
	movs	r2, #18	@ tmp274,
@ Patches/../C_code.c:3424:         totalGain += hpGain; else hpGain = 0; 
	mov	r0, r9	@ maxHP, maxHP
@ Patches/../C_code.c:3423: 		if (hpGain && (unit->maxHP + hpGain) <= maxHP)
	ldrsb	r2, [r4, r2]	@ tmp274,
@ Patches/../C_code.c:3423: 		if (hpGain && (unit->maxHP + hpGain) <= maxHP)
	add	r2, r2, r8	@ tmp275, hpGain
@ Patches/../C_code.c:3424:         totalGain += hpGain; else hpGain = 0; 
	lsrs	r3, r2, #31	@ tmp361, tmp275,
	asrs	r1, r0, #31	@ tmp362, maxHP,
	cmp	r0, r2	@ maxHP, tmp275
	adcs	r3, r3, r1	@ tmp360, tmp361, tmp362
	mov	r2, r8	@ hpGain, hpGain
	rsbs	r3, r3, #0	@ tmp363, tmp360
	ands	r2, r3	@ hpGain, tmp363
	mov	r8, r2	@ hpGain, hpGain
.L2264:
@ Patches/../C_code.c:3426:         powGain = NewGetStatIncrease(powGrowth, noise, level, 2, useRN); 
	movs	r2, r6	@, _8
	movs	r3, #2	@,
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #36]	@, %sfp
	add	r1, sp, #88	@ tmp433,,
	bl	NewGetStatIncrease		@
	mov	r7, r8	@ totalGain, hpGain
	subs	r2, r0, #0	@ powGain, tmp384,
	str	r0, [sp, #16]	@ powGain, %sfp
@ Patches/../C_code.c:3427: 		if (powGain && ((unit->pow + powGain) <= maxPow))
	beq	.L2265		@,
@ Patches/../C_code.c:3427: 		if (powGain && ((unit->pow + powGain) <= maxPow))
	movs	r3, #20	@ tmp277,
@ Patches/../C_code.c:3427: 		if (powGain && ((unit->pow + powGain) <= maxPow))
	mov	ip, r0	@ powGain, powGain
@ Patches/../C_code.c:3427: 		if (powGain && ((unit->pow + powGain) <= maxPow))
	ldrsb	r3, [r4, r3]	@ tmp277,
@ Patches/../C_code.c:3427: 		if (powGain && ((unit->pow + powGain) <= maxPow))
	ldr	r1, [sp, #20]	@ maxPow, %sfp
@ Patches/../C_code.c:3427: 		if (powGain && ((unit->pow + powGain) <= maxPow))
	add	r3, r3, ip	@ tmp278, powGain
@ Patches/../C_code.c:3427: 		if (powGain && ((unit->pow + powGain) <= maxPow))
	cmp	r3, r1	@ tmp278, maxPow
	ble	.LCB13309	@
	b	.L2290	@long jump	@
.LCB13309:
@ Patches/../C_code.c:3428:         totalGain += powGain; else powGain = 0; 
	add	r2, r2, r8	@ totalGain, hpGain
	movs	r7, r2	@ totalGain, totalGain
.L2265:
@ Patches/../C_code.c:3430:         sklGain = NewGetStatIncrease(sklGrowth, noise, level, 3, useRN); 
	movs	r3, #3	@,
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #44]	@, %sfp
	add	r1, sp, #88	@ tmp440,,
	bl	NewGetStatIncrease		@
	mov	r9, r0	@ sklGain, tmp385
@ Patches/../C_code.c:3431: 		if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	cmp	r0, #0	@ sklGain,
	beq	.L2266		@,
@ Patches/../C_code.c:3431: 		if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	movs	r3, #21	@ tmp280,
	ldrsb	r3, [r4, r3]	@ tmp280,
@ Patches/../C_code.c:3431: 		if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	ldr	r2, [sp, #24]	@ maxSkl, %sfp
@ Patches/../C_code.c:3431: 		if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	add	r3, r3, r9	@ tmp281, sklGain
@ Patches/../C_code.c:3431: 		if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	cmp	r3, r2	@ tmp281, maxSkl
	ble	.LCB13328	@
	b	.L2291	@long jump	@
.LCB13328:
@ Patches/../C_code.c:3432:         totalGain += sklGain; else sklGain = 0; 
	add	r7, r7, r9	@ totalGain, sklGain
.L2266:
@ Patches/../C_code.c:3434:         spdGain = NewGetStatIncrease(spdGrowth, noise, level, 4, useRN); 
	movs	r3, #4	@,
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #48]	@, %sfp
	add	r1, sp, #88	@ tmp444,,
	bl	NewGetStatIncrease		@
	mov	r10, r0	@ spdGain, tmp386
@ Patches/../C_code.c:3435: 		if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	cmp	r0, #0	@ spdGain,
	beq	.L2267		@,
@ Patches/../C_code.c:3435: 		if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	movs	r3, #22	@ tmp283,
	ldrsb	r3, [r4, r3]	@ tmp283,
@ Patches/../C_code.c:3435: 		if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	ldr	r2, [sp, #28]	@ maxSpd, %sfp
@ Patches/../C_code.c:3435: 		if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	add	r3, r3, r10	@ tmp284, spdGain
@ Patches/../C_code.c:3435: 		if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	cmp	r3, r2	@ tmp284, maxSpd
	ble	.LCB13346	@
	b	.L2292	@long jump	@
.LCB13346:
@ Patches/../C_code.c:3436:         totalGain += spdGain; else spdGain = 0; 
	add	r7, r7, r10	@ totalGain, spdGain
.L2267:
@ Patches/../C_code.c:3438:         defGain = NewGetStatIncrease(defGrowth, noise, level, 5, useRN); 
	movs	r3, #5	@,
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #52]	@, %sfp
	add	r1, sp, #88	@ tmp448,,
	bl	NewGetStatIncrease		@
	mov	fp, r0	@ defGain, tmp387
@ Patches/../C_code.c:3439: 		if (defGain && ((unit->def + defGain) <= maxDef))
	cmp	r0, #0	@ defGain,
	beq	.L2268		@,
@ Patches/../C_code.c:3439: 		if (defGain && ((unit->def + defGain) <= maxDef))
	movs	r3, #23	@ tmp286,
	ldrsb	r3, [r4, r3]	@ tmp286,
@ Patches/../C_code.c:3439: 		if (defGain && ((unit->def + defGain) <= maxDef))
	ldr	r2, [sp, #32]	@ maxDef, %sfp
@ Patches/../C_code.c:3439: 		if (defGain && ((unit->def + defGain) <= maxDef))
	add	r3, r3, fp	@ tmp287, defGain
@ Patches/../C_code.c:3439: 		if (defGain && ((unit->def + defGain) <= maxDef))
	cmp	r3, r2	@ tmp287, maxDef
	ble	.LCB13364	@
	b	.L2293	@long jump	@
.LCB13364:
@ Patches/../C_code.c:3440:         totalGain += defGain; else defGain = 0; 
	add	r7, r7, fp	@ totalGain, defGain
.L2268:
@ Patches/../C_code.c:3442:         resGain = NewGetStatIncrease(resGrowth, noise, level, 6, useRN); 
	movs	r3, #6	@,
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #56]	@, %sfp
	add	r1, sp, #88	@ tmp452,,
	bl	NewGetStatIncrease		@
	str	r0, [sp, #8]	@ resGain, %sfp
@ Patches/../C_code.c:3443: 		if (resGain && ((unit->res + resGain) <= maxRes))
	cmp	r0, #0	@ resGain,
	beq	.L2269		@,
@ Patches/../C_code.c:3443: 		if (resGain && ((unit->res + resGain) <= maxRes))
	movs	r3, #24	@ tmp289,
@ Patches/../C_code.c:3443: 		if (resGain && ((unit->res + resGain) <= maxRes))
	mov	ip, r0	@ resGain, resGain
@ Patches/../C_code.c:3443: 		if (resGain && ((unit->res + resGain) <= maxRes))
	ldrsb	r3, [r4, r3]	@ tmp289,
@ Patches/../C_code.c:3443: 		if (resGain && ((unit->res + resGain) <= maxRes))
	ldr	r1, [sp, #40]	@ maxRes, %sfp
@ Patches/../C_code.c:3443: 		if (resGain && ((unit->res + resGain) <= maxRes))
	add	r3, r3, ip	@ tmp290, resGain
@ Patches/../C_code.c:3443: 		if (resGain && ((unit->res + resGain) <= maxRes))
	cmp	r3, r1	@ tmp290, maxRes
	ble	.LCB13383	@
	b	.L2294	@long jump	@
.LCB13383:
@ Patches/../C_code.c:3444:         totalGain += resGain; else resGain = 0; 
	add	r7, r7, ip	@ totalGain, resGain
.L2269:
@ Patches/../C_code.c:3446:         lckGain = NewGetStatIncrease(lckGrowth, noise, level, 7, useRN); 
	movs	r3, #7	@,
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #60]	@, %sfp
	add	r1, sp, #88	@ tmp460,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3447: 		if (lckGain && ((unit->lck + lckGain) <= maxLck))
	cmp	r0, #0	@ lckGain,
	beq	.L2270		@,
@ Patches/../C_code.c:3447: 		if (lckGain && ((unit->lck + lckGain) <= maxLck))
	movs	r3, #25	@ tmp292,
	ldrsb	r3, [r4, r3]	@ tmp292,
@ Patches/../C_code.c:3447: 		if (lckGain && ((unit->lck + lckGain) <= maxLck))
	ldr	r2, [sp, #64]	@ maxLck, %sfp
@ Patches/../C_code.c:3447: 		if (lckGain && ((unit->lck + lckGain) <= maxLck))
	adds	r3, r3, r0	@ tmp293, tmp292, lckGain
@ Patches/../C_code.c:3447: 		if (lckGain && ((unit->lck + lckGain) <= maxLck))
	cmp	r3, r2	@ tmp293, maxLck
	ble	.LCB13400	@
	b	.L2295	@long jump	@
.LCB13400:
@ Patches/../C_code.c:3448:         totalGain += lckGain; else lckGain = 0; 
	adds	r7, r7, r0	@ totalGain, totalGain, lckGain
.L2270:
@ Patches/../C_code.c:3452:         if (totalGain < MinimumStatUps) {
	cmp	r7, #1	@ totalGain,
	bgt	.LCB13405	@
	b	.L2355	@long jump	@
.LCB13405:
.L2271:
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r1, #21	@ pretmp_389,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r2, [sp, #16]	@ powGain, %sfp
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	ldrsb	r1, [r4, r1]	@ pretmp_389,* pretmp_389
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	ip, r2	@ powGain, powGain
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r2, r1	@ _405, pretmp_389
	add	r2, r2, r9	@ _405, sklGain
	movs	r7, r2	@ _405, _405
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r2, #22	@ pretmp_412,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	movs	r3, #20	@ pretmp_365,
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	ldrsb	r2, [r4, r2]	@ pretmp_412,* pretmp_412
	movs	r5, r2	@ pretmp_412, pretmp_412
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldrsb	r3, [r4, r3]	@ pretmp_365,* pretmp_365
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	str	r2, [sp, #12]	@ pretmp_412, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	add	r3, r3, ip	@ tmp358, powGain
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	mov	r2, r10	@ _428, spdGain
	mov	ip, r5	@ pretmp_412, pretmp_412
	add	r2, r2, ip	@ _428, pretmp_412
	str	r2, [sp, #44]	@ _428, %sfp
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	movs	r2, #23	@ pretmp_434,
	ldrsb	r2, [r4, r2]	@ pretmp_434,* pretmp_434
	str	r2, [sp, #36]	@ pretmp_434, %sfp
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	add	r2, r2, fp	@ _450, defGain
	str	r2, [sp, #48]	@ _450, %sfp
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	ldr	r5, [sp, #8]	@ _471, %sfp
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	movs	r2, #24	@ pretmp_455,
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	mov	ip, r5	@ _471, _471
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	ldrsb	r2, [r4, r2]	@ pretmp_455,* pretmp_455
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	add	ip, ip, r2	@ _471, pretmp_455
	mov	r5, ip	@ _471, _471
	str	r5, [sp, #52]	@ _471, %sfp
@ Patches/../C_code.c:3447: 		if (lckGain && ((unit->lck + lckGain) <= maxLck))
	movs	r5, #25	@ pretmp_475,
	ldrsb	r5, [r4, r5]	@ pretmp_475,* pretmp_475
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	mov	ip, r5	@ _491, _491
	add	ip, ip, r0	@ _491, lckGain
@ Patches/../C_code.c:3447: 		if (lckGain && ((unit->lck + lckGain) <= maxLck))
	str	r5, [sp, #72]	@ pretmp_475, %sfp
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	mov	r5, ip	@ _491, _491
	str	r5, [sp, #56]	@ _491, %sfp
.L2274:
@ Patches/../C_code.c:3515:         if ((unit->maxHP + hpGain) > maxHP)
	movs	r5, #18	@ _71,
	ldrsb	r5, [r4, r5]	@ _71,* _71
@ Patches/../C_code.c:3515:         if ((unit->maxHP + hpGain) > maxHP)
	ldr	r6, [sp, #68]	@ maxHP, %sfp
@ Patches/../C_code.c:3515:         if ((unit->maxHP + hpGain) > maxHP)
	add	r5, r5, r8	@ tmp357, hpGain
@ Patches/../C_code.c:3515:         if ((unit->maxHP + hpGain) > maxHP)
	cmp	r5, r6	@ tmp357, maxHP
	ble	.L2281		@,
	movs	r5, r6	@ tmp357, maxHP
.L2281:
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r6, [sp, #20]	@ maxPow, %sfp
	cmp	r6, r3	@ maxPow, tmp358
	bge	.L2282		@,
	movs	r3, r6	@ tmp358, maxPow
.L2282:
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	ldr	r6, [sp, #24]	@ maxSkl, %sfp
	cmp	r6, r7	@ maxSkl, _405
	bge	.L2283		@,
@ Patches/../C_code.c:3522:             sklGain = maxSkl - unit->skl;
	subs	r6, r6, r1	@ sklGain, maxSkl, pretmp_389
	mov	r9, r6	@ sklGain, sklGain
.L2283:
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	ldr	r6, [sp, #28]	@ maxSpd, %sfp
	ldr	r7, [sp, #44]	@ _428, %sfp
	cmp	r6, r7	@ maxSpd, _428
	bge	.L2284		@,
@ Patches/../C_code.c:3525:             spdGain = maxSpd - unit->spd;
	ldr	r7, [sp, #12]	@ pretmp_412, %sfp
	subs	r6, r6, r7	@ spdGain, maxSpd, pretmp_412
	mov	r10, r6	@ spdGain, spdGain
.L2284:
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	ldr	r6, [sp, #32]	@ maxDef, %sfp
	ldr	r7, [sp, #48]	@ _450, %sfp
	cmp	r6, r7	@ maxDef, _450
	bge	.L2285		@,
@ Patches/../C_code.c:3528:             defGain = maxDef - unit->def;
	ldr	r7, [sp, #36]	@ pretmp_434, %sfp
	subs	r6, r6, r7	@ defGain, maxDef, pretmp_434
	mov	fp, r6	@ defGain, defGain
.L2285:
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	ldr	r6, [sp, #40]	@ maxRes, %sfp
	ldr	r7, [sp, #52]	@ _471, %sfp
	cmp	r6, r7	@ maxRes, _471
	bge	.L2286		@,
@ Patches/../C_code.c:3531:             resGain = maxRes - unit->res;
	subs	r6, r6, r2	@ resGain, maxRes, pretmp_455
	str	r6, [sp, #8]	@ resGain, %sfp
.L2286:
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	ldr	r6, [sp, #64]	@ maxLck, %sfp
	ldr	r7, [sp, #56]	@ _491, %sfp
	cmp	r6, r7	@ maxLck, _491
	blt	.L2356		@,
.L2287:
@ Patches/../C_code.c:3537:         unit->pow += powGain;
	strb	r3, [r4, #20]	@ tmp358, unit_168(D)->pow
@ Patches/../C_code.c:3540:         unit->def += defGain;
	ldr	r3, [sp, #36]	@ pretmp_434, %sfp
	add	r3, r3, fp	@ pretmp_434, defGain
	strb	r3, [r4, #23]	@ tmp346, unit_168(D)->def
@ Patches/../C_code.c:3541:         unit->res += resGain;
	ldr	r3, [sp, #8]	@ resGain, %sfp
	mov	ip, r3	@ resGain, resGain
@ Patches/../C_code.c:3536:         unit->maxHP += hpGain;
	strb	r5, [r4, #18]	@ tmp357, unit_168(D)->maxHP
@ Patches/../C_code.c:3542:         unit->lck += lckGain;
	ldr	r3, [sp, #72]	@ pretmp_475, %sfp
@ Patches/../C_code.c:3539:         unit->spd += spdGain;
	ldr	r5, [sp, #12]	@ pretmp_412, %sfp
@ Patches/../C_code.c:3538:         unit->skl += sklGain;
	add	r1, r1, r9	@ pretmp_389, sklGain
	strb	r1, [r4, #21]	@ tmp338, unit_168(D)->skl
@ Patches/../C_code.c:3539:         unit->spd += spdGain;
	add	r5, r5, r10	@ pretmp_412, spdGain
@ Patches/../C_code.c:3541:         unit->res += resGain;
	add	r2, r2, ip	@ tmp350, resGain
@ Patches/../C_code.c:3542:         unit->lck += lckGain;
	adds	r1, r3, r0	@ tmp354, pretmp_475, lckGain
@ Patches/../C_code.c:3539:         unit->spd += spdGain;
	strb	r5, [r4, #22]	@ tmp342, unit_168(D)->spd
@ Patches/../C_code.c:3541:         unit->res += resGain;
	strb	r2, [r4, #24]	@ tmp350, unit_168(D)->res
@ Patches/../C_code.c:3542:         unit->lck += lckGain;
	strb	r1, [r4, #25]	@ tmp354, unit_168(D)->lck
.L2261:
@ Patches/../C_code.c:3544: }
	add	sp, sp, #108	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2356:
@ Patches/../C_code.c:3534:             lckGain = maxLck - unit->lck;
	ldr	r0, [sp, #72]	@ pretmp_475, %sfp
	subs	r0, r6, r0	@ lckGain, maxLck, pretmp_475
	b	.L2287		@
.L2365:
	.align	2
.L2364:
	.word	memset
	.word	CallGetMaxHP
.L2355:
	movs	r7, #8	@ ivtmp.1529,
@ Patches/../C_code.c:3465:                 if (hpGain && ((unit->maxHP + hpGain) <= maxHP))
	mov	r9, r4	@ unit, unit
	ldr	r3, [sp, #68]	@ maxHP, %sfp
	asrs	r3, r3, #31	@ tmp365, maxHP,
	str	r3, [sp, #84]	@ tmp365, %sfp
.L2280:
@ Patches/../C_code.c:3463:                 hpGain = NewGetStatIncrease(hpGrowth, noise, level, 8 + (i * 13), useRN); 
	movs	r3, r7	@, ivtmp.1529
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #76]	@, %sfp
	add	r1, sp, #88	@ tmp464,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3454: 				totalGain = 0; 
	movs	r4, #0	@ totalGain,
@ Patches/../C_code.c:3463:                 hpGain = NewGetStatIncrease(hpGrowth, noise, level, 8 + (i * 13), useRN); 
	str	r0, [sp, #80]	@ hpGain, %sfp
@ Patches/../C_code.c:3465:                 if (hpGain && ((unit->maxHP + hpGain) <= maxHP))
	cmp	r0, #0	@ hpGain,
	beq	.L2272		@,
@ Patches/../C_code.c:3465:                 if (hpGain && ((unit->maxHP + hpGain) <= maxHP))
	mov	r3, r9	@ unit, unit
@ Patches/../C_code.c:3465:                 if (hpGain && ((unit->maxHP + hpGain) <= maxHP))
	mov	ip, r0	@ hpGain, hpGain
@ Patches/../C_code.c:3465:                 if (hpGain && ((unit->maxHP + hpGain) <= maxHP))
	ldrb	r3, [r3, #18]	@ tmp295,
	lsls	r3, r3, #24	@ tmp295, tmp295,
	asrs	r3, r3, #24	@ tmp295, tmp295,
@ Patches/../C_code.c:3465:                 if (hpGain && ((unit->maxHP + hpGain) <= maxHP))
	add	r3, r3, ip	@ tmp296, hpGain
@ Patches/../C_code.c:3465:                 if (hpGain && ((unit->maxHP + hpGain) <= maxHP))
	ldr	r2, [sp, #84]	@ tmp365, %sfp
	ldr	r1, [sp, #68]	@ maxHP, %sfp
	lsrs	r4, r3, #31	@ tmp299, tmp296,
	cmp	r1, r3	@ maxHP, tmp296
	adcs	r4, r4, r2	@ totalGain, tmp299, tmp365
.L2272:
@ Patches/../C_code.c:3470:                 powGain = NewGetStatIncrease(powGrowth, noise, level, 9 + (i * 13), useRN); 
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #36]	@, %sfp
	adds	r3, r7, #1	@ tmp301, ivtmp.1529,
	add	r1, sp, #88	@ tmp471,,
	bl	NewGetStatIncrease		@
	str	r0, [sp, #16]	@ powGain, %sfp
@ Patches/../C_code.c:3472:                 if (powGain && ((unit->pow + powGain) <= maxPow))
	cmp	r0, #0	@ powGain,
	beq	.L2273		@,
@ Patches/../C_code.c:3472:                 if (powGain && ((unit->pow + powGain) <= maxPow))
	mov	r3, r9	@ unit, unit
@ Patches/../C_code.c:3472:                 if (powGain && ((unit->pow + powGain) <= maxPow))
	mov	ip, r0	@ powGain, powGain
@ Patches/../C_code.c:3472:                 if (powGain && ((unit->pow + powGain) <= maxPow))
	ldrb	r3, [r3, #20]	@ pretmp_365,
	lsls	r3, r3, #24	@ pretmp_365, pretmp_365,
	asrs	r3, r3, #24	@ pretmp_365, pretmp_365,
@ Patches/../C_code.c:3472:                 if (powGain && ((unit->pow + powGain) <= maxPow))
	ldr	r2, [sp, #20]	@ maxPow, %sfp
@ Patches/../C_code.c:3472:                 if (powGain && ((unit->pow + powGain) <= maxPow))
	add	r3, r3, ip	@ tmp358, powGain
@ Patches/../C_code.c:3472:                 if (powGain && ((unit->pow + powGain) <= maxPow))
	cmp	r3, r2	@ tmp358, maxPow
	bgt	.L2273		@,
@ Patches/../C_code.c:3474: 					if (totalGain >= MinimumStatUps) { 
	cmp	r4, #1	@ totalGain,
	bne	.LCB13597	@
	b	.L2357	@long jump	@
.LCB13597:
@ Patches/../C_code.c:3473: 				{	totalGain++; 
	movs	r4, #1	@ totalGain,
.L2273:
@ Patches/../C_code.c:3477:                 sklGain = NewGetStatIncrease(sklGrowth, noise, level, 10 + (i * 13), useRN); 
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #44]	@, %sfp
	adds	r3, r7, #2	@ tmp303, ivtmp.1529,
	add	r1, sp, #88	@ tmp488,,
	bl	NewGetStatIncrease		@
	mov	r8, r0	@ sklGain, tmp392
@ Patches/../C_code.c:3479:                 if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	cmp	r0, #0	@ sklGain,
	beq	.L2275		@,
@ Patches/../C_code.c:3479:                 if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	mov	r3, r9	@ unit, unit
	movs	r1, #21	@ pretmp_389,
	ldrsb	r1, [r3, r1]	@ pretmp_389,* pretmp_389
@ Patches/../C_code.c:3479:                 if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	ldr	r2, [sp, #24]	@ maxSkl, %sfp
@ Patches/../C_code.c:3479:                 if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	adds	r3, r1, r0	@ _405, pretmp_389, sklGain
@ Patches/../C_code.c:3479:                 if (sklGain && ((unit->skl + sklGain) <= maxSkl))
	cmp	r3, r2	@ _405, maxSkl
	bgt	.L2275		@,
@ Patches/../C_code.c:3481: 					if (totalGain >= MinimumStatUps) { 
	cmp	r4, #1	@ totalGain,
	bne	.LCB13618	@
	b	.L2358	@long jump	@
.LCB13618:
@ Patches/../C_code.c:3480: 				{	totalGain++; 
	movs	r4, #1	@ totalGain,
.L2275:
@ Patches/../C_code.c:3484:                 spdGain = NewGetStatIncrease(spdGrowth, noise, level, 11 + (i * 13), useRN); 
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #48]	@, %sfp
	adds	r3, r7, #3	@ tmp305, ivtmp.1529,
	add	r1, sp, #88	@ tmp505,,
	bl	NewGetStatIncrease		@
	mov	r10, r0	@ spdGain, tmp393
@ Patches/../C_code.c:3486:                 if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	cmp	r0, #0	@ spdGain,
	beq	.L2276		@,
@ Patches/../C_code.c:3486:                 if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #22]	@ pretmp_412,
	lsls	r3, r3, #24	@ pretmp_412, pretmp_412,
	asrs	r3, r3, #24	@ pretmp_412, pretmp_412,
@ Patches/../C_code.c:3486:                 if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	ldr	r1, [sp, #28]	@ maxSpd, %sfp
@ Patches/../C_code.c:3486:                 if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	adds	r2, r3, r0	@ _428, pretmp_412, spdGain
@ Patches/../C_code.c:3486:                 if (spdGain && ((unit->spd + spdGain) <= maxSpd))
	cmp	r2, r1	@ _428, maxSpd
	bgt	.L2276		@,
@ Patches/../C_code.c:3488: 					if (totalGain >= MinimumStatUps) { 
	cmp	r4, #1	@ totalGain,
	bne	.LCB13640	@
	b	.L2359	@long jump	@
.LCB13640:
@ Patches/../C_code.c:3487: 				{	totalGain++; 
	movs	r4, #1	@ totalGain,
.L2276:
@ Patches/../C_code.c:3491:                 defGain = NewGetStatIncrease(defGrowth, noise, level, 12 + (i * 13), useRN); 
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #52]	@, %sfp
	adds	r3, r7, #4	@ tmp307, ivtmp.1529,
	add	r1, sp, #88	@ tmp521,,
	bl	NewGetStatIncrease		@
	mov	fp, r0	@ defGain, tmp394
@ Patches/../C_code.c:3493:                 if (defGain && ((unit->def + defGain) <= maxDef))
	cmp	r0, #0	@ defGain,
	beq	.L2277		@,
@ Patches/../C_code.c:3493:                 if (defGain && ((unit->def + defGain) <= maxDef))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #23]	@ pretmp_434,
	lsls	r3, r3, #24	@ pretmp_434, pretmp_434,
	asrs	r3, r3, #24	@ pretmp_434, pretmp_434,
@ Patches/../C_code.c:3493:                 if (defGain && ((unit->def + defGain) <= maxDef))
	ldr	r1, [sp, #32]	@ maxDef, %sfp
@ Patches/../C_code.c:3493:                 if (defGain && ((unit->def + defGain) <= maxDef))
	adds	r2, r3, r0	@ _450, pretmp_434, defGain
@ Patches/../C_code.c:3493:                 if (defGain && ((unit->def + defGain) <= maxDef))
	cmp	r2, r1	@ _450, maxDef
	bgt	.L2277		@,
@ Patches/../C_code.c:3495: 					if (totalGain >= MinimumStatUps) { 
	cmp	r4, #1	@ totalGain,
	bne	.LCB13662	@
	b	.L2360	@long jump	@
.LCB13662:
@ Patches/../C_code.c:3494: 				{	totalGain++; 
	movs	r4, #1	@ totalGain,
.L2277:
@ Patches/../C_code.c:3498:                 resGain = NewGetStatIncrease(resGrowth, noise, level, 13 + (i * 13), useRN); 
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #56]	@, %sfp
	adds	r3, r7, #5	@ tmp309, ivtmp.1529,
	add	r1, sp, #88	@ tmp537,,
	bl	NewGetStatIncrease		@
	str	r0, [sp, #8]	@ resGain, %sfp
@ Patches/../C_code.c:3500:                 if (resGain && ((unit->res + resGain) <= maxRes))
	cmp	r0, #0	@ resGain,
	beq	.L2278		@,
@ Patches/../C_code.c:3500:                 if (resGain && ((unit->res + resGain) <= maxRes))
	mov	r2, r9	@ unit, unit
	ldrb	r2, [r2, #24]	@ pretmp_455,
	lsls	r2, r2, #24	@ pretmp_455, pretmp_455,
	asrs	r2, r2, #24	@ pretmp_455, pretmp_455,
@ Patches/../C_code.c:3500:                 if (resGain && ((unit->res + resGain) <= maxRes))
	ldr	r1, [sp, #40]	@ maxRes, %sfp
@ Patches/../C_code.c:3500:                 if (resGain && ((unit->res + resGain) <= maxRes))
	adds	r3, r2, r0	@ _471, pretmp_455, resGain
@ Patches/../C_code.c:3500:                 if (resGain && ((unit->res + resGain) <= maxRes))
	cmp	r3, r1	@ _471, maxRes
	ble	.L2361		@,
.L2278:
@ Patches/../C_code.c:3505:                 lckGain = NewGetStatIncrease(lckGrowth, noise, level, 14 + (i * 13), useRN); 
	movs	r2, r6	@, _8
	str	r5, [sp]	@ tmp264,
	ldr	r0, [sp, #60]	@, %sfp
	adds	r3, r7, #6	@ tmp311, ivtmp.1529,
	add	r1, sp, #88	@ tmp555,,
	bl	NewGetStatIncrease		@
	str	r0, [sp, #12]	@ tmp396, %sfp
@ Patches/../C_code.c:3507:                 if (lckGain && ((unit->lck + lckGain) <= maxLck))
	cmp	r0, #0	@ lckGain,
	beq	.L2279		@,
@ Patches/../C_code.c:3507:                 if (lckGain && ((unit->lck + lckGain) <= maxLck))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #25]	@ pretmp_475,
	lsls	r3, r3, #24	@ pretmp_475, pretmp_475,
	asrs	r3, r3, #24	@ pretmp_475, pretmp_475,
@ Patches/../C_code.c:3507:                 if (lckGain && ((unit->lck + lckGain) <= maxLck))
	adds	r2, r3, r0	@ _491, pretmp_475, lckGain
@ Patches/../C_code.c:3507:                 if (lckGain && ((unit->lck + lckGain) <= maxLck))
	ldr	r0, [sp, #64]	@ maxLck, %sfp
@ Patches/../C_code.c:3507:                 if (lckGain && ((unit->lck + lckGain) <= maxLck))
	str	r3, [sp, #72]	@ pretmp_475, %sfp
@ Patches/../C_code.c:3507:                 if (lckGain && ((unit->lck + lckGain) <= maxLck))
	asrs	r3, r0, #31	@ tmp316, maxLck,
	movs	r1, r3	@ tmp316, tmp316
	movs	r3, r0	@ maxLck, maxLck
	lsrs	r0, r2, #31	@ tmp315, _491,
	cmp	r3, r2	@ maxLck, _491
	adcs	r0, r0, r1	@ tmp315, tmp315, tmp316
@ Patches/../C_code.c:3509: 					if (totalGain >= MinimumStatUps) { 
	lsls	r3, r0, #24	@ tmp318, tmp314,
	beq	.L2279		@,
	lsls	r4, r4, #31	@ tmp398, totalGain,
	bpl	.LCB13719	@
	b	.L2362	@long jump	@
.LCB13719:
.L2279:
@ Patches/../C_code.c:3453: 			for (int i = 0; i < 4; i++) { 
	adds	r7, r7, #13	@ ivtmp.1529,
	cmp	r7, #60	@ ivtmp.1529,
	beq	.LCB13723	@
	b	.L2280	@long jump	@
.LCB13723:
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r3, [sp, #80]	@ hpGain, %sfp
	mov	r4, r9	@ unit, unit
	ldr	r0, [sp, #12]	@ lckGain, %sfp
	mov	r9, r8	@ sklGain, sklGain
	mov	r8, r3	@ hpGain, hpGain
	b	.L2271		@
.L2361:
@ Patches/../C_code.c:3502: 					if (totalGain >= MinimumStatUps) { 
	cmp	r4, #1	@ totalGain,
	beq	.L2363		@,
@ Patches/../C_code.c:3501: 				{	totalGain++; 
	movs	r4, #1	@ totalGain,
	b	.L2278		@
.L2290:
@ Patches/../C_code.c:3428:         totalGain += powGain; else powGain = 0; 
	movs	r3, #0	@ powGain,
	str	r3, [sp, #16]	@ powGain, %sfp
	b	.L2265		@
.L2291:
@ Patches/../C_code.c:3432:         totalGain += sklGain; else sklGain = 0; 
	movs	r3, #0	@ sklGain,
	mov	r9, r3	@ sklGain, sklGain
	b	.L2266		@
.L2292:
@ Patches/../C_code.c:3436:         totalGain += spdGain; else spdGain = 0; 
	movs	r3, #0	@ spdGain,
	mov	r10, r3	@ spdGain, spdGain
	b	.L2267		@
.L2293:
@ Patches/../C_code.c:3440:         totalGain += defGain; else defGain = 0; 
	movs	r3, #0	@ defGain,
	mov	fp, r3	@ defGain, defGain
	b	.L2268		@
.L2294:
@ Patches/../C_code.c:3444:         totalGain += resGain; else resGain = 0; 
	movs	r3, #0	@ resGain,
	str	r3, [sp, #8]	@ resGain, %sfp
	b	.L2269		@
.L2295:
@ Patches/../C_code.c:3448:         totalGain += lckGain; else lckGain = 0; 
	movs	r0, #0	@ lckGain,
@ Patches/../C_code.c:3452:         if (totalGain < MinimumStatUps) {
	cmp	r7, #1	@ totalGain,
	ble	.LCB13772	@
	b	.L2271	@long jump	@
.LCB13772:
	b	.L2355		@
.L2363:
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r1, [sp, #16]	@ powGain, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r4, r9	@ unit, unit
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	ip, r1	@ powGain, powGain
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r1, #21	@ pretmp_389,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	str	r3, [sp, #52]	@ _471, %sfp
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	ldrsb	r1, [r4, r1]	@ pretmp_389,* pretmp_389
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r9, r8	@ sklGain, sklGain
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r0, r1	@ _405, pretmp_389
	add	r0, r0, r9	@ _405, sklGain
	movs	r7, r0	@ _405, _405
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r0, #22	@ pretmp_412,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r3, [sp, #80]	@ hpGain, %sfp
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	ldrsb	r0, [r4, r0]	@ pretmp_412,* pretmp_412
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r8, r3	@ hpGain, hpGain
	movs	r3, #20	@ pretmp_365,
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r5, r0	@ pretmp_412, pretmp_412
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldrsb	r3, [r4, r3]	@ pretmp_365,* pretmp_365
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	str	r0, [sp, #12]	@ pretmp_412, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	add	r3, r3, ip	@ tmp358, powGain
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	mov	r0, r10	@ _428, spdGain
	mov	ip, r5	@ pretmp_412, pretmp_412
	add	r0, r0, ip	@ _428, pretmp_412
	str	r0, [sp, #44]	@ _428, %sfp
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	movs	r0, #23	@ pretmp_434,
	ldrsb	r0, [r4, r0]	@ pretmp_434,* pretmp_434
	str	r0, [sp, #36]	@ pretmp_434, %sfp
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	add	r0, r0, fp	@ _450, defGain
	str	r0, [sp, #48]	@ _450, %sfp
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	movs	r0, #25	@ pretmp_475,
	ldrsb	r0, [r4, r0]	@ pretmp_475,* pretmp_475
	str	r0, [sp, #72]	@ pretmp_475, %sfp
	str	r0, [sp, #56]	@ pretmp_475, %sfp
@ Patches/../C_code.c:3461: 				lckGain = 0; 
	movs	r0, #0	@ lckGain,
	b	.L2274		@
.L2357:
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	ldr	r2, [sp, #80]	@ hpGain, %sfp
	mov	r4, r9	@ unit, unit
	mov	r8, r2	@ hpGain, hpGain
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r2, #22	@ pretmp_412,
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r1, #21	@ pretmp_389,
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	movs	r0, #23	@ pretmp_434,
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	ldrsb	r2, [r4, r2]	@ pretmp_412,* pretmp_412
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	movs	r5, #25	@ pretmp_475,
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	ldrsb	r1, [r4, r1]	@ pretmp_389,* pretmp_389
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r6, r2	@ pretmp_412, pretmp_412
	str	r2, [sp, #12]	@ pretmp_412, %sfp
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	movs	r2, #24	@ pretmp_455,
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	ldrsb	r0, [r4, r0]	@ pretmp_434,* pretmp_434
	str	r0, [sp, #36]	@ pretmp_434, %sfp
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	ldrsb	r5, [r4, r5]	@ pretmp_475,* pretmp_475
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	ldrsb	r2, [r4, r2]	@ pretmp_455,* pretmp_455
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r5, [sp, #72]	@ pretmp_475, %sfp
	str	r5, [sp, #56]	@ pretmp_475, %sfp
@ Patches/../C_code.c:3460: 				resGain = 0; 
	movs	r5, #0	@ resGain,
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r0, [sp, #48]	@ pretmp_434, %sfp
	movs	r7, r1	@ _405, pretmp_389
@ Patches/../C_code.c:3461: 				lckGain = 0; 
	movs	r0, #0	@ lckGain,
@ Patches/../C_code.c:3459: 				defGain = 0; 
	mov	fp, r5	@ defGain, defGain
@ Patches/../C_code.c:3458: 				spdGain = 0; 
	mov	r10, r5	@ spdGain, spdGain
@ Patches/../C_code.c:3457: 				sklGain = 0; 
	mov	r9, r5	@ sklGain, sklGain
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r2, [sp, #52]	@ pretmp_455, %sfp
	str	r6, [sp, #44]	@ pretmp_412, %sfp
@ Patches/../C_code.c:3460: 				resGain = 0; 
	str	r5, [sp, #8]	@ resGain, %sfp
	b	.L2274		@
.L2358:
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r2, [sp, #16]	@ powGain, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r4, r9	@ unit, unit
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	ip, r2	@ powGain, powGain
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	movs	r7, r3	@ _405, _405
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r2, #22	@ pretmp_412,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r3, [sp, #80]	@ hpGain, %sfp
	mov	r8, r3	@ hpGain, hpGain
	movs	r3, #20	@ pretmp_365,
	mov	r9, r0	@ sklGain, sklGain
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	movs	r0, #23	@ pretmp_434,
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	ldrsb	r2, [r4, r2]	@ pretmp_412,* pretmp_412
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	movs	r5, #25	@ pretmp_475,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldrsb	r3, [r4, r3]	@ pretmp_365,* pretmp_365
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r6, r2	@ pretmp_412, pretmp_412
	str	r2, [sp, #12]	@ pretmp_412, %sfp
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	movs	r2, #24	@ pretmp_455,
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	ldrsb	r0, [r4, r0]	@ pretmp_434,* pretmp_434
	str	r0, [sp, #36]	@ pretmp_434, %sfp
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	ldrsb	r5, [r4, r5]	@ pretmp_475,* pretmp_475
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	ldrsb	r2, [r4, r2]	@ pretmp_455,* pretmp_455
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r5, [sp, #72]	@ pretmp_475, %sfp
	str	r5, [sp, #56]	@ pretmp_475, %sfp
@ Patches/../C_code.c:3460: 				resGain = 0; 
	movs	r5, #0	@ resGain,
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r0, [sp, #48]	@ pretmp_434, %sfp
@ Patches/../C_code.c:3459: 				defGain = 0; 
	mov	fp, r5	@ defGain, defGain
@ Patches/../C_code.c:3461: 				lckGain = 0; 
	movs	r0, #0	@ lckGain,
@ Patches/../C_code.c:3458: 				spdGain = 0; 
	mov	r10, r5	@ spdGain, spdGain
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r2, [sp, #52]	@ pretmp_455, %sfp
	str	r6, [sp, #44]	@ pretmp_412, %sfp
@ Patches/../C_code.c:3460: 				resGain = 0; 
	str	r5, [sp, #8]	@ resGain, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	add	r3, r3, ip	@ tmp358, powGain
	b	.L2274		@
.L2359:
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r4, r9	@ unit, unit
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r1, #21	@ pretmp_389,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	str	r3, [sp, #12]	@ pretmp_412, %sfp
	str	r2, [sp, #44]	@ _428, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r2, [sp, #16]	@ powGain, %sfp
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	ldrsb	r1, [r4, r1]	@ pretmp_389,* pretmp_389
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r9, r8	@ sklGain, sklGain
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	ip, r2	@ powGain, powGain
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r2, r1	@ _405, pretmp_389
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r3, [sp, #80]	@ hpGain, %sfp
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	movs	r0, #23	@ pretmp_434,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r8, r3	@ hpGain, hpGain
	movs	r3, #20	@ pretmp_365,
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	movs	r5, #25	@ pretmp_475,
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	add	r2, r2, r9	@ _405, sklGain
	movs	r7, r2	@ _405, _405
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	movs	r2, #24	@ pretmp_455,
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	ldrsb	r0, [r4, r0]	@ pretmp_434,* pretmp_434
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldrsb	r3, [r4, r3]	@ pretmp_365,* pretmp_365
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	str	r0, [sp, #36]	@ pretmp_434, %sfp
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	ldrsb	r5, [r4, r5]	@ pretmp_475,* pretmp_475
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	ldrsb	r2, [r4, r2]	@ pretmp_455,* pretmp_455
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r5, [sp, #72]	@ pretmp_475, %sfp
	str	r5, [sp, #56]	@ pretmp_475, %sfp
@ Patches/../C_code.c:3460: 				resGain = 0; 
	movs	r5, #0	@ resGain,
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r0, [sp, #48]	@ pretmp_434, %sfp
@ Patches/../C_code.c:3459: 				defGain = 0; 
	mov	fp, r5	@ defGain, defGain
@ Patches/../C_code.c:3461: 				lckGain = 0; 
	movs	r0, #0	@ lckGain,
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r2, [sp, #52]	@ pretmp_455, %sfp
@ Patches/../C_code.c:3460: 				resGain = 0; 
	str	r5, [sp, #8]	@ resGain, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	add	r3, r3, ip	@ tmp358, powGain
	b	.L2274		@
.L2360:
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r4, r9	@ unit, unit
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r1, #21	@ pretmp_389,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	str	r3, [sp, #36]	@ pretmp_434, %sfp
	str	r2, [sp, #48]	@ _450, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r2, [sp, #16]	@ powGain, %sfp
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	ldrsb	r1, [r4, r1]	@ pretmp_389,* pretmp_389
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	ip, r2	@ powGain, powGain
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r9, r8	@ sklGain, sklGain
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r2, r1	@ _405, pretmp_389
	add	r2, r2, r9	@ _405, sklGain
	movs	r7, r2	@ _405, _405
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r2, #22	@ pretmp_412,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r3, [sp, #80]	@ hpGain, %sfp
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	ldrsb	r2, [r4, r2]	@ pretmp_412,* pretmp_412
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r8, r3	@ hpGain, hpGain
	movs	r3, #20	@ pretmp_365,
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r0, r2	@ pretmp_412, pretmp_412
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldrsb	r3, [r4, r3]	@ pretmp_365,* pretmp_365
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	str	r2, [sp, #12]	@ pretmp_412, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	add	r3, r3, ip	@ tmp358, powGain
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	mov	r2, r10	@ _428, spdGain
	mov	ip, r0	@ pretmp_412, pretmp_412
	add	r2, r2, ip	@ _428, pretmp_412
	str	r2, [sp, #44]	@ _428, %sfp
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	movs	r0, #25	@ pretmp_475,
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	movs	r2, #24	@ pretmp_455,
@ Patches/../C_code.c:3460: 				resGain = 0; 
	movs	r5, #0	@ resGain,
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	ldrsb	r0, [r4, r0]	@ pretmp_475,* pretmp_475
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	ldrsb	r2, [r4, r2]	@ pretmp_455,* pretmp_455
@ Patches/../C_code.c:3533:         if ((unit->lck + lckGain) > maxLck)
	str	r0, [sp, #72]	@ pretmp_475, %sfp
	str	r0, [sp, #56]	@ pretmp_475, %sfp
	str	r2, [sp, #52]	@ pretmp_455, %sfp
@ Patches/../C_code.c:3461: 				lckGain = 0; 
	movs	r0, #0	@ lckGain,
@ Patches/../C_code.c:3460: 				resGain = 0; 
	str	r5, [sp, #8]	@ resGain, %sfp
	b	.L2274		@
.L2362:
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r4, r9	@ unit, unit
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r1, #21	@ pretmp_389,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	str	r2, [sp, #56]	@ _491, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r2, [sp, #16]	@ powGain, %sfp
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	ldrsb	r1, [r4, r1]	@ pretmp_389,* pretmp_389
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	ip, r2	@ powGain, powGain
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r9, r8	@ sklGain, sklGain
@ Patches/../C_code.c:3521:         if ((unit->skl + sklGain) > maxSkl)
	movs	r2, r1	@ _405, pretmp_389
	add	r2, r2, r9	@ _405, sklGain
	movs	r7, r2	@ _405, _405
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r2, #22	@ pretmp_412,
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldr	r3, [sp, #80]	@ hpGain, %sfp
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	ldrsb	r2, [r4, r2]	@ pretmp_412,* pretmp_412
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	mov	r8, r3	@ hpGain, hpGain
	movs	r3, #20	@ pretmp_365,
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	movs	r5, r2	@ pretmp_412, pretmp_412
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	ldrsb	r3, [r4, r3]	@ pretmp_365,* pretmp_365
	ldr	r0, [sp, #12]	@ lckGain, %sfp
@ Patches/../C_code.c:3518:         if ((unit->pow + powGain) > maxPow)
	add	r3, r3, ip	@ tmp358, powGain
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	str	r2, [sp, #12]	@ pretmp_412, %sfp
@ Patches/../C_code.c:3524:         if ((unit->spd + spdGain) > maxSpd)
	mov	ip, r5	@ pretmp_412, pretmp_412
	mov	r2, r10	@ _428, spdGain
	add	r2, r2, ip	@ _428, pretmp_412
	str	r2, [sp, #44]	@ _428, %sfp
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	movs	r2, #23	@ pretmp_434,
	ldrsb	r2, [r4, r2]	@ pretmp_434,* pretmp_434
	str	r2, [sp, #36]	@ pretmp_434, %sfp
@ Patches/../C_code.c:3527:         if ((unit->def + defGain) > maxDef)
	add	r2, r2, fp	@ _450, defGain
	str	r2, [sp, #48]	@ _450, %sfp
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	ldr	r5, [sp, #8]	@ _471, %sfp
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	movs	r2, #24	@ pretmp_455,
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	mov	ip, r5	@ _471, _471
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	ldrsb	r2, [r4, r2]	@ pretmp_455,* pretmp_455
@ Patches/../C_code.c:3530:         if ((unit->res + resGain) > maxRes)
	add	ip, ip, r2	@ _471, pretmp_455
	mov	r5, ip	@ _471, _471
	str	r5, [sp, #52]	@ _471, %sfp
	b	.L2274		@
	.size	UnitLevelUp, .-UnitLevelUp
	.align	1
	.p2align 2,,3
	.global	UnitCheckStatCaps
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitCheckStatCaps, %function
UnitCheckStatCaps:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:3700: 	int max = CallGetMaxHP(unit); 
	ldr	r3, .L2380	@ tmp174,
@ Patches/../C_code.c:3699: void UnitCheckStatCaps(struct Unit* unit) {
	movs	r4, r0	@ unit, tmp225
@ Patches/../C_code.c:3700: 	int max = CallGetMaxHP(unit); 
	bl	.L14		@
@ Patches/../C_code.c:3701:     if (unit->maxHP > max) { 
	movs	r3, #18	@ tmp175,
	ldrsb	r3, [r4, r3]	@ tmp175,
@ Patches/../C_code.c:3701:     if (unit->maxHP > max) { 
	cmp	r3, r0	@ tmp175, max
	ble	.L2367		@,
@ Patches/../C_code.c:3702: 	unit->maxHP = max; } 
	strb	r0, [r4, #18]	@ max, unit_63(D)->maxHP
.L2367:
@ Patches/../C_code.c:3704: 	max = GetUnitMaxPow(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxPow		@
@ Patches/../C_code.c:3705:     if (unit->pow > max ) { 
	movs	r3, #20	@ tmp177,
	ldrsb	r3, [r4, r3]	@ tmp177,
@ Patches/../C_code.c:3705:     if (unit->pow > max ) { 
	cmp	r3, r0	@ tmp177, max
	ble	.L2368		@,
@ Patches/../C_code.c:3706: 	unit->pow = max; } 
	strb	r0, [r4, #20]	@ max, unit_63(D)->pow
.L2368:
@ Patches/../C_code.c:3708: 	max = GetUnitMaxSkl(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxSkl		@
@ Patches/../C_code.c:3709:     if (unit->skl > max) { 
	movs	r3, #21	@ tmp179,
	ldrsb	r3, [r4, r3]	@ tmp179,
@ Patches/../C_code.c:3709:     if (unit->skl > max) { 
	cmp	r3, r0	@ tmp179, max
	ble	.L2369		@,
@ Patches/../C_code.c:3710: 	unit->skl = max; }
	strb	r0, [r4, #21]	@ max, unit_63(D)->skl
.L2369:
@ Patches/../C_code.c:3712: 	max = GetUnitMaxSpd(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxSpd		@
@ Patches/../C_code.c:3713:     if (unit->spd > max) { 
	movs	r3, #22	@ tmp181,
	ldrsb	r3, [r4, r3]	@ tmp181,
@ Patches/../C_code.c:3713:     if (unit->spd > max) { 
	cmp	r3, r0	@ tmp181, max
	ble	.L2370		@,
@ Patches/../C_code.c:3714: 	unit->spd = max; }
	strb	r0, [r4, #22]	@ max, unit_63(D)->spd
.L2370:
@ Patches/../C_code.c:3716: 	max = GetUnitMaxDef(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxDef		@
@ Patches/../C_code.c:3717:     if (unit->def > max) { 
	movs	r3, #23	@ tmp183,
	ldrsb	r3, [r4, r3]	@ tmp183,
@ Patches/../C_code.c:3717:     if (unit->def > max) { 
	cmp	r3, r0	@ tmp183, max
	ble	.L2371		@,
@ Patches/../C_code.c:3718: 	unit->def = max; } 
	strb	r0, [r4, #23]	@ max, unit_63(D)->def
.L2371:
@ Patches/../C_code.c:3720: 	max = GetUnitMaxRes(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxRes		@
@ Patches/../C_code.c:3721:     if (unit->res > max) { 
	movs	r3, #24	@ tmp185,
	ldrsb	r3, [r4, r3]	@ tmp185,
@ Patches/../C_code.c:3721:     if (unit->res > max) { 
	cmp	r3, r0	@ tmp185, max
	ble	.L2372		@,
@ Patches/../C_code.c:3722: 	unit->res = max; } 
	strb	r0, [r4, #24]	@ max, unit_63(D)->res
.L2372:
@ Patches/../C_code.c:3724: 	max = GetUnitMaxLck(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxLck		@
@ Patches/../C_code.c:3725:     if (unit->lck > max) { 
	movs	r3, #25	@ tmp187,
	ldrsb	r3, [r4, r3]	@ tmp187,
@ Patches/../C_code.c:3725:     if (unit->lck > max) { 
	cmp	r3, r0	@ tmp187, max
	ble	.L2373		@,
@ Patches/../C_code.c:3726: 	unit->lck = max; } 
	strb	r0, [r4, #25]	@ max, unit_63(D)->lck
.L2373:
@ Patches/../C_code.c:3728: 	if (StrMagInstalled) { 
	ldr	r3, .L2380+4	@ tmp189,
@ Patches/../C_code.c:3728: 	if (StrMagInstalled) { 
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	bne	.L2379		@,
.L2375:
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	movs	r5, #19	@ _34,
	ldr	r0, [r4]	@ unit_63(D)->pCharacterData, unit_63(D)->pCharacterData
	movs	r1, #17	@ _31,
	ldrsb	r5, [r0, r5]	@ _34,* _34
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	movs	r3, #25	@ _29,
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	movs	r0, #26	@ tmp196,
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	ldr	r2, [r4, #4]	@ _28, unit_63(D)->pClassData
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	ldrsb	r1, [r2, r1]	@ _31,* _31
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	ldrsb	r3, [r2, r3]	@ _29,* _29
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	ldrsb	r0, [r4, r0]	@ tmp196,
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	adds	r1, r1, r5	@ tmp214, _31, _34
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	subs	r3, r3, r1	@ tmp198, _29, tmp214
@ Patches/../C_code.c:3735:     if (unit->conBonus > (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit)))
	cmp	r0, r3	@ tmp196, tmp198
	ble	.L2377		@,
@ Patches/../C_code.c:3736:         unit->conBonus = (UNIT_CON_MAX(unit) - UNIT_CON_BASE(unit));
	strb	r3, [r4, #26]	@ tmp198, unit_63(D)->conBonus
.L2377:
@ Patches/../C_code.c:3739:     if (unit->movBonus > (UNIT_MOV_MAX(unit) - UNIT_MOV_BASE(unit)))
	movs	r1, #29	@ tmp206,
@ Patches/../C_code.c:3739:     if (unit->movBonus > (UNIT_MOV_MAX(unit) - UNIT_MOV_BASE(unit)))
	movs	r3, #15	@ tmp207,
@ Patches/../C_code.c:3739:     if (unit->movBonus > (UNIT_MOV_MAX(unit) - UNIT_MOV_BASE(unit)))
	ldrb	r2, [r2, #18]	@ _46,
@ Patches/../C_code.c:3739:     if (unit->movBonus > (UNIT_MOV_MAX(unit) - UNIT_MOV_BASE(unit)))
	ldrsb	r1, [r4, r1]	@ tmp206,
@ Patches/../C_code.c:3739:     if (unit->movBonus > (UNIT_MOV_MAX(unit) - UNIT_MOV_BASE(unit)))
	lsls	r2, r2, #24	@ _46, _46,
	asrs	r2, r2, #24	@ _46, _46,
@ Patches/../C_code.c:3739:     if (unit->movBonus > (UNIT_MOV_MAX(unit) - UNIT_MOV_BASE(unit)))
	subs	r3, r3, r2	@ tmp208, tmp207, _46
@ Patches/../C_code.c:3739:     if (unit->movBonus > (UNIT_MOV_MAX(unit) - UNIT_MOV_BASE(unit)))
	cmp	r1, r3	@ tmp206, tmp208
	ble	.L2366		@,
@ Patches/../C_code.c:3740:         unit->movBonus = (UNIT_MOV_MAX(unit) - UNIT_MOV_BASE(unit));
	movs	r3, #15	@ tmp209,
	subs	r3, r3, r2	@ tmp212, tmp209, _46
@ Patches/../C_code.c:3740:         unit->movBonus = (UNIT_MOV_MAX(unit) - UNIT_MOV_BASE(unit));
	strb	r3, [r4, #29]	@ tmp212, unit_63(D)->movBonus
.L2366:
@ Patches/../C_code.c:3749: }
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2379:
@ Patches/../C_code.c:3729: 	max = GetUnitMaxMag(unit); 
	movs	r0, r4	@, unit
	bl	GetUnitMaxMag		@
@ Patches/../C_code.c:3730: 	if (unit->_u3A > max) { 
	movs	r3, #58	@ tmp191,
	ldrb	r2, [r4, r3]	@ tmp192,
@ Patches/../C_code.c:3730: 	if (unit->_u3A > max) { 
	cmp	r2, r0	@ tmp192, max
	ble	.L2375		@,
@ Patches/../C_code.c:3731: 	unit->_u3A = max; } 
	strb	r0, [r4, r3]	@ max, unit_63(D)->_u3A
	b	.L2375		@
.L2381:
	.align	2
.L2380:
	.word	CallGetMaxHP
	.word	StrMagInstalled
	.size	UnitCheckStatCaps, .-UnitCheckStatCaps
	.align	1
	.p2align 2,,3
	.global	UnitAutolevelCore
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitAutolevelCore, %function
UnitAutolevelCore:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:2741: void UnitAutolevelCore(struct Unit* unit, u8 classId, int levelCount) {
	movs	r4, r0	@ unit, tmp323
	subs	r5, r2, #0	@ levelCount, tmp324,
@ Patches/../C_code.c:2742:     if (levelCount > 0) {
	ble	.LCB14132	@
	b	.L2399	@long jump	@
.LCB14132:
@ Patches/../C_code.c:2752:     if (levelCount < 0) {
	cmp	r2, #0	@ levelCount,
	beq	.L2385		@,
@ Patches/../C_code.c:2753:         unit->maxHP = GetAutoleveledStatDecrease(GetClassHPGrowth(unit , true),  levelCount, unit->maxHP);
	movs	r1, #1	@,
	bl	GetClassHPGrowth		@
@ Patches/../C_code.c:2753:         unit->maxHP = GetAutoleveledStatDecrease(GetClassHPGrowth(unit , true),  levelCount, unit->maxHP);
	movs	r2, #18	@ tmp273,
	movs	r1, r5	@, levelCount
	ldrsb	r2, [r4, r2]	@ tmp273,
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2753:         unit->maxHP = GetAutoleveledStatDecrease(GetClassHPGrowth(unit , true),  levelCount, unit->maxHP);
	lsls	r0, r0, #24	@ tmp274, tmp342,
	asrs	r0, r0, #24	@ _52, tmp274,
	strb	r0, [r4, #18]	@ _52, unit_94(D)->maxHP
@ Patches/../C_code.c:1517: 	int uid = unit->pCharacterData->number; 
	ldr	r3, [r4]	@ unit_94(D)->pCharacterData, unit_94(D)->pCharacterData
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	ldrb	r3, [r3, #4]	@ tmp280,
	cmp	r3, #44	@ tmp280,
	bls	.L2392		@,
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	movs	r2, #11	@ tmp286,
	movs	r3, #192	@ tmp287,
	ldrsb	r2, [r4, r2]	@ tmp286,
	ands	r3, r2	@ tmp288, tmp286
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	cmp	r3, #128	@ tmp288,
	bne	.LCB14163	@
	b	.L2387	@long jump	@
.LCB14163:
.L2392:
@ Patches/../C_code.c:2755: 			if (unit->maxHP < 15) { unit->maxHP = 15; } 
	cmp	r0, #14	@ _52,
	bgt	.L2390		@,
@ Patches/../C_code.c:2755: 			if (unit->maxHP < 15) { unit->maxHP = 15; } 
	movs	r3, #15	@ tmp299,
	strb	r3, [r4, #18]	@ tmp299, unit_94(D)->maxHP
.L2390:
@ Patches/../C_code.c:2760:         unit->pow   = GetAutoleveledStatDecrease(GetClassPowGrowth(unit, true), levelCount, unit->pow);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassPowGrowth		@
@ Patches/../C_code.c:2760:         unit->pow   = GetAutoleveledStatDecrease(GetClassPowGrowth(unit, true), levelCount, unit->pow);
	movs	r2, #20	@ tmp303,
	movs	r1, r5	@, levelCount
	ldrsb	r2, [r4, r2]	@ tmp303,
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2761:         unit->skl   = GetAutoleveledStatDecrease(GetClassSklGrowth(unit, true), levelCount, unit->skl);
	movs	r1, #1	@,
@ Patches/../C_code.c:2760:         unit->pow   = GetAutoleveledStatDecrease(GetClassPowGrowth(unit, true), levelCount, unit->pow);
	strb	r0, [r4, #20]	@ tmp344, unit_94(D)->pow
@ Patches/../C_code.c:2761:         unit->skl   = GetAutoleveledStatDecrease(GetClassSklGrowth(unit, true), levelCount, unit->skl);
	movs	r0, r4	@, unit
	bl	GetClassSklGrowth		@
@ Patches/../C_code.c:2761:         unit->skl   = GetAutoleveledStatDecrease(GetClassSklGrowth(unit, true), levelCount, unit->skl);
	movs	r2, #21	@ tmp305,
	movs	r1, r5	@, levelCount
	ldrsb	r2, [r4, r2]	@ tmp305,
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2762:         unit->spd   = GetAutoleveledStatDecrease(GetClassSpdGrowth(unit, true), levelCount, unit->spd);
	movs	r1, #1	@,
@ Patches/../C_code.c:2761:         unit->skl   = GetAutoleveledStatDecrease(GetClassSklGrowth(unit, true), levelCount, unit->skl);
	strb	r0, [r4, #21]	@ tmp346, unit_94(D)->skl
@ Patches/../C_code.c:2762:         unit->spd   = GetAutoleveledStatDecrease(GetClassSpdGrowth(unit, true), levelCount, unit->spd);
	movs	r0, r4	@, unit
	bl	GetClassSpdGrowth		@
@ Patches/../C_code.c:2762:         unit->spd   = GetAutoleveledStatDecrease(GetClassSpdGrowth(unit, true), levelCount, unit->spd);
	movs	r2, #22	@ tmp307,
	movs	r1, r5	@, levelCount
	ldrsb	r2, [r4, r2]	@ tmp307,
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2763:         unit->def   = GetAutoleveledStatDecrease(GetClassDefGrowth(unit, true), levelCount, unit->def);
	movs	r1, #1	@,
@ Patches/../C_code.c:2762:         unit->spd   = GetAutoleveledStatDecrease(GetClassSpdGrowth(unit, true), levelCount, unit->spd);
	strb	r0, [r4, #22]	@ tmp348, unit_94(D)->spd
@ Patches/../C_code.c:2763:         unit->def   = GetAutoleveledStatDecrease(GetClassDefGrowth(unit, true), levelCount, unit->def);
	movs	r0, r4	@, unit
	bl	GetClassDefGrowth		@
@ Patches/../C_code.c:2763:         unit->def   = GetAutoleveledStatDecrease(GetClassDefGrowth(unit, true), levelCount, unit->def);
	movs	r2, #23	@ tmp309,
	movs	r1, r5	@, levelCount
	ldrsb	r2, [r4, r2]	@ tmp309,
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2764:         unit->res   = GetAutoleveledStatDecrease(GetClassResGrowth(unit, true), levelCount, unit->res);
	movs	r1, #1	@,
@ Patches/../C_code.c:2763:         unit->def   = GetAutoleveledStatDecrease(GetClassDefGrowth(unit, true), levelCount, unit->def);
	strb	r0, [r4, #23]	@ tmp350, unit_94(D)->def
@ Patches/../C_code.c:2764:         unit->res   = GetAutoleveledStatDecrease(GetClassResGrowth(unit, true), levelCount, unit->res);
	movs	r0, r4	@, unit
	bl	GetClassResGrowth		@
@ Patches/../C_code.c:2764:         unit->res   = GetAutoleveledStatDecrease(GetClassResGrowth(unit, true), levelCount, unit->res);
	movs	r2, #24	@ tmp311,
	movs	r1, r5	@, levelCount
	ldrsb	r2, [r4, r2]	@ tmp311,
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2765:         unit->lck   = GetAutoleveledStatDecrease(GetClassLckGrowth(unit, true), levelCount, unit->lck);
	movs	r1, #1	@,
@ Patches/../C_code.c:2764:         unit->res   = GetAutoleveledStatDecrease(GetClassResGrowth(unit, true), levelCount, unit->res);
	strb	r0, [r4, #24]	@ tmp352, unit_94(D)->res
@ Patches/../C_code.c:2765:         unit->lck   = GetAutoleveledStatDecrease(GetClassLckGrowth(unit, true), levelCount, unit->lck);
	movs	r0, r4	@, unit
	bl	GetClassLckGrowth		@
@ Patches/../C_code.c:2765:         unit->lck   = GetAutoleveledStatDecrease(GetClassLckGrowth(unit, true), levelCount, unit->lck);
	movs	r2, #25	@ tmp313,
	movs	r1, r5	@, levelCount
	ldrsb	r2, [r4, r2]	@ tmp313,
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2766: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(GetClassMagGrowth(unit, true), levelCount, unit->_u3A); } 
	ldr	r3, .L2400	@ tmp315,
@ Patches/../C_code.c:2766: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(GetClassMagGrowth(unit, true), levelCount, unit->_u3A); } 
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
@ Patches/../C_code.c:2765:         unit->lck   = GetAutoleveledStatDecrease(GetClassLckGrowth(unit, true), levelCount, unit->lck);
	strb	r0, [r4, #25]	@ tmp354, unit_94(D)->lck
@ Patches/../C_code.c:2766: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(GetClassMagGrowth(unit, true), levelCount, unit->_u3A); } 
	cmp	r3, #0	@ StrMagInstalled,
	beq	.L2385		@,
@ Patches/../C_code.c:2766: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(GetClassMagGrowth(unit, true), levelCount, unit->_u3A); } 
	movs	r6, #58	@ tmp317,
@ Patches/../C_code.c:2766: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(GetClassMagGrowth(unit, true), levelCount, unit->_u3A); } 
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassMagGrowth		@
	movs	r1, r5	@, levelCount
	ldrb	r2, [r4, r6]	@ tmp318,
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2766: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(GetClassMagGrowth(unit, true), levelCount, unit->_u3A); } 
	strb	r0, [r4, r6]	@ tmp356, unit_94(D)->_u3A
.L2385:
@ Patches/../C_code.c:2770: }
	@ sp needed	@
@ Patches/../C_code.c:2768: 	UnitCheckStatMins(unit); 
	movs	r0, r4	@, unit
	bl	UnitCheckStatMins		@
@ Patches/../C_code.c:2769: 	UnitCheckStatCaps(unit); 
	movs	r0, r4	@, unit
	bl	UnitCheckStatCaps		@
@ Patches/../C_code.c:2770: }
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2399:
@ Patches/../C_code.c:2743:         unit->maxHP += GetAutoleveledStatIncrease(GetClassHPGrowth(unit , true),  levelCount);
	movs	r1, #1	@,
	bl	GetClassHPGrowth		@
@ Patches/../C_code.c:2743:         unit->maxHP += GetAutoleveledStatIncrease(GetClassHPGrowth(unit , true),  levelCount);
	ldr	r6, .L2400+4	@ tmp221,
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2743:         unit->maxHP += GetAutoleveledStatIncrease(GetClassHPGrowth(unit , true),  levelCount);
	ldrb	r3, [r4, #18]	@ tmp223,
	adds	r3, r3, r0	@ tmp225, tmp223, tmp326
	strb	r3, [r4, #18]	@ tmp225, unit_94(D)->maxHP
@ Patches/../C_code.c:2744:         unit->pow   += GetAutoleveledStatIncrease(GetClassPowGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassPowGrowth		@
@ Patches/../C_code.c:2744:         unit->pow   += GetAutoleveledStatIncrease(GetClassPowGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2744:         unit->pow   += GetAutoleveledStatIncrease(GetClassPowGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #20]	@ tmp229,
	adds	r3, r3, r0	@ tmp231, tmp229, tmp328
	strb	r3, [r4, #20]	@ tmp231, unit_94(D)->pow
@ Patches/../C_code.c:2745:         unit->skl   += GetAutoleveledStatIncrease(GetClassSklGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassSklGrowth		@
@ Patches/../C_code.c:2745:         unit->skl   += GetAutoleveledStatIncrease(GetClassSklGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2745:         unit->skl   += GetAutoleveledStatIncrease(GetClassSklGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #21]	@ tmp235,
	adds	r3, r3, r0	@ tmp237, tmp235, tmp330
	strb	r3, [r4, #21]	@ tmp237, unit_94(D)->skl
@ Patches/../C_code.c:2746:         unit->spd   += GetAutoleveledStatIncrease(GetClassSpdGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassSpdGrowth		@
@ Patches/../C_code.c:2746:         unit->spd   += GetAutoleveledStatIncrease(GetClassSpdGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2746:         unit->spd   += GetAutoleveledStatIncrease(GetClassSpdGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #22]	@ tmp241,
	adds	r3, r3, r0	@ tmp243, tmp241, tmp332
	strb	r3, [r4, #22]	@ tmp243, unit_94(D)->spd
@ Patches/../C_code.c:2747:         unit->def   += GetAutoleveledStatIncrease(GetClassDefGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassDefGrowth		@
@ Patches/../C_code.c:2747:         unit->def   += GetAutoleveledStatIncrease(GetClassDefGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2747:         unit->def   += GetAutoleveledStatIncrease(GetClassDefGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #23]	@ tmp247,
	adds	r3, r3, r0	@ tmp249, tmp247, tmp334
	strb	r3, [r4, #23]	@ tmp249, unit_94(D)->def
@ Patches/../C_code.c:2748:         unit->res   += GetAutoleveledStatIncrease(GetClassResGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassResGrowth		@
@ Patches/../C_code.c:2748:         unit->res   += GetAutoleveledStatIncrease(GetClassResGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2748:         unit->res   += GetAutoleveledStatIncrease(GetClassResGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #24]	@ tmp253,
	adds	r3, r3, r0	@ tmp255, tmp253, tmp336
	strb	r3, [r4, #24]	@ tmp255, unit_94(D)->res
@ Patches/../C_code.c:2749:         unit->lck   += GetAutoleveledStatIncrease(GetClassLckGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassLckGrowth		@
@ Patches/../C_code.c:2749:         unit->lck   += GetAutoleveledStatIncrease(GetClassLckGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2749:         unit->lck   += GetAutoleveledStatIncrease(GetClassLckGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #25]	@ tmp259,
	adds	r3, r3, r0	@ tmp261, tmp259, tmp338
	strb	r3, [r4, #25]	@ tmp261, unit_94(D)->lck
@ Patches/../C_code.c:2750: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	ldr	r3, .L2400	@ tmp263,
@ Patches/../C_code.c:2750: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	beq	.L2385		@,
@ Patches/../C_code.c:2750: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassMagGrowth		@
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2750: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	movs	r2, #58	@ tmp266,
@ Patches/../C_code.c:2750: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	ldrb	r3, [r4, r2]	@ tmp268,
	adds	r3, r3, r0	@ tmp270, tmp268, tmp340
	strb	r3, [r4, r2]	@ tmp270, unit_94(D)->_u3A
	b	.L2385		@
.L2387:
@ Patches/../C_code.c:2758: 			if (unit->maxHP < 10) { unit->maxHP = 10; } 
	cmp	r0, #9	@ _52,
	ble	.LCB14335	@
	b	.L2390	@long jump	@
.LCB14335:
@ Patches/../C_code.c:2758: 			if (unit->maxHP < 10) { unit->maxHP = 10; } 
	movs	r3, #10	@ tmp301,
	strb	r3, [r4, #18]	@ tmp301, unit_94(D)->maxHP
	b	.L2390		@
.L2401:
	.align	2
.L2400:
	.word	StrMagInstalled
	.word	GetAutoleveledStatIncrease
	.size	UnitAutolevelCore, .-UnitAutolevelCore
	.align	1
	.p2align 2,,3
	.global	UnitAutolevelCore_Char
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitAutolevelCore_Char, %function
UnitAutolevelCore_Char:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	movs	r4, r0	@ unit, tmp469
	movs	r5, r2	@ levelCount, tmp470
	push	{lr}	@
@ Patches/../C_code.c:2779:     if (levelCount > 0) {
	cmp	r2, #0	@ levelCount,
	ble	.LCB14358	@
	b	.L2435	@long jump	@
.LCB14358:
@ Patches/../C_code.c:2800:     if (levelCount < 0) {
	bne	.LCB14360	@
	b	.L2405	@long jump	@
.LCB14360:
@ Patches/../C_code.c:2804: 		unit->maxHP = GetAutoleveledStatDecrease(GetClassHPGrowth(unit , true),  levelCount, unit->maxHP);
	movs	r1, #1	@,
	bl	GetClassHPGrowth		@
@ Patches/../C_code.c:2804: 		unit->maxHP = GetAutoleveledStatDecrease(GetClassHPGrowth(unit , true),  levelCount, unit->maxHP);
	movs	r2, #18	@ tmp340,
	movs	r1, r5	@, levelCount
	ldrsb	r2, [r4, r2]	@ tmp340,
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2804: 		unit->maxHP = GetAutoleveledStatDecrease(GetClassHPGrowth(unit , true),  levelCount, unit->maxHP);
	lsls	r0, r0, #24	@ tmp341, tmp488,
	asrs	r0, r0, #24	@ _52, tmp341,
	strb	r0, [r4, #18]	@ _52, unit_98(D)->maxHP
@ Patches/../C_code.c:1517: 	int uid = unit->pCharacterData->number; 
	ldr	r3, [r4]	@ unit_98(D)->pCharacterData, unit_98(D)->pCharacterData
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	ldrb	r3, [r3, #4]	@ tmp347,
	cmp	r3, #44	@ tmp347,
	bls	.L2425		@,
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	movs	r2, #11	@ tmp353,
	movs	r3, #192	@ tmp354,
	ldrsb	r2, [r4, r2]	@ tmp353,
	ands	r3, r2	@ tmp355, tmp353
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	cmp	r3, #128	@ tmp355,
	bne	.LCB14389	@
	b	.L2407	@long jump	@
.LCB14389:
.L2425:
@ Patches/../C_code.c:2807: 			if (unit->maxHP < 15) { unit->maxHP = 15; } 
	cmp	r0, #14	@ _52,
	bgt	.L2410		@,
@ Patches/../C_code.c:2807: 			if (unit->maxHP < 15) { unit->maxHP = 15; } 
	movs	r3, #15	@ tmp366,
	strb	r3, [r4, #18]	@ tmp366, unit_98(D)->maxHP
.L2410:
@ Patches/../C_code.c:2384: 	growth += unit->pClassData->growthPow; 
	movs	r7, #28	@ _278,
@ Patches/../C_code.c:2396: 	growth += unit->pClassData->growthSkl; 
	movs	r3, #29	@ tmp370,
@ Patches/../C_code.c:2408: 	growth += unit->pClassData->growthSpd; 
	movs	r1, #30	@ tmp372,
@ Patches/../C_code.c:2384: 	growth += unit->pClassData->growthPow; 
	ldr	r2, [r4, #4]	@ _276, unit_98(D)->pClassData
@ Patches/../C_code.c:2384: 	growth += unit->pClassData->growthPow; 
	ldrsb	r7, [r2, r7]	@ _278,* _278
@ Patches/../C_code.c:2396: 	growth += unit->pClassData->growthSkl; 
	ldrsb	r3, [r2, r3]	@ tmp370,
@ Patches/../C_code.c:2408: 	growth += unit->pClassData->growthSpd; 
	ldrsb	r1, [r2, r1]	@ tmp372,
@ Patches/../C_code.c:2824: 		avg += GetClassSklGrowth(unit, false); i++; 
	adds	r3, r3, r7	@ tmp371, tmp370, _278
@ Patches/../C_code.c:2825: 		avg += GetClassSpdGrowth(unit, false); i++; 
	adds	r3, r3, r1	@ tmp373, tmp371, tmp372
@ Patches/../C_code.c:2420: 	growth += unit->pClassData->growthDef; 
	movs	r1, #31	@ tmp374,
	ldrsb	r1, [r2, r1]	@ tmp374,
@ Patches/../C_code.c:2826: 		avg += GetClassDefGrowth(unit, false); i++; 
	adds	r3, r3, r1	@ tmp375, tmp373, tmp374
@ Patches/../C_code.c:2432: 	growth += unit->pClassData->growthRes; 
	movs	r1, #32	@ tmp376,
	ldrsb	r1, [r2, r1]	@ tmp377,
@ Patches/../C_code.c:2827: 		avg += GetClassResGrowth(unit, false); i++; 
	adds	r3, r3, r1	@ tmp378, tmp375, tmp377
@ Patches/../C_code.c:2444: 	growth += unit->pClassData->growthLck; 
	movs	r1, #33	@ tmp379,
	ldrsb	r0, [r2, r1]	@ tmp380,
@ Patches/../C_code.c:2828: 		avg += GetClassLckGrowth(unit, false); i++; 
	adds	r0, r3, r0	@ _350, tmp378, tmp380
@ Patches/../C_code.c:2829: 		if (StrMagInstalled) { 
	ldr	r3, .L2438	@ tmp466,
	ldr	r6, [r3]	@ pretmp_351, StrMagInstalled
	mov	r8, r3	@ tmp466, tmp466
@ Patches/../C_code.c:2829: 		if (StrMagInstalled) { 
	cmp	r6, #0	@ pretmp_351,
	beq	.LCB14420	@
	b	.L2436	@long jump	@
.LCB14420:
@ Patches/../C_code.c:2831: 		avg = avg / i; 
	movs	r1, #6	@,
	ldr	r3, .L2438+4	@ tmp413,
	bl	.L14		@
	movs	r6, r0	@ avg, tmp492
.L2417:
@ Patches/../C_code.c:2833:         unit->pow   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassPowGrowth(unit, false), avg), levelCount, unit->pow);
	movs	r2, #20	@ tmp415,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r7, r6	@ tmp417, _278, avg
@ Patches/../C_code.c:2833:         unit->pow   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassPowGrowth(unit, false), avg), levelCount, unit->pow);
	ldrsb	r2, [r4, r2]	@ tmp415,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r6, r0	@ num, avg, tmp417
@ Patches/../C_code.c:2775: 	if (num < MinCharAutolevelBonusGrowth) { num = MinCharAutolevelBonusGrowth; } 
	cmp	r0, #20	@ num,
	bge	.L2418		@,
	movs	r0, #20	@ num,
.L2418:
@ Patches/../C_code.c:2833:         unit->pow   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassPowGrowth(unit, false), avg), levelCount, unit->pow);
	movs	r1, r5	@, levelCount
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2833:         unit->pow   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassPowGrowth(unit, false), avg), levelCount, unit->pow);
	strb	r0, [r4, #20]	@ tmp493, unit_98(D)->pow
@ Patches/../C_code.c:2396: 	growth += unit->pClassData->growthSkl; 
	movs	r0, #29	@ tmp422,
@ Patches/../C_code.c:2834:         unit->skl   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassSklGrowth(unit, false), avg), levelCount, unit->skl);
	movs	r2, #21	@ tmp419,
@ Patches/../C_code.c:2396: 	growth += unit->pClassData->growthSkl; 
	ldr	r3, [r4, #4]	@ unit_98(D)->pClassData, unit_98(D)->pClassData
	ldrsb	r0, [r3, r0]	@ tmp422,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r0, r6	@ tmp423, tmp422, avg
@ Patches/../C_code.c:2834:         unit->skl   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassSklGrowth(unit, false), avg), levelCount, unit->skl);
	ldrsb	r2, [r4, r2]	@ tmp419,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r6, r0	@ num, avg, tmp423
@ Patches/../C_code.c:2775: 	if (num < MinCharAutolevelBonusGrowth) { num = MinCharAutolevelBonusGrowth; } 
	cmp	r0, #20	@ num,
	bge	.L2419		@,
	movs	r0, #20	@ num,
.L2419:
@ Patches/../C_code.c:2834:         unit->skl   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassSklGrowth(unit, false), avg), levelCount, unit->skl);
	movs	r1, r5	@, levelCount
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2834:         unit->skl   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassSklGrowth(unit, false), avg), levelCount, unit->skl);
	strb	r0, [r4, #21]	@ tmp494, unit_98(D)->skl
@ Patches/../C_code.c:2408: 	growth += unit->pClassData->growthSpd; 
	movs	r0, #30	@ tmp428,
@ Patches/../C_code.c:2835:         unit->spd   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassSpdGrowth(unit, false), avg), levelCount, unit->spd);
	movs	r2, #22	@ tmp425,
@ Patches/../C_code.c:2408: 	growth += unit->pClassData->growthSpd; 
	ldr	r3, [r4, #4]	@ unit_98(D)->pClassData, unit_98(D)->pClassData
	ldrsb	r0, [r3, r0]	@ tmp428,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r0, r6	@ tmp429, tmp428, avg
@ Patches/../C_code.c:2835:         unit->spd   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassSpdGrowth(unit, false), avg), levelCount, unit->spd);
	ldrsb	r2, [r4, r2]	@ tmp425,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r6, r0	@ num, avg, tmp429
@ Patches/../C_code.c:2775: 	if (num < MinCharAutolevelBonusGrowth) { num = MinCharAutolevelBonusGrowth; } 
	cmp	r0, #20	@ num,
	bge	.L2420		@,
	movs	r0, #20	@ num,
.L2420:
@ Patches/../C_code.c:2835:         unit->spd   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassSpdGrowth(unit, false), avg), levelCount, unit->spd);
	movs	r1, r5	@, levelCount
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2835:         unit->spd   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassSpdGrowth(unit, false), avg), levelCount, unit->spd);
	strb	r0, [r4, #22]	@ tmp495, unit_98(D)->spd
@ Patches/../C_code.c:2420: 	growth += unit->pClassData->growthDef; 
	movs	r0, #31	@ tmp434,
@ Patches/../C_code.c:2836:         unit->def   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassDefGrowth(unit, false), avg), levelCount, unit->def);
	movs	r2, #23	@ tmp431,
@ Patches/../C_code.c:2420: 	growth += unit->pClassData->growthDef; 
	ldr	r3, [r4, #4]	@ unit_98(D)->pClassData, unit_98(D)->pClassData
	ldrsb	r0, [r3, r0]	@ tmp434,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r0, r6	@ tmp435, tmp434, avg
@ Patches/../C_code.c:2836:         unit->def   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassDefGrowth(unit, false), avg), levelCount, unit->def);
	ldrsb	r2, [r4, r2]	@ tmp431,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r6, r0	@ num, avg, tmp435
@ Patches/../C_code.c:2775: 	if (num < MinCharAutolevelBonusGrowth) { num = MinCharAutolevelBonusGrowth; } 
	cmp	r0, #20	@ num,
	bge	.L2421		@,
	movs	r0, #20	@ num,
.L2421:
@ Patches/../C_code.c:2836:         unit->def   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassDefGrowth(unit, false), avg), levelCount, unit->def);
	movs	r1, r5	@, levelCount
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2432: 	growth += unit->pClassData->growthRes; 
	movs	r3, #32	@ tmp440,
@ Patches/../C_code.c:2837:         unit->res   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassResGrowth(unit, false), avg), levelCount, unit->res);
	movs	r2, #24	@ tmp437,
@ Patches/../C_code.c:2836:         unit->def   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassDefGrowth(unit, false), avg), levelCount, unit->def);
	strb	r0, [r4, #23]	@ tmp496, unit_98(D)->def
@ Patches/../C_code.c:2432: 	growth += unit->pClassData->growthRes; 
	ldr	r1, [r4, #4]	@ unit_98(D)->pClassData, unit_98(D)->pClassData
	ldrsb	r0, [r1, r3]	@ tmp441,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r0, r6	@ tmp442, tmp441, avg
@ Patches/../C_code.c:2837:         unit->res   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassResGrowth(unit, false), avg), levelCount, unit->res);
	ldrsb	r2, [r4, r2]	@ tmp437,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r6, r0	@ num, avg, tmp442
@ Patches/../C_code.c:2775: 	if (num < MinCharAutolevelBonusGrowth) { num = MinCharAutolevelBonusGrowth; } 
	cmp	r0, #20	@ num,
	bge	.L2422		@,
	movs	r0, #20	@ num,
.L2422:
@ Patches/../C_code.c:2837:         unit->res   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassResGrowth(unit, false), avg), levelCount, unit->res);
	movs	r1, r5	@, levelCount
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2444: 	growth += unit->pClassData->growthLck; 
	movs	r3, #33	@ tmp447,
@ Patches/../C_code.c:2838:         unit->lck   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassLckGrowth(unit, false), avg), levelCount, unit->lck);
	movs	r2, #25	@ tmp444,
@ Patches/../C_code.c:2837:         unit->res   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassResGrowth(unit, false), avg), levelCount, unit->res);
	strb	r0, [r4, #24]	@ tmp497, unit_98(D)->res
@ Patches/../C_code.c:2444: 	growth += unit->pClassData->growthLck; 
	ldr	r1, [r4, #4]	@ unit_98(D)->pClassData, unit_98(D)->pClassData
	ldrsb	r0, [r1, r3]	@ tmp448,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r0, r6	@ tmp449, tmp448, avg
@ Patches/../C_code.c:2838:         unit->lck   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassLckGrowth(unit, false), avg), levelCount, unit->lck);
	ldrsb	r2, [r4, r2]	@ tmp444,
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r6, r0	@ num, avg, tmp449
@ Patches/../C_code.c:2775: 	if (num < MinCharAutolevelBonusGrowth) { num = MinCharAutolevelBonusGrowth; } 
	cmp	r0, #20	@ num,
	bge	.L2423		@,
	movs	r0, #20	@ num,
.L2423:
@ Patches/../C_code.c:2838:         unit->lck   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassLckGrowth(unit, false), avg), levelCount, unit->lck);
	movs	r1, r5	@, levelCount
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2839: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassMagGrowth(unit, false), avg), levelCount, unit->_u3A); } 
	mov	r3, r8	@ tmp466, tmp466
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
@ Patches/../C_code.c:2838:         unit->lck   = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassLckGrowth(unit, false), avg), levelCount, unit->lck);
	strb	r0, [r4, #25]	@ tmp498, unit_98(D)->lck
@ Patches/../C_code.c:2839: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassMagGrowth(unit, false), avg), levelCount, unit->_u3A); } 
	cmp	r3, #0	@ StrMagInstalled,
	beq	.L2405		@,
@ Patches/../C_code.c:2839: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassMagGrowth(unit, false), avg), levelCount, unit->_u3A); } 
	movs	r3, #58	@ tmp453,
@ Patches/../C_code.c:2286: 	growth += MagClassTable[unit->pClassData->number].growth; 
	ldr	r1, [r4, #4]	@ unit_98(D)->pClassData, unit_98(D)->pClassData
	ldrb	r1, [r1, #4]	@ tmp458,
@ Patches/../C_code.c:2839: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassMagGrowth(unit, false), avg), levelCount, unit->_u3A); } 
	ldrb	r2, [r4, r3]	@ tmp454,
@ Patches/../C_code.c:2286: 	growth += MagClassTable[unit->pClassData->number].growth; 
	ldr	r3, .L2438+8	@ tmp456,
	lsls	r1, r1, #2	@ tmp459, tmp458,
	adds	r3, r3, r1	@ tmp460, tmp456, tmp459
	ldrb	r3, [r3, #1]	@ tmp462, MagClassTable
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r3, r3, r6	@ tmp463, tmp462, avg
@ Patches/../C_code.c:2774: 	int num = avg - (growth - avg); // invert growths so high growths become low and vice versa 
	subs	r0, r6, r3	@ num, avg, tmp463
@ Patches/../C_code.c:2775: 	if (num < MinCharAutolevelBonusGrowth) { num = MinCharAutolevelBonusGrowth; } 
	cmp	r0, #20	@ num,
	bge	.LCB14535	@
	b	.L2437	@long jump	@
.LCB14535:
.L2424:
@ Patches/../C_code.c:2839: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassMagGrowth(unit, false), avg), levelCount, unit->_u3A); } 
	movs	r1, r5	@, levelCount
	bl	GetAutoleveledStatDecrease		@
@ Patches/../C_code.c:2839: 		if (StrMagInstalled) { unit->_u3A = GetAutoleveledStatDecrease(AdjustGrowthForLosingLevels(GetClassMagGrowth(unit, false), avg), levelCount, unit->_u3A); } 
	movs	r3, #58	@ tmp464,
	strb	r0, [r4, r3]	@ tmp499, unit_98(D)->_u3A
.L2405:
@ Patches/../C_code.c:2844: }
	@ sp needed	@
@ Patches/../C_code.c:2842: 	UnitCheckStatMins(unit); 
	movs	r0, r4	@, unit
	bl	UnitCheckStatMins		@
@ Patches/../C_code.c:2843: 	UnitCheckStatCaps(unit); 
	movs	r0, r4	@, unit
	bl	UnitCheckStatCaps		@
@ Patches/../C_code.c:2844: }
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2435:
@ Patches/../C_code.c:2790:         unit->maxHP += GetAutoleveledStatIncrease(GetClassHPGrowth(unit , true),  levelCount);
	movs	r1, #1	@,
	bl	GetClassHPGrowth		@
@ Patches/../C_code.c:2790:         unit->maxHP += GetAutoleveledStatIncrease(GetClassHPGrowth(unit , true),  levelCount);
	ldr	r6, .L2438+12	@ tmp288,
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2790:         unit->maxHP += GetAutoleveledStatIncrease(GetClassHPGrowth(unit , true),  levelCount);
	ldrb	r3, [r4, #18]	@ tmp290,
	adds	r3, r3, r0	@ tmp292, tmp290, tmp472
	strb	r3, [r4, #18]	@ tmp292, unit_98(D)->maxHP
@ Patches/../C_code.c:2791:         unit->pow   += GetAutoleveledStatIncrease(GetClassPowGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassPowGrowth		@
@ Patches/../C_code.c:2791:         unit->pow   += GetAutoleveledStatIncrease(GetClassPowGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2791:         unit->pow   += GetAutoleveledStatIncrease(GetClassPowGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #20]	@ tmp296,
	adds	r3, r3, r0	@ tmp298, tmp296, tmp474
	strb	r3, [r4, #20]	@ tmp298, unit_98(D)->pow
@ Patches/../C_code.c:2792:         unit->skl   += GetAutoleveledStatIncrease(GetClassSklGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassSklGrowth		@
@ Patches/../C_code.c:2792:         unit->skl   += GetAutoleveledStatIncrease(GetClassSklGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2792:         unit->skl   += GetAutoleveledStatIncrease(GetClassSklGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #21]	@ tmp302,
	adds	r3, r3, r0	@ tmp304, tmp302, tmp476
	strb	r3, [r4, #21]	@ tmp304, unit_98(D)->skl
@ Patches/../C_code.c:2793:         unit->spd   += GetAutoleveledStatIncrease(GetClassSpdGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassSpdGrowth		@
@ Patches/../C_code.c:2793:         unit->spd   += GetAutoleveledStatIncrease(GetClassSpdGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2793:         unit->spd   += GetAutoleveledStatIncrease(GetClassSpdGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #22]	@ tmp308,
	adds	r3, r3, r0	@ tmp310, tmp308, tmp478
	strb	r3, [r4, #22]	@ tmp310, unit_98(D)->spd
@ Patches/../C_code.c:2794:         unit->def   += GetAutoleveledStatIncrease(GetClassDefGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassDefGrowth		@
@ Patches/../C_code.c:2794:         unit->def   += GetAutoleveledStatIncrease(GetClassDefGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2794:         unit->def   += GetAutoleveledStatIncrease(GetClassDefGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #23]	@ tmp314,
	adds	r3, r3, r0	@ tmp316, tmp314, tmp480
	strb	r3, [r4, #23]	@ tmp316, unit_98(D)->def
@ Patches/../C_code.c:2795:         unit->res   += GetAutoleveledStatIncrease(GetClassResGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassResGrowth		@
@ Patches/../C_code.c:2795:         unit->res   += GetAutoleveledStatIncrease(GetClassResGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2795:         unit->res   += GetAutoleveledStatIncrease(GetClassResGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #24]	@ tmp320,
	adds	r3, r3, r0	@ tmp322, tmp320, tmp482
	strb	r3, [r4, #24]	@ tmp322, unit_98(D)->res
@ Patches/../C_code.c:2796:         unit->lck   += GetAutoleveledStatIncrease(GetClassLckGrowth(unit, true), levelCount);
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassLckGrowth		@
@ Patches/../C_code.c:2796:         unit->lck   += GetAutoleveledStatIncrease(GetClassLckGrowth(unit, true), levelCount);
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2796:         unit->lck   += GetAutoleveledStatIncrease(GetClassLckGrowth(unit, true), levelCount);
	ldrb	r3, [r4, #25]	@ tmp326,
	adds	r3, r3, r0	@ tmp328, tmp326, tmp484
	strb	r3, [r4, #25]	@ tmp328, unit_98(D)->lck
@ Patches/../C_code.c:2797: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	ldr	r3, .L2438	@ tmp330,
@ Patches/../C_code.c:2797: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	beq	.L2405		@,
@ Patches/../C_code.c:2797: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	movs	r1, #1	@,
	movs	r0, r4	@, unit
	bl	GetClassMagGrowth		@
	movs	r1, r5	@, levelCount
	bl	.L341		@
@ Patches/../C_code.c:2797: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	movs	r2, #58	@ tmp333,
@ Patches/../C_code.c:2797: 		if (StrMagInstalled) { unit->_u3A += GetAutoleveledStatIncrease(GetClassMagGrowth(unit, true), levelCount); } 
	ldrb	r3, [r4, r2]	@ tmp335,
	adds	r3, r3, r0	@ tmp337, tmp335, tmp486
	strb	r3, [r4, r2]	@ tmp337, unit_98(D)->_u3A
	b	.L2405		@
.L2436:
@ Patches/../C_code.c:2286: 	growth += MagClassTable[unit->pClassData->number].growth; 
	ldrb	r2, [r2, #4]	@ tmp402,
@ Patches/../C_code.c:2286: 	growth += MagClassTable[unit->pClassData->number].growth; 
	ldr	r3, .L2438+8	@ tmp401,
	lsls	r2, r2, #2	@ tmp403, tmp402,
	adds	r3, r3, r2	@ tmp404, tmp401, tmp403
	ldrb	r3, [r3, #1]	@ tmp406, MagClassTable
@ Patches/../C_code.c:2831: 		avg = avg / i; 
	movs	r1, #7	@,
@ Patches/../C_code.c:2830: 		avg += GetClassMagGrowth(unit, false); i++; }
	adds	r0, r3, r0	@ avg, tmp406, _350
@ Patches/../C_code.c:2831: 		avg = avg / i; 
	ldr	r3, .L2438+4	@ tmp409,
	bl	.L14		@
	movs	r6, r0	@ avg, tmp491
	b	.L2417		@
.L2407:
@ Patches/../C_code.c:2810: 			if (unit->maxHP < 10) { unit->maxHP = 10; } 
	cmp	r0, #9	@ _52,
	ble	.LCB14655	@
	b	.L2410	@long jump	@
.LCB14655:
@ Patches/../C_code.c:2810: 			if (unit->maxHP < 10) { unit->maxHP = 10; } 
	movs	r3, #10	@ tmp368,
	strb	r3, [r4, #18]	@ tmp368, unit_98(D)->maxHP
	b	.L2410		@
.L2437:
@ Patches/../C_code.c:2775: 	if (num < MinCharAutolevelBonusGrowth) { num = MinCharAutolevelBonusGrowth; } 
	movs	r0, #20	@ num,
	b	.L2424		@
.L2439:
	.align	2
.L2438:
	.word	StrMagInstalled
	.word	__aeabi_idiv
	.word	MagClassTable
	.word	GetAutoleveledStatIncrease
	.size	UnitAutolevelCore_Char, .-UnitAutolevelCore_Char
	.align	1
	.p2align 2,,3
	.global	UnitInitFromDefinition
	.syntax unified
	.code	16
	.thumb_func
	.type	UnitInitFromDefinition, %function
UnitInitFromDefinition:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 384
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, fp	@,
	mov	r7, r10	@,
	mov	r5, r8	@,
	mov	r6, r9	@,
	mov	r10, r0	@ unit, tmp1209
	push	{r5, r6, r7, lr}	@
@ Patches/../C_code.c:2890:     unit->pCharacterData = GetCharacterData(uDef->charIndex);
	ldr	r3, .L2649	@ tmp1170,
@ Patches/../C_code.c:2889: void UnitInitFromDefinition(struct Unit* unit, const struct UnitDefinition* uDef) {
	sub	sp, sp, #396	@,,
@ Patches/../C_code.c:2890:     unit->pCharacterData = GetCharacterData(uDef->charIndex);
	ldrb	r0, [r1]	@ *uDef_373(D), *uDef_373(D)
@ Patches/../C_code.c:2889: void UnitInitFromDefinition(struct Unit* unit, const struct UnitDefinition* uDef) {
	movs	r5, r1	@ uDef, tmp1210
	str	r1, [sp, #20]	@ uDef, %sfp
@ Patches/../C_code.c:2890:     unit->pCharacterData = GetCharacterData(uDef->charIndex);
	str	r3, [sp, #84]	@ tmp1170, %sfp
	bl	.L14		@
@ Patches/../C_code.c:2890:     unit->pCharacterData = GetCharacterData(uDef->charIndex);
	mov	r3, r10	@ unit, unit
@ Patches/../C_code.c:2892:     unit->level = uDef->level;
	mov	r2, r10	@ unit, unit
@ Patches/../C_code.c:2890:     unit->pCharacterData = GetCharacterData(uDef->charIndex);
	str	r0, [r3]	@ character, unit_375(D)->pCharacterData
@ Patches/../C_code.c:2892:     unit->level = uDef->level;
	ldrb	r3, [r5, #3]	@ *uDef_373(D), *uDef_373(D)
	lsrs	r3, r3, #3	@ tmp578, *uDef_373(D),
@ Patches/../C_code.c:2892:     unit->level = uDef->level;
	strb	r3, [r2, #8]	@ tmp578, unit_375(D)->level
@ Patches/../C_code.c:2893: 	unit->xPos = uDef->xPosition;
	ldrb	r3, [r5, #4]	@ *uDef_373(D), *uDef_373(D)
	lsls	r3, r3, #26	@ tmp584, *uDef_373(D),
	lsrs	r3, r3, #26	@ tmp583, tmp584,
@ Patches/../C_code.c:2893: 	unit->xPos = uDef->xPosition;
	strb	r3, [r2, #16]	@ tmp583, unit_375(D)->xPos
@ Patches/../C_code.c:2894: 	unit->yPos = uDef->yPosition; 
	ldrh	r3, [r5, #4]	@ *uDef_373(D), *uDef_373(D)
	lsls	r3, r3, #20	@ tmp589, *uDef_373(D),
	lsrs	r3, r3, #26	@ tmp588, tmp589,
@ Patches/../C_code.c:2894: 	unit->yPos = uDef->yPosition; 
	strb	r3, [r2, #17]	@ tmp588, unit_375(D)->yPos
@ Patches/../C_code.c:2890:     unit->pCharacterData = GetCharacterData(uDef->charIndex);
	movs	r4, r0	@ character, tmp1211
@ Patches/../C_code.c:2898: 	int noise[4] = {0, 0, 0, 0};  // 1 extra so gCh is used 
	movs	r2, #16	@,
	movs	r1, #0	@,
	ldr	r3, .L2649+4	@ tmp594,
	add	r0, sp, #96	@ tmp1343,,
	bl	.L14		@
@ Patches/../C_code.c:2903: 	if (uDef->classIndex) { originalClass = GetClassData(uDef->classIndex); } 
	ldrb	r0, [r5, #1]	@ _10,
@ Patches/../C_code.c:2903: 	if (uDef->classIndex) { originalClass = GetClassData(uDef->classIndex); } 
	cmp	r0, #0	@ _10,
	bne	.L2625		@,
@ Patches/../C_code.c:2904: 	else { originalClass = GetClassData(unit->pCharacterData->defaultClass); } 
	ldrb	r0, [r4, #5]	@ tmp598,
.L2625:
	ldr	r3, .L2649+8	@ tmp1171,
	str	r3, [sp, #12]	@ tmp1171, %sfp
	bl	.L14		@
@ Patches/../C_code.c:2905: 	unit->pClassData = originalClass; // for now 
	mov	r2, r10	@ unit, unit
@ Patches/../C_code.c:2904: 	else { originalClass = GetClassData(unit->pCharacterData->defaultClass); } 
	str	r0, [sp, #16]	@ tmp1213, %sfp
@ Patches/../C_code.c:2905: 	unit->pClassData = originalClass; // for now 
	ldr	r3, [sp, #16]	@ originalClass, %sfp
	str	r3, [r2, #4]	@ originalClass, unit_375(D)->pClassData
@ Patches/../C_code.c:2911: 	noise2[c] = character->number; c++; 
	ldrb	r2, [r4, #4]	@ _15,
	mov	r8, r2	@ _15, _15
@ Patches/../C_code.c:2912: 	noise2[c] = character->baseLevel; c++; 
	movs	r2, #11	@ _16,
@ Patches/../C_code.c:2913: 	noise2[c] = character->baseHP; c++; 
	movs	r5, #12	@ _18,
@ Patches/../C_code.c:2914: 	noise2[c] = character->basePow; c++; 
	movs	r6, #13	@ _20,
@ Patches/../C_code.c:2912: 	noise2[c] = character->baseLevel; c++; 
	ldrsb	r2, [r4, r2]	@ _16,* _16
	mov	r9, r2	@ _16, _16
@ Patches/../C_code.c:2915: 	noise2[c] = character->baseSkl; c++; 
	movs	r2, #14	@ _22,
@ Patches/../C_code.c:2913: 	noise2[c] = character->baseHP; c++; 
	ldrsb	r5, [r4, r5]	@ _18,* _18
	str	r5, [sp, #40]	@ _18, %sfp
@ Patches/../C_code.c:2914: 	noise2[c] = character->basePow; c++; 
	ldrsb	r6, [r4, r6]	@ _20,* _20
	str	r6, [sp, #44]	@ _20, %sfp
@ Patches/../C_code.c:2915: 	noise2[c] = character->baseSkl; c++; 
	ldrsb	r2, [r4, r2]	@ _22,* _22
	str	r2, [sp, #48]	@ _22, %sfp
@ Patches/../C_code.c:2916: 	noise2[c] = character->baseSpd; c++; 
	movs	r2, #15	@ _24,
	ldrsb	r2, [r4, r2]	@ _24,* _24
	str	r2, [sp, #52]	@ _24, %sfp
@ Patches/../C_code.c:2917: 	noise2[c] = character->baseDef; c++; 
	movs	r2, #16	@ _26,
	ldrsb	r2, [r4, r2]	@ _26,* _26
	str	r2, [sp, #56]	@ _26, %sfp
@ Patches/../C_code.c:2918: 	noise2[c] = character->baseRes; c++; 
	movs	r2, #17	@ _28,
	ldrh	r1, [r4, #16]	@ MEM <long unsigned int> [(signed char *)_3 + 14B], MEM <long unsigned int> [(signed char *)_3 + 14B]
	ldrh	r3, [r4, #14]	@ MEM <long unsigned int> [(signed char *)_3 + 14B], MEM <long unsigned int> [(signed char *)_3 + 14B]
	lsls	r1, r1, #16	@ tmp605, MEM <long unsigned int> [(signed char *)_3 + 14B],
	orrs	r1, r3	@ tmp606, MEM <long unsigned int> [(signed char *)_3 + 14B]
@ Patches/../C_code.c:2919: 	noise2[c] = character->baseLck; c++; 
	movs	r3, #18	@ _30,
@ Patches/../C_code.c:2918: 	noise2[c] = character->baseRes; c++; 
	ldrsb	r2, [r4, r2]	@ _28,* _28
	str	r2, [sp, #60]	@ _28, %sfp
@ Patches/../C_code.c:2919: 	noise2[c] = character->baseLck; c++; 
	ldrsb	r3, [r4, r3]	@ _30,* _30
	str	r3, [sp, #24]	@ _30, %sfp
@ Patches/../C_code.c:2920: 	noise2[c] = character->growthHP; c++; 
	ldrb	r2, [r4, #28]	@ _32,
	str	r2, [sp, #28]	@ _32, %sfp
@ Patches/../C_code.c:2921: 	noise2[c] = character->growthPow; c++; 
	ldrb	r0, [r4, #29]	@ _33,
	str	r0, [sp, #32]	@ _33, %sfp
@ Patches/../C_code.c:2922: 	noise2[c] = character->growthSkl; c++; 
	ldrb	r2, [r4, #30]	@ _34,
	str	r2, [sp, #64]	@ _34, %sfp
	movs	r7, r2	@ _34, _34
	ldrb	r2, [r4, #31]	@ MEM <long unsigned int> [(unsigned char *)_3 + 31B], MEM <long unsigned int> [(unsigned char *)_3 + 31B]
	mov	ip, r2	@ MEM <long unsigned int> [(unsigned char *)_3 + 31B], MEM <long unsigned int> [(unsigned char *)_3 + 31B]
	movs	r2, r4	@ tmp608, character
	mov	r3, ip	@ MEM <long unsigned int> [(unsigned char *)_3 + 31B], MEM <long unsigned int> [(unsigned char *)_3 + 31B]
	adds	r2, r2, #31	@ tmp608,
	ldrb	r0, [r2, #1]	@ MEM <long unsigned int> [(unsigned char *)_3 + 31B], MEM <long unsigned int> [(unsigned char *)_3 + 31B]
	lsls	r0, r0, #8	@ tmp612, MEM <long unsigned int> [(unsigned char *)_3 + 31B],
	orrs	r0, r3	@ tmp613, MEM <long unsigned int> [(unsigned char *)_3 + 31B]
	ldrb	r3, [r2, #2]	@ MEM <long unsigned int> [(unsigned char *)_3 + 31B], MEM <long unsigned int> [(unsigned char *)_3 + 31B]
	ldrb	r2, [r2, #3]	@ MEM <long unsigned int> [(unsigned char *)_3 + 31B], MEM <long unsigned int> [(unsigned char *)_3 + 31B]
	lsls	r3, r3, #16	@ tmp615, MEM <long unsigned int> [(unsigned char *)_3 + 31B],
	orrs	r3, r0	@ tmp616, tmp613
	lsls	r2, r2, #24	@ tmp618, MEM <long unsigned int> [(unsigned char *)_3 + 31B],
	orrs	r2, r3	@ tmp619, tmp616
@ Patches/../C_code.c:2924: 	noise2[c] = character->growthDef; c++; 
	movs	r3, #32	@ tmp620,
	ldrb	r0, [r4, r3]	@ _36,
@ Patches/../C_code.c:2925: 	noise2[c] = character->growthRes; c++; 
	adds	r3, r3, #1	@ tmp621,
@ Patches/../C_code.c:2924: 	noise2[c] = character->growthDef; c++; 
	str	r0, [sp, #68]	@ _36, %sfp
@ Patches/../C_code.c:2925: 	noise2[c] = character->growthRes; c++; 
	ldrb	r0, [r4, r3]	@ _37,
	str	r0, [sp, #72]	@ _37, %sfp
@ Patches/../C_code.c:2926: 	noise2[c] = character->growthLck; c++; 
	adds	r3, r3, #1	@ tmp622,
	ldrb	r0, [r4, r3]	@ _38,
	str	r0, [sp, #76]	@ _38, %sfp
@ Patches/../C_code.c:2911: 	noise2[c] = character->number; c++; 
	mov	r0, r9	@ _16, _16
	lsls	r3, r0, #24	@ tmp628, _16,
	lsls	r0, r5, #24	@ tmp634, _18,
	mov	r5, r8	@ _15, _15
	lsrs	r3, r3, #16	@ tmp629, tmp628,
	lsrs	r0, r0, #8	@ tmp635, tmp634,
	orrs	r3, r5	@ tmp636, _15
	orrs	r3, r0	@ tmp642, tmp635
	lsls	r5, r6, #24	@ tmp641, _20,
	orrs	r3, r5	@ tmp644, tmp641
	str	r3, [sp, #112]	@ tmp644, MEM <vector(4) unsigned char> [(unsigned char *)&noise2]
	str	r1, [sp, #116]	@ tmp606, MEM <vector(4) unsigned char> [(unsigned char *)&noise2 + 4B]
	ldr	r3, [sp, #24]	@ _30, %sfp
	ldr	r1, [sp, #28]	@ _32, %sfp
	lsls	r3, r3, #24	@ tmp647, _30,
	lsls	r0, r1, #8	@ tmp651, _32,
	ldr	r1, [sp, #32]	@ _33, %sfp
	lsrs	r3, r3, #24	@ tmp652, tmp647,
	lsls	r1, r1, #16	@ tmp655, _33,
	orrs	r3, r0	@ tmp656, tmp651
	orrs	r3, r1	@ tmp660, tmp655
	lsls	r0, r7, #24	@ tmp659, _34,
	orrs	r3, r0	@ tmp662, tmp659
@ Patches/../C_code.c:2927: 	noise2[c] = character->portraitId; c++; 
	add	r0, sp, #112	@ tmp1169,,
	mov	fp, r0	@ tmp1169, tmp1169
@ Patches/../C_code.c:2911: 	noise2[c] = character->number; c++; 
	str	r3, [sp, #120]	@ tmp662, MEM <vector(4) unsigned char> [(unsigned char *)&noise2 + 8B]
	str	r2, [sp, #124]	@ tmp619, MEM <vector(4) unsigned char> [(unsigned char *)&noise2 + 12B]
@ Patches/../C_code.c:2927: 	noise2[c] = character->portraitId; c++; 
	ldrh	r2, [r4, #6]	@ _39,
@ Patches/../C_code.c:2927: 	noise2[c] = character->portraitId; c++; 
	strb	r2, [r0, #16]	@ _39, noise2[16]
@ Patches/../C_code.c:2928: 	noise2[c] = character->affinity; c++; 
	ldrb	r3, [r4, #9]	@ _41,
@ Patches/../C_code.c:2928: 	noise2[c] = character->affinity; c++; 
	strb	r3, [r0, #17]	@ _41, noise2[17]
@ Patches/../C_code.c:2929: 	noise2[c] = unit->index; c++;
	mov	r0, r10	@ unit, unit
@ Patches/../C_code.c:2928: 	noise2[c] = character->affinity; c++; 
	str	r3, [sp, #88]	@ _41, %sfp
@ Patches/../C_code.c:2930: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { 
	movs	r3, #192	@ tmp672,
@ Patches/../C_code.c:2929: 	noise2[c] = unit->index; c++;
	mov	r5, fp	@ tmp1169, tmp1169
@ Patches/../C_code.c:2929: 	noise2[c] = unit->index; c++;
	ldrb	r0, [r0, #11]	@ _42,
	lsls	r0, r0, #24	@ _42, _42,
	asrs	r0, r0, #24	@ _42, _42,
@ Patches/../C_code.c:2930: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { 
	movs	r1, r3	@ _45, tmp672
@ Patches/../C_code.c:2929: 	noise2[c] = unit->index; c++;
	strb	r0, [r5, #18]	@ _42, noise2[18]
@ Patches/../C_code.c:2931: 		if (!(UNIT_CATTRIBUTES(unit) & CA_BOSS)) { 
	mov	r5, r10	@ unit, unit
@ Patches/../C_code.c:2930: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { 
	ands	r1, r0	@ _45, _42
	str	r1, [sp, #80]	@ _45, %sfp
@ Patches/../C_code.c:2931: 		if (!(UNIT_CATTRIBUTES(unit) & CA_BOSS)) { 
	ldr	r6, [r5]	@ pretmp_889, unit_375(D)->pCharacterData
@ Patches/../C_code.c:2930: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { 
	tst	r3, r0	@ tmp672, _42
	beq	.L2538		@,
@ Patches/../C_code.c:2931: 		if (!(UNIT_CATTRIBUTES(unit) & CA_BOSS)) { 
	ldr	r1, [sp, #16]	@ originalClass, %sfp
	ldr	r3, [r6, #40]	@ pretmp_889->attributes, pretmp_889->attributes
	ldr	r1, [r1, #40]	@ originalClass_322->attributes, originalClass_322->attributes
	orrs	r3, r1	@ tmp673, originalClass_322->attributes
@ Patches/../C_code.c:2931: 		if (!(UNIT_CATTRIBUTES(unit) & CA_BOSS)) { 
	lsls	r3, r3, #16	@ tmp1272, tmp673,
	bmi	.LCB14865	@
	b	.L2632	@long jump	@
.LCB14865:
.L2538:
	movs	r3, #20	@ prephitmp_868,
	ldr	r1, .L2649+12	@ tmp1172,
	str	r1, [sp, #36]	@ tmp1172, %sfp
	movs	r7, r3	@ prephitmp_868, prephitmp_868
@ Patches/../C_code.c:2929: 	noise2[c] = unit->index; c++;
	subs	r3, r3, #1	@ c,
.L2443:
@ Patches/../C_code.c:2943: 	noise2[c] = 0; 
	mov	r5, fp	@ tmp1169, tmp1169
	movs	r1, #0	@ tmp699,
	strb	r1, [r5, r3]	@ tmp699, noise2[c_320]
@ Patches/../C_code.c:2944: 	noise2[c+1] = 0; 
	strb	r1, [r5, r7]	@ tmp699, noise2[prephitmp_868]
	add	r3, r3, fp	@ ivtmp.1616, tmp1169
@ Patches/../C_code.c:2946: 	    if (!noise2[i]) { noise2[i]++; }
	movs	r5, #1	@ tmp1208,
	ldr	r7, [sp, #12]	@ tmp1171, %sfp
	b	.L2445		@
.L2539:
	movs	r3, r1	@ ivtmp.1616, ivtmp.1616
.L2445:
@ Patches/../C_code.c:2946: 	    if (!noise2[i]) { noise2[i]++; }
	ldrb	r1, [r3]	@ MEM[(unsigned char *)_738], MEM[(unsigned char *)_738]
	cmp	r1, #0	@ MEM[(unsigned char *)_738],
	bne	.L2444		@,
@ Patches/../C_code.c:2946: 	    if (!noise2[i]) { noise2[i]++; }
	strb	r5, [r3]	@ tmp1208, MEM[(unsigned char *)_738]
.L2444:
@ Patches/../C_code.c:2945: 	for (int i = c; i >= 0; --i) { 
	subs	r1, r3, #1	@ ivtmp.1616, ivtmp.1616,
	cmp	fp, r3	@ tmp1169, ivtmp.1616
	bne	.L2539		@,
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	ldr	r1, [sp, #40]	@ _18, %sfp
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	mov	r3, r8	@ _15, _15
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	mov	r8, r1	@ _18, _18
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	add	r3, r3, r9	@ _15, _16
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	ldr	r1, [sp, #44]	@ _20, %sfp
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	add	r3, r3, r8	@ tmp710, _18
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	adds	r5, r3, r1	@ tmp711, tmp710, _20
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	ldr	r3, [sp, #48]	@ _22, %sfp
	mov	r8, r3	@ _22, _22
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	ldr	r3, [sp, #52]	@ _24, %sfp
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	add	r5, r5, r8	@ tmp712, _22
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	mov	r8, r3	@ _24, _24
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	ldr	r3, [sp, #56]	@ _26, %sfp
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	add	r5, r5, r8	@ tmp713, _24
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	mov	r8, r3	@ _26, _26
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	ldr	r3, [sp, #60]	@ _28, %sfp
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	add	r5, r5, r8	@ tmp714, _26
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	mov	r8, r3	@ _28, _28
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	ldr	r3, [sp, #24]	@ _30, %sfp
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	add	r5, r5, r8	@ tmp715, _28
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	mov	r8, r3	@ _30, _30
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	ldr	r3, [sp, #28]	@ _32, %sfp
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	add	r5, r5, r8	@ _74, _30
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	mov	r8, r3	@ _32, _32
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	ldr	r3, [sp, #32]	@ _33, %sfp
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	adds	r2, r2, r0	@ tmp720, _39, _42
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	add	r2, r2, r8	@ tmp721, _32
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	mov	r8, r3	@ _33, _33
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	ldr	r3, [sp, #64]	@ _34, %sfp
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	add	r2, r2, r8	@ tmp722, _33
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	mov	r8, r3	@ _34, _34
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	ldr	r3, [sp, #68]	@ _36, %sfp
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	add	r2, r2, r8	@ tmp723, _34
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	add	r2, r2, ip	@ tmp724, MEM <long unsigned int> [(unsigned char *)_3 + 31B]
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	mov	ip, r3	@ _36, _36
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	ldr	r3, [sp, #72]	@ _37, %sfp
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	add	r2, r2, ip	@ tmp725, _36
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	mov	ip, r3	@ _37, _37
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	ldr	r3, [sp, #76]	@ _38, %sfp
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	add	r2, r2, ip	@ tmp726, _37
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	mov	ip, r3	@ _38, _38
@ Patches/../C_code.c:2962: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { 
	ldr	r3, [sp, #80]	@ _45, %sfp
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	add	r2, r2, ip	@ tmp727, _38
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	str	r7, [sp, #12]	@ tmp1171, %sfp
@ Patches/../C_code.c:2951: 	noise[0] = character->number + character->baseLevel + character->baseHP + character->basePow + character->baseSkl + character->baseSpd + character->baseDef + character->baseRes + character->baseLck;
	str	r5, [sp, #96]	@ _74, noise[0]
@ Patches/../C_code.c:2952: 	noise[1] = unit->index + character->portraitId + character->growthHP + character->growthPow + character->growthSkl + character->growthSpd + character->growthDef + character->growthRes + character->growthLck; 
	str	r2, [sp, #100]	@ tmp727, noise[1]
@ Patches/../C_code.c:2962: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { 
	cmp	r3, #0	@ _45,
	bne	.LCB14944	@
	b	.L2446	@long jump	@
.LCB14944:
@ Patches/../C_code.c:2963: 		if (!(UNIT_CATTRIBUTES(unit) & CA_BOSS)) { 
	ldr	r2, [sp, #16]	@ originalClass, %sfp
	ldr	r3, [r6, #40]	@ pretmp_889->attributes, pretmp_889->attributes
	ldr	r2, [r2, #40]	@ originalClass_322->attributes, originalClass_322->attributes
	orrs	r3, r2	@ tmp728, originalClass_322->attributes
@ Patches/../C_code.c:2963: 		if (!(UNIT_CATTRIBUTES(unit) & CA_BOSS)) { 
	lsls	r3, r3, #16	@ tmp1273, tmp728,
	bmi	.LCB14952	@
	b	.L2633	@long jump	@
.LCB14952:
.L2447:
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldr	r3, [sp, #84]	@ tmp1170, %sfp
@ Patches/../C_code.c:2986: 	int RandomizeRecruitment = ShouldRandomizeRecruitmentForUnitID(unit->pCharacterData->number); 
	ldrb	r0, [r6, #4]	@ tmp756,
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	bl	.L14		@
@ Patches/../C_code.c:156: 	if (!GetCharacterData(id)->portraitId) { return false; } 
	ldrh	r3, [r0, #6]	@ tmp758,
	cmp	r3, #0	@ tmp758,
	beq	.L2451		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L2649+16	@ tmp760,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.0_575, *RecruitValues.0_575
	lsls	r3, r3, #29	@ tmp765, *RecruitValues.0_575,
	lsrs	r2, r3, #29	@ _577, tmp765,
	str	r2, [sp, #24]	@ _577, %sfp
@ Patches/../C_code.c:2988: 	if (RandomizeRecruitment) { character = GetReorderedUnit(unit); randCharOriginalClass = GetClassData(character->defaultClass); } 
	cmp	r3, #0	@ tmp765,
	beq	.L2451		@,
@ Patches/../C_code.c:291: 	return GetReorderedCharacter(unit->pCharacterData); 
	mov	r3, r10	@ unit, unit
	ldr	r4, [r3]	@ character, unit_375(D)->pCharacterData
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r4, #6]	@ tmp767,
	cmp	r3, #0	@ tmp767,
	beq	.LCB14975	@
	b	.L2634	@long jump	@
.LCB14975:
.L2452:
@ Patches/../C_code.c:2988: 	if (RandomizeRecruitment) { character = GetReorderedUnit(unit); randCharOriginalClass = GetClassData(character->defaultClass); } 
	ldr	r3, [sp, #12]	@ tmp1171, %sfp
	ldrb	r0, [r4, #5]	@ tmp769,
	bl	.L14		@
	str	r0, [sp, #92]	@ tmp1216, %sfp
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	mov	r2, r10	@, unit
	mov	r1, fp	@, tmp1169
	ldrb	r0, [r4, #5]	@ tmp772,
	bl	RandClass2		@
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	ldr	r3, [sp, #12]	@ tmp1171, %sfp
	bl	.L14		@
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	mov	r3, r10	@ unit, unit
	str	r0, [r3, #4]	@ _658, unit_375(D)->pClassData
@ Patches/../C_code.c:3007: 		if ((!(originalClass->attributes & CA_PROMOTED)) && (unit->pClassData->attributes & CA_PROMOTED)) { 
	ldr	r3, [sp, #16]	@ originalClass, %sfp
	ldr	r2, [r3, #40]	@ originalClass_322->attributes, originalClass_322->attributes
	movs	r3, #128	@ tmp776,
	lsls	r3, r3, #1	@ tmp776, tmp776,
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	mov	r8, r0	@ _658, tmp1218
@ Patches/../C_code.c:3007: 		if ((!(originalClass->attributes & CA_PROMOTED)) && (unit->pClassData->attributes & CA_PROMOTED)) { 
	tst	r2, r3	@ originalClass_322->attributes, tmp776
	bne	.L2454		@,
@ Patches/../C_code.c:3007: 		if ((!(originalClass->attributes & CA_PROMOTED)) && (unit->pClassData->attributes & CA_PROMOTED)) { 
	ldr	r2, [r0, #40]	@ _658->attributes, _658->attributes
@ Patches/../C_code.c:3007: 		if ((!(originalClass->attributes & CA_PROMOTED)) && (unit->pClassData->attributes & CA_PROMOTED)) { 
	tst	r2, r3	@ _658->attributes, tmp776
	beq	.L2454		@,
	ldr	r7, [sp, #12]	@ tmp1171, %sfp
	add	r3, sp, #96	@ tmp1437,,
.L2458:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_587], MEM[(int *)_587]
	cmp	r2, #0	@ MEM[(int *)_587],
	bne	.LCB15007	@
	bl	.L2635	@far jump	@
.LCB15007:
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.1610,
	cmp	fp, r3	@ tmp1169, ivtmp.1610
	bne	.L2458		@,
	str	r7, [sp, #12]	@ tmp1171, %sfp
.L2457:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	movs	r3, #3	@,
	movs	r1, #5	@,
	movs	r0, r5	@, _74
	add	r2, sp, #96	@ tmp1439,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3008: 			if ((HashByte_Ch(noise[0], 5, noise, 3))) { // 20%, as HashByte never returns the max number 
	cmp	r0, #0	@ tmp1221,
	beq	.L2454		@,
@ Patches/../C_code.c:3009: 				int prepromoteClassId = unit->pClassData->promotion; 
	mov	r3, r8	@ _658, _658
	ldrb	r0, [r3, #5]	@ prepromoteClassId,
@ Patches/../C_code.c:3010: 				if (prepromoteClassId) { 
	cmp	r0, #0	@ prepromoteClassId,
	beq	.L2454		@,
@ Patches/../C_code.c:3015: 					unit->pClassData = originalClass; // so RandClass will treat us as promoted or not based on that 
	mov	r3, r10	@ unit, unit
	ldr	r2, [sp, #16]	@ originalClass, %sfp
@ Patches/../C_code.c:3017: 					unit->pClassData = GetClassData(RandClass2(prepromoteClassId, noise2, unit));
	mov	r1, fp	@, tmp1169
@ Patches/../C_code.c:3015: 					unit->pClassData = originalClass; // so RandClass will treat us as promoted or not based on that 
	str	r2, [r3, #4]	@ originalClass, unit_375(D)->pClassData
@ Patches/../C_code.c:3017: 					unit->pClassData = GetClassData(RandClass2(prepromoteClassId, noise2, unit));
	mov	r2, r10	@, unit
	bl	RandClass2		@
@ Patches/../C_code.c:3017: 					unit->pClassData = GetClassData(RandClass2(prepromoteClassId, noise2, unit));
	ldr	r3, [sp, #12]	@ tmp1171, %sfp
	bl	.L14		@
@ Patches/../C_code.c:3017: 					unit->pClassData = GetClassData(RandClass2(prepromoteClassId, noise2, unit));
	mov	r3, r10	@ unit, unit
@ Patches/../C_code.c:3017: 					unit->pClassData = GetClassData(RandClass2(prepromoteClassId, noise2, unit));
	mov	r8, r0	@ _658, tmp1223
@ Patches/../C_code.c:3017: 					unit->pClassData = GetClassData(RandClass2(prepromoteClassId, noise2, unit));
	str	r0, [r3, #4]	@ _658, unit_375(D)->pClassData
	b	.L2454		@
.L2650:
	.align	2
.L2649:
	.word	GetCharacterData
	.word	memset
	.word	GetClassData
	.word	gCh
	.word	RecruitValues
.L2451:
@ Patches/../C_code.c:2990:     if ((!uDef->classIndex) || RandomizeRecruitment) {
	ldr	r3, [sp, #20]	@ uDef, %sfp
	ldrb	r0, [r3, #1]	@ _106,
@ Patches/../C_code.c:2990:     if ((!uDef->classIndex) || RandomizeRecruitment) {
	cmp	r0, #0	@ _106,
	bne	.LCB15054	@
	b	.L2449	@long jump	@
.LCB15054:
.L2626:
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	mov	r2, r10	@, unit
	mov	r1, fp	@, tmp1169
	bl	RandClass2		@
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	ldr	r3, [sp, #12]	@ tmp1171, %sfp
	bl	.L14		@
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	mov	r3, r10	@ unit, unit
	str	r0, [r3, #4]	@ _658, unit_375(D)->pClassData
	movs	r3, #0	@ _577,
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	mov	r8, r0	@ _658, tmp1254
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	str	r3, [sp, #24]	@ _577, %sfp
.L2454:
@ Patches/../C_code.c:3033: 	noise[2] = unit->pClassData->number; 
	mov	r3, r8	@ _658, _658
	ldrb	r3, [r3, #4]	@ tmp792,
@ Patches/../C_code.c:3035: 	if (ShouldRandomizeClass(unit)) { 
	mov	r0, r10	@, unit
@ Patches/../C_code.c:3033: 	noise[2] = unit->pClassData->number; 
	str	r3, [sp, #104]	@ tmp792, noise[2]
@ Patches/../C_code.c:3035: 	if (ShouldRandomizeClass(unit)) { 
	bl	ShouldRandomizeClass		@
	subs	r7, r0, #0	@ personalWexp, tmp1224,
@ Patches/../C_code.c:3035: 	if (ShouldRandomizeClass(unit)) { 
	beq	.L2459		@,
	movs	r3, r4	@ ivtmp.1603, character
	movs	r1, r4	@ _726, character
@ Patches/../C_code.c:3032: 	int personalWexp = 0; 
	movs	r7, #0	@ personalWexp,
	adds	r3, r3, #20	@ ivtmp.1603,
	adds	r1, r1, #28	@ _726,
.L2461:
@ Patches/../C_code.c:3037: 			tmp = character->baseRanks[c]; 
	ldrb	r2, [r3]	@ tmp, MEM[(unsigned char *)_724]
@ Patches/../C_code.c:3038: 			if (tmp > personalWexp) { personalWexp = tmp; } 
	cmp	r7, r2	@ personalWexp, tmp
	bge	.L2460		@,
	movs	r7, r2	@ personalWexp, tmp
.L2460:
@ Patches/../C_code.c:3036: 		for (int c = 0; c < 8; ++c) { 
	adds	r3, r3, #1	@ ivtmp.1603,
	cmp	r3, r1	@ ivtmp.1603, _726
	bne	.L2461		@,
.L2459:
	movs	r3, #44	@ tmp1449,
	mov	ip, r3	@ tmp1449, tmp1449
	ldr	r3, .L2651	@ tmp1165,
	mov	r9, r3	@ tmp1165, tmp1165
@ Patches/../C_code.c:3062: 			if (character->baseRanks[i]) { // original
	movs	r3, #20	@ tmp1205,
	add	r8, r8, ip	@ tmp1166, tmp1449
	mov	ip, r3	@ tmp1205, tmp1205
	add	ip, ip, r4	@ tmp1205, character
	mov	r3, ip	@ tmp1205, tmp1205
	mov	r6, r10	@ ivtmp.1594, unit
@ Patches/../C_code.c:3041:     for (int i = 0; i < 8; ++i) { 
	movs	r5, #0	@ i,
@ Patches/../C_code.c:3062: 			if (character->baseRanks[i]) { // original
	str	r3, [sp, #12]	@ tmp1205, %sfp
	adds	r6, r6, #40	@ ivtmp.1594,
.L2476:
@ Patches/../C_code.c:3042: 		wexp = unit->pClassData->baseRanks[i]; 
	mov	r3, r8	@ tmp1166, tmp1166
	ldrb	r3, [r3, r5]	@ wexp, MEM[(unsigned char *)_713 + _712 * 1]
@ Patches/../C_code.c:3043: 		if (wexp) { 
	cmp	r3, #0	@ wexp,
	beq	.LCB15112	@
	b	.L2636	@long jump	@
.LCB15112:
@ Patches/../C_code.c:3061: 		if (!ShouldRandomizeClass(unit)) { 
	mov	r0, r10	@, unit
@ Patches/../C_code.c:3048: 		unit->ranks[i] = wexp; 
	strb	r3, [r6]	@ wexp, MEM[(unsigned char *)_717]
@ Patches/../C_code.c:3061: 		if (!ShouldRandomizeClass(unit)) { 
	bl	ShouldRandomizeClass		@
@ Patches/../C_code.c:3061: 		if (!ShouldRandomizeClass(unit)) { 
	cmp	r0, #0	@ tmp1225,
	bne	.L2467		@,
@ Patches/../C_code.c:3062: 			if (character->baseRanks[i]) { // original
	ldr	r3, [sp, #12]	@ tmp1205, %sfp
	ldrb	r3, [r3, r5]	@ _134, MEM[(unsigned char *)_719 + _712 * 1]
@ Patches/../C_code.c:3062: 			if (character->baseRanks[i]) { // original
	cmp	r3, #0	@ _134,
	beq	.L2467		@,
@ Patches/../C_code.c:3063: 				unit->ranks[i] = character->baseRanks[i]; } 
	strb	r3, [r6]	@ _134, MEM[(unsigned char *)_714]
.L2467:
@ Patches/../C_code.c:3041:     for (int i = 0; i < 8; ++i) { 
	adds	r5, r5, #1	@ i,
@ Patches/../C_code.c:3041:     for (int i = 0; i < 8; ++i) { 
	adds	r6, r6, #1	@ ivtmp.1594,
	cmp	r5, #8	@ i,
	bne	.L2476		@,
.L2474:
@ Patches/../C_code.c:3068: 	list[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	movs	r3, #99	@ tmp831,
	add	r5, sp, #136	@ tmp1173,,
@ Patches/../C_code.c:3069: 	BuildAvailableWeaponList(list, unit); 
	mov	r1, r10	@, unit
	movs	r0, r5	@, tmp1173
@ Patches/../C_code.c:3068: 	list[0] = 99; // so compiler doesn't assume uninitialized or whatever 
	strb	r3, [r5]	@ tmp831, list[0]
@ Patches/../C_code.c:3069: 	BuildAvailableWeaponList(list, unit); 
	bl	BuildAvailableWeaponList		@
@ Patches/../C_code.c:3074: 	UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list)); }
	ldr	r3, .L2651+4	@ tmp1204,
@ Patches/../C_code.c:3072: 	for (int i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	movs	r6, #0	@ i,
@ Patches/../C_code.c:3074: 	UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list)); }
	mov	r8, r3	@ tmp1204, tmp1204
	ldr	r7, [sp, #20]	@ _690, %sfp
	adds	r7, r7, #12	@ _690,
.L2477:
@ Patches/../C_code.c:3072: 	for (int i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	ldrb	r1, [r7, r6]	@ _137, MEM[(unsigned char *)_690 + _688 * 1]
@ Patches/../C_code.c:3072: 	for (int i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	cmp	r1, #0	@ _137,
	beq	.L2485		@,
@ Patches/../C_code.c:3073: 	if (i == 1) { AppendAvailableStaffList(list, unit); } // first item will always be a weapon if possible 
	cmp	r6, #1	@ i,
	bne	.LCB15148	@
	b	.L2637	@long jump	@
.LCB15148:
.L2479:
	movs	r3, r6	@, i
	add	r2, sp, #96	@ tmp1464,,
	mov	r0, r10	@, unit
	str	r5, [sp]	@ tmp1173,
	bl	RandNewWeapon.part.0		@
@ Patches/../C_code.c:3072: 	for (int i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	adds	r6, r6, #1	@ i,
	movs	r1, r0	@ _526, tmp1228
@ Patches/../C_code.c:3074: 	UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list)); }
	mov	r0, r10	@, unit
	bl	.L179		@
@ Patches/../C_code.c:3072: 	for (int i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	cmp	r6, #4	@ i,
	bne	.L2477		@,
.L2485:
@ Patches/../C_code.c:3076:     unit->ai1 = uDef->ai[0];
	mov	r1, r10	@ unit, unit
	movs	r3, #66	@ tmp838,
	ldr	r0, [sp, #20]	@ uDef, %sfp
	ldrb	r2, [r0, #16]	@ tmp839,
	strb	r2, [r1, r3]	@ tmp839, unit_375(D)->ai1
@ Patches/../C_code.c:3078:     unit->ai2 = uDef->ai[1];
	ldrb	r2, [r0, #17]	@ tmp842,
	adds	r3, r3, #2	@ tmp841,
	strb	r2, [r1, r3]	@ tmp842, unit_375(D)->ai2
@ Patches/../C_code.c:3080:     unit->ai3And4 &= 0xFFF8;
	movs	r1, #64	@ tmp844,
@ Patches/../C_code.c:3080:     unit->ai3And4 &= 0xFFF8;
	mov	r3, r10	@ unit, unit
	ldrh	r2, [r3, r1]	@ tmp846,
	movs	r3, #7	@ tmp848,
	bics	r2, r3	@ tmp847, tmp848
@ Patches/../C_code.c:3081:     unit->ai3And4 |= uDef->ai[2];
	ldrb	r3, [r0, #18]	@ tmp850,
@ Patches/../C_code.c:3081:     unit->ai3And4 |= uDef->ai[2];
	orrs	r3, r2	@ tmp852, tmp847
@ Patches/../C_code.c:3082:     unit->ai3And4 |= (uDef->ai[3] << 8);
	ldrb	r2, [r0, #19]	@ tmp854,
	lsls	r2, r2, #8	@ tmp855, tmp854,
	orrs	r3, r2	@ tmp858, tmp855
	mov	r2, r10	@ unit, unit
@ Patches/../C_code.c:3084: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { max150percent = 2; } 
	movs	r7, #192	@ tmp862,
@ Patches/../C_code.c:3082:     unit->ai3And4 |= (uDef->ai[3] << 8);
	strh	r3, [r2, r1]	@ tmp858, unit_375(D)->ai3And4
@ Patches/../C_code.c:3084: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { max150percent = 2; } 
	ldrb	r3, [r2, #11]	@ tmp861,
	lsls	r3, r3, #24	@ tmp861, tmp861,
	asrs	r3, r3, #24	@ tmp861, tmp861,
	ands	r7, r3	@ _152, tmp861
@ Patches/../C_code.c:3085: 	if (UNIT_CATTRIBUTES(unit) & CA_PROMOTED) { max150percent = 1; } 
	ldr	r3, [r2]	@ _153, unit_375(D)->pCharacterData
	mov	r8, r3	@ _153, _153
@ Patches/../C_code.c:3087: 	if (gCh > 0xD) { if (max150percent == 2) { max150percent = 0; } } // Lyn mode + first ch of eliwood/hector mode: nerf enemies a little 
	ldr	r3, [sp, #36]	@ tmp1172, %sfp
@ Patches/../C_code.c:3085: 	if (UNIT_CATTRIBUTES(unit) & CA_PROMOTED) { max150percent = 1; } 
	ldr	r6, [r2, #4]	@ _155, unit_375(D)->pClassData
@ Patches/../C_code.c:3087: 	if (gCh > 0xD) { if (max150percent == 2) { max150percent = 0; } } // Lyn mode + first ch of eliwood/hector mode: nerf enemies a little 
	ldrb	r2, [r3]	@ pretmp_888, gCh
@ Patches/../C_code.c:3085: 	if (UNIT_CATTRIBUTES(unit) & CA_PROMOTED) { max150percent = 1; } 
	mov	r3, r8	@ _153, _153
	ldr	r1, [r6, #40]	@ _155->attributes, _155->attributes
	ldr	r3, [r3, #40]	@ _153->attributes, _153->attributes
	orrs	r3, r1	@ tmp864, _155->attributes
@ Patches/../C_code.c:3085: 	if (UNIT_CATTRIBUTES(unit) & CA_PROMOTED) { max150percent = 1; } 
	lsls	r3, r3, #23	@ tmp1274, tmp864,
	bmi	.LCB15199	@
	b	.L2638	@long jump	@
.LCB15199:
@ Patches/../C_code.c:3088: 	if (gCh > 0xE) { if (max150percent == 1) { max150percent = 0; } } // Lyn mode + first 2 chs of eliwood/hector mode: nerf promoted units a little 
	movs	r5, #0	@ tmp874,
	movs	r3, #14	@ tmp873,
	cmp	r3, r2	@ tmp873, pretmp_888
	adcs	r5, r5, r5	@ max150percent, tmp874, tmp874
.L2486:
@ Patches/../C_code.c:3090:     unit->maxHP = RandHPStat(unit, character->baseHP + unit->pClassData->baseHP, noise, 15, 3);
	movs	r1, #12	@ tmp881,
@ Patches/../C_code.c:3090:     unit->maxHP = RandHPStat(unit, character->baseHP + unit->pClassData->baseHP, noise, 15, 3);
	movs	r3, #11	@ tmp882,
@ Patches/../C_code.c:3090:     unit->maxHP = RandHPStat(unit, character->baseHP + unit->pClassData->baseHP, noise, 15, 3);
	ldrsb	r1, [r4, r1]	@ tmp881,
@ Patches/../C_code.c:3090:     unit->maxHP = RandHPStat(unit, character->baseHP + unit->pClassData->baseHP, noise, 15, 3);
	ldrsb	r3, [r6, r3]	@ tmp882,
@ Patches/../C_code.c:3090:     unit->maxHP = RandHPStat(unit, character->baseHP + unit->pClassData->baseHP, noise, 15, 3);
	adds	r1, r1, r3	@ tmp883, tmp881, tmp882
	movs	r3, #3	@ tmp884,
	add	r2, sp, #96	@ tmp1480,,
	str	r3, [sp]	@ tmp884,
	mov	r0, r10	@, unit
	adds	r3, r3, #12	@,
	bl	RandHPStat		@
@ Patches/../C_code.c:3090:     unit->maxHP = RandHPStat(unit, character->baseHP + unit->pClassData->baseHP, noise, 15, 3);
	mov	r2, r10	@ unit, unit
	lsls	r3, r0, #24	@ tmp885, _165,
	asrs	r3, r3, #24	@ _166, tmp885,
	strb	r3, [r2, #18]	@ _166, unit_375(D)->maxHP
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	mov	r2, r8	@ _153, _153
	ldrb	r2, [r2, #4]	@ tmp890,
	cmp	r2, #44	@ tmp890,
	bls	.L2546		@,
	cmp	r7, #128	@ _152,
	bne	.LCB15234	@
	b	.L2487	@long jump	@
.LCB15234:
.L2546:
@ Patches/../C_code.c:3092: 		if (unit->maxHP < 15) { unit->maxHP += 15; } 
	cmp	r3, #14	@ _166,
	bgt	.L2490		@,
@ Patches/../C_code.c:3092: 		if (unit->maxHP < 15) { unit->maxHP += 15; } 
	mov	r3, r10	@ unit, unit
	adds	r0, r0, #15	@ tmp907,
	strb	r0, [r3, #18]	@ tmp907, unit_375(D)->maxHP
.L2490:
@ Patches/../C_code.c:3095: 	unit->pow   = RandStat(unit, character->basePow + unit->pClassData->basePow, noise, 25, max150percent);
	movs	r1, #13	@ tmp913,
@ Patches/../C_code.c:3095: 	unit->pow   = RandStat(unit, character->basePow + unit->pClassData->basePow, noise, 25, max150percent);
	movs	r3, #12	@ tmp914,
@ Patches/../C_code.c:3095: 	unit->pow   = RandStat(unit, character->basePow + unit->pClassData->basePow, noise, 25, max150percent);
	ldrsb	r1, [r4, r1]	@ tmp913,
@ Patches/../C_code.c:3095: 	unit->pow   = RandStat(unit, character->basePow + unit->pClassData->basePow, noise, 25, max150percent);
	ldrsb	r3, [r6, r3]	@ tmp914,
@ Patches/../C_code.c:3095: 	unit->pow   = RandStat(unit, character->basePow + unit->pClassData->basePow, noise, 25, max150percent);
	add	r2, sp, #96	@ tmp1485,,
	adds	r1, r1, r3	@ tmp915, tmp913, tmp914
	mov	r0, r10	@, unit
	movs	r3, #25	@,
	str	r5, [sp]	@ max150percent,
	bl	RandStat		@
@ Patches/../C_code.c:3095: 	unit->pow   = RandStat(unit, character->basePow + unit->pClassData->basePow, noise, 25, max150percent);
	mov	r3, r10	@ unit, unit
@ Patches/../C_code.c:3096:     unit->skl   = RandStat(unit, character->baseSkl + unit->pClassData->baseSkl, noise, 35, max150percent);
	movs	r1, #14	@ tmp918,
@ Patches/../C_code.c:3095: 	unit->pow   = RandStat(unit, character->basePow + unit->pClassData->basePow, noise, 25, max150percent);
	strb	r0, [r3, #20]	@ tmp1230, unit_375(D)->pow
@ Patches/../C_code.c:3096:     unit->skl   = RandStat(unit, character->baseSkl + unit->pClassData->baseSkl, noise, 35, max150percent);
	movs	r3, #13	@ tmp919,
@ Patches/../C_code.c:3096:     unit->skl   = RandStat(unit, character->baseSkl + unit->pClassData->baseSkl, noise, 35, max150percent);
	ldrsb	r1, [r4, r1]	@ tmp918,
@ Patches/../C_code.c:3096:     unit->skl   = RandStat(unit, character->baseSkl + unit->pClassData->baseSkl, noise, 35, max150percent);
	ldrsb	r3, [r6, r3]	@ tmp919,
@ Patches/../C_code.c:3096:     unit->skl   = RandStat(unit, character->baseSkl + unit->pClassData->baseSkl, noise, 35, max150percent);
	add	r2, sp, #96	@ tmp1487,,
	adds	r1, r1, r3	@ tmp920, tmp918, tmp919
	mov	r0, r10	@, unit
	movs	r3, #35	@,
	str	r5, [sp]	@ max150percent,
	bl	RandStat		@
@ Patches/../C_code.c:3096:     unit->skl   = RandStat(unit, character->baseSkl + unit->pClassData->baseSkl, noise, 35, max150percent);
	mov	r3, r10	@ unit, unit
@ Patches/../C_code.c:3097:     unit->spd   = RandStat(unit, character->baseSpd + unit->pClassData->baseSpd, noise, 45, max150percent);
	movs	r1, #15	@ tmp923,
@ Patches/../C_code.c:3096:     unit->skl   = RandStat(unit, character->baseSkl + unit->pClassData->baseSkl, noise, 35, max150percent);
	strb	r0, [r3, #21]	@ tmp1231, unit_375(D)->skl
@ Patches/../C_code.c:3097:     unit->spd   = RandStat(unit, character->baseSpd + unit->pClassData->baseSpd, noise, 45, max150percent);
	movs	r3, #14	@ tmp924,
@ Patches/../C_code.c:3097:     unit->spd   = RandStat(unit, character->baseSpd + unit->pClassData->baseSpd, noise, 45, max150percent);
	ldrsb	r1, [r4, r1]	@ tmp923,
@ Patches/../C_code.c:3097:     unit->spd   = RandStat(unit, character->baseSpd + unit->pClassData->baseSpd, noise, 45, max150percent);
	ldrsb	r3, [r6, r3]	@ tmp924,
@ Patches/../C_code.c:3097:     unit->spd   = RandStat(unit, character->baseSpd + unit->pClassData->baseSpd, noise, 45, max150percent);
	add	r2, sp, #96	@ tmp1489,,
	adds	r1, r1, r3	@ tmp925, tmp923, tmp924
	mov	r0, r10	@, unit
	movs	r3, #45	@,
	str	r5, [sp]	@ max150percent,
	bl	RandStat		@
@ Patches/../C_code.c:3097:     unit->spd   = RandStat(unit, character->baseSpd + unit->pClassData->baseSpd, noise, 45, max150percent);
	mov	r3, r10	@ unit, unit
@ Patches/../C_code.c:3098:     unit->def   = RandStat(unit, character->baseDef + unit->pClassData->baseDef, noise, 55, max150percent);
	movs	r1, #16	@ tmp928,
@ Patches/../C_code.c:3097:     unit->spd   = RandStat(unit, character->baseSpd + unit->pClassData->baseSpd, noise, 45, max150percent);
	strb	r0, [r3, #22]	@ tmp1232, unit_375(D)->spd
@ Patches/../C_code.c:3098:     unit->def   = RandStat(unit, character->baseDef + unit->pClassData->baseDef, noise, 55, max150percent);
	movs	r3, #15	@ tmp929,
@ Patches/../C_code.c:3098:     unit->def   = RandStat(unit, character->baseDef + unit->pClassData->baseDef, noise, 55, max150percent);
	ldrsb	r1, [r4, r1]	@ tmp928,
@ Patches/../C_code.c:3098:     unit->def   = RandStat(unit, character->baseDef + unit->pClassData->baseDef, noise, 55, max150percent);
	ldrsb	r3, [r6, r3]	@ tmp929,
@ Patches/../C_code.c:3098:     unit->def   = RandStat(unit, character->baseDef + unit->pClassData->baseDef, noise, 55, max150percent);
	add	r2, sp, #96	@ tmp1491,,
	adds	r1, r1, r3	@ tmp930, tmp928, tmp929
	mov	r0, r10	@, unit
	movs	r3, #55	@,
	str	r5, [sp]	@ max150percent,
	bl	RandStat		@
@ Patches/../C_code.c:3098:     unit->def   = RandStat(unit, character->baseDef + unit->pClassData->baseDef, noise, 55, max150percent);
	mov	r3, r10	@ unit, unit
@ Patches/../C_code.c:3099:     unit->res   = RandStat(unit, character->baseRes + unit->pClassData->baseRes, noise, 65, max150percent);
	movs	r1, #17	@ tmp933,
@ Patches/../C_code.c:3098:     unit->def   = RandStat(unit, character->baseDef + unit->pClassData->baseDef, noise, 55, max150percent);
	strb	r0, [r3, #23]	@ tmp1233, unit_375(D)->def
@ Patches/../C_code.c:3099:     unit->res   = RandStat(unit, character->baseRes + unit->pClassData->baseRes, noise, 65, max150percent);
	movs	r3, #16	@ tmp934,
@ Patches/../C_code.c:3099:     unit->res   = RandStat(unit, character->baseRes + unit->pClassData->baseRes, noise, 65, max150percent);
	ldrsb	r1, [r4, r1]	@ tmp933,
@ Patches/../C_code.c:3099:     unit->res   = RandStat(unit, character->baseRes + unit->pClassData->baseRes, noise, 65, max150percent);
	ldrsb	r3, [r6, r3]	@ tmp934,
@ Patches/../C_code.c:3099:     unit->res   = RandStat(unit, character->baseRes + unit->pClassData->baseRes, noise, 65, max150percent);
	add	r2, sp, #96	@ tmp1493,,
	adds	r1, r1, r3	@ tmp935, tmp933, tmp934
	mov	r0, r10	@, unit
	movs	r3, #65	@,
	str	r5, [sp]	@ max150percent,
	bl	RandStat		@
@ Patches/../C_code.c:3099:     unit->res   = RandStat(unit, character->baseRes + unit->pClassData->baseRes, noise, 65, max150percent);
	mov	r3, r10	@ unit, unit
@ Patches/../C_code.c:3100:     unit->lck   = RandStat(unit, character->baseLck, noise, 75, max150percent);    
	movs	r1, #18	@ tmp938,
@ Patches/../C_code.c:3099:     unit->res   = RandStat(unit, character->baseRes + unit->pClassData->baseRes, noise, 65, max150percent);
	strb	r0, [r3, #24]	@ tmp1234, unit_375(D)->res
@ Patches/../C_code.c:3100:     unit->lck   = RandStat(unit, character->baseLck, noise, 75, max150percent);    
	add	r2, sp, #96	@ tmp1495,,
	movs	r3, #75	@,
	ldrsb	r1, [r4, r1]	@ tmp938,
	mov	r0, r10	@, unit
	str	r5, [sp]	@ max150percent,
	bl	RandStat		@
@ Patches/../C_code.c:3100:     unit->lck   = RandStat(unit, character->baseLck, noise, 75, max150percent);    
	mov	r3, r10	@ unit, unit
	strb	r0, [r3, #25]	@ tmp1235, unit_375(D)->lck
@ Patches/../C_code.c:3101: 	if (StrMagInstalled) { unit->_u3A = RandStat(unit, GetUnitBaseMag(unit), noise, 85, max150percent); } 
	ldr	r3, .L2651+8	@ tmp940,
@ Patches/../C_code.c:3101: 	if (StrMagInstalled) { unit->_u3A = RandStat(unit, GetUnitBaseMag(unit), noise, 85, max150percent); } 
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	beq	.LCB15321	@
	b	.L2639	@long jump	@
.LCB15321:
.L2492:
@ Patches/../C_code.c:3107: 	unit->conBonus = 0; unit->movBonus = 0; 
	movs	r3, #0	@ tmp957,
	mov	r2, r10	@ unit, unit
	strb	r3, [r2, #26]	@ tmp957, unit_375(D)->conBonus
@ Patches/../C_code.c:3107: 	unit->conBonus = 0; unit->movBonus = 0; 
	strb	r3, [r2, #29]	@ tmp957, unit_375(D)->movBonus
@ Patches/../C_code.c:3109: 	if (RandomizeMovConBonus) { 
	ldr	r3, .L2651+12	@ tmp961,
@ Patches/../C_code.c:3109: 	if (RandomizeMovConBonus) { 
	ldr	r3, [r3]	@ RandomizeMovConBonus, RandomizeMovConBonus
	cmp	r3, #0	@ RandomizeMovConBonus,
	beq	.L2495		@,
@ Patches/../C_code.c:3110: 		if (RandBitflags->base) {
	mov	r3, r9	@ tmp1165, tmp1165
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3]	@ *RandBitflags.200_217, *RandBitflags.200_217
@ Patches/../C_code.c:3110: 		if (RandBitflags->base) {
	lsls	r3, r3, #30	@ tmp1275, *RandBitflags.200_217,
	beq	.L2495		@,
@ Patches/../C_code.c:1517: 	int uid = unit->pCharacterData->number; 
	ldr	r3, [r2]	@ unit_375(D)->pCharacterData, unit_375(D)->pCharacterData
@ Patches/../C_code.c:1526: 	if (uid < 0x2d) { result = true; } 
	ldrb	r3, [r3, #4]	@ tmp978,
	cmp	r3, #44	@ tmp978,
	bls	.L2547		@,
	cmp	r7, #128	@ _152,
	bne	.LCB15353	@
	b	.L2497	@long jump	@
.LCB15353:
.L2547:
@ Patches/../C_code.c:3112: 				unit->conBonus = ConModifiers[HashByte_Global(1, sizeof(ConModifiers), noise, 16)]; // num, max, noise, offset 
	movs	r3, #16	@,
	add	r2, sp, #96	@ tmp1507,,
	movs	r1, #12	@,
	movs	r0, #1	@,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3112: 				unit->conBonus = ConModifiers[HashByte_Global(1, sizeof(ConModifiers), noise, 16)]; // num, max, noise, offset 
	movs	r3, #48	@ tmp994,
	mov	r2, r10	@ unit, unit
@ Patches/../C_code.c:3112: 				unit->conBonus = ConModifiers[HashByte_Global(1, sizeof(ConModifiers), noise, 16)]; // num, max, noise, offset 
	ldr	r5, .L2651+16	@ tmp993,
	adds	r0, r5, r0	@ tmp995, tmp993, tmp1238
@ Patches/../C_code.c:3112: 				unit->conBonus = ConModifiers[HashByte_Global(1, sizeof(ConModifiers), noise, 16)]; // num, max, noise, offset 
	ldrb	r3, [r0, r3]	@ tmp996, ConModifiers
	strb	r3, [r2, #26]	@ tmp996, unit_375(D)->conBonus
@ Patches/../C_code.c:3113: 				if (unit->pClassData->baseMov < 7) { 
	ldr	r3, [r2, #4]	@ unit_375(D)->pClassData, unit_375(D)->pClassData
@ Patches/../C_code.c:3113: 				if (unit->pClassData->baseMov < 7) { 
	ldrb	r3, [r3, #18]	@ tmp1001,
	lsls	r3, r3, #24	@ tmp1001, tmp1001,
	asrs	r3, r3, #24	@ tmp1001, tmp1001,
	cmp	r3, #6	@ tmp1001,
	bgt	.L2495		@,
@ Patches/../C_code.c:3119: 					unit->movBonus = MovModifiers[HashByte_Global(3, sizeof(MovModifiers), noise, 14)]; // num, max, noise, offset 
	movs	r3, #14	@,
	add	r2, sp, #96	@ tmp1510,,
	movs	r1, #9	@,
	movs	r0, #3	@,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3119: 					unit->movBonus = MovModifiers[HashByte_Global(3, sizeof(MovModifiers), noise, 14)]; // num, max, noise, offset 
	movs	r3, #60	@ tmp1006,
	mov	r2, r10	@ unit, unit
@ Patches/../C_code.c:3119: 					unit->movBonus = MovModifiers[HashByte_Global(3, sizeof(MovModifiers), noise, 14)]; // num, max, noise, offset 
	adds	r5, r5, r0	@ tmp1007, tmp993, tmp1239
@ Patches/../C_code.c:3119: 					unit->movBonus = MovModifiers[HashByte_Global(3, sizeof(MovModifiers), noise, 14)]; // num, max, noise, offset 
	ldrb	r3, [r5, r3]	@ tmp1008, MovModifiers
	strb	r3, [r2, #29]	@ tmp1008, unit_375(D)->movBonus
.L2495:
@ Patches/../C_code.c:3128:     if (UNIT_FACTION(unit) == FACTION_BLUE && (unit->level != 20))
	cmp	r7, #0	@ _152,
	beq	.LCB15387	@
	b	.L2499	@long jump	@
.LCB15387:
@ Patches/../C_code.c:3128:     if (UNIT_FACTION(unit) == FACTION_BLUE && (unit->level != 20))
	mov	r3, r10	@ unit, unit
	ldrb	r3, [r3, #8]	@ tmp1010,
	lsls	r3, r3, #24	@ tmp1010, tmp1010,
	asrs	r3, r3, #24	@ tmp1010, tmp1010,
	cmp	r3, #20	@ tmp1010,
	bne	.LCB15393	@
	b	.L2500	@long jump	@
.LCB15393:
@ Patches/../C_code.c:3129:         unit->exp = 0;
	mov	r3, r10	@ unit, unit
	strb	r7, [r3, #9]	@ _152, unit_375(D)->exp
.L2501:
@ Patches/../C_code.c:3135: 		int bonusLevels = RandBitflags->playerBonus; 
	mov	r3, r9	@ tmp1165, tmp1165
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrh	r2, [r3, #2]	@ *RandBitflags.201_232, *RandBitflags.201_232
	lsls	r2, r2, #20	@ tmp1025, *RandBitflags.201_232,
@ Patches/../C_code.c:3135: 		int bonusLevels = RandBitflags->playerBonus; 
	lsrs	r2, r2, #27	@ bonusLevels, tmp1025,
@ Patches/../C_code.c:3136: 		if (bonusLevels > 20) { bonusLevels = (-10) + (bonusLevels-21); }
	cmp	r2, #20	@ bonusLevels,
	ble	.LCB15406	@
	b	.L2630	@long jump	@
.LCB15406:
.L2506:
@ Patches/../C_code.c:3142: 		if (bonusLevels) { UnitAutolevelCore(unit, unit->pClassData->number, bonusLevels); } 
	cmp	r2, #0	@ bonusLevels,
	beq	.LCB15409	@
	b	.L2640	@long jump	@
.LCB15409:
.L2505:
@ Patches/../C_code.c:3145: 	if (RandomizeRecruitment) { 
	ldr	r3, [sp, #24]	@ _577, %sfp
	cmp	r3, #0	@ _577,
	beq	.L2508		@,
@ Patches/../C_code.c:3146: 		int bonusLevels = GetAdjustedLevel(unit->pCharacterData, originalClass) - GetAdjustedLevel(character, unit->pClassData); 
	mov	r3, r10	@ unit, unit
@ Patches/../C_code.c:2865: 	int level = table->baseLevel; 
	movs	r0, #11	@ level,
@ Patches/../C_code.c:3146: 		int bonusLevels = GetAdjustedLevel(unit->pCharacterData, originalClass) - GetAdjustedLevel(character, unit->pClassData); 
	ldr	r3, [r3]	@ _240, unit_375(D)->pCharacterData
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	ldr	r2, [sp, #16]	@ originalClass, %sfp
@ Patches/../C_code.c:2865: 	int level = table->baseLevel; 
	ldrsb	r0, [r3, r0]	@ level,* level
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	ldr	r2, [r2, #40]	@ _557, originalClass_322->attributes
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	ldr	r3, [r3, #40]	@ _240->attributes, _240->attributes
	orrs	r3, r2	@ tmp1039, _557
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	lsls	r3, r3, #23	@ tmp1276, tmp1039,
	bpl	.L2509		@,
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	adds	r0, r0, #15	@ level,
.L2509:
@ Patches/../C_code.c:3146: 		int bonusLevels = GetAdjustedLevel(unit->pCharacterData, originalClass) - GetAdjustedLevel(character, unit->pClassData); 
	mov	r3, r10	@ unit, unit
	ldr	r1, [r3, #4]	@ _241, unit_375(D)->pClassData
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	ldr	r3, [r4, #40]	@ _548, character_702->attributes
@ Patches/../C_code.c:2865: 	int level = table->baseLevel; 
	ldrb	r4, [r4, #11]	@ level,
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	ldr	r5, [r1, #40]	@ _241->attributes, _241->attributes
@ Patches/../C_code.c:2865: 	int level = table->baseLevel; 
	lsls	r4, r4, #24	@ level, level,
	asrs	r4, r4, #24	@ level, level,
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	orrs	r5, r3	@ tmp1043, _548
@ Patches/../C_code.c:2865: 	int level = table->baseLevel; 
	movs	r6, r4	@ level, level
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	lsls	r5, r5, #23	@ tmp1277, tmp1043,
	bpl	.L2510		@,
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	adds	r6, r6, #15	@ level,
.L2510:
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	orrs	r2, r3	@ _557, _548
	movs	r5, r2	@ tmp1047, _557
@ Patches/../C_code.c:3146: 		int bonusLevels = GetAdjustedLevel(unit->pCharacterData, originalClass) - GetAdjustedLevel(character, unit->pClassData); 
	subs	r0, r0, r6	@ bonusLevels, level, level
@ Patches/../C_code.c:2865: 	int level = table->baseLevel; 
	movs	r2, r4	@ level, level
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	lsls	r5, r5, #23	@ tmp1278, tmp1047,
	bpl	.L2511		@,
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	adds	r2, r2, #15	@ level,
.L2511:
@ Patches/../C_code.c:2864: 	int promoted = ((table->attributes | classTable->attributes) & CA_PROMOTED);
	ldr	r5, [sp, #92]	@ randCharOriginalClass, %sfp
	ldr	r5, [r5, #40]	@ randCharOriginalClass_706->attributes, randCharOriginalClass_706->attributes
	orrs	r3, r5	@ tmp1050, randCharOriginalClass_706->attributes
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	lsls	r3, r3, #23	@ tmp1279, tmp1050,
	bpl	.L2512		@,
@ Patches/../C_code.c:2866: 	if (promoted) { level += 15; } 
	adds	r4, r4, #15	@ level,
.L2512:
@ Patches/../C_code.c:3147: 		bonusLevels += GetAdjustedLevel(character, originalClass) - GetAdjustedLevel(character, randCharOriginalClass); 
	subs	r2, r2, r4	@ tmp1054, level, level
@ Patches/../C_code.c:3147: 		bonusLevels += GetAdjustedLevel(character, originalClass) - GetAdjustedLevel(character, randCharOriginalClass); 
	adds	r2, r2, r0	@ bonusLevels, tmp1054, bonusLevels
@ Patches/../C_code.c:3148: 		if (bonusLevels) { UnitAutolevelCore_Char(unit, unit->pClassData->number, bonusLevels); } 
	cmp	r2, #0	@ bonusLevels,
	beq	.LCB15469	@
	b	.L2641	@long jump	@
.LCB15469:
.L2508:
@ Patches/../C_code.c:3155: 	if (RandBitflags->foundItems) { 
	mov	r3, r9	@ tmp1165, tmp1165
	movs	r2, #48	@ tmp1063,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #1]	@ *RandBitflags.203_243, *RandBitflags.203_243
@ Patches/../C_code.c:3155: 	if (RandBitflags->foundItems) { 
	tst	r2, r3	@ tmp1063, *RandBitflags.203_243
	beq	.LCB15479	@
	b	.L2642	@long jump	@
.LCB15479:
.L2514:
@ Patches/../C_code.c:3172: 	MakePromotedUnitHaveMinStats(unit); 
	mov	r0, r10	@, unit
	bl	MakePromotedUnitHaveMinStats		@
@ Patches/../C_code.c:3173: 	UnitCheckStatMins(unit); 
	mov	r0, r10	@, unit
	bl	UnitCheckStatMins		@
@ Patches/../C_code.c:3175: 	int orgHP  = unit->pCharacterData->baseHP  + originalClass->baseHP; 
	mov	r3, r10	@ unit, unit
@ Patches/../C_code.c:3175: 	int orgHP  = unit->pCharacterData->baseHP  + originalClass->baseHP; 
	movs	r1, #12	@ tmp1092,
@ Patches/../C_code.c:3175: 	int orgHP  = unit->pCharacterData->baseHP  + originalClass->baseHP; 
	movs	r2, #11	@ tmp1093,
	ldr	r0, [sp, #16]	@ originalClass, %sfp
@ Patches/../C_code.c:3175: 	int orgHP  = unit->pCharacterData->baseHP  + originalClass->baseHP; 
	ldr	r3, [r3]	@ _259, unit_375(D)->pCharacterData
@ Patches/../C_code.c:3175: 	int orgHP  = unit->pCharacterData->baseHP  + originalClass->baseHP; 
	ldrsb	r2, [r0, r2]	@ tmp1093,
@ Patches/../C_code.c:3175: 	int orgHP  = unit->pCharacterData->baseHP  + originalClass->baseHP; 
	ldrsb	r1, [r3, r1]	@ tmp1092,
@ Patches/../C_code.c:3175: 	int orgHP  = unit->pCharacterData->baseHP  + originalClass->baseHP; 
	adds	r2, r1, r2	@ orgHP, tmp1092, tmp1093
@ Patches/../C_code.c:3176: 	int orgPow = unit->pCharacterData->basePow + originalClass->basePow; 
	movs	r1, #13	@ tmp1094,
@ Patches/../C_code.c:3175: 	int orgHP  = unit->pCharacterData->baseHP  + originalClass->baseHP; 
	str	r2, [sp, #12]	@ orgHP, %sfp
@ Patches/../C_code.c:3176: 	int orgPow = unit->pCharacterData->basePow + originalClass->basePow; 
	movs	r2, #12	@ tmp1095,
@ Patches/../C_code.c:3176: 	int orgPow = unit->pCharacterData->basePow + originalClass->basePow; 
	ldrsb	r1, [r3, r1]	@ tmp1094,
@ Patches/../C_code.c:3176: 	int orgPow = unit->pCharacterData->basePow + originalClass->basePow; 
	mov	r9, r1	@ tmp1094, tmp1094
@ Patches/../C_code.c:3177: 	int orgSkl = unit->pCharacterData->baseSkl + originalClass->baseSkl; 
	movs	r1, #14	@ tmp1096,
@ Patches/../C_code.c:3176: 	int orgPow = unit->pCharacterData->basePow + originalClass->basePow; 
	ldrsb	r2, [r0, r2]	@ tmp1095,
@ Patches/../C_code.c:3177: 	int orgSkl = unit->pCharacterData->baseSkl + originalClass->baseSkl; 
	ldrsb	r1, [r3, r1]	@ tmp1096,
@ Patches/../C_code.c:3176: 	int orgPow = unit->pCharacterData->basePow + originalClass->basePow; 
	add	r9, r9, r2	@ tmp1094, tmp1095
@ Patches/../C_code.c:3177: 	int orgSkl = unit->pCharacterData->baseSkl + originalClass->baseSkl; 
	movs	r2, #13	@ tmp1097,
@ Patches/../C_code.c:3177: 	int orgSkl = unit->pCharacterData->baseSkl + originalClass->baseSkl; 
	mov	r8, r1	@ tmp1096, tmp1096
@ Patches/../C_code.c:3177: 	int orgSkl = unit->pCharacterData->baseSkl + originalClass->baseSkl; 
	ldrsb	r2, [r0, r2]	@ tmp1097,
@ Patches/../C_code.c:3178: 	int orgSpd = unit->pCharacterData->baseSpd + originalClass->baseSpd; 
	movs	r7, #15	@ tmp1098,
@ Patches/../C_code.c:3177: 	int orgSkl = unit->pCharacterData->baseSkl + originalClass->baseSkl; 
	add	r8, r8, r2	@ tmp1096, tmp1097
@ Patches/../C_code.c:3178: 	int orgSpd = unit->pCharacterData->baseSpd + originalClass->baseSpd; 
	movs	r2, #14	@ tmp1099,
@ Patches/../C_code.c:3178: 	int orgSpd = unit->pCharacterData->baseSpd + originalClass->baseSpd; 
	ldrsb	r7, [r3, r7]	@ tmp1098,
@ Patches/../C_code.c:3178: 	int orgSpd = unit->pCharacterData->baseSpd + originalClass->baseSpd; 
	ldrsb	r2, [r0, r2]	@ tmp1099,
@ Patches/../C_code.c:3179: 	int orgDef = unit->pCharacterData->baseDef + originalClass->baseDef; 
	movs	r6, #16	@ tmp1100,
@ Patches/../C_code.c:3178: 	int orgSpd = unit->pCharacterData->baseSpd + originalClass->baseSpd; 
	adds	r7, r7, r2	@ orgSpd, tmp1098, tmp1099
@ Patches/../C_code.c:3179: 	int orgDef = unit->pCharacterData->baseDef + originalClass->baseDef; 
	movs	r2, #15	@ tmp1101,
@ Patches/../C_code.c:3179: 	int orgDef = unit->pCharacterData->baseDef + originalClass->baseDef; 
	ldrsb	r6, [r3, r6]	@ tmp1100,
@ Patches/../C_code.c:3179: 	int orgDef = unit->pCharacterData->baseDef + originalClass->baseDef; 
	ldrsb	r2, [r0, r2]	@ tmp1101,
@ Patches/../C_code.c:3179: 	int orgDef = unit->pCharacterData->baseDef + originalClass->baseDef; 
	adds	r6, r6, r2	@ orgDef, tmp1100, tmp1101
@ Patches/../C_code.c:3180: 	int orgRes = unit->pCharacterData->baseRes + originalClass->baseRes; 
	movs	r2, #16	@ tmp1103,
@ Patches/../C_code.c:3180: 	int orgRes = unit->pCharacterData->baseRes + originalClass->baseRes; 
	movs	r5, #17	@ tmp1102,
@ Patches/../C_code.c:3180: 	int orgRes = unit->pCharacterData->baseRes + originalClass->baseRes; 
	ldrsb	r2, [r0, r2]	@ tmp1103,
@ Patches/../C_code.c:3178: 	int orgSpd = unit->pCharacterData->baseSpd + originalClass->baseSpd; 
	movs	r1, r0	@ originalClass, originalClass
@ Patches/../C_code.c:3181: 	int orgLck = unit->pCharacterData->baseLck; 
	movs	r0, #18	@ orgLck,
@ Patches/../C_code.c:3180: 	int orgRes = unit->pCharacterData->baseRes + originalClass->baseRes; 
	ldrsb	r5, [r3, r5]	@ tmp1102,
@ Patches/../C_code.c:3180: 	int orgRes = unit->pCharacterData->baseRes + originalClass->baseRes; 
	adds	r2, r5, r2	@ orgRes, tmp1102, tmp1103
	str	r2, [sp, #16]	@ orgRes, %sfp
@ Patches/../C_code.c:3181: 	int orgLck = unit->pCharacterData->baseLck; 
	ldrsb	r0, [r3, r0]	@ orgLck,* orgLck
	mov	fp, r0	@ orgLck, orgLck
@ Patches/../C_code.c:3183: 	int avgStat = orgPow + orgSkl + orgSpd + orgDef + orgRes + orgLck; 
	mov	r0, r9	@ tmp1104, orgPow
@ Patches/../C_code.c:3183: 	int avgStat = orgPow + orgSkl + orgSpd + orgDef + orgRes + orgLck; 
	mov	ip, r2	@ orgRes, orgRes
@ Patches/../C_code.c:3183: 	int avgStat = orgPow + orgSkl + orgSpd + orgDef + orgRes + orgLck; 
	add	r0, r0, r8	@ tmp1104, orgSkl
@ Patches/../C_code.c:3186: 	if (SkillSysInstalled) { 
	ldr	r2, .L2651+20	@ tmp1108,
@ Patches/../C_code.c:3183: 	int avgStat = orgPow + orgSkl + orgSpd + orgDef + orgRes + orgLck; 
	adds	r0, r0, r7	@ tmp1105, tmp1104, orgSpd
@ Patches/../C_code.c:3183: 	int avgStat = orgPow + orgSkl + orgSpd + orgDef + orgRes + orgLck; 
	adds	r0, r0, r6	@ tmp1106, tmp1105, orgDef
@ Patches/../C_code.c:3186: 	if (SkillSysInstalled) { 
	ldr	r5, [r2]	@ SkillSysInstalled.205_289, SkillSysInstalled
@ Patches/../C_code.c:3183: 	int avgStat = orgPow + orgSkl + orgSpd + orgDef + orgRes + orgLck; 
	add	r0, r0, ip	@ tmp1107, orgRes
@ Patches/../C_code.c:3183: 	int avgStat = orgPow + orgSkl + orgSpd + orgDef + orgRes + orgLck; 
	add	r0, r0, fp	@ avgStat, orgLck
@ Patches/../C_code.c:3186: 	if (SkillSysInstalled) { 
	cmp	r5, #0	@ SkillSysInstalled.205_289,
	bne	.LCB15536	@
	b	.L2545	@long jump	@
.LCB15536:
@ Patches/../C_code.c:3187: 		orgMag = GetBaseMag(unit->pCharacterData->number, originalClass->number); 
	ldrb	r1, [r1, #4]	@ tmp1110,
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	ldr	r2, .L2651+24	@ tmp1109,
@ Patches/../C_code.c:3187: 		orgMag = GetBaseMag(unit->pCharacterData->number, originalClass->number); 
	ldrb	r3, [r3, #4]	@ tmp1114,
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	lsls	r1, r1, #2	@ tmp1111, tmp1110,
	ldrb	r1, [r1, r2]	@ tmp1112, MagClassTable
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	ldr	r2, .L2651+28	@ tmp1113,
	lsls	r3, r3, #1	@ tmp1115, tmp1114,
	ldrb	r3, [r3, r2]	@ tmp1116, MagCharTable
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	adds	r3, r1, r3	@ orgMag, tmp1112, tmp1116
@ Patches/../C_code.c:3188: 		avgStat += orgMag; countOfStats++; 
	mov	ip, r3	@ orgMag, orgMag
@ Patches/../C_code.c:3188: 		avgStat += orgMag; countOfStats++; 
	movs	r1, #7	@ countOfStats,
@ Patches/../C_code.c:2344: 	return MagClassTable[classID].base + MagCharTable[charID].base; 
	str	r3, [sp, #20]	@ orgMag, %sfp
@ Patches/../C_code.c:3188: 		avgStat += orgMag; countOfStats++; 
	add	r0, r0, ip	@ avgStat, orgMag
	b	.L2652		@
.L2653:
	.align	2
.L2651:
	.word	RandBitflags
	.word	UnitAddItem
	.word	StrMagInstalled
	.word	RandomizeMovConBonus
	.word	.LANCHOR1
	.word	SkillSysInstalled
	.word	MagClassTable
	.word	MagCharTable
.L2652:
.L2527:
@ Patches/../C_code.c:3191: 	avgStat = (avgStat + (countOfStats / 2)) / countOfStats; 
	ldr	r3, .L2654	@ tmp1119,
@ Patches/../C_code.c:3191: 	avgStat = (avgStat + (countOfStats / 2)) / countOfStats; 
	adds	r0, r0, #3	@ _294,
@ Patches/../C_code.c:3191: 	avgStat = (avgStat + (countOfStats / 2)) / countOfStats; 
	bl	.L14		@
@ Patches/../C_code.c:3192: 	int max = GetHPStatMaxBonus(unit, orgHP, avgStat); 
	ldr	r1, [sp, #12]	@, %sfp
	movs	r2, r0	@, avgStat
@ Patches/../C_code.c:3191: 	avgStat = (avgStat + (countOfStats / 2)) / countOfStats; 
	movs	r4, r0	@ avgStat, tmp1243
@ Patches/../C_code.c:3192: 	int max = GetHPStatMaxBonus(unit, orgHP, avgStat); 
	mov	r0, r10	@, unit
	bl	GetHPStatMaxBonus		@
@ Patches/../C_code.c:3193: 	if (unit->maxHP > max) { unit->maxHP = max; unit->curHP = max; } 
	mov	r3, r10	@ unit, unit
	ldrb	r3, [r3, #18]	@ tmp1121,
	lsls	r3, r3, #24	@ tmp1121, tmp1121,
	asrs	r3, r3, #24	@ tmp1121, tmp1121,
@ Patches/../C_code.c:3193: 	if (unit->maxHP > max) { unit->maxHP = max; unit->curHP = max; } 
	cmp	r3, r0	@ tmp1121, max
	ble	.L2528		@,
@ Patches/../C_code.c:3193: 	if (unit->maxHP > max) { unit->maxHP = max; unit->curHP = max; } 
	lsls	r0, r0, #24	@ tmp1127, max,
	lsrs	r3, r0, #16	@ tmp1136, tmp1127,
	lsrs	r0, r0, #24	@ tmp1139, tmp1127,
	orrs	r0, r3	@ tmp1143, tmp1136
	mov	r3, r10	@ unit, unit
	strh	r0, [r3, #18]	@ tmp1143, MEM <vector(2) signed char> [(signed char *)unit_375(D) + 18B]
.L2528:
@ Patches/../C_code.c:3194: 	max = GetStatMaxBonus(unit, orgPow, avgStat); 
	movs	r2, r4	@, avgStat
	mov	r1, r9	@, orgPow
	mov	r0, r10	@, unit
	bl	GetStatMaxBonus		@
@ Patches/../C_code.c:3195: 	if (unit->pow > max) { unit->pow = max; } 
	mov	r3, r10	@ unit, unit
	ldrb	r3, [r3, #20]	@ tmp1145,
	lsls	r3, r3, #24	@ tmp1145, tmp1145,
	asrs	r3, r3, #24	@ tmp1145, tmp1145,
@ Patches/../C_code.c:3195: 	if (unit->pow > max) { unit->pow = max; } 
	cmp	r3, r0	@ tmp1145, max
	ble	.L2529		@,
@ Patches/../C_code.c:3195: 	if (unit->pow > max) { unit->pow = max; } 
	mov	r3, r10	@ unit, unit
	strb	r0, [r3, #20]	@ max, unit_375(D)->pow
.L2529:
@ Patches/../C_code.c:3196: 	max = GetStatMaxBonus(unit, orgSkl, avgStat); 
	movs	r2, r4	@, avgStat
	mov	r1, r8	@, orgSkl
	mov	r0, r10	@, unit
	bl	GetStatMaxBonus		@
@ Patches/../C_code.c:3197: 	if (unit->skl > max) { unit->skl = max; } 
	mov	r3, r10	@ unit, unit
	ldrb	r3, [r3, #21]	@ tmp1147,
	lsls	r3, r3, #24	@ tmp1147, tmp1147,
	asrs	r3, r3, #24	@ tmp1147, tmp1147,
@ Patches/../C_code.c:3197: 	if (unit->skl > max) { unit->skl = max; } 
	cmp	r3, r0	@ tmp1147, max
	ble	.L2530		@,
@ Patches/../C_code.c:3197: 	if (unit->skl > max) { unit->skl = max; } 
	mov	r3, r10	@ unit, unit
	strb	r0, [r3, #21]	@ max, unit_375(D)->skl
.L2530:
@ Patches/../C_code.c:3198: 	max = GetStatMaxBonus(unit, orgSpd, avgStat); 
	movs	r2, r4	@, avgStat
	movs	r1, r7	@, orgSpd
	mov	r0, r10	@, unit
	bl	GetStatMaxBonus		@
@ Patches/../C_code.c:3199: 	if (unit->spd > max) { unit->spd = max; } 
	mov	r3, r10	@ unit, unit
	ldrb	r3, [r3, #22]	@ tmp1149,
	lsls	r3, r3, #24	@ tmp1149, tmp1149,
	asrs	r3, r3, #24	@ tmp1149, tmp1149,
@ Patches/../C_code.c:3199: 	if (unit->spd > max) { unit->spd = max; } 
	cmp	r3, r0	@ tmp1149, max
	ble	.L2531		@,
@ Patches/../C_code.c:3199: 	if (unit->spd > max) { unit->spd = max; } 
	mov	r3, r10	@ unit, unit
	strb	r0, [r3, #22]	@ max, unit_375(D)->spd
.L2531:
@ Patches/../C_code.c:3200: 	max = GetStatMaxBonus(unit, orgDef, avgStat); 
	movs	r2, r4	@, avgStat
	movs	r1, r6	@, orgDef
	mov	r0, r10	@, unit
	bl	GetStatMaxBonus		@
@ Patches/../C_code.c:3201: 	if (unit->def > max) { unit->def = max; } 
	mov	r3, r10	@ unit, unit
	ldrb	r3, [r3, #23]	@ tmp1151,
	lsls	r3, r3, #24	@ tmp1151, tmp1151,
	asrs	r3, r3, #24	@ tmp1151, tmp1151,
@ Patches/../C_code.c:3201: 	if (unit->def > max) { unit->def = max; } 
	cmp	r3, r0	@ tmp1151, max
	ble	.L2532		@,
@ Patches/../C_code.c:3201: 	if (unit->def > max) { unit->def = max; } 
	mov	r3, r10	@ unit, unit
	strb	r0, [r3, #23]	@ max, unit_375(D)->def
.L2532:
@ Patches/../C_code.c:3202: 	max = GetStatMaxBonus(unit, orgRes, avgStat); 
	movs	r2, r4	@, avgStat
	mov	r0, r10	@, unit
	ldr	r1, [sp, #16]	@, %sfp
	bl	GetStatMaxBonus		@
@ Patches/../C_code.c:3203: 	if (unit->res > max) { unit->res = max; } 
	mov	r3, r10	@ unit, unit
	ldrb	r3, [r3, #24]	@ tmp1153,
	lsls	r3, r3, #24	@ tmp1153, tmp1153,
	asrs	r3, r3, #24	@ tmp1153, tmp1153,
@ Patches/../C_code.c:3203: 	if (unit->res > max) { unit->res = max; } 
	cmp	r3, r0	@ tmp1153, max
	ble	.L2533		@,
@ Patches/../C_code.c:3203: 	if (unit->res > max) { unit->res = max; } 
	mov	r3, r10	@ unit, unit
	strb	r0, [r3, #24]	@ max, unit_375(D)->res
.L2533:
@ Patches/../C_code.c:3204: 	max = GetStatMaxBonus(unit, orgLck, avgStat); 
	movs	r2, r4	@, avgStat
	mov	r1, fp	@, orgLck
	mov	r0, r10	@, unit
	bl	GetStatMaxBonus		@
@ Patches/../C_code.c:3205: 	if (unit->lck > max) { unit->lck = max; } 
	mov	r3, r10	@ unit, unit
	ldrb	r3, [r3, #25]	@ tmp1155,
	lsls	r3, r3, #24	@ tmp1155, tmp1155,
	asrs	r3, r3, #24	@ tmp1155, tmp1155,
@ Patches/../C_code.c:3205: 	if (unit->lck > max) { unit->lck = max; } 
	cmp	r3, r0	@ tmp1155, max
	ble	.L2534		@,
@ Patches/../C_code.c:3205: 	if (unit->lck > max) { unit->lck = max; } 
	mov	r3, r10	@ unit, unit
	strb	r0, [r3, #25]	@ max, unit_375(D)->lck
.L2534:
@ Patches/../C_code.c:3208: 	if (SkillSysInstalled) { 	
	cmp	r5, #0	@ SkillSysInstalled.205_289,
	beq	.L2535		@,
@ Patches/../C_code.c:3209: 		max = GetStatMaxBonus(unit, orgMag, avgStat); 
	movs	r2, r4	@, avgStat
	mov	r0, r10	@, unit
	ldr	r1, [sp, #20]	@, %sfp
	bl	GetStatMaxBonus		@
@ Patches/../C_code.c:3210: 		if (unit->_u3A > max) { unit->_u3A = max; } 
	movs	r3, #58	@ tmp1157,
	mov	r2, r10	@ unit, unit
	ldrb	r2, [r2, r3]	@ tmp1158,
@ Patches/../C_code.c:3210: 		if (unit->_u3A > max) { unit->_u3A = max; } 
	cmp	r2, r0	@ tmp1158, max
	ble	.L2535		@,
@ Patches/../C_code.c:3210: 		if (unit->_u3A > max) { unit->_u3A = max; } 
	mov	r2, r10	@ unit, unit
	strb	r0, [r2, r3]	@ max, unit_375(D)->_u3A
.L2535:
@ Patches/../C_code.c:3215: 	UnitCheckStatCaps(unit);
	mov	r0, r10	@, unit
	bl	UnitCheckStatCaps		@
@ Patches/../C_code.c:3216: }
	add	sp, sp, #396	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2446:
@ Patches/../C_code.c:2977: 	noise[2] = 5; // becomes class id 
	movs	r3, #5	@ tmp753,
	str	r3, [sp, #104]	@ tmp753, noise[2]
@ Patches/../C_code.c:2978: 	noise[3] = character->affinity; // players don't use gCh anymore 
	ldr	r3, [sp, #88]	@ _41, %sfp
	str	r3, [sp, #108]	@ _41, noise[3]
	b	.L2447		@
.L2633:
@ Patches/../C_code.c:2969: 		noise[1] = uDef->xPosition; 
	ldr	r2, [sp, #20]	@ uDef, %sfp
	ldrb	r3, [r2, #4]	@ *uDef_373(D), *uDef_373(D)
	lsls	r3, r3, #26	@ tmp739, *uDef_373(D),
	lsrs	r3, r3, #26	@ tmp740, tmp739,
	str	r3, [sp, #100]	@ tmp740, noise[1]
@ Patches/../C_code.c:2970: 		noise[2] = uDef->yPosition;  
	ldrh	r3, [r2, #4]	@ *uDef_373(D), *uDef_373(D)
	lsls	r3, r3, #20	@ tmp748, *uDef_373(D),
	lsrs	r3, r3, #26	@ tmp749, tmp748,
	str	r3, [sp, #104]	@ tmp749, noise[2]
	b	.L2447		@
.L2632:
@ Patches/../C_code.c:2937: 		noise2[c] = uDef->xPosition; c++; 
	mov	r5, fp	@ tmp1169, tmp1169
@ Patches/../C_code.c:2937: 		noise2[c] = uDef->xPosition; c++; 
	ldr	r1, [sp, #20]	@ uDef, %sfp
	ldrb	r3, [r1, #4]	@ *uDef_373(D), *uDef_373(D)
	lsls	r3, r3, #26	@ tmp684, *uDef_373(D),
	lsrs	r3, r3, #26	@ tmp683, tmp684,
@ Patches/../C_code.c:2937: 		noise2[c] = uDef->xPosition; c++; 
	strb	r3, [r5, #19]	@ tmp683, noise2[19]
@ Patches/../C_code.c:2938: 		noise2[c] = uDef->yPosition; c++; 
	ldrh	r3, [r1, #4]	@ *uDef_373(D), *uDef_373(D)
	lsls	r3, r3, #20	@ tmp691, *uDef_373(D),
	lsrs	r3, r3, #26	@ tmp690, tmp691,
@ Patches/../C_code.c:2938: 		noise2[c] = uDef->yPosition; c++; 
	strb	r3, [r5, #20]	@ tmp690, noise2[20]
@ Patches/../C_code.c:2940: 		noise2[c] = gCh; c++; // so gCh is used 
	ldr	r3, .L2654+4	@ tmp1172,
	str	r3, [sp, #36]	@ tmp1172, %sfp
	ldrb	r3, [r3]	@ gCh, gCh
	strb	r3, [r5, #21]	@ gCh, noise2[21]
	movs	r3, #23	@ prephitmp_868,
	movs	r7, r3	@ prephitmp_868, prephitmp_868
@ Patches/../C_code.c:2940: 		noise2[c] = gCh; c++; // so gCh is used 
	subs	r3, r3, #1	@ c,
	b	.L2443		@
.L2449:
@ Patches/../C_code.c:2992:         unit->pClassData = GetClassData(RandClass2(character->defaultClass, noise2, unit));
	ldrb	r0, [r4, #5]	@ tmp1162,
	b	.L2626		@
.L2636:
@ Patches/../C_code.c:3044: 			if (personalWexp > wexp) { wexp = personalWexp; } 
	movs	r0, r7	@ _147, personalWexp
	cmp	r7, r3	@ personalWexp, wexp
	bge	.L2463		@,
	movs	r0, r3	@ _147, wexp
.L2463:
@ Patches/../C_code.c:2249: 	if (!RandBitflags->class) { return number; } 
	mov	r3, r9	@ tmp1165, tmp1165
@ Patches/../C_code.c:2249: 	if (!RandBitflags->class) { return number; } 
	movs	r2, #6	@ tmp1457,
@ Patches/../C_code.c:2249: 	if (!RandBitflags->class) { return number; } 
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #1]	@ *RandBitflags.141_594, *RandBitflags.141_594
@ Patches/../C_code.c:2249: 	if (!RandBitflags->class) { return number; } 
	tst	r2, r3	@ tmp1457, *RandBitflags.141_594
	beq	.L2469		@,
@ Patches/../C_code.c:1476: 	return HashPercent(number, noise, offset, true, false);
	movs	r3, #0	@ tmp809,
	movs	r2, r5	@, i
	str	r3, [sp]	@ tmp809,
	add	r1, sp, #96	@ tmp1458,,
	adds	r3, r3, #1	@,
	bl	HashPercent		@
@ Patches/../C_code.c:2250: 	number = HashByPercent(number, noise, offset)+1; 
	adds	r0, r0, #1	@ number,
@ Patches/../C_code.c:2251: 	if (number > 255) { number = 255; } 
	cmp	r0, #255	@ number,
	ble	.L2469		@,
	movs	r0, #255	@ number,
.L2469:
@ Patches/../C_code.c:2252: 	return number; 
	lsls	r0, r0, #16	@ _597, number,
	asrs	r0, r0, #16	@ _597, _597,
@ Patches/../C_code.c:3048: 		unit->ranks[i] = wexp; 
	lsls	r0, r0, #24	@ tmp813, _597,
	lsrs	r0, r0, #24	@ _131, tmp813,
	strb	r0, [r6]	@ _131, MEM[(unsigned char *)_716]
@ Patches/../C_code.c:3050: 		if (i == 7) { // dark 
	cmp	r5, #7	@ i,
	beq	.L2643		@,
@ Patches/../C_code.c:3061: 		if (!ShouldRandomizeClass(unit)) { 
	mov	r0, r10	@, unit
	bl	ShouldRandomizeClass		@
@ Patches/../C_code.c:3061: 		if (!ShouldRandomizeClass(unit)) { 
	cmp	r0, #0	@ tmp1227,
	bne	.L2627		@,
@ Patches/../C_code.c:3062: 			if (character->baseRanks[i]) { // original
	ldr	r3, [sp, #12]	@ tmp1205, %sfp
	ldrb	r3, [r3, r5]	@ _860, MEM[(unsigned char *)_861 + _712 * 1]
@ Patches/../C_code.c:3062: 			if (character->baseRanks[i]) { // original
	cmp	r3, #0	@ _860,
	beq	.L2627		@,
@ Patches/../C_code.c:3063: 				unit->ranks[i] = character->baseRanks[i]; } 
	strb	r3, [r6]	@ _860, MEM[(unsigned char *)_863]
.L2627:
@ Patches/../C_code.c:3041:     for (int i = 0; i < 8; ++i) { 
	adds	r5, r5, #1	@ i,
@ Patches/../C_code.c:3041:     for (int i = 0; i < 8; ++i) { 
	adds	r6, r6, #1	@ ivtmp.1594,
	b	.L2476		@
.L2643:
@ Patches/../C_code.c:3055: 			if ((unit->ranks[i]) && (unit->ranks[i] < 31)) { unit->ranks[i] = 31; } 
	subs	r0, r0, #1	@ tmp815,
@ Patches/../C_code.c:3055: 			if ((unit->ranks[i]) && (unit->ranks[i] < 31)) { unit->ranks[i] = 31; } 
	lsls	r0, r0, #24	@ tmp819, tmp815,
	lsrs	r0, r0, #24	@ tmp818, tmp819,
	cmp	r0, #29	@ tmp818,
	bhi	.L2471		@,
@ Patches/../C_code.c:3055: 			if ((unit->ranks[i]) && (unit->ranks[i] < 31)) { unit->ranks[i] = 31; } 
	movs	r3, #47	@ tmp820,
	movs	r2, #31	@ tmp821,
	mov	r1, r10	@ unit, unit
	strb	r2, [r1, r3]	@ tmp821, unit_375(D)->ranks[7]
.L2471:
@ Patches/../C_code.c:3061: 		if (!ShouldRandomizeClass(unit)) { 
	mov	r0, r10	@, unit
	bl	ShouldRandomizeClass		@
@ Patches/../C_code.c:3061: 		if (!ShouldRandomizeClass(unit)) { 
	cmp	r0, #0	@ tmp1252,
	beq	.LCB15830	@
	b	.L2474	@long jump	@
.LCB15830:
@ Patches/../C_code.c:3062: 			if (character->baseRanks[i]) { // original
	ldrb	r3, [r4, #27]	@ _895, MEM[(unsigned char *)_523 + 7B]
@ Patches/../C_code.c:3062: 			if (character->baseRanks[i]) { // original
	cmp	r3, #0	@ _895,
	bne	.LCB15834	@
	b	.L2474	@long jump	@
.LCB15834:
@ Patches/../C_code.c:3063: 				unit->ranks[i] = character->baseRanks[i]; } 
	strb	r3, [r6]	@ _895, MEM[(unsigned char *)_849]
	b	.L2474		@
.L2499:
@ Patches/../C_code.c:3131:         unit->exp = UNIT_EXP_DISABLED;
	movs	r3, #255	@ tmp1017,
	mov	r2, r10	@ unit, unit
	strb	r3, [r2, #9]	@ tmp1017, unit_375(D)->exp
@ Patches/../C_code.c:3134: 	if (UNIT_FACTION(unit) != FACTION_RED) { 
	cmp	r7, #128	@ _152,
	beq	.LCB15844	@
	b	.L2501	@long jump	@
.LCB15844:
.L2502:
@ Patches/../C_code.c:3140: 		int bonusLevels = RandValues->bonus; 
	ldr	r3, .L2654+8	@ tmp1030,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldrb	r2, [r3, #3]	@ *RandValues.202_236, *RandValues.202_236
	lsls	r2, r2, #26	@ tmp1035, *RandValues.202_236,
@ Patches/../C_code.c:3140: 		int bonusLevels = RandValues->bonus; 
	lsrs	r2, r2, #27	@ bonusLevels, tmp1035,
@ Patches/../C_code.c:3141: 		if (bonusLevels > 20) { bonusLevels = (-10) + (bonusLevels-21); }
	cmp	r2, #20	@ bonusLevels,
	bgt	.LCB15854	@
	b	.L2506	@long jump	@
.LCB15854:
.L2630:
@ Patches/../C_code.c:3141: 		if (bonusLevels > 20) { bonusLevels = (-10) + (bonusLevels-21); }
	subs	r2, r2, #31	@ bonusLevels,
@ Patches/../C_code.c:3142: 		if (bonusLevels) { UnitAutolevelCore(unit, unit->pClassData->number, bonusLevels); } 
	cmp	r2, #0	@ bonusLevels,
	bne	.LCB15858	@
	b	.L2505	@long jump	@
.LCB15858:
.L2640:
@ Patches/../C_code.c:3142: 		if (bonusLevels) { UnitAutolevelCore(unit, unit->pClassData->number, bonusLevels); } 
	mov	r3, r10	@ unit, unit
	ldr	r3, [r3, #4]	@ unit_375(D)->pClassData, unit_375(D)->pClassData
@ Patches/../C_code.c:3142: 		if (bonusLevels) { UnitAutolevelCore(unit, unit->pClassData->number, bonusLevels); } 
	mov	r0, r10	@, unit
	ldrb	r1, [r3, #4]	@ tmp1038,
	bl	UnitAutolevelCore		@
	b	.L2505		@
.L2545:
@ Patches/../C_code.c:3185: 	int orgMag = 0; 
	movs	r3, #0	@ orgMag,
@ Patches/../C_code.c:3182: 	int countOfStats = 6; 
	movs	r1, #6	@ countOfStats,
@ Patches/../C_code.c:3185: 	int orgMag = 0; 
	str	r3, [sp, #20]	@ orgMag, %sfp
	b	.L2527		@
.L2638:
@ Patches/../C_code.c:3087: 	if (gCh > 0xD) { if (max150percent == 2) { max150percent = 0; } } // Lyn mode + first ch of eliwood/hector mode: nerf enemies a little 
	movs	r5, #0	@ max150percent,
	cmp	r2, #13	@ pretmp_888,
	bls	.LCB15878	@
	b	.L2486	@long jump	@
.LCB15878:
@ Patches/../C_code.c:3084: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { max150percent = 2; } 
	movs	r5, r7	@ tmp878, _152
	subs	r3, r5, #1	@ tmp879, tmp878
	sbcs	r5, r5, r3	@ tmp878, tmp878, tmp879
	lsls	r5, r5, #1	@ max150percent, tmp878,
	b	.L2486		@
.L2637:
@ Patches/../C_code.c:3073: 	if (i == 1) { AppendAvailableStaffList(list, unit); } // first item will always be a weapon if possible 
	mov	r1, r10	@, unit
	movs	r0, r5	@, tmp1173
	bl	AppendAvailableStaffList		@
@ Patches/../C_code.c:3074: 	UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list)); }
	ldrb	r1, [r7, #1]	@ _639, MEM[(unsigned char *)_690 + 1B]
@ Patches/../C_code.c:1967: 	if (!item) { return item; } 
	cmp	r1, #0	@ _639,
	beq	.LCB15891	@
	b	.L2479	@long jump	@
.LCB15891:
@ Patches/../C_code.c:3074: 	UnitAddItem(unit, RandNewWeapon(unit, uDef->items[i], noise, i, list)); }
	movs	r1, #0	@,
	mov	r0, r10	@, unit
	ldr	r3, .L2654+12	@ tmp1164,
	bl	.L14		@
@ Patches/../C_code.c:3072: 	for (int i = 0; (i < UNIT_DEFINITION_ITEM_COUNT) && (uDef->items[i]); ++i) { 
	movs	r6, #2	@ i,
	b	.L2477		@
.L2639:
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	ldrb	r2, [r6, #4]	@ tmp943,
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	ldr	r3, .L2654+16	@ tmp942,
	lsls	r2, r2, #2	@ tmp944, tmp943,
	ldrb	r6, [r2, r3]	@ _610, MagClassTable
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	mov	r3, r8	@ _153, _153
	ldrh	r3, [r3, #6]	@ tmp945,
	cmp	r3, #0	@ tmp945,
	bne	.L2644		@,
.L2493:
@ Patches/../C_code.c:294: 	return GetReorderedCharacter(unit->pCharacterData)->number; 
	mov	r2, r8	@ _153, _153
	ldrb	r2, [r2, #4]	@ tmp949,
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	ldr	r3, .L2654+20	@ tmp948,
	lsls	r2, r2, #1	@ tmp950, tmp949,
	ldrb	r1, [r2, r3]	@ tmp951, MagCharTable
@ Patches/../C_code.c:3101: 	if (StrMagInstalled) { unit->_u3A = RandStat(unit, GetUnitBaseMag(unit), noise, 85, max150percent); } 
	mov	r0, r10	@, unit
	movs	r3, #85	@,
	add	r2, sp, #96	@ tmp1500,,
	str	r5, [sp]	@ max150percent,
@ Patches/../C_code.c:2341: 	return MagClassTable[unit->pClassData->number].base + MagCharTable[GetReorderedUnitID(unit)].base; 
	adds	r1, r1, r6	@ tmp952, tmp951, _610
@ Patches/../C_code.c:3101: 	if (StrMagInstalled) { unit->_u3A = RandStat(unit, GetUnitBaseMag(unit), noise, 85, max150percent); } 
	bl	RandStat		@
@ Patches/../C_code.c:3101: 	if (StrMagInstalled) { unit->_u3A = RandStat(unit, GetUnitBaseMag(unit), noise, 85, max150percent); } 
	movs	r3, #58	@ tmp953,
	mov	r2, r10	@ unit, unit
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	movs	r7, #192	@ tmp956,
@ Patches/../C_code.c:3101: 	if (StrMagInstalled) { unit->_u3A = RandStat(unit, GetUnitBaseMag(unit), noise, 85, max150percent); } 
	strb	r0, [r2, r3]	@ tmp1237, unit_375(D)->_u3A
@ Patches/../C_code.c:1518: 	if (UNIT_FACTION(unit) != FACTION_RED) { return true; } 
	ldrb	r3, [r2, #11]	@ tmp955,
	lsls	r3, r3, #24	@ tmp955, tmp955,
	asrs	r3, r3, #24	@ tmp955, tmp955,
	ands	r7, r3	@ _152, tmp955
	b	.L2492		@
.L2642:
	add	r4, sp, #96	@ tmp1529,,
@ Patches/../C_code.c:3155: 	if (RandBitflags->foundItems) { 
	movs	r3, r4	@ tmp1530, tmp1529
.L2517:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_625], MEM[(int *)_625]
	cmp	r2, #0	@ MEM[(int *)_625],
	beq	.L2645		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.1578,
	cmp	fp, r3	@ tmp1169, ivtmp.1578
	bne	.L2517		@,
.L2516:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	movs	r3, #8	@,
	movs	r1, #100	@,
	movs	r0, #1	@,
	add	r2, sp, #96	@ tmp1532,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3156: 		if (HashByte_Ch(1, 100, noise, 8) < BonusItemChance) { UnitHasBonusItem = true; 
	ldr	r3, .L2654+24	@ tmp1073,
@ Patches/../C_code.c:3156: 		if (HashByte_Ch(1, 100, noise, 8) < BonusItemChance) { UnitHasBonusItem = true; 
	ldr	r3, [r3]	@ BonusItemChance, BonusItemChance
	cmp	r0, r3	@ tmp1240, BonusItemChance
	blt	.LCB15954	@
	b	.L2514	@long jump	@
.LCB15954:
.L2521:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r3, [r4]	@ MEM[(int *)_635], MEM[(int *)_635]
	cmp	r3, #0	@ MEM[(int *)_635],
	beq	.L2646		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r4, r4, #4	@ ivtmp.1571,
	cmp	fp, r4	@ tmp1169, ivtmp.1571
	bne	.L2521		@,
.L2520:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	movs	r3, #7	@,
	movs	r1, #100	@,
	movs	r0, #2	@,
	add	r2, sp, #96	@ tmp1534,,
	bl	HashByte_Global		@
@ Patches/../C_code.c:3164: 	if (UNIT_FACTION(unit) == FACTION_BLUE) { c = 3; } 
	mov	r3, r10	@ unit, unit
	movs	r4, #192	@ tmp1082,
	ldrb	r3, [r3, #11]	@ tmp1081,
	lsls	r3, r3, #24	@ tmp1081, tmp1081,
	asrs	r3, r3, #24	@ tmp1081, tmp1081,
	ands	r4, r3	@ noWeapons, tmp1081
@ Patches/../C_code.c:3157: 			if (HashByte_Ch(2, 100, noise, 7) < 50) { 
	cmp	r0, #49	@ tmp1241,
	bls	.L2522		@,
@ Patches/../C_code.c:3164: 	if (UNIT_FACTION(unit) == FACTION_BLUE) { c = 3; } 
	cmp	r4, #0	@ noWeapons,
	bne	.L2647		@,
@ Patches/../C_code.c:3153: 	int noWeapons = true; 
	movs	r4, #1	@ noWeapons,
@ Patches/../C_code.c:3164: 	if (UNIT_FACTION(unit) == FACTION_BLUE) { c = 3; } 
	movs	r0, #3	@ c,
	b	.L2523		@
.L2487:
@ Patches/../C_code.c:3094: 	else { if (unit->maxHP < 10) { unit->maxHP += 10; } }
	cmp	r3, #9	@ _166,
	ble	.LCB15986	@
	b	.L2490	@long jump	@
.LCB15986:
@ Patches/../C_code.c:3094: 	else { if (unit->maxHP < 10) { unit->maxHP += 10; } }
	mov	r3, r10	@ unit, unit
	adds	r0, r0, #10	@ tmp910,
	strb	r0, [r3, #18]	@ tmp910, unit_375(D)->maxHP
	b	.L2490		@
.L2644:
	mov	r3, r8	@ _153, _153
	ldrb	r0, [r3, #4]	@ MEM[(unsigned char *)_153 + 4B], MEM[(unsigned char *)_153 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
	mov	r8, r0	@ _153, tmp1236
	b	.L2493		@
.L2634:
	ldrb	r0, [r4, #4]	@ MEM[(unsigned char *)_579 + 4B], MEM[(unsigned char *)_579 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
	movs	r4, r0	@ character, tmp1215
	b	.L2452		@
.L2500:
@ Patches/../C_code.c:3131:         unit->exp = UNIT_EXP_DISABLED;
	movs	r3, #255	@ tmp1013,
	mov	r2, r10	@ unit, unit
	strb	r3, [r2, #9]	@ tmp1013, unit_375(D)->exp
	b	.L2501		@
.L2641:
@ Patches/../C_code.c:3148: 		if (bonusLevels) { UnitAutolevelCore_Char(unit, unit->pClassData->number, bonusLevels); } 
	mov	r0, r10	@, unit
	ldrb	r1, [r1, #4]	@ tmp1055,
	bl	UnitAutolevelCore_Char		@
	b	.L2508		@
.L2497:
@ Patches/../C_code.c:3131:         unit->exp = UNIT_EXP_DISABLED;
	movs	r3, #255	@ tmp1015,
	strb	r3, [r2, #9]	@ tmp1015, unit_375(D)->exp
	b	.L2502		@
.L2645:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [sp, #36]	@ tmp1172, %sfp
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r3]	@ gCh, *_625
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L2516		@
.L2655:
	.align	2
.L2654:
	.word	__aeabi_idiv
	.word	gCh
	.word	RandValues
	.word	UnitAddItem
	.word	MagClassTable
	.word	MagCharTable
	.word	BonusItemChance
.L2522:
@ Patches/../C_code.c:3158: 				noWeapons = false; if (UNIT_FACTION(unit) == FACTION_RED) { unit->state |= US_DROP_ITEM; } 
	cmp	r4, #128	@ noWeapons,
	beq	.L2524		@,
@ Patches/../C_code.c:3164: 	if (UNIT_FACTION(unit) == FACTION_BLUE) { c = 3; } 
	movs	r0, #3	@ c,
@ Patches/../C_code.c:3164: 	if (UNIT_FACTION(unit) == FACTION_BLUE) { c = 3; } 
	cmp	r4, #0	@ noWeapons,
	beq	.L2523		@,
@ Patches/../C_code.c:3158: 				noWeapons = false; if (UNIT_FACTION(unit) == FACTION_RED) { unit->state |= US_DROP_ITEM; } 
	movs	r4, #0	@ noWeapons,
@ Patches/../C_code.c:3163: 	c = 2; 
	subs	r0, r0, #1	@ c,
.L2523:
	mov	r3, r10	@ ivtmp.1563, unit
@ Patches/../C_code.c:3167: 		if (unit->items[i]) { continue; } 
	ldrh	r1, [r3, #30]	@ MEM[(short unsigned int *)_605], MEM[(short unsigned int *)_605]
	adds	r3, r3, #30	@ ivtmp.1563,
@ Patches/../C_code.c:3166: 		for (int i = 0; i < c; ++i) { 
	movs	r2, #0	@ i,
@ Patches/../C_code.c:3167: 		if (unit->items[i]) { continue; } 
	cmp	r1, #0	@ MEM[(short unsigned int *)_605],
	beq	.L2525		@,
.L2648:
@ Patches/../C_code.c:3166: 		for (int i = 0; i < c; ++i) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:3166: 		for (int i = 0; i < c; ++i) { 
	adds	r3, r3, #2	@ ivtmp.1563,
	cmp	r0, r2	@ c, i
	bne	.LCB16067	@
	b	.L2514	@long jump	@
.LCB16067:
@ Patches/../C_code.c:3167: 		if (unit->items[i]) { continue; } 
	ldrh	r1, [r3]	@ MEM[(short unsigned int *)_605], MEM[(short unsigned int *)_605]
	cmp	r1, #0	@ MEM[(short unsigned int *)_605],
	bne	.L2648		@,
.L2525:
	movs	r3, #1	@ tmp1090,
	add	r1, sp, #96	@ tmp1539,,
	str	r3, [sp]	@ tmp1090,
	str	r4, [sp, #4]	@ noWeapons,
	movs	r3, #0	@,
	movs	r0, #4	@,
	bl	RandNewItem.part.0		@
@ Patches/../C_code.c:3168: 		UnitAddItem(unit, RandNewItem(4, noise, i, false, true, noWeapons)); break; 
	ldr	r3, .L2656	@ tmp1091,
	movs	r1, r0	@ _564, tmp1242
	mov	r0, r10	@, unit
	bl	.L14		@
@ Patches/../C_code.c:3168: 		UnitAddItem(unit, RandNewItem(4, noise, i, false, true, noWeapons)); break; 
	b	.L2514		@
.L2647:
@ Patches/../C_code.c:3153: 	int noWeapons = true; 
	movs	r4, #1	@ noWeapons,
@ Patches/../C_code.c:3163: 	c = 2; 
	movs	r0, #2	@ c,
	b	.L2523		@
.L2524:
@ Patches/../C_code.c:3158: 				noWeapons = false; if (UNIT_FACTION(unit) == FACTION_RED) { unit->state |= US_DROP_ITEM; } 
	mov	r3, r10	@ unit, unit
	ldr	r2, [r3, #12]	@ unit_375(D)->state, unit_375(D)->state
	movs	r3, #128	@ tmp1087,
	lsls	r3, r3, #5	@ tmp1087, tmp1087,
	orrs	r3, r2	@ tmp1085, unit_375(D)->state
	mov	r2, r10	@ unit, unit
@ Patches/../C_code.c:3158: 				noWeapons = false; if (UNIT_FACTION(unit) == FACTION_RED) { unit->state |= US_DROP_ITEM; } 
	movs	r4, #0	@ noWeapons,
@ Patches/../C_code.c:3163: 	c = 2; 
	movs	r0, #2	@ c,
@ Patches/../C_code.c:3158: 				noWeapons = false; if (UNIT_FACTION(unit) == FACTION_RED) { unit->state |= US_DROP_ITEM; } 
	str	r3, [r2, #12]	@ tmp1085, unit_375(D)->state
	b	.L2523		@
.L2646:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r3, [sp, #36]	@ tmp1172, %sfp
	ldrb	r3, [r3]	@ gCh, gCh
	str	r3, [r4]	@ gCh, *_635
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L2520		@
.L2635:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [sp, #36]	@ tmp1172, %sfp
	ldrb	r2, [r2]	@ gCh, gCh
	str	r7, [sp, #12]	@ tmp1171, %sfp
	str	r2, [r3]	@ gCh, *_587
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	bl	.L2457	@ far jump	@
.L2657:
	.align	2
.L2656:
	.word	UnitAddItem
	.size	UnitInitFromDefinition, .-UnitInitFromDefinition
	.align	1
	.p2align 2,,3
	.global	CheckBattleUnitStatCaps
	.syntax unified
	.code	16
	.thumb_func
	.type	CheckBattleUnitStatCaps, %function
CheckBattleUnitStatCaps:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:3754: 	int max = CallGetMaxHP(unit); 
	ldr	r3, .L2670	@ tmp196,
@ Patches/../C_code.c:3753: void CheckBattleUnitStatCaps(struct Unit* unit, struct BattleUnit* bu) {
	movs	r5, r1	@ bu, tmp272
	movs	r4, r0	@ unit, tmp271
@ Patches/../C_code.c:3754: 	int max = CallGetMaxHP(unit); 
	bl	.L14		@
@ Patches/../C_code.c:3755:     if ((unit->maxHP + bu->changeHP) > max) { 
	movs	r1, #18	@ _1,
@ Patches/../C_code.c:3755:     if ((unit->maxHP + bu->changeHP) > max) { 
	movs	r2, #115	@ tmp197,
@ Patches/../C_code.c:3755:     if ((unit->maxHP + bu->changeHP) > max) { 
	ldrsb	r1, [r4, r1]	@ _1,* _1
@ Patches/../C_code.c:3755:     if ((unit->maxHP + bu->changeHP) > max) { 
	ldrsb	r3, [r5, r2]	@ tmp198,
@ Patches/../C_code.c:3755:     if ((unit->maxHP + bu->changeHP) > max) { 
	adds	r3, r3, r1	@ tmp199, tmp198, _1
@ Patches/../C_code.c:3755:     if ((unit->maxHP + bu->changeHP) > max) { 
	cmp	r3, r0	@ tmp199, max
	ble	.L2659		@,
@ Patches/../C_code.c:3756: 	bu->changeHP = max - unit->maxHP; } 
	subs	r0, r0, r1	@ tmp202, max, _1
@ Patches/../C_code.c:3756: 	bu->changeHP = max - unit->maxHP; } 
	strb	r0, [r5, r2]	@ tmp202, bu_85(D)->changeHP
.L2659:
@ Patches/../C_code.c:3758: 	max = GetUnitMaxPow(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxPow		@
@ Patches/../C_code.c:3759:     if ((unit->pow + bu->changePow) > max ) { 
	movs	r1, #20	@ _10,
@ Patches/../C_code.c:3759:     if ((unit->pow + bu->changePow) > max ) { 
	movs	r2, #116	@ tmp205,
@ Patches/../C_code.c:3759:     if ((unit->pow + bu->changePow) > max ) { 
	ldrsb	r1, [r4, r1]	@ _10,* _10
@ Patches/../C_code.c:3759:     if ((unit->pow + bu->changePow) > max ) { 
	ldrsb	r3, [r5, r2]	@ tmp206,
@ Patches/../C_code.c:3759:     if ((unit->pow + bu->changePow) > max ) { 
	adds	r3, r3, r1	@ tmp207, tmp206, _10
@ Patches/../C_code.c:3759:     if ((unit->pow + bu->changePow) > max ) { 
	cmp	r3, r0	@ tmp207, max
	ble	.L2660		@,
@ Patches/../C_code.c:3760: 	bu->changePow = max - unit->pow; } 
	subs	r0, r0, r1	@ tmp210, max, _10
@ Patches/../C_code.c:3760: 	bu->changePow = max - unit->pow; } 
	strb	r0, [r5, r2]	@ tmp210, bu_85(D)->changePow
.L2660:
@ Patches/../C_code.c:3762: 	max = GetUnitMaxSkl(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxSkl		@
@ Patches/../C_code.c:3763:     if ((unit->skl + bu->changeSkl) > max) { 
	movs	r1, #21	@ _19,
@ Patches/../C_code.c:3763:     if ((unit->skl + bu->changeSkl) > max) { 
	movs	r2, #117	@ tmp213,
@ Patches/../C_code.c:3763:     if ((unit->skl + bu->changeSkl) > max) { 
	ldrsb	r1, [r4, r1]	@ _19,* _19
@ Patches/../C_code.c:3763:     if ((unit->skl + bu->changeSkl) > max) { 
	ldrsb	r3, [r5, r2]	@ tmp214,
@ Patches/../C_code.c:3763:     if ((unit->skl + bu->changeSkl) > max) { 
	adds	r3, r3, r1	@ tmp215, tmp214, _19
@ Patches/../C_code.c:3763:     if ((unit->skl + bu->changeSkl) > max) { 
	cmp	r3, r0	@ tmp215, max
	ble	.L2661		@,
@ Patches/../C_code.c:3764: 	bu->changeSkl = max - unit->skl; }
	subs	r0, r0, r1	@ tmp218, max, _19
@ Patches/../C_code.c:3764: 	bu->changeSkl = max - unit->skl; }
	strb	r0, [r5, r2]	@ tmp218, bu_85(D)->changeSkl
.L2661:
@ Patches/../C_code.c:3766: 	max = GetUnitMaxSpd(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxSpd		@
@ Patches/../C_code.c:3767:     if ((unit->spd + bu->changeSpd) > max) { 
	movs	r1, #22	@ _28,
@ Patches/../C_code.c:3767:     if ((unit->spd + bu->changeSpd) > max) { 
	movs	r2, #118	@ tmp221,
@ Patches/../C_code.c:3767:     if ((unit->spd + bu->changeSpd) > max) { 
	ldrsb	r1, [r4, r1]	@ _28,* _28
@ Patches/../C_code.c:3767:     if ((unit->spd + bu->changeSpd) > max) { 
	ldrsb	r3, [r5, r2]	@ tmp222,
@ Patches/../C_code.c:3767:     if ((unit->spd + bu->changeSpd) > max) { 
	adds	r3, r3, r1	@ tmp223, tmp222, _28
@ Patches/../C_code.c:3767:     if ((unit->spd + bu->changeSpd) > max) { 
	cmp	r3, r0	@ tmp223, max
	ble	.L2662		@,
@ Patches/../C_code.c:3768: 	bu->changeSpd = max - unit->spd; }
	subs	r0, r0, r1	@ tmp226, max, _28
@ Patches/../C_code.c:3768: 	bu->changeSpd = max - unit->spd; }
	strb	r0, [r5, r2]	@ tmp226, bu_85(D)->changeSpd
.L2662:
@ Patches/../C_code.c:3770: 	max = GetUnitMaxDef(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxDef		@
@ Patches/../C_code.c:3771:     if ((unit->def + bu->changeDef) > max) { 
	movs	r1, #23	@ _37,
@ Patches/../C_code.c:3771:     if ((unit->def + bu->changeDef) > max) { 
	movs	r2, #119	@ tmp229,
@ Patches/../C_code.c:3771:     if ((unit->def + bu->changeDef) > max) { 
	ldrsb	r1, [r4, r1]	@ _37,* _37
@ Patches/../C_code.c:3771:     if ((unit->def + bu->changeDef) > max) { 
	ldrsb	r3, [r5, r2]	@ tmp230,
@ Patches/../C_code.c:3771:     if ((unit->def + bu->changeDef) > max) { 
	adds	r3, r3, r1	@ tmp231, tmp230, _37
@ Patches/../C_code.c:3771:     if ((unit->def + bu->changeDef) > max) { 
	cmp	r3, r0	@ tmp231, max
	ble	.L2663		@,
@ Patches/../C_code.c:3772: 	bu->changeDef = max - unit->def; } 
	subs	r0, r0, r1	@ tmp234, max, _37
@ Patches/../C_code.c:3772: 	bu->changeDef = max - unit->def; } 
	strb	r0, [r5, r2]	@ tmp234, bu_85(D)->changeDef
.L2663:
@ Patches/../C_code.c:3774: 	max = GetUnitMaxRes(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxRes		@
@ Patches/../C_code.c:3775:     if ((unit->res + bu->changeRes) > max) { 
	movs	r1, #24	@ _46,
@ Patches/../C_code.c:3775:     if ((unit->res + bu->changeRes) > max) { 
	movs	r2, #120	@ tmp237,
@ Patches/../C_code.c:3775:     if ((unit->res + bu->changeRes) > max) { 
	ldrsb	r1, [r4, r1]	@ _46,* _46
@ Patches/../C_code.c:3775:     if ((unit->res + bu->changeRes) > max) { 
	ldrsb	r3, [r5, r2]	@ tmp238,
@ Patches/../C_code.c:3775:     if ((unit->res + bu->changeRes) > max) { 
	adds	r3, r3, r1	@ tmp239, tmp238, _46
@ Patches/../C_code.c:3775:     if ((unit->res + bu->changeRes) > max) { 
	cmp	r3, r0	@ tmp239, max
	ble	.L2664		@,
@ Patches/../C_code.c:3776: 	bu->changeRes = max - unit->res; } 
	subs	r0, r0, r1	@ tmp242, max, _46
@ Patches/../C_code.c:3776: 	bu->changeRes = max - unit->res; } 
	strb	r0, [r5, r2]	@ tmp242, bu_85(D)->changeRes
.L2664:
@ Patches/../C_code.c:3778: 	max = GetUnitMaxLck(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxLck		@
@ Patches/../C_code.c:3779:     if ((unit->lck + bu->changeLck) > max) { 
	movs	r1, #25	@ _55,
@ Patches/../C_code.c:3779:     if ((unit->lck + bu->changeLck) > max) { 
	movs	r2, #121	@ tmp245,
@ Patches/../C_code.c:3779:     if ((unit->lck + bu->changeLck) > max) { 
	ldrsb	r1, [r4, r1]	@ _55,* _55
@ Patches/../C_code.c:3779:     if ((unit->lck + bu->changeLck) > max) { 
	ldrsb	r3, [r5, r2]	@ tmp246,
@ Patches/../C_code.c:3779:     if ((unit->lck + bu->changeLck) > max) { 
	adds	r3, r3, r1	@ tmp247, tmp246, _55
@ Patches/../C_code.c:3779:     if ((unit->lck + bu->changeLck) > max) { 
	cmp	r3, r0	@ tmp247, max
	ble	.L2665		@,
@ Patches/../C_code.c:3780: 	bu->changeLck = max - unit->lck; } 
	subs	r0, r0, r1	@ tmp250, max, _55
@ Patches/../C_code.c:3780: 	bu->changeLck = max - unit->lck; } 
	strb	r0, [r5, r2]	@ tmp250, bu_85(D)->changeLck
.L2665:
@ Patches/../C_code.c:3782: 	if (StrMagInstalled) { max = GetUnitMaxMag(unit);
	ldr	r3, .L2670+4	@ tmp253,
@ Patches/../C_code.c:3782: 	if (StrMagInstalled) { max = GetUnitMaxMag(unit);
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	bne	.L2669		@,
.L2658:
@ Patches/../C_code.c:3786: }
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L2669:
@ Patches/../C_code.c:3782: 	if (StrMagInstalled) { max = GetUnitMaxMag(unit);
	movs	r0, r4	@, unit
	bl	GetUnitMaxMag		@
@ Patches/../C_code.c:3783: 		if ((unit->_u3A + bu->changeCon) > max) { 
	movs	r3, #58	@ tmp255,
@ Patches/../C_code.c:3783: 		if ((unit->_u3A + bu->changeCon) > max) { 
	movs	r2, #122	@ tmp256,
@ Patches/../C_code.c:3783: 		if ((unit->_u3A + bu->changeCon) > max) { 
	ldrb	r1, [r4, r3]	@ _65,
@ Patches/../C_code.c:3783: 		if ((unit->_u3A + bu->changeCon) > max) { 
	ldrsb	r3, [r5, r2]	@ tmp257,
@ Patches/../C_code.c:3783: 		if ((unit->_u3A + bu->changeCon) > max) { 
	adds	r3, r3, r1	@ tmp258, tmp257, _65
@ Patches/../C_code.c:3783: 		if ((unit->_u3A + bu->changeCon) > max) { 
	cmp	r3, r0	@ tmp258, max
	ble	.L2658		@,
@ Patches/../C_code.c:3784: 		bu->changeCon = max - unit->_u3A; } 
	subs	r0, r0, r1	@ tmp260, max, _65
@ Patches/../C_code.c:3784: 		bu->changeCon = max - unit->_u3A; } 
	strb	r0, [r5, r2]	@ tmp260, bu_85(D)->changeCon
@ Patches/../C_code.c:3786: }
	b	.L2658		@
.L2671:
	.align	2
.L2670:
	.word	CallGetMaxHP
	.word	StrMagInstalled
	.size	CheckBattleUnitStatCaps, .-CheckBattleUnitStatCaps
	.align	1
	.p2align 2,,3
	.global	CheckBattleUnitLevelUp
	.syntax unified
	.code	16
	.thumb_func
	.type	CheckBattleUnitLevelUp, %function
CheckBattleUnitLevelUp:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, fp	@,
	mov	r7, r10	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
	push	{r5, r6, r7, lr}	@
@ Patches/../C_code.c:3549:     if (CanBattleUnitGainLevels(bu) && bu->unit.exp >= 100) {
	ldr	r3, .L2795	@ tmp271,
@ Patches/../C_code.c:3548: void CheckBattleUnitLevelUp(struct BattleUnit* bu) {
	sub	sp, sp, #92	@,,
@ Patches/../C_code.c:3548: void CheckBattleUnitLevelUp(struct BattleUnit* bu) {
	movs	r4, r0	@ bu, tmp471
@ Patches/../C_code.c:3549:     if (CanBattleUnitGainLevels(bu) && bu->unit.exp >= 100) {
	bl	.L14		@
@ Patches/../C_code.c:3549:     if (CanBattleUnitGainLevels(bu) && bu->unit.exp >= 100) {
	cmp	r0, #0	@ tmp472,
	bne	.LCB16274	@
	b	.L2672	@long jump	@
.LCB16274:
@ Patches/../C_code.c:3549:     if (CanBattleUnitGainLevels(bu) && bu->unit.exp >= 100) {
	ldrb	r5, [r4, #9]	@ _2,
@ Patches/../C_code.c:3549:     if (CanBattleUnitGainLevels(bu) && bu->unit.exp >= 100) {
	cmp	r5, #99	@ _2,
	bhi	.LCB16277	@
	b	.L2672	@long jump	@
.LCB16277:
@ Patches/../C_code.c:3551: 		int noise[4] = {0, 0, 0, 0}; 
	ldr	r3, .L2795+4	@ tmp279,
	movs	r2, #12	@,
	movs	r1, #0	@,
	add	r0, sp, #76	@,,
	bl	.L14		@
@ Patches/../C_code.c:3552: 		noise[0] = bu->unit.pCharacterData->number;
	ldr	r3, [r4]	@ bu_159(D)->unit.pCharacterData, bu_159(D)->unit.pCharacterData
	ldrb	r3, [r3, #4]	@ tmp284,
	str	r3, [sp, #72]	@ tmp284, noise[0]
@ Patches/../C_code.c:3553: 		int level = bu->unit.level + (((bu->unit.pClassData->attributes & CA_PROMOTED) != 0)*20);
	movs	r3, #8	@ _6,
	ldrsb	r3, [r4, r3]	@ _6,* _6
	mov	r8, r3	@ _6, _6
	movs	r7, r3	@ _7, _6
@ Patches/../C_code.c:3553: 		int level = bu->unit.level + (((bu->unit.pClassData->attributes & CA_PROMOTED) != 0)*20);
	ldr	r3, [r4, #4]	@ bu_159(D)->unit.pClassData, bu_159(D)->unit.pClassData
@ Patches/../C_code.c:3553: 		int level = bu->unit.level + (((bu->unit.pClassData->attributes & CA_PROMOTED) != 0)*20);
	ldr	r3, [r3, #40]	@ _8->attributes, _8->attributes
@ Patches/../C_code.c:3553: 		int level = bu->unit.level + (((bu->unit.pClassData->attributes & CA_PROMOTED) != 0)*20);
	lsls	r3, r3, #23	@ tmp508, _8->attributes,
	bpl	.L2674		@,
@ Patches/../C_code.c:3553: 		int level = bu->unit.level + (((bu->unit.pClassData->attributes & CA_PROMOTED) != 0)*20);
	adds	r7, r7, #20	@ _7,
.L2674:
@ Patches/../C_code.c:3554: 		int useRN = !(IsAnythingRandomized());
	bl	IsAnythingRandomized		@
@ Patches/../C_code.c:3554: 		int useRN = !(IsAnythingRandomized());
	rsbs	r6, r0, #0	@ tmp290, tmp473
	adcs	r6, r6, r0	@ tmp290, tmp473
@ Patches/../C_code.c:3556:         bu->unit.level++;
	mov	r3, r8	@ _6, _6
@ Patches/../C_code.c:3555: 		bu->unit.exp -= 100;
	subs	r5, r5, #100	@ tmp292,
@ Patches/../C_code.c:3556:         bu->unit.level++;
	adds	r3, r3, #1	@ _6,
@ Patches/../C_code.c:3555: 		bu->unit.exp -= 100;
	lsls	r5, r5, #24	@ tmp293, tmp292,
@ Patches/../C_code.c:3556:         bu->unit.level++;
	lsls	r3, r3, #24	@ tmp297, tmp296,
@ Patches/../C_code.c:3555: 		bu->unit.exp -= 100;
	lsrs	r5, r5, #24	@ _13, tmp293,
@ Patches/../C_code.c:3556:         bu->unit.level++;
	asrs	r3, r3, #24	@ _16, tmp297,
@ Patches/../C_code.c:3555: 		bu->unit.exp -= 100;
	strb	r5, [r4, #9]	@ _13, bu_159(D)->unit.exp
@ Patches/../C_code.c:3556:         bu->unit.level++;
	strb	r3, [r4, #8]	@ _16, bu_159(D)->unit.level
@ Patches/../C_code.c:3558: 		if (bu->unit.level == 20) {
	cmp	r3, #20	@ _16,
	bne	.LCB16312	@
	b	.L2791	@long jump	@
.LCB16312:
.L2675:
@ Patches/../C_code.c:3564: 		struct Unit* unit = GetUnit(bu->unit.index); 
	movs	r0, #11	@ tmp307,
	ldr	r3, .L2795+8	@ tmp308,
	ldrsb	r0, [r4, r0]	@ tmp307,
	bl	.L14		@
@ Patches/../C_code.c:3565: 		int hpGrowth = GetUnitHPGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3564: 		struct Unit* unit = GetUnit(bu->unit.index); 
	movs	r5, r0	@ unit, tmp474
@ Patches/../C_code.c:3565: 		int hpGrowth = GetUnitHPGrowth(unit, true);
	bl	GetUnitHPGrowth		@
@ Patches/../C_code.c:3566: 		int powGrowth = GetUnitPowGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3565: 		int hpGrowth = GetUnitHPGrowth(unit, true);
	mov	fp, r0	@ hpGrowth, tmp475
@ Patches/../C_code.c:3566: 		int powGrowth = GetUnitPowGrowth(unit, true);
	movs	r0, r5	@, unit
	bl	GetUnitPowGrowth		@
@ Patches/../C_code.c:3567: 		int sklGrowth = GetUnitSklGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3566: 		int powGrowth = GetUnitPowGrowth(unit, true);
	str	r0, [sp, #12]	@ tmp476, %sfp
@ Patches/../C_code.c:3567: 		int sklGrowth = GetUnitSklGrowth(unit, true);
	movs	r0, r5	@, unit
	bl	GetUnitSklGrowth		@
@ Patches/../C_code.c:3568: 		int spdGrowth = GetUnitSpdGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3567: 		int sklGrowth = GetUnitSklGrowth(unit, true);
	str	r0, [sp, #16]	@ tmp477, %sfp
@ Patches/../C_code.c:3568: 		int spdGrowth = GetUnitSpdGrowth(unit, true);
	movs	r0, r5	@, unit
	bl	GetUnitSpdGrowth		@
@ Patches/../C_code.c:3569: 		int defGrowth = GetUnitDefGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3568: 		int spdGrowth = GetUnitSpdGrowth(unit, true);
	str	r0, [sp, #20]	@ tmp478, %sfp
@ Patches/../C_code.c:3569: 		int defGrowth = GetUnitDefGrowth(unit, true);
	movs	r0, r5	@, unit
	bl	GetUnitDefGrowth		@
@ Patches/../C_code.c:3570: 		int resGrowth = GetUnitResGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3569: 		int defGrowth = GetUnitDefGrowth(unit, true);
	str	r0, [sp, #24]	@ tmp479, %sfp
@ Patches/../C_code.c:3570: 		int resGrowth = GetUnitResGrowth(unit, true);
	movs	r0, r5	@, unit
	bl	GetUnitResGrowth		@
@ Patches/../C_code.c:3571: 		int lckGrowth = GetUnitLckGrowth(unit, true);
	movs	r1, #1	@,
@ Patches/../C_code.c:3570: 		int resGrowth = GetUnitResGrowth(unit, true);
	str	r0, [sp, #28]	@ tmp480, %sfp
@ Patches/../C_code.c:3571: 		int lckGrowth = GetUnitLckGrowth(unit, true);
	movs	r0, r5	@, unit
	bl	GetUnitLckGrowth		@
@ Patches/../C_code.c:3572: 		int magGrowth = GetUnitMagGrowth(unit, true); 
	movs	r1, #1	@,
@ Patches/../C_code.c:3571: 		int lckGrowth = GetUnitLckGrowth(unit, true);
	str	r0, [sp, #32]	@ tmp481, %sfp
@ Patches/../C_code.c:3572: 		int magGrowth = GetUnitMagGrowth(unit, true); 
	movs	r0, r5	@, unit
	bl	GetUnitMagGrowth		@
@ Patches/../C_code.c:3576: 		int maxHP = CallGetMaxHP(unit); 
	ldr	r3, .L2795+12	@ tmp309,
@ Patches/../C_code.c:3572: 		int magGrowth = GetUnitMagGrowth(unit, true); 
	str	r0, [sp, #60]	@ tmp482, %sfp
@ Patches/../C_code.c:3576: 		int maxHP = CallGetMaxHP(unit); 
	movs	r0, r5	@, unit
	bl	.L14		@
	str	r0, [sp, #64]	@ maxHP, %sfp
	mov	r9, r0	@ maxHP, tmp483
@ Patches/../C_code.c:3577: 		int maxPow = GetUnitMaxPow(unit); 
	movs	r0, r5	@, unit
	bl	GetUnitMaxPow		@
	str	r0, [sp, #36]	@ tmp484, %sfp
@ Patches/../C_code.c:3578: 		int maxSkl = GetUnitMaxSkl(unit); 
	movs	r0, r5	@, unit
	bl	GetUnitMaxSkl		@
	str	r0, [sp, #40]	@ tmp485, %sfp
@ Patches/../C_code.c:3579: 		int maxSpd = GetUnitMaxSpd(unit); 
	movs	r0, r5	@, unit
	bl	GetUnitMaxSpd		@
	str	r0, [sp, #44]	@ tmp486, %sfp
@ Patches/../C_code.c:3580: 		int maxDef = GetUnitMaxDef(unit); 
	movs	r0, r5	@, unit
	bl	GetUnitMaxDef		@
	str	r0, [sp, #48]	@ tmp487, %sfp
@ Patches/../C_code.c:3581: 		int maxRes = GetUnitMaxRes(unit); 
	movs	r0, r5	@, unit
	bl	GetUnitMaxRes		@
	str	r0, [sp, #52]	@ tmp488, %sfp
@ Patches/../C_code.c:3582: 		int maxLck = GetUnitMaxLck(unit); 
	movs	r0, r5	@, unit
	bl	GetUnitMaxLck		@
	str	r0, [sp, #56]	@ tmp489, %sfp
@ Patches/../C_code.c:3583: 		int maxMag = GetUnitMaxMag(unit); 
	movs	r0, r5	@, unit
	bl	GetUnitMaxMag		@
@ Patches/../C_code.c:3586:         bu->changeHP  = NewGetStatIncrease(hpGrowth, noise, level, 1, useRN); 
	movs	r3, #1	@,
@ Patches/../C_code.c:3583: 		int maxMag = GetUnitMaxMag(unit); 
	str	r0, [sp, #68]	@ tmp490, %sfp
@ Patches/../C_code.c:3586:         bu->changeHP  = NewGetStatIncrease(hpGrowth, noise, level, 1, useRN); 
	movs	r2, r7	@, _7
	mov	r0, fp	@, hpGrowth
	str	r6, [sp]	@ tmp290,
	add	r1, sp, #72	@ tmp528,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3586:         bu->changeHP  = NewGetStatIncrease(hpGrowth, noise, level, 1, useRN); 
	movs	r3, #115	@ tmp312,
	lsls	r0, r0, #24	@ tmp311, tmp491,
	asrs	r0, r0, #24	@ _24, tmp311,
	strb	r0, [r4, r3]	@ _24, bu_159(D)->changeHP
@ Patches/../C_code.c:3587: 		if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	beq	.LCB16389	@
	b	.L2792	@long jump	@
.LCB16389:
.L2676:
@ Patches/../C_code.c:3588:         statGainTotal += bu->changeHP; else bu->changeHP = 0; 
	movs	r3, #115	@ tmp316,
	movs	r2, #0	@ tmp317,
	strb	r2, [r4, r3]	@ tmp317, bu_159(D)->changeHP
@ Patches/../C_code.c:3563:         statGainTotal = 0;
	movs	r3, #0	@ statGainTotal,
	mov	r8, r3	@ statGainTotal, statGainTotal
.L2677:
@ Patches/../C_code.c:3590:         bu->changePow = NewGetStatIncrease(powGrowth, noise, level, 2, useRN); 
	movs	r3, #2	@,
	movs	r2, r7	@, _7
	str	r6, [sp]	@ tmp290,
	ldr	r0, [sp, #12]	@, %sfp
	add	r1, sp, #72	@ tmp531,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3590:         bu->changePow = NewGetStatIncrease(powGrowth, noise, level, 2, useRN); 
	movs	r3, #116	@ tmp321,
	lsls	r0, r0, #24	@ tmp320, tmp492,
	asrs	r0, r0, #24	@ _30, tmp320,
	strb	r0, [r4, r3]	@ _30, bu_159(D)->changePow
@ Patches/../C_code.c:3591: 		if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	bne	.LCB16410	@
	b	.L2678	@long jump	@
.LCB16410:
@ Patches/../C_code.c:3591: 		if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	movs	r3, #20	@ tmp323,
	ldrsb	r3, [r5, r3]	@ tmp323,
@ Patches/../C_code.c:3591: 		if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	ldr	r2, [sp, #36]	@ maxPow, %sfp
@ Patches/../C_code.c:3591: 		if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	adds	r3, r3, r0	@ tmp324, tmp323, _30
@ Patches/../C_code.c:3591: 		if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	cmp	r3, r2	@ tmp324, maxPow
	ble	.LCB16416	@
	b	.L2678	@long jump	@
.LCB16416:
@ Patches/../C_code.c:3592:         statGainTotal += bu->changePow; else bu->changePow = 0; 
	add	r8, r8, r0	@ statGainTotal, _30
.L2679:
@ Patches/../C_code.c:3594:         bu->changeSkl = NewGetStatIncrease(sklGrowth, noise, level, 3, useRN); 
	movs	r3, #3	@,
	movs	r2, r7	@, _7
	str	r6, [sp]	@ tmp290,
	ldr	r0, [sp, #16]	@, %sfp
	add	r1, sp, #72	@ tmp533,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3594:         bu->changeSkl = NewGetStatIncrease(sklGrowth, noise, level, 3, useRN); 
	movs	r3, #117	@ tmp330,
	lsls	r0, r0, #24	@ tmp329, tmp493,
	asrs	r0, r0, #24	@ _36, tmp329,
	strb	r0, [r4, r3]	@ _36, bu_159(D)->changeSkl
@ Patches/../C_code.c:3595: 		if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	bne	.LCB16432	@
	b	.L2680	@long jump	@
.LCB16432:
@ Patches/../C_code.c:3595: 		if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	movs	r3, #21	@ tmp332,
	ldrsb	r3, [r5, r3]	@ tmp332,
@ Patches/../C_code.c:3595: 		if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	ldr	r2, [sp, #40]	@ maxSkl, %sfp
@ Patches/../C_code.c:3595: 		if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	adds	r3, r3, r0	@ tmp333, tmp332, _36
@ Patches/../C_code.c:3595: 		if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	cmp	r3, r2	@ tmp333, maxSkl
	ble	.LCB16438	@
	b	.L2680	@long jump	@
.LCB16438:
@ Patches/../C_code.c:3596:         statGainTotal += bu->changeSkl; else bu->changeSkl = 0; 
	add	r8, r8, r0	@ statGainTotal, _36
.L2681:
@ Patches/../C_code.c:3598:         bu->changeSpd = NewGetStatIncrease(spdGrowth, noise, level, 4, useRN); 
	movs	r3, #4	@,
	movs	r2, r7	@, _7
	str	r6, [sp]	@ tmp290,
	ldr	r0, [sp, #20]	@, %sfp
	add	r1, sp, #72	@ tmp535,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3598:         bu->changeSpd = NewGetStatIncrease(spdGrowth, noise, level, 4, useRN); 
	movs	r3, #118	@ tmp339,
	lsls	r0, r0, #24	@ tmp338, tmp494,
	asrs	r0, r0, #24	@ _42, tmp338,
	strb	r0, [r4, r3]	@ _42, bu_159(D)->changeSpd
@ Patches/../C_code.c:3599: 		if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	bne	.LCB16454	@
	b	.L2682	@long jump	@
.LCB16454:
@ Patches/../C_code.c:3599: 		if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	movs	r3, #22	@ tmp341,
	ldrsb	r3, [r5, r3]	@ tmp341,
@ Patches/../C_code.c:3599: 		if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	ldr	r2, [sp, #44]	@ maxSpd, %sfp
@ Patches/../C_code.c:3599: 		if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	adds	r3, r3, r0	@ tmp342, tmp341, _42
@ Patches/../C_code.c:3599: 		if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	cmp	r3, r2	@ tmp342, maxSpd
	ble	.LCB16460	@
	b	.L2682	@long jump	@
.LCB16460:
@ Patches/../C_code.c:3600:         statGainTotal += bu->changeSpd; else bu->changeSpd = 0; 
	add	r8, r8, r0	@ statGainTotal, _42
.L2683:
@ Patches/../C_code.c:3602:         bu->changeDef = NewGetStatIncrease(defGrowth, noise, level, 5, useRN); 
	movs	r3, #5	@,
	movs	r2, r7	@, _7
	str	r6, [sp]	@ tmp290,
	ldr	r0, [sp, #24]	@, %sfp
	add	r1, sp, #72	@ tmp537,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3602:         bu->changeDef = NewGetStatIncrease(defGrowth, noise, level, 5, useRN); 
	movs	r3, #119	@ tmp348,
	lsls	r0, r0, #24	@ tmp347, tmp495,
	asrs	r0, r0, #24	@ _48, tmp347,
	strb	r0, [r4, r3]	@ _48, bu_159(D)->changeDef
@ Patches/../C_code.c:3603: 		if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	beq	.L2684		@,
@ Patches/../C_code.c:3603: 		if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	movs	r3, #23	@ tmp350,
	ldrsb	r3, [r5, r3]	@ tmp350,
@ Patches/../C_code.c:3603: 		if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	ldr	r2, [sp, #48]	@ maxDef, %sfp
@ Patches/../C_code.c:3603: 		if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	adds	r3, r3, r0	@ tmp351, tmp350, _48
@ Patches/../C_code.c:3603: 		if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	cmp	r3, r2	@ tmp351, maxDef
	bgt	.L2684		@,
@ Patches/../C_code.c:3604:         statGainTotal += bu->changeDef; else bu->changeDef = 0; 
	add	r8, r8, r0	@ statGainTotal, _48
.L2685:
@ Patches/../C_code.c:3606:         bu->changeRes = NewGetStatIncrease(resGrowth, noise, level, 6, useRN); 
	movs	r3, #6	@,
	movs	r2, r7	@, _7
	str	r6, [sp]	@ tmp290,
	ldr	r0, [sp, #28]	@, %sfp
	add	r1, sp, #72	@ tmp539,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3606:         bu->changeRes = NewGetStatIncrease(resGrowth, noise, level, 6, useRN); 
	movs	r3, #120	@ tmp357,
	lsls	r0, r0, #24	@ tmp356, tmp496,
	asrs	r0, r0, #24	@ _54, tmp356,
	strb	r0, [r4, r3]	@ _54, bu_159(D)->changeRes
@ Patches/../C_code.c:3607: 		if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	beq	.L2686		@,
@ Patches/../C_code.c:3607: 		if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	movs	r3, #24	@ tmp359,
	ldrsb	r3, [r5, r3]	@ tmp359,
@ Patches/../C_code.c:3607: 		if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	ldr	r2, [sp, #52]	@ maxRes, %sfp
@ Patches/../C_code.c:3607: 		if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	adds	r3, r3, r0	@ tmp360, tmp359, _54
@ Patches/../C_code.c:3607: 		if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	cmp	r3, r2	@ tmp360, maxRes
	bgt	.L2686		@,
@ Patches/../C_code.c:3608:         statGainTotal += bu->changeRes; else bu->changeRes = 0; 
	add	r8, r8, r0	@ statGainTotal, _54
.L2687:
@ Patches/../C_code.c:3610:         bu->changeLck = NewGetStatIncrease(lckGrowth, noise, level, 7, useRN); 
	movs	r3, #7	@,
	movs	r2, r7	@, _7
	str	r6, [sp]	@ tmp290,
	ldr	r0, [sp, #32]	@, %sfp
	add	r1, sp, #72	@ tmp541,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3610:         bu->changeLck = NewGetStatIncrease(lckGrowth, noise, level, 7, useRN); 
	movs	r3, #121	@ tmp366,
	lsls	r0, r0, #24	@ tmp365, tmp497,
	asrs	r0, r0, #24	@ _60, tmp365,
	strb	r0, [r4, r3]	@ _60, bu_159(D)->changeLck
@ Patches/../C_code.c:3611: 		if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	beq	.L2688		@,
@ Patches/../C_code.c:3611: 		if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	movs	r3, #25	@ tmp368,
	ldrsb	r3, [r5, r3]	@ tmp368,
@ Patches/../C_code.c:3611: 		if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	ldr	r2, [sp, #56]	@ maxLck, %sfp
@ Patches/../C_code.c:3611: 		if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	adds	r3, r3, r0	@ tmp369, tmp368, _60
@ Patches/../C_code.c:3611: 		if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	cmp	r3, r2	@ tmp369, maxLck
	bgt	.L2688		@,
@ Patches/../C_code.c:3612:         statGainTotal += bu->changeLck; else bu->changeLck = 0; 
	add	r8, r8, r0	@ statGainTotal, _60
.L2689:
@ Patches/../C_code.c:3614: 		if (StrMagInstalled) { bu->changeCon = NewGetStatIncrease(magGrowth, noise, level, 8, useRN); } 
	ldr	r3, .L2795+16	@ tmp467,
	mov	r10, r3	@ tmp467, tmp467
@ Patches/../C_code.c:3614: 		if (StrMagInstalled) { bu->changeCon = NewGetStatIncrease(magGrowth, noise, level, 8, useRN); } 
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	beq	.LCB16534	@
	b	.L2793	@long jump	@
.LCB16534:
.L2690:
@ Patches/../C_code.c:3617:         if (statGainTotal < MinimumStatUps) {
	mov	r3, r8	@ statGainTotal, statGainTotal
	cmp	r3, #1	@ statGainTotal,
	ble	.L2704		@,
.L2695:
@ Patches/../C_code.c:3691:         CheckBattleUnitStatCaps(unit, bu);
	movs	r1, r4	@, bu
	movs	r0, r5	@, unit
	bl	CheckBattleUnitStatCaps		@
.L2672:
@ Patches/../C_code.c:3693: }
	add	sp, sp, #92	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2792:
@ Patches/../C_code.c:3587: 		if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	movs	r3, #18	@ tmp314,
@ Patches/../C_code.c:3587: 		if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	mov	r8, r0	@ statGainTotal, _24
@ Patches/../C_code.c:3587: 		if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	ldrsb	r3, [r5, r3]	@ tmp314,
@ Patches/../C_code.c:3587: 		if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	add	r3, r3, r8	@ tmp315, statGainTotal
@ Patches/../C_code.c:3587: 		if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	cmp	r3, r9	@ tmp315, maxHP
	bgt	.LCB16566	@
	b	.L2677	@long jump	@
.LCB16566:
	b	.L2676		@
.L2791:
@ Patches/../C_code.c:3559:             bu->expGain -= bu->unit.exp;
	movs	r2, #110	@ tmp299,
@ Patches/../C_code.c:3559:             bu->expGain -= bu->unit.exp;
	ldrb	r3, [r4, r2]	@ tmp301,
	subs	r3, r3, r5	@ tmp302, tmp301, _13
	strb	r3, [r4, r2]	@ tmp302, bu_159(D)->expGain
@ Patches/../C_code.c:3560:             bu->unit.exp = UNIT_EXP_DISABLED;
	movs	r3, #255	@ tmp305,
	strb	r3, [r4, #9]	@ tmp305, bu_159(D)->unit.exp
	b	.L2675		@
.L2680:
@ Patches/../C_code.c:3596:         statGainTotal += bu->changeSkl; else bu->changeSkl = 0; 
	movs	r3, #117	@ tmp334,
	movs	r2, #0	@ tmp335,
	strb	r2, [r4, r3]	@ tmp335, bu_159(D)->changeSkl
	b	.L2681		@
.L2678:
@ Patches/../C_code.c:3592:         statGainTotal += bu->changePow; else bu->changePow = 0; 
	movs	r3, #116	@ tmp325,
	movs	r2, #0	@ tmp326,
	strb	r2, [r4, r3]	@ tmp326, bu_159(D)->changePow
	b	.L2679		@
.L2688:
@ Patches/../C_code.c:3612:         statGainTotal += bu->changeLck; else bu->changeLck = 0; 
	movs	r3, #121	@ tmp370,
	movs	r2, #0	@ tmp371,
	strb	r2, [r4, r3]	@ tmp371, bu_159(D)->changeLck
	b	.L2689		@
.L2686:
@ Patches/../C_code.c:3608:         statGainTotal += bu->changeRes; else bu->changeRes = 0; 
	movs	r3, #120	@ tmp361,
	movs	r2, #0	@ tmp362,
	strb	r2, [r4, r3]	@ tmp362, bu_159(D)->changeRes
	b	.L2687		@
.L2684:
@ Patches/../C_code.c:3604:         statGainTotal += bu->changeDef; else bu->changeDef = 0; 
	movs	r3, #119	@ tmp352,
	movs	r2, #0	@ tmp353,
	strb	r2, [r4, r3]	@ tmp353, bu_159(D)->changeDef
	b	.L2685		@
.L2682:
@ Patches/../C_code.c:3600:         statGainTotal += bu->changeSpd; else bu->changeSpd = 0; 
	movs	r3, #118	@ tmp343,
	movs	r2, #0	@ tmp344,
	strb	r2, [r4, r3]	@ tmp344, bu_159(D)->changeSpd
	b	.L2683		@
.L2796:
	.align	2
.L2795:
	.word	CanBattleUnitGainLevels
	.word	memset
	.word	GetUnit
	.word	CallGetMaxHP
	.word	StrMagInstalled
.L2704:
	movs	r3, #15	@ ivtmp.1629,
@ Patches/../C_code.c:3625: 				bu->changeRes = 0; 
	mov	r9, r5	@ unit, unit
	movs	r5, r6	@ tmp290, tmp290
	movs	r6, r3	@ ivtmp.1629, ivtmp.1629
.L2691:
@ Patches/../C_code.c:3620: 				bu->changeHP = 0; 
	movs	r3, #0	@ tmp550,
	movs	r2, #115	@ tmp548,
	strb	r3, [r4, r2]	@ tmp549, bu_159(D)->changeHP
@ Patches/../C_code.c:3625: 				bu->changeRes = 0; 
	adds	r2, r2, #5	@ tmp552,
@ Patches/../C_code.c:3621: 				bu->changePow = 0; 
	str	r3, [r4, #116]	@ tmp551, MEM <unsigned int> [(signed char *)bu_159(D) + 116B]
@ Patches/../C_code.c:3625: 				bu->changeRes = 0; 
	strh	r3, [r4, r2]	@ tmp553, MEM <unsigned short> [(signed char *)bu_159(D) + 120B]
@ Patches/../C_code.c:3627: 				if (StrMagInstalled) { bu->changeCon = 0; } 
	mov	r3, r10	@ tmp467, tmp467
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	beq	.L2692		@,
@ Patches/../C_code.c:3627: 				if (StrMagInstalled) { bu->changeCon = 0; } 
	movs	r2, #0	@ tmp384,
	movs	r3, #122	@ tmp387,
	strb	r2, [r4, r3]	@ tmp384, bu_159(D)->changeCon
.L2692:
@ Patches/../C_code.c:3630: 				bu->changeHP = NewGetStatIncrease(hpGrowth, noise, level, 8 + (i * 13), useRN); 
	subs	r3, r6, #7	@ tmp390, ivtmp.1629,
	movs	r2, r7	@, _7
	mov	r0, fp	@, hpGrowth
	str	r5, [sp]	@ tmp290,
	add	r1, sp, #72	@ tmp556,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3630: 				bu->changeHP = NewGetStatIncrease(hpGrowth, noise, level, 8 + (i * 13), useRN); 
	movs	r3, #115	@ tmp557,
	lsls	r0, r0, #24	@ tmp392, tmp499,
	asrs	r0, r0, #24	@ _72, tmp392,
	strb	r0, [r4, r3]	@ _72, bu_159(D)->changeHP
@ Patches/../C_code.c:3619: 				statGainTotal = 0; 
	movs	r3, #0	@ statGainTotal,
	mov	r8, r3	@ statGainTotal, statGainTotal
@ Patches/../C_code.c:3632: 				if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	cmp	r0, #0	@ _72,
	beq	.L2693		@,
@ Patches/../C_code.c:3632: 				if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #18]	@ tmp395,
	lsls	r3, r3, #24	@ tmp395, tmp395,
	asrs	r3, r3, #24	@ tmp395, tmp395,
@ Patches/../C_code.c:3632: 				if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	adds	r3, r3, r0	@ tmp396, tmp395, _72
@ Patches/../C_code.c:3632: 				if (bu->changeHP && ((unit->maxHP + bu->changeHP) <= maxHP))
	ldr	r0, [sp, #64]	@ maxHP, %sfp
	lsrs	r1, r3, #31	@ tmp399, tmp396,
	asrs	r2, r0, #31	@ tmp400, maxHP,
	cmp	r0, r3	@ maxHP, tmp396
	adcs	r1, r1, r2	@ tmp399, tmp399, tmp400
	mov	r8, r1	@ statGainTotal, tmp399
.L2693:
@ Patches/../C_code.c:3637: 				bu->changePow = NewGetStatIncrease(powGrowth, noise, level, 9 + (i * 13), useRN); 
	subs	r3, r6, #6	@ tmp401, ivtmp.1629,
	movs	r2, r7	@, _7
	str	r5, [sp]	@ tmp290,
	ldr	r0, [sp, #12]	@, %sfp
	add	r1, sp, #72	@ tmp563,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3637: 				bu->changePow = NewGetStatIncrease(powGrowth, noise, level, 9 + (i * 13), useRN); 
	movs	r3, #116	@ tmp404,
	lsls	r0, r0, #24	@ tmp403, tmp500,
	asrs	r0, r0, #24	@ _79, tmp403,
	strb	r0, [r4, r3]	@ _79, bu_159(D)->changePow
@ Patches/../C_code.c:3639: 				if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	beq	.L2694		@,
@ Patches/../C_code.c:3639: 				if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #20]	@ tmp406,
	lsls	r3, r3, #24	@ tmp406, tmp406,
	asrs	r3, r3, #24	@ tmp406, tmp406,
@ Patches/../C_code.c:3639: 				if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	ldr	r2, [sp, #36]	@ maxPow, %sfp
@ Patches/../C_code.c:3639: 				if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	adds	r3, r3, r0	@ tmp407, tmp406, _79
@ Patches/../C_code.c:3639: 				if (bu->changePow && ((unit->pow + bu->changePow) <= maxPow))
	cmp	r3, r2	@ tmp407, maxPow
	bgt	.L2694		@,
@ Patches/../C_code.c:3641: 					if (statGainTotal >= MinimumStatUps) { 
	mov	r3, r8	@ statGainTotal, statGainTotal
	cmp	r3, #1	@ statGainTotal,
	bne	.LCB16710	@
	b	.L2790	@long jump	@
.LCB16710:
@ Patches/../C_code.c:3640: 				{	statGainTotal++; 
	movs	r3, #1	@ statGainTotal,
	mov	r8, r3	@ statGainTotal, statGainTotal
.L2694:
@ Patches/../C_code.c:3644: 				bu->changeSkl = NewGetStatIncrease(sklGrowth, noise, level, 10 + (i * 13), useRN); 
	subs	r3, r6, #5	@ tmp408, ivtmp.1629,
	movs	r2, r7	@, _7
	str	r5, [sp]	@ tmp290,
	ldr	r0, [sp, #16]	@, %sfp
	add	r1, sp, #72	@ tmp568,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3644: 				bu->changeSkl = NewGetStatIncrease(sklGrowth, noise, level, 10 + (i * 13), useRN); 
	movs	r3, #117	@ tmp411,
	lsls	r0, r0, #24	@ tmp410, tmp501,
	asrs	r0, r0, #24	@ _86, tmp410,
	strb	r0, [r4, r3]	@ _86, bu_159(D)->changeSkl
@ Patches/../C_code.c:3646: 				if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	beq	.L2696		@,
@ Patches/../C_code.c:3646: 				if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #21]	@ tmp413,
	lsls	r3, r3, #24	@ tmp413, tmp413,
	asrs	r3, r3, #24	@ tmp413, tmp413,
@ Patches/../C_code.c:3646: 				if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	ldr	r2, [sp, #40]	@ maxSkl, %sfp
@ Patches/../C_code.c:3646: 				if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	adds	r3, r3, r0	@ tmp414, tmp413, _86
@ Patches/../C_code.c:3646: 				if (bu->changeSkl && ((unit->skl + bu->changeSkl) <= maxSkl))
	cmp	r3, r2	@ tmp414, maxSkl
	bgt	.L2696		@,
@ Patches/../C_code.c:3648: 					if (statGainTotal >= MinimumStatUps) { 
	mov	r3, r8	@ statGainTotal, statGainTotal
	cmp	r3, #1	@ statGainTotal,
	beq	.L2790		@,
@ Patches/../C_code.c:3647: 				{	statGainTotal++; 
	movs	r3, #1	@ statGainTotal,
	mov	r8, r3	@ statGainTotal, statGainTotal
.L2696:
@ Patches/../C_code.c:3651: 				bu->changeSpd = NewGetStatIncrease(spdGrowth, noise, level, 11 + (i * 13), useRN); 
	subs	r3, r6, #4	@ tmp415, ivtmp.1629,
	movs	r2, r7	@, _7
	str	r5, [sp]	@ tmp290,
	ldr	r0, [sp, #20]	@, %sfp
	add	r1, sp, #72	@ tmp573,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3651: 				bu->changeSpd = NewGetStatIncrease(spdGrowth, noise, level, 11 + (i * 13), useRN); 
	movs	r3, #118	@ tmp418,
	lsls	r0, r0, #24	@ tmp417, tmp502,
	asrs	r0, r0, #24	@ _93, tmp417,
	strb	r0, [r4, r3]	@ _93, bu_159(D)->changeSpd
@ Patches/../C_code.c:3653: 				if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	beq	.L2697		@,
@ Patches/../C_code.c:3653: 				if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #22]	@ tmp420,
	lsls	r3, r3, #24	@ tmp420, tmp420,
	asrs	r3, r3, #24	@ tmp420, tmp420,
@ Patches/../C_code.c:3653: 				if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	ldr	r2, [sp, #44]	@ maxSpd, %sfp
@ Patches/../C_code.c:3653: 				if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	adds	r3, r3, r0	@ tmp421, tmp420, _93
@ Patches/../C_code.c:3653: 				if (bu->changeSpd && ((unit->spd + bu->changeSpd) <= maxSpd))
	cmp	r3, r2	@ tmp421, maxSpd
	bgt	.L2697		@,
@ Patches/../C_code.c:3655: 					if (statGainTotal >= MinimumStatUps) { 
	mov	r3, r8	@ statGainTotal, statGainTotal
	cmp	r3, #1	@ statGainTotal,
	beq	.L2790		@,
@ Patches/../C_code.c:3654: 				{	statGainTotal++; 
	movs	r3, #1	@ statGainTotal,
	mov	r8, r3	@ statGainTotal, statGainTotal
.L2697:
@ Patches/../C_code.c:3658: 				bu->changeDef = NewGetStatIncrease(defGrowth, noise, level, 12 + (i * 13), useRN); 
	subs	r3, r6, #3	@ tmp422, ivtmp.1629,
	movs	r2, r7	@, _7
	str	r5, [sp]	@ tmp290,
	ldr	r0, [sp, #24]	@, %sfp
	add	r1, sp, #72	@ tmp578,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3658: 				bu->changeDef = NewGetStatIncrease(defGrowth, noise, level, 12 + (i * 13), useRN); 
	movs	r3, #119	@ tmp425,
	lsls	r0, r0, #24	@ tmp424, tmp503,
	asrs	r0, r0, #24	@ _100, tmp424,
	strb	r0, [r4, r3]	@ _100, bu_159(D)->changeDef
@ Patches/../C_code.c:3660: 				if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	beq	.L2698		@,
@ Patches/../C_code.c:3660: 				if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #23]	@ tmp427,
	lsls	r3, r3, #24	@ tmp427, tmp427,
	asrs	r3, r3, #24	@ tmp427, tmp427,
@ Patches/../C_code.c:3660: 				if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	ldr	r2, [sp, #48]	@ maxDef, %sfp
@ Patches/../C_code.c:3660: 				if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	adds	r3, r3, r0	@ tmp428, tmp427, _100
@ Patches/../C_code.c:3660: 				if (bu->changeDef && ((unit->def + bu->changeDef) <= maxDef))
	cmp	r3, r2	@ tmp428, maxDef
	bgt	.L2698		@,
@ Patches/../C_code.c:3662: 					if (statGainTotal >= MinimumStatUps) { 
	mov	r3, r8	@ statGainTotal, statGainTotal
	cmp	r3, #1	@ statGainTotal,
	beq	.L2790		@,
@ Patches/../C_code.c:3661: 				{	statGainTotal++; 
	movs	r3, #1	@ statGainTotal,
	mov	r8, r3	@ statGainTotal, statGainTotal
.L2698:
@ Patches/../C_code.c:3665: 				bu->changeRes = NewGetStatIncrease(resGrowth, noise, level, 13 + (i * 13), useRN); 
	subs	r3, r6, #2	@ tmp429, ivtmp.1629,
	movs	r2, r7	@, _7
	str	r5, [sp]	@ tmp290,
	ldr	r0, [sp, #28]	@, %sfp
	add	r1, sp, #72	@ tmp583,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3665: 				bu->changeRes = NewGetStatIncrease(resGrowth, noise, level, 13 + (i * 13), useRN); 
	movs	r3, #120	@ tmp584,
	lsls	r0, r0, #24	@ tmp431, tmp504,
	asrs	r0, r0, #24	@ _108, tmp431,
	strb	r0, [r4, r3]	@ _108, bu_159(D)->changeRes
@ Patches/../C_code.c:3667: 				if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	beq	.L2699		@,
@ Patches/../C_code.c:3667: 				if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #24]	@ tmp434,
	lsls	r3, r3, #24	@ tmp434, tmp434,
	asrs	r3, r3, #24	@ tmp434, tmp434,
@ Patches/../C_code.c:3667: 				if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	ldr	r2, [sp, #52]	@ maxRes, %sfp
@ Patches/../C_code.c:3667: 				if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	adds	r3, r3, r0	@ tmp435, tmp434, _108
@ Patches/../C_code.c:3667: 				if (bu->changeRes && ((unit->res + bu->changeRes) <= maxRes))
	cmp	r3, r2	@ tmp435, maxRes
	bgt	.L2699		@,
@ Patches/../C_code.c:3669: 					if (statGainTotal >= MinimumStatUps) { 
	mov	r3, r8	@ statGainTotal, statGainTotal
	cmp	r3, #1	@ statGainTotal,
	beq	.L2790		@,
@ Patches/../C_code.c:3668: 				{	statGainTotal++; 
	movs	r3, #1	@ statGainTotal,
	mov	r8, r3	@ statGainTotal, statGainTotal
.L2699:
@ Patches/../C_code.c:3672: 				bu->changeLck = NewGetStatIncrease(lckGrowth, noise, level, 14 + (i * 13), useRN); 
	subs	r3, r6, #1	@ tmp436, ivtmp.1629,
	movs	r2, r7	@, _7
	str	r5, [sp]	@ tmp290,
	ldr	r0, [sp, #32]	@, %sfp
	add	r1, sp, #72	@ tmp589,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3672: 				bu->changeLck = NewGetStatIncrease(lckGrowth, noise, level, 14 + (i * 13), useRN); 
	movs	r3, #121	@ tmp439,
	lsls	r0, r0, #24	@ tmp438, tmp505,
	asrs	r0, r0, #24	@ _115, tmp438,
	strb	r0, [r4, r3]	@ _115, bu_159(D)->changeLck
@ Patches/../C_code.c:3674: 				if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	beq	.L2700		@,
@ Patches/../C_code.c:3674: 				if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	mov	r3, r9	@ unit, unit
	ldrb	r3, [r3, #25]	@ tmp441,
	lsls	r3, r3, #24	@ tmp441, tmp441,
	asrs	r3, r3, #24	@ tmp441, tmp441,
@ Patches/../C_code.c:3674: 				if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	ldr	r2, [sp, #56]	@ maxLck, %sfp
@ Patches/../C_code.c:3674: 				if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	adds	r3, r3, r0	@ tmp442, tmp441, _115
@ Patches/../C_code.c:3674: 				if (bu->changeLck && ((unit->lck + bu->changeLck) <= maxLck))
	cmp	r3, r2	@ tmp442, maxLck
	ble	.L2794		@,
.L2700:
@ Patches/../C_code.c:3680: 				if (StrMagInstalled) { 
	mov	r3, r10	@ tmp467, tmp467
	ldr	r3, [r3]	@ StrMagInstalled, StrMagInstalled
	cmp	r3, #0	@ StrMagInstalled,
	bne	.L2701		@,
.L2702:
@ Patches/../C_code.c:3618: 			for (int i = 0; i < 4; i++) { 
	adds	r6, r6, #13	@ ivtmp.1629,
	cmp	r6, #67	@ ivtmp.1629,
	beq	.LCB16856	@
	b	.L2691	@long jump	@
.LCB16856:
.L2790:
	mov	r5, r9	@ unit, unit
	b	.L2695		@
.L2701:
@ Patches/../C_code.c:3681: 					bu->changeCon = NewGetStatIncrease(magGrowth, noise, level, 15 + (i * 13), useRN); 
	movs	r3, r6	@, ivtmp.1629
	movs	r2, r7	@, _7
	str	r5, [sp]	@ tmp290,
	ldr	r0, [sp, #60]	@, %sfp
	add	r1, sp, #72	@ tmp595,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3681: 					bu->changeCon = NewGetStatIncrease(magGrowth, noise, level, 15 + (i * 13), useRN); 
	movs	r3, #122	@ tmp447,
	lsls	r0, r0, #24	@ tmp446, tmp506,
	asrs	r0, r0, #24	@ _123, tmp446,
	strb	r0, [r4, r3]	@ _123, bu_159(D)->changeCon
@ Patches/../C_code.c:3683: 					if (bu->changeCon && ((unit->_u3A + bu->changeCon) <= maxMag))
	beq	.L2702		@,
@ Patches/../C_code.c:3683: 					if (bu->changeCon && ((unit->_u3A + bu->changeCon) <= maxMag))
	mov	r2, r9	@ unit, unit
	subs	r3, r3, #64	@ tmp449,
	ldrb	r2, [r2, r3]	@ tmp450,
@ Patches/../C_code.c:3683: 					if (bu->changeCon && ((unit->_u3A + bu->changeCon) <= maxMag))
	adds	r2, r2, r0	@ tmp451, tmp450, _123
@ Patches/../C_code.c:3683: 					if (bu->changeCon && ((unit->_u3A + bu->changeCon) <= maxMag))
	ldr	r0, [sp, #68]	@ maxMag, %sfp
	lsrs	r3, r2, #31	@ tmp454, tmp451,
	asrs	r1, r0, #31	@ tmp455, maxMag,
	cmp	r0, r2	@ maxMag, tmp451
	adcs	r3, r3, r1	@ tmp453, tmp454, tmp455
@ Patches/../C_code.c:3685: 						if (statGainTotal >= MinimumStatUps) { 
	lsls	r3, r3, #24	@ tmp457, tmp453,
	beq	.L2702		@,
	mov	r3, r8	@ statGainTotal, statGainTotal
	lsls	r3, r3, #31	@ tmp509, statGainTotal,
	bpl	.L2702		@,
	mov	r5, r9	@ unit, unit
	b	.L2695		@
.L2793:
@ Patches/../C_code.c:3614: 		if (StrMagInstalled) { bu->changeCon = NewGetStatIncrease(magGrowth, noise, level, 8, useRN); } 
	movs	r3, #8	@,
	movs	r2, r7	@, _7
	str	r6, [sp]	@ tmp290,
	ldr	r0, [sp, #60]	@, %sfp
	add	r1, sp, #72	@ tmp545,,
	bl	NewGetStatIncrease		@
@ Patches/../C_code.c:3614: 		if (StrMagInstalled) { bu->changeCon = NewGetStatIncrease(magGrowth, noise, level, 8, useRN); } 
	movs	r3, #122	@ tmp376,
	strb	r0, [r4, r3]	@ tmp498, bu_159(D)->changeCon
	b	.L2690		@
.L2794:
@ Patches/../C_code.c:3676: 					if (statGainTotal >= MinimumStatUps) { 
	mov	r3, r8	@ statGainTotal, statGainTotal
	cmp	r3, #1	@ statGainTotal,
	beq	.L2790		@,
@ Patches/../C_code.c:3675: 				{	statGainTotal++; 
	movs	r3, #1	@ statGainTotal,
	mov	r8, r3	@ statGainTotal, statGainTotal
	b	.L2700		@
	.size	CheckBattleUnitLevelUp, .-CheckBattleUnitLevelUp
	.align	1
	.p2align 2,,3
	.global	ApplyUnitPromotion
	.syntax unified
	.code	16
	.thumb_func
	.type	ApplyUnitPromotion, %function
ApplyUnitPromotion:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r10	@,
	mov	r7, r9	@,
	mov	r6, r8	@,
	movs	r5, r0	@ unit, tmp266
	push	{r6, r7, lr}	@
@ Patches/../C_code.c:3790:     const struct ClassData* promotedClass = GetClassData(classId);
	movs	r0, r1	@, classId
	ldr	r3, .L2816	@ tmp182,
@ Patches/../C_code.c:3789: void ApplyUnitPromotion(struct Unit* unit, u8 classId) {
	movs	r6, r1	@ classId, tmp267
@ Patches/../C_code.c:3790:     const struct ClassData* promotedClass = GetClassData(classId);
	bl	.L14		@
@ Patches/../C_code.c:3799:     unit->maxHP += promotedClass->promotionHp;
	movs	r2, #34	@ tmp183,
@ Patches/../C_code.c:3792:     int baseClassId = unit->pClassData->number;
	ldr	r7, [r5, #4]	@ _2, unit_68(D)->pClassData
@ Patches/../C_code.c:3792:     int baseClassId = unit->pClassData->number;
	ldrb	r3, [r7, #4]	@ _3,
	mov	r8, r3	@ _3, _3
@ Patches/../C_code.c:3793:     int promClassId = promotedClass->number;
	ldrb	r3, [r0, #4]	@ _4,
	mov	ip, r3	@ _4, _4
@ Patches/../C_code.c:3799:     unit->maxHP += promotedClass->promotionHp;
	ldrb	r3, [r0, r2]	@ _7,
	mov	r10, r3	@ _7, _7
	movs	r4, r0	@ tmp189, promotedClass
@ Patches/../C_code.c:3799:     unit->maxHP += promotedClass->promotionHp;
	ldrb	r2, [r5, #18]	@ tmp185,
	add	r2, r2, r10	@ tmp186, _7
	strb	r2, [r5, #18]	@ tmp186, unit_68(D)->maxHP
	adds	r4, r4, #35	@ tmp189,
	ldrb	r2, [r4, #1]	@ MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B], MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B]
@ Patches/../C_code.c:3790:     const struct ClassData* promotedClass = GetClassData(classId);
	movs	r1, r0	@ promotedClass, tmp268
	ldrb	r0, [r4]	@ MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B], MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B]
	lsls	r2, r2, #8	@ tmp193, MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B],
	orrs	r2, r0	@ tmp194, MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B]
	ldrb	r0, [r4, #2]	@ MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B], MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B]
	lsls	r0, r0, #16	@ tmp196, MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B],
	orrs	r0, r2	@ tmp197, tmp194
	ldrb	r2, [r4, #3]	@ MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B], MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B]
	lsls	r2, r2, #24	@ tmp199, MEM <long unsigned int> [(unsigned char *)promotedClass_67 + 35B],
	orrs	r2, r0	@ tmp200, tmp197
@ Patches/../C_code.c:3800:     unit->pow += promotedClass->promotionPow;
	ldr	r0, .L2816+4	@ tmp202,
	mov	r9, r0	@ tmp202, tmp202
	mov	r4, r9	@ tmp202, tmp202
	ldr	r3, [r5, #20]	@ _111, MEM <vector(4) signed char> [(signed char *)unit_68(D) + 20B]
	ands	r4, r3	@ tmp202, _111
	mov	r9, r4	@ tmp203, tmp202
	ands	r0, r2	@ tmp201, tmp200
	eors	r2, r3	@ tmp206, _111
	ldr	r3, .L2816+8	@ tmp208,
	add	r0, r0, r9	@ tmp205, tmp203
	ands	r2, r3	@ tmp207, tmp208
	eors	r2, r0	@ vect__14.1648, tmp205
@ Patches/../C_code.c:3804:     unit->res += promotedClass->promotionRes;
	movs	r0, #39	@ tmp210,
@ Patches/../C_code.c:3800:     unit->pow += promotedClass->promotionPow;
	str	r2, [r5, #20]	@ vect__14.1648, MEM <vector(4) signed char> [(signed char *)unit_68(D) + 20B]
@ Patches/../C_code.c:3804:     unit->res += promotedClass->promotionRes;
	ldrb	r2, [r5, #24]	@ tmp212,
	ldrb	r0, [r1, r0]	@ tmp214,
	adds	r2, r2, r0	@ tmp215, tmp212, tmp214
	strb	r2, [r5, #24]	@ tmp215, unit_68(D)->res
@ Patches/../C_code.c:3806: 	if (SkillSysInstalled) { 
	ldr	r2, .L2816+12	@ tmp217,
@ Patches/../C_code.c:3806: 	if (SkillSysInstalled) { 
	ldr	r2, [r2]	@ SkillSysInstalled, SkillSysInstalled
	cmp	r2, #0	@ SkillSysInstalled,
	beq	.L2798		@,
@ Patches/../C_code.c:3807: 	unit->_u3A += GetPromoMag(classId); 
	movs	r0, #58	@ tmp219,
@ Patches/../C_code.c:2348: 	return MagClassTable[classId].promo; 
	ldr	r2, .L2816+16	@ tmp220,
	lsls	r4, r6, #2	@ tmp221, classId,
	adds	r2, r2, r4	@ tmp222, tmp220, tmp221
@ Patches/../C_code.c:3807: 	unit->_u3A += GetPromoMag(classId); 
	ldrb	r2, [r2, #3]	@ tmp227, MagClassTable
	ldrb	r4, [r5, r0]	@ tmp225,
	adds	r2, r4, r2	@ tmp228, tmp225, tmp227
	strb	r2, [r5, r0]	@ tmp228, unit_68(D)->_u3A
.L2798:
	movs	r2, r5	@ ivtmp.1656, unit
	movs	r0, r5	@ _129, unit
	adds	r2, r2, #40	@ ivtmp.1656,
@ Patches/../C_code.c:3789: void ApplyUnitPromotion(struct Unit* unit, u8 classId) {
	movs	r3, r2	@ ivtmp.1665, ivtmp.1656
	adds	r7, r7, #44	@ ivtmp.1667,
	adds	r0, r0, #48	@ _129,
.L2799:
@ Patches/../C_code.c:3813:         unit->ranks[i] -= unit->pClassData->baseRanks[i];
	ldrb	r4, [r3]	@ MEM[(unsigned char *)_105], MEM[(unsigned char *)_105]
	ldrb	r6, [r7]	@ MEM[(unsigned char *)_127], MEM[(unsigned char *)_127]
	subs	r4, r4, r6	@ tmp235, MEM[(unsigned char *)_105], MEM[(unsigned char *)_127]
	strb	r4, [r3]	@ tmp235, MEM[(unsigned char *)_105]
@ Patches/../C_code.c:3812:     for (i = 0; i < 8; ++i)
	adds	r3, r3, #1	@ ivtmp.1665,
	adds	r7, r7, #1	@ ivtmp.1667,
	cmp	r3, r0	@ ivtmp.1665, _129
	bne	.L2799		@,
@ Patches/../C_code.c:3816:     unit->pClassData = promotedClass;
	str	r1, [r5, #4]	@ promotedClass, unit_68(D)->pClassData
	adds	r1, r1, #44	@ ivtmp.1658,
.L2801:
@ Patches/../C_code.c:3820:         int wexp = unit->ranks[i];
	ldrb	r4, [r2]	@ wexp, MEM[(unsigned char *)_125]
@ Patches/../C_code.c:3822:         wexp += unit->pClassData->baseRanks[i];
	ldrb	r3, [r1]	@ MEM[(unsigned char *)_74], MEM[(unsigned char *)_74]
@ Patches/../C_code.c:3822:         wexp += unit->pClassData->baseRanks[i];
	adds	r3, r3, r4	@ wexp, MEM[(unsigned char *)_74], wexp
@ Patches/../C_code.c:3824:         if (wexp > 251) // wexp s rank 
	cmp	r3, #251	@ wexp,
	ble	.L2800		@,
	movs	r3, #251	@ wexp,
.L2800:
@ Patches/../C_code.c:3827:         unit->ranks[i] = wexp;
	strb	r3, [r2]	@ wexp, MEM[(unsigned char *)_125]
@ Patches/../C_code.c:3819:     for (i = 0; i < 8; ++i) {
	adds	r2, r2, #1	@ ivtmp.1656,
	adds	r1, r1, #1	@ ivtmp.1658,
	cmp	r2, r0	@ ivtmp.1656, _129
	bne	.L2801		@,
@ Patches/../C_code.c:3832:     if (baseClassId == 0x3E && promClassId == 0x2D) { // pupil to shaman 
	mov	r3, r8	@ _3, _3
	cmp	r3, #62	@ _3,
	bne	.L2802		@,
	mov	r3, ip	@ _4, _4
	cmp	r3, #45	@ _4,
	bne	.L2802		@,
@ Patches/../C_code.c:3833: 		unit->ranks[5] = 0; } // anima = 0 
	movs	r2, #0	@ tmp253,
	strb	r2, [r5, r3]	@ tmp253, unit_68(D)->ranks[5]
.L2802:
@ Patches/../C_code.c:3836:     unit->level = 1;
	movs	r3, #1	@ tmp255,
@ Patches/../C_code.c:3841:     if (unit->curHP > GetUnitMaxHp(unit))
	movs	r6, #19	@ _54,
@ Patches/../C_code.c:3836:     unit->level = 1;
	strh	r3, [r5, #8]	@ tmp255, MEM <unsigned short> [(void *)unit_68(D) + 8B]
@ Patches/../C_code.c:3839:     unit->curHP += promotedClass->promotionHp;
	ldrb	r3, [r5, #19]	@ tmp258,
	add	r3, r3, r10	@ tmp258, _7
@ Patches/../C_code.c:3840: 	UnitCheckStatCaps(unit); 
	movs	r0, r5	@, unit
@ Patches/../C_code.c:3839:     unit->curHP += promotedClass->promotionHp;
	strb	r3, [r5, #19]	@ tmp259, unit_68(D)->curHP
@ Patches/../C_code.c:3840: 	UnitCheckStatCaps(unit); 
	bl	UnitCheckStatCaps		@
@ Patches/../C_code.c:3841:     if (unit->curHP > GetUnitMaxHp(unit))
	movs	r0, r5	@, unit
	ldr	r4, .L2816+20	@ tmp261,
@ Patches/../C_code.c:3841:     if (unit->curHP > GetUnitMaxHp(unit))
	ldrsb	r6, [r5, r6]	@ _54,* _54
@ Patches/../C_code.c:3841:     if (unit->curHP > GetUnitMaxHp(unit))
	bl	.L240		@
@ Patches/../C_code.c:3841:     if (unit->curHP > GetUnitMaxHp(unit))
	cmp	r6, r0	@ _54, tmp269
	bgt	.L2815		@,
.L2797:
@ Patches/../C_code.c:3843: }
	@ sp needed	@
	pop	{r5, r6, r7}
	mov	r10, r7
	mov	r9, r6
	mov	r8, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2815:
@ Patches/../C_code.c:3842:         unit->curHP = GetUnitMaxHp(unit);
	movs	r0, r5	@, unit
	bl	.L240		@
@ Patches/../C_code.c:3842:         unit->curHP = GetUnitMaxHp(unit);
	strb	r0, [r5, #19]	@ tmp270, unit_68(D)->curHP
@ Patches/../C_code.c:3843: }
	b	.L2797		@
.L2817:
	.align	2
.L2816:
	.word	GetClassData
	.word	2139062143
	.word	-2139062144
	.word	SkillSysInstalled
	.word	MagClassTable
	.word	GetUnitMaxHp
	.size	ApplyUnitPromotion, .-ApplyUnitPromotion
	.align	1
	.p2align 2,,3
	.global	ApplyUnitDefaultPromotion
	.syntax unified
	.code	16
	.thumb_func
	.type	ApplyUnitDefaultPromotion, %function
ApplyUnitDefaultPromotion:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:3846:     ApplyUnitPromotion(unit, unit->pClassData->promotion);
	ldr	r3, [r0, #4]	@ unit_4(D)->pClassData, unit_4(D)->pClassData
@ Patches/../C_code.c:3847: } 
	@ sp needed	@
@ Patches/../C_code.c:3846:     ApplyUnitPromotion(unit, unit->pClassData->promotion);
	ldrb	r1, [r3, #5]	@ tmp118,
	bl	ApplyUnitPromotion		@
@ Patches/../C_code.c:3847: } 
	pop	{r4}
	pop	{r0}
	bx	r0
	.size	ApplyUnitDefaultPromotion, .-ApplyUnitDefaultPromotion
	.align	1
	.p2align 2,,3
	.global	CallSetupBackgrounds
	.syntax unified
	.code	16
	.thumb_func
	.type	CallSetupBackgrounds, %function
CallSetupBackgrounds:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:3864: 	SetupBackgrounds(0);
	ldr	r3, .L2820	@ tmp118,
@ Patches/../C_code.c:3880: } 
	@ sp needed	@
@ Patches/../C_code.c:3864: 	SetupBackgrounds(0);
	movs	r0, #0	@,
	bl	.L14		@
@ Patches/../C_code.c:3870: 	gLCDControlBuffer.dispcnt.mode = 0;
	movs	r2, #120	@ tmp126,
	ldr	r1, .L2820+4	@ tmp119,
	ldrh	r3, [r1]	@ MEM[(struct DispCnt *)&gLCDControlBuffer], MEM[(struct DispCnt *)&gLCDControlBuffer]
	ands	r2, r3	@ tmp125, MEM[(struct DispCnt *)&gLCDControlBuffer]
	movs	r3, #128	@ tmp129,
	lsls	r3, r3, #5	@ tmp129, tmp129,
	orrs	r3, r2	@ tmp128, tmp125
	strh	r3, [r1]	@ tmp128, MEM[(struct DispCnt *)&gLCDControlBuffer]
@ Patches/../C_code.c:3880: } 
	pop	{r4}
	pop	{r0}
	bx	r0
.L2821:
	.align	2
.L2820:
	.word	SetupBackgrounds
	.word	gLCDControlBuffer
	.size	CallSetupBackgrounds, .-CallSetupBackgrounds
	.align	1
	.p2align 2,,3
	.global	CountBWLUnits
	.syntax unified
	.code	16
	.thumb_func
	.type	CountBWLUnits, %function
CountBWLUnits:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:4234: 	const struct CharacterData* table = GetCharacterData(1); 
	ldr	r3, .L2828	@ tmp118,
	movs	r0, #1	@,
@ Patches/../C_code.c:4233: int CountBWLUnits(void) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:4234: 	const struct CharacterData* table = GetCharacterData(1); 
	bl	.L14		@
	ldr	r2, .L2828+4	@ tmp126,
	movs	r3, r0	@ table, tmp124
	adds	r1, r0, r2	@ _13, table, tmp126
@ Patches/../C_code.c:4235: 	int c = 0; 
	movs	r0, #0	@ <retval>,
.L2824:
@ Patches/../C_code.c:4237: 		if (table->portraitId) { c++; } 
	ldrh	r2, [r3, #6]	@ MEM[(short unsigned int *)table_14 + 6B], MEM[(short unsigned int *)table_14 + 6B]
@ Patches/../C_code.c:4237: 		if (table->portraitId) { c++; } 
	subs	r4, r2, #1	@ tmp123, MEM[(short unsigned int *)table_14 + 6B]
	sbcs	r2, r2, r4	@ tmp122, MEM[(short unsigned int *)table_14 + 6B], tmp123
@ Patches/../C_code.c:4238: 		table++;
	adds	r3, r3, #52	@ table,
@ Patches/../C_code.c:4237: 		if (table->portraitId) { c++; } 
	adds	r0, r0, r2	@ <retval>, <retval>, tmp122
@ Patches/../C_code.c:4236: 	for (int i = 1; i <= 0x45; ++i) { 
	cmp	r1, r3	@ _13, table
	bne	.L2824		@,
@ Patches/../C_code.c:4241: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L2829:
	.align	2
.L2828:
	.word	GetCharacterData
	.word	3588
	.size	CountBWLUnits, .-CountBWLUnits
	.align	1
	.p2align 2,,3
	.global	InitReplaceTextListAntiHuffman
	.syntax unified
	.code	16
	.thumb_func
	.type	InitReplaceTextListAntiHuffman, %function
InitReplaceTextListAntiHuffman:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
	mov	lr, r9	@,
	mov	r7, r8	@,
@ Patches/../C_code.c:4284: 	const struct CharacterData* table = GetCharacterData(1); 
	ldr	r4, .L2839	@ tmp145,
@ Patches/../C_code.c:4283: void InitReplaceTextListAntiHuffman(struct ReplaceTextStruct list[]) { 
	push	{r7, lr}	@
@ Patches/../C_code.c:4283: void InitReplaceTextListAntiHuffman(struct ReplaceTextStruct list[]) { 
	movs	r7, r0	@ list, tmp163
@ Patches/../C_code.c:4284: 	const struct CharacterData* table = GetCharacterData(1); 
	movs	r0, #1	@,
	bl	.L240		@
	movs	r6, r0	@ table, tmp164
@ Patches/../C_code.c:4285: 	const struct CharacterData* table2 = GetCharacterData(1); 
	movs	r0, #1	@,
	bl	.L240		@
	ldr	r3, .L2839+4	@ tmp169,
	mov	ip, r3	@ tmp169, tmp169
	movs	r3, #0	@ tmp161,
@ Patches/../C_code.c:4288: 	table--; 
	movs	r4, r6	@ table, table
	mov	r9, r3	@ tmp161, tmp161
@ Patches/../C_code.c:4297: 		list[c].find = (void*)((int)ggMsgStringTable[table->nameTextId] & 0x7FFFFFFF); 
	ldr	r3, .L2839+8	@ tmp162,
@ Patches/../C_code.c:4287: 	int c = 0; 
	movs	r5, #0	@ c,
@ Patches/../C_code.c:4297: 		list[c].find = (void*)((int)ggMsgStringTable[table->nameTextId] & 0x7FFFFFFF); 
	mov	r8, r3	@ tmp162, tmp162
@ Patches/../C_code.c:4288: 	table--; 
	subs	r4, r4, #52	@ table,
	add	r6, r6, ip	@ _13, tmp169
	b	.L2834		@
.L2838:
@ Patches/../C_code.c:4297: 		list[c].find = (void*)((int)ggMsgStringTable[table->nameTextId] & 0x7FFFFFFF); 
	mov	r0, r8	@ tmp162, tmp162
	ldr	r0, [r0]	@ ggMsgStringTable.220_3, ggMsgStringTable
	lsls	r3, r3, #2	@ tmp151, _1,
@ Patches/../C_code.c:4297: 		list[c].find = (void*)((int)ggMsgStringTable[table->nameTextId] & 0x7FFFFFFF); 
	ldr	r3, [r3, r0]	@ *_7, *_7
	lsls	r3, r3, #1	@ tmp154, *_7,
	lsrs	r3, r3, #1	@ tmp152, tmp154,
@ Patches/../C_code.c:4298: 		list[c].replace = (void*)((int)ggMsgStringTable[table2->nameTextId] & 0x7FFFFFFF); 
	lsls	r2, r2, #2	@ tmp155, _2,
@ Patches/../C_code.c:4297: 		list[c].find = (void*)((int)ggMsgStringTable[table->nameTextId] & 0x7FFFFFFF); 
	str	r3, [r1]	@ tmp152, _61->find
@ Patches/../C_code.c:4298: 		list[c].replace = (void*)((int)ggMsgStringTable[table2->nameTextId] & 0x7FFFFFFF); 
	ldr	r3, [r2, r0]	@ *_17, *_17
	lsls	r3, r3, #1	@ tmp158, *_17,
	lsrs	r3, r3, #1	@ tmp156, tmp158,
@ Patches/../C_code.c:4299: 		c++; 
	adds	r5, r5, #1	@ c,
@ Patches/../C_code.c:4298: 		list[c].replace = (void*)((int)ggMsgStringTable[table2->nameTextId] & 0x7FFFFFFF); 
	str	r3, [r1, #4]	@ tmp156, _61->replace
	lsls	r3, r5, #3	@ tmp161, c,
	mov	r9, r3	@ tmp161, tmp161
.L2832:
@ Patches/../C_code.c:4289: 	for (int i = 0; i < MAX_CHAR_ID; ++i) { 
	cmp	r6, r4	@ _13, table
	beq	.L2833		@,
.L2834:
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r4, #58]	@ MEM[(short unsigned int *)table_37 + 6B], MEM[(short unsigned int *)table_37 + 6B]
@ Patches/../C_code.c:4291: 		table++; 
	adds	r4, r4, #52	@ table,
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	movs	r0, r4	@ _45, table
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	cmp	r3, #0	@ MEM[(short unsigned int *)table_37 + 6B],
	beq	.L2831		@,
	ldrb	r0, [r4, #4]	@ MEM[(unsigned char *)table_37 + 4B], MEM[(unsigned char *)table_37 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
.L2831:
@ Patches/../C_code.c:4297: 		list[c].find = (void*)((int)ggMsgStringTable[table->nameTextId] & 0x7FFFFFFF); 
	mov	r1, r9	@ tmp161, tmp161
@ Patches/../C_code.c:4293: 		if (table->nameTextId == table2->nameTextId) { 
	ldrh	r3, [r4]	@ _1, MEM[(short unsigned int *)table_37]
@ Patches/../C_code.c:4293: 		if (table->nameTextId == table2->nameTextId) { 
	ldrh	r2, [r0]	@ _2, *_46
@ Patches/../C_code.c:4297: 		list[c].find = (void*)((int)ggMsgStringTable[table->nameTextId] & 0x7FFFFFFF); 
	adds	r1, r7, r1	@ _61, list, tmp161
@ Patches/../C_code.c:4293: 		if (table->nameTextId == table2->nameTextId) { 
	cmp	r3, r2	@ _1, _2
	beq	.L2832		@,
@ Patches/../C_code.c:4296: 		if (c >= ListSize) { break; } 
	cmp	r5, #119	@ c,
	ble	.L2838		@,
.L2833:
@ Patches/../C_code.c:4302: 	list[c].find = NULL; 
	mov	r2, r9	@ tmp161, tmp161
@ Patches/../C_code.c:4304: } 
	@ sp needed	@
@ Patches/../C_code.c:4302: 	list[c].find = NULL; 
	movs	r3, #0	@ tmp160,
	str	r3, [r7, r2]	@ tmp160, _24->find
@ Patches/../C_code.c:4304: } 
	pop	{r6, r7}
	mov	r9, r7
	mov	r8, r6
	pop	{r3, r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2840:
	.align	2
.L2839:
	.word	GetCharacterData
	.word	13208
	.word	ggMsgStringTable
	.size	InitReplaceTextListAntiHuffman, .-InitReplaceTextListAntiHuffman
	.align	1
	.p2align 2,,3
	.global	PutStringInBuffer
	.syntax unified
	.code	16
	.thumb_func
	.type	PutStringInBuffer, %function
PutStringInBuffer:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:4341: const char * PutStringInBuffer(const char * str, int huffman) { return str; }
	@ sp needed	@
	bx	lr
	.size	PutStringInBuffer, .-PutStringInBuffer
	.align	1
	.p2align 2,,3
	.global	GetStringLength
	.syntax unified
	.code	16
	.thumb_func
	.type	GetStringLength, %function
GetStringLength:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:4345: int GetStringLength(const char* str) { 
	movs	r2, r0	@ str, tmp120
@ Patches/../C_code.c:4346: 	for (int i = 0; i < 255; ++i) { 
	movs	r0, #0	@ <retval>,
	b	.L2844		@
.L2850:
@ Patches/../C_code.c:4346: 	for (int i = 0; i < 255; ++i) { 
	adds	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:4346: 	for (int i = 0; i < 255; ++i) { 
	cmp	r0, #255	@ <retval>,
	beq	.L2849		@,
.L2844:
@ Patches/../C_code.c:4347: 		if (!str[i]) return i; 
	ldrb	r3, [r2, r0]	@ MEM[(const char *)str_7(D) + _12 * 1], MEM[(const char *)str_7(D) + _12 * 1]
	cmp	r3, #0	@ MEM[(const char *)str_7(D) + _12 * 1],
	bne	.L2850		@,
.L2842:
@ Patches/../C_code.c:4351: } 
	@ sp needed	@
	bx	lr
.L2849:
@ Patches/../C_code.c:4349: 	return 0; 
	movs	r0, #0	@ <retval>,
	b	.L2842		@
	.size	GetStringLength, .-GetStringLength
	.align	1
	.p2align 2,,3
	.global	GetEndOfBuffer
	.syntax unified
	.code	16
	.thumb_func
	.type	GetEndOfBuffer, %function
GetEndOfBuffer:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:4353: 	for (int i = 0; i < 0x1000; ++i) { 
	movs	r1, #128	@ tmp121,
@ Patches/../C_code.c:4352: int GetEndOfBuffer(char* buffer) { 
	movs	r2, r0	@ buffer, tmp122
@ Patches/../C_code.c:4353: 	for (int i = 0; i < 0x1000; ++i) { 
	lsls	r1, r1, #5	@ tmp121, tmp121,
@ Patches/../C_code.c:4353: 	for (int i = 0; i < 0x1000; ++i) { 
	movs	r0, #0	@ <retval>,
	b	.L2853		@
.L2859:
@ Patches/../C_code.c:4353: 	for (int i = 0; i < 0x1000; ++i) { 
	adds	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:4353: 	for (int i = 0; i < 0x1000; ++i) { 
	cmp	r0, r1	@ <retval>, tmp121
	beq	.L2858		@,
.L2853:
@ Patches/../C_code.c:4354: 		if (!buffer[i]) { return i; } 
	ldrb	r3, [r2, r0]	@ MEM[(char *)buffer_7(D) + _12 * 1], MEM[(char *)buffer_7(D) + _12 * 1]
	cmp	r3, #0	@ MEM[(char *)buffer_7(D) + _12 * 1],
	bne	.L2859		@,
.L2851:
@ Patches/../C_code.c:4358: } 
	@ sp needed	@
	bx	lr
.L2858:
@ Patches/../C_code.c:4356: 	return 0; 
	movs	r0, #0	@ <retval>,
	b	.L2851		@
	.size	GetEndOfBuffer, .-GetEndOfBuffer
	.align	1
	.p2align 2,,3
	.global	ShiftDataInBuffer
	.syntax unified
	.code	16
	.thumb_func
	.type	ShiftDataInBuffer, %function
ShiftDataInBuffer:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:4360: 	if (!amount) { return; } 
	cmp	r1, #0	@ amount,
	beq	.L2860		@,
	bl	ShiftDataInBuffer.part.0		@
.L2860:
@ Patches/../C_code.c:4379: } 
	@ sp needed	@
	pop	{r4}
	pop	{r0}
	bx	r0
	.size	ShiftDataInBuffer, .-ShiftDataInBuffer
	.align	1
	.p2align 2,,3
	.global	ReplaceIfMatching
	.syntax unified
	.code	16
	.thumb_func
	.type	ReplaceIfMatching, %function
ReplaceIfMatching:
	@ Function supports interworking.
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	mov	r8, r2	@ replace, tmp141
	movs	r2, r3	@ c, tmp142
	push	{lr}	@
@ Patches/../C_code.c:4383: 	char* buffer = &b[c]; 
	ldr	r3, [sp, #24]	@ tmp144, b
@ Patches/../C_code.c:4395: 	for (i = 0; i < 255; ++i) { 
	movs	r4, #0	@ i,
@ Patches/../C_code.c:4383: 	char* buffer = &b[c]; 
	adds	r7, r3, r2	@ buffer, tmp144, c
	b	.L2868		@
.L2891:
@ Patches/../C_code.c:4397: 		if (buffer[i] != find[i]) { return false; }
	ldrb	r6, [r7, r4]	@ MEM[(char *)buffer_20 + _47 * 1], MEM[(char *)buffer_20 + _47 * 1]
	cmp	r6, r5	@ MEM[(char *)buffer_20 + _47 * 1], _4
	bne	.L2875		@,
@ Patches/../C_code.c:4395: 	for (i = 0; i < 255; ++i) { 
	adds	r4, r4, #1	@ i,
@ Patches/../C_code.c:4395: 	for (i = 0; i < 255; ++i) { 
	cmp	r4, #255	@ i,
	beq	.L2866		@,
.L2868:
@ Patches/../C_code.c:4396: 		if (!find[i]) { break; } 
	ldrb	r5, [r1, r4]	@ _4, MEM[(const char *)find_21(D) + _47 * 1]
@ Patches/../C_code.c:4396: 		if (!find[i]) { break; } 
	cmp	r5, #0	@ _4,
	bne	.L2891		@,
.L2866:
@ Patches/../C_code.c:4395: 	for (i = 0; i < 255; ++i) { 
	movs	r5, #0	@ i,
	b	.L2870		@
.L2893:
@ Patches/../C_code.c:4346: 	for (int i = 0; i < 255; ++i) { 
	adds	r5, r5, #1	@ i,
@ Patches/../C_code.c:4346: 	for (int i = 0; i < 255; ++i) { 
	cmp	r5, #255	@ i,
	beq	.L2892		@,
.L2870:
@ Patches/../C_code.c:4347: 		if (!str[i]) return i; 
	mov	r3, r8	@ replace, replace
	ldrb	r1, [r3, r5]	@ MEM[(const char *)replace_24(D) + _46 * 1], MEM[(const char *)replace_24(D) + _46 * 1]
	cmp	r1, #0	@ MEM[(const char *)replace_24(D) + _46 * 1],
	bne	.L2893		@,
@ Patches/../C_code.c:4401: 	ShiftDataInBuffer(b, len2-i, c, usedBufferLength); 
	subs	r1, r5, r4	@ _8, i, i
@ Patches/../C_code.c:4360: 	if (!amount) { return; } 
	cmp	r5, r4	@ i, i
	beq	.L2872		@,
	movs	r3, r0	@, usedBufferLength
	ldr	r0, [sp, #24]	@, b
	bl	ShiftDataInBuffer.part.0		@
.L2872:
@ Patches/../C_code.c:4403: 	for (i = 0; i < len2; ++i) { 
	movs	r3, #0	@ i,
	cmp	r5, #0	@ i,
	beq	.L2874		@,
.L2873:
@ Patches/../C_code.c:4404: 		buffer[i] = replace[i]; 
	mov	r2, r8	@ replace, replace
	ldrb	r2, [r2, r3]	@ _12, MEM[(const char *)replace_24(D) + _39 * 1]
@ Patches/../C_code.c:4404: 		buffer[i] = replace[i]; 
	strb	r2, [r7, r3]	@ _12, MEM[(char *)buffer_20 + _39 * 1]
@ Patches/../C_code.c:4403: 	for (i = 0; i < len2; ++i) { 
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:4403: 	for (i = 0; i < len2; ++i) { 
	cmp	r3, r5	@ i, i
	bne	.L2873		@,
.L2874:
@ Patches/../C_code.c:4406: 	return true; 
	movs	r0, #1	@ <retval>,
.L2865:
@ Patches/../C_code.c:4408: }  
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L2875:
@ Patches/../C_code.c:4397: 		if (buffer[i] != find[i]) { return false; }
	movs	r0, #0	@ <retval>,
	b	.L2865		@
.L2892:
@ Patches/../C_code.c:4360: 	if (!amount) { return; } 
	cmp	r4, #0	@ i,
	beq	.L2874		@,
	movs	r3, r0	@, usedBufferLength
@ Patches/../C_code.c:4401: 	ShiftDataInBuffer(b, len2-i, c, usedBufferLength); 
	rsbs	r1, r4, #0	@ tmp138, i
	ldr	r0, [sp, #24]	@, b
	bl	ShiftDataInBuffer.part.0		@
	b	.L2874		@
	.size	ReplaceIfMatching, .-ReplaceIfMatching
	.align	1
	.p2align 2,,3
	.global	DecompText
	.syntax unified
	.code	16
	.thumb_func
	.type	DecompText, %function
DecompText:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:4415: int DecompText(const char *a, char *b) { 
	movs	r4, r1	@ b, tmp142
@ Patches/../C_code.c:4417: 	if ((int)a & 0x80000000) { // anti huffman 
	cmp	r0, #0	@ a,
	bge	.L2895		@,
@ Patches/../C_code.c:4418: 		a = (const char*) ((int)a & 0x7FFFFFFF); 
	lsls	r0, r0, #1	@ tmp128, a,
	lsrs	r2, r0, #1	@ _2, tmp128,
@ Patches/../C_code.c:4419: 		for (int i = 0; i < TextBufferSize; ++i) { 
	ldr	r1, .L2906	@ tmp140,
@ Patches/../C_code.c:4419: 		for (int i = 0; i < TextBufferSize; ++i) { 
	movs	r0, #0	@ <retval>,
	b	.L2897		@
.L2905:
@ Patches/../C_code.c:4419: 		for (int i = 0; i < TextBufferSize; ++i) { 
	adds	r0, r0, #1	@ <retval>,
@ Patches/../C_code.c:4419: 		for (int i = 0; i < TextBufferSize; ++i) { 
	cmp	r0, r1	@ <retval>, tmp140
	beq	.L2904		@,
.L2897:
@ Patches/../C_code.c:4420: 			b[i] = a[i];
	ldrb	r3, [r2, r0]	@ _6, *_4
@ Patches/../C_code.c:4420: 			b[i] = a[i];
	strb	r3, [r4, r0]	@ _6, MEM[(char *)b_18(D) + _32 * 1]
@ Patches/../C_code.c:4421: 			if (!a[i]) { 
	cmp	r3, #0	@ _6,
	bne	.L2905		@,
.L2899:
@ Patches/../C_code.c:4441: 		b[length] = 0; 
	movs	r3, #0	@ tmp134,
	strb	r3, [r4, r0]	@ tmp134, *_8
@ Patches/../C_code.c:4442: 		b[length+1] = 0; 
	adds	r4, r4, r0	@ tmp136, b, <retval>
	strb	r3, [r4, #1]	@ tmp134, *_10
.L2894:
@ Patches/../C_code.c:4447: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L2895:
@ Patches/../C_code.c:4428: 		length = Arm_DecompText(a, b, 0x3004150);
	ldr	r3, .L2906+4	@ tmp132,
	ldr	r2, .L2906+8	@,
	bl	.L14		@
@ Patches/../C_code.c:4440: 	if (length < 0xFFF) {
	ldr	r3, .L2906+12	@ tmp133,
	cmp	r0, r3	@ <retval>, tmp133
	bgt	.L2894		@,
	b	.L2899		@
.L2904:
@ Patches/../C_code.c:4416: 	int length = 0; 
	movs	r0, #0	@ <retval>,
	b	.L2899		@
.L2907:
	.align	2
.L2906:
	.word	1365
	.word	Arm_DecompText
	.word	50348368
	.word	4094
	.size	DecompText, .-DecompText
	.align	1
	.p2align 2,,3
	.global	GetStringFromIndexInBufferWithoutReplacing
	.syntax unified
	.code	16
	.thumb_func
	.type	GetStringFromIndexInBufferWithoutReplacing, %function
GetStringFromIndexInBufferWithoutReplacing:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	ldr	r3, .L2912	@ tmp126,
	ldr	r3, [r3]	@ ggMsgStringTable, ggMsgStringTable
	lsls	r0, r0, #2	@ tmp127, tmp132,
@ Patches/../C_code.c:4246: {
	push	{r4, lr}	@
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	ldr	r0, [r0, r3]	@ *_4, *_4
@ Patches/../C_code.c:4246: {
	movs	r4, r1	@ buffer, tmp133
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	bl	DecompText		@
@ Patches/../C_code.c:4248: 	buffer[size] = 0; 
	movs	r3, #0	@ tmp129,
	strb	r3, [r4, r0]	@ tmp129, *_7
@ Patches/../C_code.c:4249: 	if (size > 100) { asm("mov r11, r11"); } 
	cmp	r0, #100	@ size,
	bgt	.L2911		@,
@ Patches/../C_code.c:4250: 	if (size < 0) { asm("mov r11, r11"); } 
	cmp	r0, #0	@ size,
	blt	.L2911		@,
.L2910:
@ Patches/../C_code.c:4253: }
	@ sp needed	@
	movs	r0, r4	@, buffer
	pop	{r4}
	pop	{r1}
	bx	r1
.L2911:
@ Patches/../C_code.c:4250: 	if (size < 0) { asm("mov r11, r11"); } 
	.syntax divided
@ 4250 "Patches/../C_code.c" 1
	mov r11, r11
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L2910		@
.L2913:
	.align	2
.L2912:
	.word	ggMsgStringTable
	.size	GetStringFromIndexInBufferWithoutReplacing, .-GetStringFromIndexInBufferWithoutReplacing
	.align	1
	.p2align 2,,3
	.global	InitReplaceTextList
	.syntax unified
	.code	16
	.thumb_func
	.type	InitReplaceTextList, %function
InitReplaceTextList:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, fp	@,
	mov	r7, r10	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
	push	{r5, r6, r7, lr}	@
	mov	r9, r2	@ buffer2, tmp204
@ Patches/../C_code.c:4310: 	const struct CharacterData* table = GetCharacterData(1); 
	ldr	r3, .L2952	@ tmp199,
@ Patches/../C_code.c:4307: void InitReplaceTextList(struct ReplaceTextStruct list[], char buffer[][TempTextBufferSize], char buffer2[][TempTextBufferSize]) { 
	sub	sp, sp, #20	@,,
@ Patches/../C_code.c:4307: void InitReplaceTextList(struct ReplaceTextStruct list[], char buffer[][TempTextBufferSize], char buffer2[][TempTextBufferSize]) { 
	movs	r4, r0	@ list, tmp202
@ Patches/../C_code.c:4310: 	const struct CharacterData* table = GetCharacterData(1); 
	movs	r0, #1	@,
	mov	fp, r3	@ tmp199, tmp199
@ Patches/../C_code.c:4307: void InitReplaceTextList(struct ReplaceTextStruct list[], char buffer[][TempTextBufferSize], char buffer2[][TempTextBufferSize]) { 
	str	r1, [sp, #4]	@ tmp203, %sfp
@ Patches/../C_code.c:4310: 	const struct CharacterData* table = GetCharacterData(1); 
	bl	.L14		@
	ldr	r3, .L2952+4	@ tmp200,
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	ldr	r3, [r3]	@ ggMsgStringTable.217_56, ggMsgStringTable
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	mov	r2, r9	@ buffer2, buffer2
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	mov	r10, r3	@ ggMsgStringTable.217_56, ggMsgStringTable.217_56
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L2952+8	@ tmp201,
@ Patches/../C_code.c:4310: 	const struct CharacterData* table = GetCharacterData(1); 
	movs	r6, r0	@ table, tmp205
	movs	r7, r4	@ ivtmp.1794, list
	movs	r5, #0	@ ivtmp.1798,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	mov	r9, r3	@ tmp201, tmp201
	str	r4, [sp, #12]	@ list, %sfp
	str	r2, [sp, #8]	@ buffer2, %sfp
.L2928:
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	mov	r2, r10	@ ggMsgStringTable.217_56, ggMsgStringTable.217_56
@ Patches/../C_code.c:4316: 		list[i].find = GetStringFromIndexInBufferWithoutReplacing(table->nameTextId, &buffer[i][0]); 
	ldr	r3, [sp, #4]	@ buffer, %sfp
	adds	r4, r3, r5	@ _8, buffer, ivtmp.1798
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	ldrh	r3, [r6]	@ MEM[(short unsigned int *)table_24], MEM[(short unsigned int *)table_24]
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	lsls	r3, r3, #2	@ tmp169, MEM[(short unsigned int *)table_24],
	ldr	r0, [r3, r2]	@ *_59, *_59
	movs	r1, r4	@, _8
	bl	DecompText		@
@ Patches/../C_code.c:4248: 	buffer[size] = 0; 
	movs	r3, #0	@ tmp250,
	strb	r3, [r4, r0]	@ tmp249, *_63
@ Patches/../C_code.c:4249: 	if (size > 100) { asm("mov r11, r11"); } 
	cmp	r0, #100	@ size,
	bgt	.L2949		@,
@ Patches/../C_code.c:4250: 	if (size < 0) { asm("mov r11, r11"); } 
	cmp	r0, #0	@ size,
	blt	.L2949		@,
.L2916:
@ Patches/../C_code.c:4316: 		list[i].find = GetStringFromIndexInBufferWithoutReplacing(table->nameTextId, &buffer[i][0]); 
	str	r4, [r7]	@ _8, MEM[(const char * *)_93]
@ Patches/../C_code.c:4317: 		list[i].replace = GetStringFromIndexInBufferWithoutReplacing(GetNameTextIdOfRandomizedPortrait(table->portraitId, seed), &buffer2[i][0]); 
	ldrh	r4, [r6, #6]	@ _13, MEM[(short unsigned int *)table_24 + 6B]
@ Patches/../C_code.c:161: 	if (!id) { return false; } 
	cmp	r4, #0	@ _13,
	beq	.L2917		@,
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	mov	r3, r9	@ tmp201, tmp201
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.0_64, *RecruitValues.0_64
	lsls	r3, r3, #29	@ tmp181, *RecruitValues.0_64,
@ Patches/../C_code.c:305: 	if (!ShouldRandomizeRecruitmentForPortraitID(portraitID)) { return portraitID; } 
	beq	.L2917		@,
	mov	r8, r4	@ portraitID, _13
@ Patches/../C_code.c:242: 	if (portraitID < 0x100) { 
	cmp	r4, #255	@ _13,
	bgt	.L2919		@,
@ Patches/../C_code.c:243: 		if (ReplacePortraitTable[portraitID]) { portraitID = ReplacePortraitTable[portraitID]; } 
	ldr	r3, .L2952+12	@ tmp184,
	ldrb	r3, [r3, r4]	@ _77, ReplacePortraitTable
@ Patches/../C_code.c:243: 		if (ReplacePortraitTable[portraitID]) { portraitID = ReplacePortraitTable[portraitID]; } 
	cmp	r3, #0	@ _77,
	beq	.L2919		@,
@ Patches/../C_code.c:243: 		if (ReplacePortraitTable[portraitID]) { portraitID = ReplacePortraitTable[portraitID]; } 
	mov	r8, r3	@ portraitID, _77
.L2919:
@ Patches/../C_code.c:245: 	const struct CharacterData* table = GetCharacterData(1); 
	movs	r0, #1	@,
	bl	.L434		@
	ldr	r3, .L2952+16	@ tmp252,
	mov	r1, r8	@ portraitID, portraitID
	adds	r2, r0, r3	@ _54, table, tmp252
	b	.L2922		@
.L2920:
@ Patches/../C_code.c:248: 		table++; 
	adds	r0, r0, #52	@ table,
@ Patches/../C_code.c:246: 	for (int i = 1; i <= MAX_CHAR_ID; i++) { 
	cmp	r2, r0	@ _54, table
	beq	.L2917		@,
.L2922:
@ Patches/../C_code.c:247: 		if (table->portraitId == portraitID) { return table->number; } 
	ldrh	r3, [r0, #6]	@ MEM[(short unsigned int *)table_109 + 6B], MEM[(short unsigned int *)table_109 + 6B]
@ Patches/../C_code.c:247: 		if (table->portraitId == portraitID) { return table->number; } 
	cmp	r3, r1	@ MEM[(short unsigned int *)table_109 + 6B], portraitID
	bne	.L2920		@,
@ Patches/../C_code.c:247: 		if (table->portraitId == portraitID) { return table->number; } 
	ldrb	r0, [r0, #4]	@ _86,
@ Patches/../C_code.c:298: 	if (!result) { return portraitID; }
	cmp	r0, #0	@ _86,
	beq	.L2917		@,
@ Patches/../C_code.c:299: 	return GetReorderedCharacter(GetCharacterData(result))->portraitId; 
	bl	.L434		@
@ Patches/../C_code.c:256: 	if (!table->portraitId) { return table; } 
	ldrh	r3, [r0, #6]	@ tmp188,
	cmp	r3, #0	@ tmp188,
	beq	.L2917		@,
	ldrb	r0, [r0, #4]	@ MEM[(unsigned char *)_69 + 4B], MEM[(unsigned char *)_69 + 4B]
	bl	GetReorderedCharacter.part.0.isra.0		@
@ Patches/../C_code.c:299: 	return GetReorderedCharacter(GetCharacterData(result))->portraitId; 
	ldrh	r3, [r0, #6]	@ _74,
@ Patches/../C_code.c:308: 	if (!result) { return portraitID; } 
	cmp	r3, #0	@ _74,
	beq	.L2917		@,
@ Patches/../C_code.c:320: 	return result; 
	movs	r4, r3	@ _13, _74
.L2917:
@ Patches/../C_code.c:325: 	const struct CharacterData* table = GetCharacterData(1); 
	movs	r0, #1	@,
	bl	.L434		@
	ldr	r3, .L2952+16	@ tmp253,
	adds	r2, r0, r3	@ _44, table, tmp253
	b	.L2925		@
.L2923:
@ Patches/../C_code.c:329: 		table++; 
	adds	r0, r0, #52	@ table,
@ Patches/../C_code.c:326: 	for (int i = 1; i <= 0xFF; i++) { 
	cmp	r2, r0	@ _44, table
	beq	.L2951		@,
.L2925:
@ Patches/../C_code.c:327: 		if (table->portraitId == portraitID) { return table->nameTextId; } 
	ldrh	r3, [r0, #6]	@ MEM[(short unsigned int *)table_107 + 6B], MEM[(short unsigned int *)table_107 + 6B]
@ Patches/../C_code.c:327: 		if (table->portraitId == portraitID) { return table->nameTextId; } 
	cmp	r3, r4	@ MEM[(short unsigned int *)table_107 + 6B], _13
	bne	.L2923		@,
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	ldrh	r3, [r0]	@ *table_107, *table_107
	lsls	r3, r3, #2	@ _131, *table_107,
.L2924:
@ Patches/../C_code.c:4317: 		list[i].replace = GetStringFromIndexInBufferWithoutReplacing(GetNameTextIdOfRandomizedPortrait(table->portraitId, seed), &buffer2[i][0]); 
	ldr	r2, [sp, #8]	@ buffer2, %sfp
	adds	r4, r2, r5	@ _16, buffer2, ivtmp.1798
@ Patches/../C_code.c:4247:     int size = DecompText((void*)ggMsgStringTable[index], buffer);
	mov	r2, r10	@ ggMsgStringTable.217_56, ggMsgStringTable.217_56
	movs	r1, r4	@, _16
	ldr	r0, [r2, r3]	@ *_39, *_39
	bl	DecompText		@
@ Patches/../C_code.c:4248: 	buffer[size] = 0; 
	movs	r3, #0	@ tmp257,
	strb	r3, [r4, r0]	@ tmp256, *_43
@ Patches/../C_code.c:4249: 	if (size > 100) { asm("mov r11, r11"); } 
	cmp	r0, #100	@ size,
	bgt	.L2950		@,
@ Patches/../C_code.c:4250: 	if (size < 0) { asm("mov r11, r11"); } 
	cmp	r0, #0	@ size,
	blt	.L2950		@,
.L2927:
@ Patches/../C_code.c:4315: 		if (i >= ListSize) { break; } 
	movs	r3, #210	@ tmp196,
	adds	r5, r5, #14	@ ivtmp.1798,
@ Patches/../C_code.c:4317: 		list[i].replace = GetStringFromIndexInBufferWithoutReplacing(GetNameTextIdOfRandomizedPortrait(table->portraitId, seed), &buffer2[i][0]); 
	str	r4, [r7, #4]	@ _16, MEM[(const char * *)_93 + 4B]
@ Patches/../C_code.c:4318: 		table++; 
	adds	r6, r6, #52	@ table,
@ Patches/../C_code.c:4315: 		if (i >= ListSize) { break; } 
	adds	r7, r7, #8	@ ivtmp.1794,
	lsls	r3, r3, #3	@ tmp196, tmp196,
	cmp	r5, r3	@ ivtmp.1798, tmp196
	bne	.L2928		@,
@ Patches/../C_code.c:4320: 	list[ListSize].find = NULL; 
	movs	r3, #240	@ tmp197,
	movs	r2, #0	@ tmp198,
	ldr	r4, [sp, #12]	@ list, %sfp
	lsls	r3, r3, #2	@ tmp197, tmp197,
	str	r2, [r4, r3]	@ tmp198, MEM[(struct ReplaceTextStruct *)list_26(D) + 960B].find
@ Patches/../C_code.c:4322: } 
	add	sp, sp, #20	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2950:
@ Patches/../C_code.c:4250: 	if (size < 0) { asm("mov r11, r11"); } 
	.syntax divided
@ 4250 "Patches/../C_code.c" 1
	mov r11, r11
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L2927		@
.L2949:
	.syntax divided
@ 4250 "Patches/../C_code.c" 1
	mov r11, r11
@ 0 "" 2
	.thumb
	.syntax unified
	b	.L2916		@
.L2951:
	movs	r3, #4	@ _131,
	b	.L2924		@
.L2953:
	.align	2
.L2952:
	.word	GetCharacterData
	.word	ggMsgStringTable
	.word	RecruitValues
	.word	ReplacePortraitTable
	.word	13260
	.size	InitReplaceTextList, .-InitReplaceTextList
	.align	1
	.p2align 2,,3
	.global	CallARM_DecompText
	.syntax unified
	.code	16
	.thumb_func
	.type	CallARM_DecompText, %function
CallARM_DecompText:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 976
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r8	@,
	push	{lr}	@
	ldr	r4, .L2977	@,
	add	sp, sp, r4	@,
@ Patches/../C_code.c:4450: {
	movs	r5, r1	@ b, tmp161
@ Patches/../C_code.c:4453: 	length[0] = DecompText(a, b); 
	bl	DecompText		@
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	ldr	r3, .L2977+4	@ tmp132,
	ldr	r3, [r3]	@ RecruitValues.0_24, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.0_24, *RecruitValues.0_24
@ Patches/../C_code.c:4453: 	length[0] = DecompText(a, b); 
	str	r0, [sp, #12]	@ tmp162, length[0]
@ Patches/../C_code.c:153: 	return RecruitValues->recruitment; 
	lsls	r2, r3, #29	@ tmp137, *RecruitValues.0_24,
@ Patches/../C_code.c:4454: 	if (!ShouldRandomizeRecruitment()) { return; }
	beq	.L2954		@,
@ Patches/../C_code.c:4455: 	if (RecruitValues->pauseNameReplace) { return; } 
	lsls	r3, r3, #28	@ tmp164, *RecruitValues.0_24,
	bpl	.L2975		@,
.L2954:
@ Patches/../C_code.c:4484: }
	movs	r3, #246	@,
	lsls	r3, r3, #2	@,,
	add	sp, sp, r3	@,
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L2975:
@ Patches/../C_code.c:4458: 	InitReplaceTextListAntiHuffman(ReplaceTextList); 
	add	r0, sp, #16	@ tmp166,,
	bl	InitReplaceTextListAntiHuffman		@
	add	r3, sp, #976	@ _46,,
	movs	r7, r5	@ ivtmp.1825, b
@ Patches/../C_code.c:4473: 	for (int i = 0; i < TextBufferSize; ++i) { 
	movs	r6, #0	@ i,
	mov	r8, r3	@ _46, _46
.L2958:
@ Patches/../C_code.c:4474: 		if (!b[i]) { return; } 
	ldrb	r3, [r7]	@ MEM[(char *)_52], MEM[(char *)_52]
	cmp	r3, #0	@ MEM[(char *)_52],
	beq	.L2954		@,
@ Patches/../C_code.c:4477: 			if (!ReplaceTextList[c].find) { break; } 
	ldr	r1, [sp, #16]	@ _8, MEM[(const char * *)_47]
	add	r4, sp, #16	@ tmp168,,
@ Patches/../C_code.c:4477: 			if (!ReplaceTextList[c].find) { break; } 
	cmp	r1, #0	@ _8,
	beq	.L2956		@,
.L2976:
@ Patches/../C_code.c:4478: 			if (ReplaceIfMatching(length, ReplaceTextList[c].find, ReplaceTextList[c].replace, i, b)) { break; };
	ldr	r2, [r4, #4]	@ MEM[(const char * *)_47 + 4B], MEM[(const char * *)_47 + 4B]
	movs	r3, r6	@, i
	str	r5, [sp]	@ b,
	add	r0, sp, #12	@ tmp169,,
	bl	ReplaceIfMatching		@
@ Patches/../C_code.c:4478: 			if (ReplaceIfMatching(length, ReplaceTextList[c].find, ReplaceTextList[c].replace, i, b)) { break; };
	cmp	r0, #0	@ tmp163,
	bne	.L2956		@,
@ Patches/../C_code.c:4475: 		for (int c = 0; c < ListSize; ++c) { 
	adds	r4, r4, #8	@ ivtmp.1814,
	cmp	r4, r8	@ ivtmp.1814, _46
	beq	.L2956		@,
@ Patches/../C_code.c:4476: 			if (!b[i]) { return; } 
	ldrb	r3, [r7]	@ MEM[(char *)_52], MEM[(char *)_52]
	cmp	r3, #0	@ MEM[(char *)_52],
	beq	.L2954		@,
@ Patches/../C_code.c:4477: 			if (!ReplaceTextList[c].find) { break; } 
	ldr	r1, [r4]	@ _8, MEM[(const char * *)_47]
@ Patches/../C_code.c:4477: 			if (!ReplaceTextList[c].find) { break; } 
	cmp	r1, #0	@ _8,
	bne	.L2976		@,
.L2956:
@ Patches/../C_code.c:4473: 	for (int i = 0; i < TextBufferSize; ++i) { 
	ldr	r3, .L2977+8	@ tmp154,
@ Patches/../C_code.c:4473: 	for (int i = 0; i < TextBufferSize; ++i) { 
	adds	r6, r6, #1	@ i,
@ Patches/../C_code.c:4473: 	for (int i = 0; i < TextBufferSize; ++i) { 
	adds	r7, r7, #1	@ ivtmp.1825,
	cmp	r6, r3	@ i, tmp154
	bne	.L2958		@,
	b	.L2954		@
.L2978:
	.align	2
.L2977:
	.word	-984
	.word	RecruitValues
	.word	1365
	.size	CallARM_DecompText, .-CallARM_DecompText
	.align	1
	.p2align 2,,3
	.global	IsSkill
	.syntax unified
	.code	16
	.thumb_func
	.type	IsSkill, %function
IsSkill:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:4496:     if (skillId == 255)
	cmp	r0, #255	@ skillId,
	beq	.L2981		@,
	cmp	r0, #0	@ skillId,
	beq	.L2981		@,
@ Patches/../C_code.c:4499:     return !!SkillDescTable[skillId];
	ldr	r3, .L2982	@ tmp132,
	lsls	r0, r0, #1	@ tmp133, skillId,
@ Patches/../C_code.c:4499:     return !!SkillDescTable[skillId];
	ldrh	r0, [r0, r3]	@ tmp135, SkillDescTable
	subs	r3, r0, #1	@ tmp137, tmp135
	sbcs	r0, r0, r3	@ <retval>, tmp135, tmp137
.L2979:
@ Patches/../C_code.c:4500: }
	@ sp needed	@
	bx	lr
.L2981:
@ Patches/../C_code.c:4494:         return FALSE;
	movs	r0, #0	@ <retval>,
	b	.L2979		@
.L2983:
	.align	2
.L2982:
	.word	SkillDescTable
	.size	IsSkill, .-IsSkill
	.align	1
	.p2align 2,,3
	.global	GetSkillName
	.syntax unified
	.code	16
	.thumb_func
	.type	GetSkillName, %function
GetSkillName:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:4503:     char* desc = GetStringFromIndex(SkillDescTable[skillId]);
	ldr	r3, .L2992	@ tmp120,
	lsls	r0, r0, #1	@ tmp121, tmp127,
@ Patches/../C_code.c:4503:     char* desc = GetStringFromIndex(SkillDescTable[skillId]);
	ldrh	r0, [r0, r3]	@ tmp122, SkillDescTable
@ Patches/../C_code.c:4502: {
	push	{r4, lr}	@
@ Patches/../C_code.c:4503:     char* desc = GetStringFromIndex(SkillDescTable[skillId]);
	ldr	r3, .L2992+4	@ tmp123,
	bl	.L14		@
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	ldrb	r3, [r0]	@ _4, *desc_10
	cmp	r3, #0	@ _4,
	beq	.L2984		@,
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	movs	r2, r0	@ it, <retval>
	b	.L2987		@
.L2986:
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	ldrb	r3, [r2, #1]	@ _4, MEM[(char *)it_11]
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	adds	r2, r2, #1	@ it,
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	cmp	r3, #0	@ _4,
	beq	.L2984		@,
.L2987:
@ Patches/../C_code.c:4507:         if (*it == ':')
	cmp	r3, #58	@ _4,
	bne	.L2986		@,
@ Patches/../C_code.c:4509:             *it = 0;
	movs	r3, #0	@ tmp124,
	strb	r3, [r2]	@ tmp124, *it_15
.L2984:
@ Patches/../C_code.c:4515: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L2993:
	.align	2
.L2992:
	.word	SkillDescTable
	.word	GetStringFromIndex
	.size	GetSkillName, .-GetSkillName
	.align	1
	.p2align 2,,3
	.global	GetCombinedString
	.syntax unified
	.code	16
	.thumb_func
	.type	GetCombinedString, %function
GetCombinedString:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:4519: 	for (i = 0; i < 0x1000; ++i) { 
	movs	r7, #128	@ tmp141,
@ Patches/../C_code.c:4517: char* GetCombinedString(const char* a, char* b, char* c) { 
	movs	r5, r0	@ a, tmp142
@ Patches/../C_code.c:4519: 	for (i = 0; i < 0x1000; ++i) { 
	movs	r3, #0	@ i,
@ Patches/../C_code.c:4517: char* GetCombinedString(const char* a, char* b, char* c) { 
	movs	r0, r2	@ c, tmp144
@ Patches/../C_code.c:4519: 	for (i = 0; i < 0x1000; ++i) { 
	lsls	r7, r7, #5	@ tmp141, tmp141,
@ Patches/../C_code.c:4521: 		c[i] = a[i]; 
	subs	r2, r2, #1	@ tmp140,
	b	.L2996		@
.L3008:
	strb	r4, [r2, r3]	@ _3, MEM[(char *)_25 + _6 * 1]
@ Patches/../C_code.c:4519: 	for (i = 0; i < 0x1000; ++i) { 
	cmp	r3, r7	@ i, tmp141
	beq	.L3007		@,
.L2996:
@ Patches/../C_code.c:4520: 		if (!a[i]) { break; } 
	ldrb	r4, [r5, r3]	@ _3, MEM[(const char *)a_20(D) + _23 * 1]
	movs	r6, r3	@ _23, i
@ Patches/../C_code.c:4519: 	for (i = 0; i < 0x1000; ++i) { 
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:4520: 		if (!a[i]) { break; } 
	cmp	r4, #0	@ _3,
	bne	.L3008		@,
.L2995:
@ Patches/../C_code.c:4523: 	c[i] = *" "; 
	movs	r2, #32	@ tmp132,
	strb	r2, [r0, r6]	@ tmp132, *_7
@ Patches/../C_code.c:4526: 	for (int d = 0; d<0x1000; ++d) { 
	movs	r6, #128	@ tmp139,
@ Patches/../C_code.c:4526: 	for (int d = 0; d<0x1000; ++d) { 
	movs	r4, #0	@ d,
	adds	r3, r0, r3	@ tmp138, c, i
@ Patches/../C_code.c:4526: 	for (int d = 0; d<0x1000; ++d) { 
	lsls	r6, r6, #5	@ tmp139, tmp139,
	b	.L2998		@
.L3009:
@ Patches/../C_code.c:4526: 	for (int d = 0; d<0x1000; ++d) { 
	adds	r4, r4, #1	@ d,
@ Patches/../C_code.c:4526: 	for (int d = 0; d<0x1000; ++d) { 
	cmp	r4, r6	@ d, tmp139
	beq	.L2997		@,
.L2998:
@ Patches/../C_code.c:4527: 		c[i+d] = b[d]; 
	ldrb	r5, [r1, r4]	@ _13, MEM[(char *)b_26(D) + _14 * 1]
@ Patches/../C_code.c:4527: 		c[i+d] = b[d]; 
	strb	r5, [r3, r4]	@ _13, MEM[(char *)_44 + _14 * 1]
@ Patches/../C_code.c:4528: 		if (!b[d]) { break; } 
	cmp	r5, #0	@ _13,
	bne	.L3009		@,
.L2997:
@ Patches/../C_code.c:4531: } 
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3007:
	movs	r6, #128	@ _23,
	ldr	r3, .L3010	@ i,
	lsls	r6, r6, #5	@ _23, _23,
	b	.L2995		@
.L3011:
	.align	2
.L3010:
	.word	4097
	.size	GetCombinedString, .-GetCombinedString
	.align	1
	.p2align 2,,3
	.global	DrawConfigMenu
	.syntax unified
	.code	16
	.thumb_func
	.type	DrawConfigMenu, %function
DrawConfigMenu:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 80
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r6, r9	@,
	mov	lr, fp	@,
	mov	r7, r10	@,
	mov	r5, r8	@,
@ Patches/../C_code.c:4561: 	int offset = proc->offset;
	movs	r3, #49	@ tmp423,
@ Patches/../C_code.c:4550: void DrawConfigMenu(ConfigMenuProc* proc) { 
	push	{r5, r6, r7, lr}	@
@ Patches/../C_code.c:4561: 	int offset = proc->offset;
	ldrb	r6, [r0, r3]	@ offset,
@ Patches/../C_code.c:4550: void DrawConfigMenu(ConfigMenuProc* proc) { 
	movs	r4, r0	@ proc, tmp823
@ Patches/../C_code.c:4563: 	ClearText(&th[hOff + offset+proc->id]); 
	movs	r0, r6	@ tmp424, offset
@ Patches/../C_code.c:4563: 	ClearText(&th[hOff + offset+proc->id]); 
	subs	r3, r3, #1	@ tmp425,
	ldrsb	r3, [r4, r3]	@ tmp426,
@ Patches/../C_code.c:4563: 	ClearText(&th[hOff + offset+proc->id]); 
	adds	r0, r0, #19	@ tmp424,
@ Patches/../C_code.c:4563: 	ClearText(&th[hOff + offset+proc->id]); 
	adds	r0, r0, r3	@ tmp427, tmp424, tmp426
@ Patches/../C_code.c:4563: 	ClearText(&th[hOff + offset+proc->id]); 
	ldr	r3, .L3102	@ tmp818,
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4550: void DrawConfigMenu(ConfigMenuProc* proc) { 
	sub	sp, sp, #92	@,,
@ Patches/../C_code.c:4563: 	ClearText(&th[hOff + offset+proc->id]); 
	lsls	r0, r0, #3	@ tmp428, tmp427,
@ Patches/../C_code.c:4563: 	ClearText(&th[hOff + offset+proc->id]); 
	str	r3, [sp, #12]	@ tmp818, %sfp
	add	r0, r0, ip	@ tmp429, tmp818
	ldr	r3, .L3102+4	@ tmp431,
	bl	.L14		@
@ Patches/../C_code.c:4581: 	switch (offset) { 
	cmp	r6, #18	@ offset,
	bhi	.L3013		@,
	ldr	r2, .L3102+8	@ tmp436,
	lsls	r3, r6, #2	@ tmp434, offset,
	ldr	r3, [r2, r3]	@ tmp437,
	mov	pc, r3	@ tmp437
	.section	.rodata
	.align	2
.L3015:
	.word	.L3033
	.word	.L3041
	.word	.L3042
	.word	.L3043
	.word	.L3044
	.word	.L3045
	.word	.L3046
	.word	.L3047
	.word	.L3048
	.word	.L3049
	.word	.L3050
	.word	.L3051
	.word	.L3052
	.word	.L3053
	.word	.L3054
	.word	.L3055
	.word	.L3056
	.word	.L3057
	.word	.L3058
	.text
.L3057:
	movs	r5, #0	@ i,
.L3016:
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	ldr	r3, .L3102+12	@ tmp751,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	ldr	r3, [r3]	@ DisplayTimedHitsOption, DisplayTimedHitsOption
	cmp	r3, #0	@ DisplayTimedHitsOption,
	beq	.LCB18010	@
	bl	.L3100	@far jump	@
.LCB18010:
.L3014:
@ Patches/../C_code.c:4620: 	case 18: { if (DisplayRandomSkillsOption) { 
	ldr	r3, .L3102+16	@ tmp777,
@ Patches/../C_code.c:4620: 	case 18: { if (DisplayRandomSkillsOption) { 
	ldr	r3, [r3]	@ DisplayRandomSkillsOption, DisplayRandomSkillsOption
	cmp	r3, #0	@ DisplayRandomSkillsOption,
	beq	.L3013		@,
@ Patches/../C_code.c:4621: 		if ((proc->Option[17] != 3) || (!IsSkill(proc->skill))) {
	movs	r3, #74	@ tmp779,
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	adds	r6, r5, r6	@ _1273, i, offset
@ Patches/../C_code.c:4621: 		if ((proc->Option[17] != 3) || (!IsSkill(proc->skill))) {
	ldrsb	r1, [r4, r3]	@ _284,
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	movs	r3, r6	@ tmp780, _1273
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	ldr	r2, [sp, #12]	@ tmp818, %sfp
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	adds	r3, r3, #19	@ tmp780,
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	lsls	r3, r3, #3	@ tmp781, tmp780,
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	adds	r7, r2, r3	@ _1277, tmp818, tmp781
	movs	r2, #52	@ tmp789,
	ldr	r3, .L3102+20	@ tmp787,
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	lsls	r5, r5, #7	@ tmp784, i,
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	adds	r5, r5, r3	@ _1283, tmp784, tmp787
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	ldr	r3, .L3102+24	@ tmp788,
	adds	r3, r3, r6	@ tmp790, tmp788, _1273
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	ldrb	r6, [r3, r2]	@ _1285, RtWidths
@ Patches/../C_code.c:4621: 		if ((proc->Option[17] != 3) || (!IsSkill(proc->skill))) {
	cmp	r1, #3	@ _284,
	bne	.LCB18035	@
	b	.L3101	@long jump	@
.LCB18035:
.L3036:
@ Patches/../C_code.c:4622: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option17[proc->Option[17]], UseHuffmanEncoding)); i++; 
	lsls	r2, r1, #2	@ tmp802, _284,
	ldr	r3, .L3102+28	@ tmp800,
	adds	r2, r2, r1	@ tmp803, tmp802, _284
	lsls	r2, r2, #1	@ tmp804, tmp803,
	adds	r3, r3, r2	@ tmp805, tmp800, tmp804
@ Patches/../C_code.c:4622: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option17[proc->Option[17]], UseHuffmanEncoding)); i++; 
	str	r3, [sp, #4]	@ tmp805,
.L3099:
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	movs	r3, #0	@,
	movs	r2, #0	@,
	movs	r1, r5	@, _1283
	movs	r0, r7	@, _1277
	str	r6, [sp]	@ _1285,
	ldr	r4, .L3102+32	@ tmp814,
	bl	.L240		@
.L3013:
@ Patches/../C_code.c:4640: 	BG_EnableSyncByMask(BG0_SYNC_BIT); 
	movs	r0, #1	@,
	ldr	r3, .L3102+36	@ tmp815,
	bl	.L14		@
@ Patches/../C_code.c:4642: } 
	add	sp, sp, #92	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3058:
@ Patches/../C_code.c:4581: 	switch (offset) { 
	movs	r5, #0	@ i,
	b	.L3014		@
.L3103:
	.align	2
.L3102:
	.word	gStatScreen+24
	.word	ClearText
	.word	.L3015
	.word	DisplayTimedHitsOption
	.word	DisplayRandomSkillsOption
	.word	gBG0TilemapBuffer+220
	.word	.LANCHOR2
	.word	.LANCHOR7+60
	.word	PutDrawText
	.word	BG_EnableSyncByMask
.L3041:
	movs	r3, #7	@ prephitmp_1092,
	mov	r10, r3	@ prephitmp_1092, prephitmp_1092
	movs	r3, #247	@ prephitmp_1091,
	lsls	r3, r3, #2	@ prephitmp_1091, prephitmp_1091,
	str	r3, [sp, #16]	@ prephitmp_1091, %sfp
	movs	r3, #6	@ prephitmp_1070,
	str	r3, [sp, #24]	@ prephitmp_1070, %sfp
	movs	r3, #215	@ prephitmp_1069,
	lsls	r3, r3, #2	@ prephitmp_1069, prephitmp_1069,
	str	r3, [sp, #20]	@ prephitmp_1069, %sfp
	movs	r3, #5	@ prephitmp_1042,
	str	r3, [sp, #32]	@ prephitmp_1042, %sfp
	movs	r3, #183	@ prephitmp_1041,
	lsls	r3, r3, #2	@ prephitmp_1041, prephitmp_1041,
	str	r3, [sp, #28]	@ prephitmp_1041, %sfp
	movs	r3, #4	@ prephitmp_1008,
	str	r3, [sp, #40]	@ prephitmp_1008, %sfp
	movs	r3, #151	@ prephitmp_1007,
	lsls	r3, r3, #2	@ prephitmp_1007, prephitmp_1007,
	str	r3, [sp, #36]	@ prephitmp_1007, %sfp
	movs	r3, #3	@ prephitmp_968,
	str	r3, [sp, #48]	@ prephitmp_968, %sfp
	adds	r3, r3, #218	@ prephitmp_967,
	adds	r3, r3, #255	@ prephitmp_967,
	str	r3, [sp, #44]	@ prephitmp_967, %sfp
	subs	r3, r3, #219	@ prephitmp_922,
	subs	r3, r3, #255	@ prephitmp_922,
	str	r3, [sp, #52]	@ prephitmp_922, %sfp
	adds	r3, r3, #91	@ prephitmp_921,
	adds	r3, r3, #255	@ prephitmp_921,
	mov	r8, r3	@ prephitmp_921, prephitmp_921
	movs	r5, #1	@ prephitmp_916,
	movs	r1, #220	@ prephitmp_915,
.L3032:
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	movs	r2, #57	@ tmp448,
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	ldrsb	r2, [r4, r2]	@ tmp449,
	mov	ip, r2	@ tmp449, tmp449
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	ldr	r3, .L3104	@ tmp816,
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	lsls	r2, r2, #2	@ tmp451, tmp449,
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	mov	fp, r3	@ tmp816, tmp816
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	ldr	r3, .L3104+4	@ tmp447,
	add	r2, r2, ip	@ tmp452, tmp449
	adds	r3, r3, r2	@ tmp453, tmp447, tmp452
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	str	r3, [sp, #4]	@ tmp453,
	movs	r3, #4	@ tmp454,
	ldr	r0, .L3104+8	@ tmp445,
	str	r3, [sp]	@ tmp454,
	ldr	r7, .L3104+12	@ tmp817,
	movs	r3, #0	@,
	movs	r2, #0	@,
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	add	r1, r1, fp	@ tmp443, tmp816
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	adds	r5, r6, r5	@ _953, offset, prephitmp_916
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	bl	.L223		@
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	movs	r0, r5	@ _955, _953
@ Patches/../C_code.c:4584: 	case 1: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option0[proc->Option[0]], UseHuffmanEncoding)); i++;  
	mov	r9, r7	@ tmp817, tmp817
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	adds	r0, r0, #19	@ _955,
.L3031:
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	movs	r3, #58	@ tmp461,
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	ldrsb	r3, [r4, r3]	@ tmp462,
	ldr	r2, .L3104+16	@ tmp465,
	lsls	r3, r3, #5	@ tmp463, tmp462,
	adds	r3, r3, r2	@ tmp464, tmp463, tmp465
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	str	r3, [sp, #4]	@ tmp464,
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	ldr	r3, .L3104+20	@ tmp819,
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	mov	r1, r8	@ prephitmp_921, prephitmp_921
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	mov	r8, r3	@ tmp819, tmp819
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	movs	r3, #52	@ tmp467,
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	add	r5, r5, r8	@ tmp468, tmp819
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	ldrb	r3, [r5, r3]	@ tmp469, RtWidths
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	lsls	r0, r0, #3	@ tmp458, _955,
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	str	r3, [sp]	@ tmp469,
	add	r0, r0, ip	@ tmp459, tmp818
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	movs	r3, #0	@,
	movs	r2, #0	@,
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	add	r1, r1, fp	@ prephitmp_921, tmp816
@ Patches/../C_code.c:4586: 	case 2: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option1[proc->Option[1]], UseHuffmanEncoding)); i++; 
	bl	.L557		@
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	ldr	r3, [sp, #52]	@ prephitmp_922, %sfp
	adds	r3, r6, r3	@ _993, offset, prephitmp_922
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	movs	r0, r3	@ _995, _993
	adds	r0, r0, #19	@ _995,
.L3030:
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	ldr	r2, [sp, #12]	@ tmp818, %sfp
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	movs	r5, #59	@ tmp478,
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	mov	ip, r2	@ tmp818, tmp818
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	mov	r2, r8	@ tmp477, tmp819
	ldrsb	r5, [r4, r5]	@ tmp479,
	adds	r2, r2, #72	@ tmp477,
	lsls	r5, r5, #3	@ tmp480, tmp479,
	adds	r2, r2, r5	@ tmp481, tmp477, tmp480
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	str	r2, [sp, #4]	@ tmp481,
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	movs	r2, #52	@ tmp483,
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	add	r3, r3, r8	@ tmp484, tmp819
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	ldrb	r3, [r3, r2]	@ tmp485, RtWidths
	ldr	r1, [sp, #44]	@ prephitmp_967, %sfp
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	lsls	r0, r0, #3	@ tmp473, _995,
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	str	r3, [sp]	@ tmp485,
	add	r0, r0, ip	@ tmp474, tmp818
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	movs	r3, #0	@,
	movs	r2, #0	@,
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	add	r1, r1, fp	@ prephitmp_967, tmp816
@ Patches/../C_code.c:4588: 	case 3: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option2[proc->Option[2]], UseHuffmanEncoding)); i++; 
	bl	.L557		@
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	ldr	r3, [sp, #48]	@ prephitmp_968, %sfp
	adds	r3, r6, r3	@ _1027, offset, prephitmp_968
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	movs	r0, r3	@ _1029, _1027
	adds	r0, r0, #19	@ _1029,
.L3029:
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	ldr	r2, [sp, #12]	@ tmp818, %sfp
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	movs	r5, #60	@ tmp494,
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	mov	ip, r2	@ tmp818, tmp818
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	ldrsb	r5, [r4, r5]	@ tmp495,
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	lsls	r0, r0, #3	@ tmp489, _1029,
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	add	r0, r0, ip	@ tmp490, tmp818
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	mov	ip, r5	@ tmp495, tmp495
	mov	r2, r8	@ tmp493, tmp819
	mov	r7, ip	@ tmp495, tmp495
	lsls	r5, r5, #4	@ tmp497, tmp495,
	adds	r2, r2, #88	@ tmp493,
	subs	r5, r5, r7	@ tmp498, tmp497, tmp495
	adds	r2, r2, r5	@ tmp499, tmp493, tmp498
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	str	r2, [sp, #4]	@ tmp499,
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	movs	r2, #52	@ tmp501,
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	add	r3, r3, r8	@ tmp502, tmp819
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	ldrb	r3, [r3, r2]	@ tmp503, RtWidths
	ldr	r1, [sp, #36]	@ prephitmp_1007, %sfp
	str	r3, [sp]	@ tmp503,
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	movs	r2, #0	@,
	movs	r3, #0	@,
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	add	r1, r1, fp	@ prephitmp_1007, tmp816
@ Patches/../C_code.c:4590: 	case 4: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option3[proc->Option[3]], UseHuffmanEncoding)); i++; 
	bl	.L557		@
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	ldr	r3, [sp, #40]	@ prephitmp_1008, %sfp
	adds	r3, r6, r3	@ _1055, offset, prephitmp_1008
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	movs	r0, r3	@ _1057, _1055
	adds	r0, r0, #19	@ _1057,
.L3028:
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	ldr	r2, [sp, #12]	@ tmp818, %sfp
	mov	ip, r2	@ tmp818, tmp818
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	movs	r2, #61	@ tmp512,
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	ldrsb	r2, [r4, r2]	@ tmp513,
	lsls	r7, r2, #4	@ tmp515, tmp513,
	subs	r2, r7, r2	@ tmp516, tmp515, tmp513
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	lsls	r0, r0, #3	@ tmp507, _1057,
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	add	r0, r0, ip	@ tmp508, tmp818
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	mov	ip, r2	@ tmp516, tmp516
	ldr	r2, .L3104+24	@ tmp517,
	add	r2, r2, ip	@ tmp517, tmp516
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	str	r2, [sp, #4]	@ tmp517,
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	movs	r2, #52	@ tmp519,
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	add	r3, r3, r8	@ tmp520, tmp819
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	ldrb	r3, [r3, r2]	@ tmp521, RtWidths
	ldr	r1, [sp, #28]	@ prephitmp_1041, %sfp
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	movs	r2, #0	@,
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	str	r3, [sp]	@ tmp521,
	add	r1, r1, fp	@ prephitmp_1041, tmp816
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	movs	r3, #0	@,
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	ldr	r5, .L3104+28	@ tmp820,
@ Patches/../C_code.c:4592: 	case 5: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option4[proc->Option[4]], UseHuffmanEncoding)); i++; 
	bl	.L557		@
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	ldr	r3, [sp, #32]	@ prephitmp_1042, %sfp
	adds	r2, r6, r3	@ _1077, offset, prephitmp_1042
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	movs	r0, r2	@ _1079, _1077
	adds	r0, r0, #19	@ _1079,
.L3027:
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	movs	r3, #62	@ tmp530,
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	ldrsb	r3, [r4, r3]	@ tmp531,
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	lsls	r0, r0, #3	@ tmp525, _1079,
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	add	r0, r0, ip	@ tmp526, tmp818
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	mov	ip, r3	@ tmp531, tmp531
	lsls	r3, r3, #2	@ tmp533, tmp531,
	add	r3, r3, ip	@ tmp534, tmp531
	lsls	r3, r3, #1	@ tmp535, tmp534,
	adds	r5, r5, #84	@ tmp529,
	adds	r5, r5, r3	@ tmp536, tmp529, tmp535
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	movs	r3, #52	@ tmp538,
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	add	r2, r2, r8	@ tmp539, tmp819
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	ldrb	r3, [r2, r3]	@ tmp540, RtWidths
	ldr	r1, [sp, #20]	@ prephitmp_1069, %sfp
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	movs	r2, #0	@,
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	str	r3, [sp]	@ tmp540,
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	str	r5, [sp, #4]	@ tmp536,
	movs	r3, #0	@,
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	add	r1, r1, fp	@ prephitmp_1069, tmp816
@ Patches/../C_code.c:4594: 	case 6: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option5[proc->Option[5]], UseHuffmanEncoding)); i++; 
	bl	.L557		@
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	ldr	r3, [sp, #24]	@ prephitmp_1070, %sfp
	adds	r2, r6, r3	@ _1093, offset, prephitmp_1070
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	movs	r0, r2	@ _1095, _1093
	adds	r0, r0, #19	@ _1095,
.L3026:
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	movs	r3, #63	@ tmp547,
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	ldrsb	r5, [r4, r3]	@ tmp548,
	subs	r3, r3, #37	@ tmp549,
	muls	r3, r5	@ tmp550, tmp548
	ldr	r5, .L3104+32	@ tmp552,
	adds	r3, r3, r5	@ tmp551, tmp550, tmp552
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	str	r3, [sp, #4]	@ tmp551,
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	movs	r3, #52	@ tmp554,
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	add	r2, r2, r8	@ tmp555, tmp819
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	ldrb	r3, [r2, r3]	@ tmp556, RtWidths
	ldr	r1, [sp, #16]	@ prephitmp_1091, %sfp
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	lsls	r0, r0, #3	@ tmp544, _1095,
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	str	r3, [sp]	@ tmp556,
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	movs	r2, #0	@,
	movs	r3, #0	@,
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	add	r1, r1, fp	@ prephitmp_1091, tmp816
	add	r0, r0, ip	@ tmp545, tmp818
@ Patches/../C_code.c:4596: 	case 7: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option6[proc->Option[6]], UseHuffmanEncoding)); i++; 
	bl	.L557		@
@ Patches/../C_code.c:4597: 	if (i > SRR_MAXDISP) { break; } 	
	mov	r3, r10	@ prephitmp_1092, prephitmp_1092
	cmp	r3, #8	@ prephitmp_1092,
	bne	.LCB18315	@
	b	.L3013	@long jump	@
.LCB18315:
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	mov	ip, r6	@ _1103, offset
	add	ip, ip, r10	@ _1103, prephitmp_1092
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	mov	r0, ip	@ _1105, _1103
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	lsls	r1, r3, #7	@ tmp559, prephitmp_1092,
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ _1105,
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, #220	@ _1115,
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	adds	r5, r3, #1	@ _1117, prephitmp_1092,
.L3025:
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	r10, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	movs	r3, #64	@ tmp568,
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	ldrsb	r3, [r4, r3]	@ tmp569,
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp563, _1105,
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	add	r0, r0, r10	@ tmp564, tmp818
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	mov	r10, r3	@ tmp569, tmp569
	lsls	r3, r3, #2	@ tmp571, tmp569,
	add	r3, r3, r10	@ tmp572, tmp569
	lsls	r7, r3, #2	@ tmp573, tmp572,
	mov	r10, r7	@ tmp573, tmp573
	ldr	r2, .L3104+36	@ tmp567,
	add	r3, r3, r10	@ tmp574, tmp573
	adds	r2, r2, r3	@ tmp575, tmp567, tmp574
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	mov	r3, ip	@ _1103, _1103
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	str	r2, [sp, #4]	@ tmp575,
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	movs	r2, #52	@ tmp577,
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	add	r3, r3, r8	@ _1103, tmp819
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r3, r2]	@ tmp579, RtWidths
	add	r1, r1, fp	@ tmp561, tmp816
	str	r3, [sp]	@ tmp579,
@ Patches/../C_code.c:4598: 	case 8: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option7[proc->Option[7]], UseHuffmanEncoding)); i++;  
	movs	r2, #0	@,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:4599: 	if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ _1117,
	bne	.LCB18353	@
	b	.L3013	@long jump	@
.LCB18353:
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	adds	r2, r6, r5	@ _1119, offset, _1117
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	movs	r0, r2	@ _1121, _1119
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	lsls	r1, r5, #7	@ tmp582, _1117,
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ _1121,
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, #220	@ _1131,
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	adds	r5, r5, #1	@ _1133,
.L3024:
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	ldr	r3, .L3104+40	@ tmp821,
	mov	r10, r3	@ tmp821, tmp821
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	movs	r3, #65	@ tmp590,
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	ldrsb	r3, [r4, r3]	@ tmp591,
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp586, _1121,
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	add	r0, r0, ip	@ tmp587, tmp818
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	mov	ip, r3	@ tmp591, tmp591
	lsls	r3, r3, #2	@ tmp593, tmp591,
	add	r3, r3, ip	@ tmp594, tmp591
	lsls	r3, r3, #1	@ tmp595, tmp594,
	add	r3, r3, r10	@ tmp596, tmp821
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	str	r3, [sp, #4]	@ tmp596,
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	movs	r3, #52	@ tmp598,
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	add	r2, r2, r8	@ tmp599, tmp819
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r2, r3]	@ tmp600, RtWidths
	add	r1, r1, fp	@ tmp584, tmp816
	str	r3, [sp]	@ tmp600,
@ Patches/../C_code.c:4600: 	case 9: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option8[proc->Option[8]], UseHuffmanEncoding)); i++;  
	movs	r2, #0	@,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:4601: 	if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ _1133,
	bne	.LCB18387	@
	b	.L3013	@long jump	@
.LCB18387:
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	adds	r3, r6, r5	@ _1135, offset, _1133
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	movs	r0, r3	@ _1137, _1135
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	lsls	r1, r5, #7	@ tmp603, _1133,
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ _1137,
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, #220	@ _1147,
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	adds	r5, r5, #1	@ _1149,
.L3023:
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	ldr	r2, [sp, #12]	@ tmp818, %sfp
	mov	ip, r2	@ tmp818, tmp818
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	mov	r2, r10	@ tmp611, tmp821
	adds	r2, r2, #20	@ tmp611,
	str	r2, [sp, #16]	@ tmp611, %sfp
	movs	r2, #22	@ tmp614,
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	movs	r7, #66	@ tmp612,
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp607, _1137,
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	add	r0, r0, ip	@ tmp608, tmp818
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	mov	ip, r2	@ tmp614, tmp614
	ldrsb	r7, [r4, r7]	@ tmp613,
	mov	r2, ip	@ tmp615, tmp614
	muls	r2, r7	@ tmp615, tmp613
	mov	ip, r2	@ tmp615, tmp615
	ldr	r2, [sp, #16]	@ tmp611, %sfp
	add	r2, r2, ip	@ tmp611, tmp615
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	str	r2, [sp, #4]	@ tmp616,
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	movs	r2, #52	@ tmp618,
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	add	r3, r3, r8	@ tmp619, tmp819
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r3, r2]	@ tmp620, RtWidths
	add	r1, r1, fp	@ tmp605, tmp816
	str	r3, [sp]	@ tmp620,
@ Patches/../C_code.c:4602: 	case 10: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option9[proc->Option[9]], UseHuffmanEncoding)); i++;  
	movs	r2, #0	@,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:4603: 	if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ _1149,
	bne	.LCB18425	@
	b	.L3013	@long jump	@
.LCB18425:
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	adds	r3, r6, r5	@ _1151, offset, _1149
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	movs	r0, r3	@ _1153, _1151
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	lsls	r1, r5, #7	@ tmp623, _1149,
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ _1153,
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, #220	@ _1163,
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	adds	r5, r5, #1	@ _1165,
.L3022:
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	ldr	r2, [sp, #12]	@ tmp818, %sfp
	mov	ip, r2	@ tmp818, tmp818
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	mov	r2, r10	@ tmp821, tmp821
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	movs	r7, #67	@ tmp632,
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	adds	r2, r2, #64	@ tmp821,
	str	r2, [sp, #16]	@ tmp821, %sfp
	ldrsb	r7, [r4, r7]	@ tmp633,
	mov	r10, r7	@ tmp633, tmp633
	movs	r7, #22	@ tmp634,
	movs	r2, r7	@ tmp634, tmp634
	mov	r7, r10	@ tmp635, tmp633
	muls	r7, r2	@ tmp635, tmp634
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp627, _1153,
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	add	r0, r0, ip	@ tmp628, tmp818
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	mov	ip, r7	@ tmp635, tmp635
	ldr	r2, [sp, #16]	@ tmp631, %sfp
	add	r2, r2, ip	@ tmp631, tmp635
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	str	r2, [sp, #4]	@ tmp636,
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	movs	r2, #52	@ tmp638,
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	add	r3, r3, r8	@ tmp639, tmp819
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r3, r2]	@ tmp640, RtWidths
	add	r1, r1, fp	@ tmp625, tmp816
	str	r3, [sp]	@ tmp640,
@ Patches/../C_code.c:4604: 	case 11: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option10[proc->Option[10]], UseHuffmanEncoding)); i++;  
	movs	r2, #0	@,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:4605: 	if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ _1165,
	bne	.LCB18463	@
	b	.L3013	@long jump	@
.LCB18463:
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	adds	r2, r6, r5	@ _1167, offset, _1165
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	movs	r0, r2	@ _1169, _1167
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	lsls	r1, r5, #7	@ tmp643, _1165,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ _1169,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, #220	@ _1179,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	adds	r5, r5, #1	@ _1181,
.L3021:
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	movs	r7, #68	@ tmp652,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	ldrsb	r7, [r4, r7]	@ tmp653,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp647, _1169,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	mov	r10, r7	@ tmp653, tmp653
	lsls	r7, r7, #2	@ tmp655, tmp653,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	add	r0, r0, ip	@ tmp648, tmp818
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	mov	ip, r7	@ tmp655, tmp655
	add	ip, ip, r10	@ tmp656, tmp653
	mov	r7, ip	@ tmp656, tmp656
	lsls	r7, r7, #2	@ tmp657, tmp656,
	mov	ip, r7	@ tmp657, tmp657
	ldr	r3, .L3104+44	@ tmp651,
	add	r3, r3, ip	@ tmp658, tmp657
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	str	r3, [sp, #4]	@ tmp658,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	movs	r3, #52	@ tmp660,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	add	r2, r2, r8	@ tmp661, tmp819
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r2, r3]	@ tmp662, RtWidths
	add	r1, r1, fp	@ tmp645, tmp816
	str	r3, [sp]	@ tmp662,
@ Patches/../C_code.c:4606: 	case 12: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option11[proc->Option[11]], UseHuffmanEncoding)); i++;  
	movs	r2, #0	@,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:4607: 	if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ _1181,
	bne	.LCB18500	@
	b	.L3013	@long jump	@
.LCB18500:
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	adds	r2, r6, r5	@ _1183, offset, _1181
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	movs	r0, r2	@ _1185, _1183
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	lsls	r1, r5, #7	@ tmp665, _1181,
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ _1185,
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, #220	@ _1195,
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	adds	r5, r5, #1	@ _1197,
.L3020:
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	movs	r3, #69	@ tmp672,
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	ldrsb	r3, [r4, r3]	@ tmp673,
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp669, _1185,
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	add	r0, r0, ip	@ tmp670, tmp818
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	mov	ip, r3	@ tmp673, tmp673
	ldr	r7, .L3104+48	@ tmp679,
	lsls	r3, r3, #2	@ tmp675, tmp673,
	add	r3, r3, ip	@ tmp676, tmp673
	mov	ip, r7	@ tmp679, tmp679
	lsls	r3, r3, #2	@ tmp677, tmp676,
	add	r3, r3, ip	@ tmp678, tmp679
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	str	r3, [sp, #4]	@ tmp678,
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	movs	r3, #52	@ tmp681,
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	add	r2, r2, r8	@ tmp682, tmp819
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r2, r3]	@ tmp683, RtWidths
	add	r1, r1, fp	@ tmp667, tmp816
	str	r3, [sp]	@ tmp683,
@ Patches/../C_code.c:4608: 	case 13: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option12[proc->Option[12]], UseHuffmanEncoding)); i++;  
	movs	r2, #0	@,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:4609: 	if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ _1197,
	bne	.LCB18534	@
	b	.L3013	@long jump	@
.LCB18534:
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	adds	r2, r6, r5	@ _1199, offset, _1197
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	movs	r0, r2	@ _1201, _1199
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	lsls	r1, r5, #7	@ tmp686, _1197,
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ _1201,
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, #220	@ _1211,
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	adds	r5, r5, #1	@ _1213,
.L3019:
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	movs	r3, #70	@ tmp693,
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	ldrsb	r3, [r4, r3]	@ tmp694,
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp690, _1201,
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	add	r0, r0, ip	@ tmp691, tmp818
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	mov	ip, r3	@ tmp694, tmp694
	ldr	r7, .L3104+52	@ tmp700,
	lsls	r3, r3, #2	@ tmp696, tmp694,
	add	r3, r3, ip	@ tmp697, tmp694
	mov	ip, r7	@ tmp700, tmp700
	lsls	r3, r3, #2	@ tmp698, tmp697,
	add	r3, r3, ip	@ tmp699, tmp700
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	str	r3, [sp, #4]	@ tmp699,
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	movs	r3, #52	@ tmp702,
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	add	r2, r2, r8	@ tmp703, tmp819
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r2, r3]	@ tmp704, RtWidths
	add	r1, r1, fp	@ tmp688, tmp816
	str	r3, [sp]	@ tmp704,
@ Patches/../C_code.c:4610: 	case 14: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option13[proc->Option[13]], UseHuffmanEncoding)); i++;  
	movs	r2, #0	@,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:4611: 	if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ _1213,
	bne	.LCB18568	@
	b	.L3013	@long jump	@
.LCB18568:
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	adds	r3, r6, r5	@ _1215, offset, _1213
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	movs	r0, r3	@ _1217, _1215
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	movs	r7, r3	@ _1215, _1215
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	lsls	r1, r5, #7	@ tmp707, _1213,
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ _1217,
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, #220	@ _1227,
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	adds	r5, r5, #1	@ _1229,
.L3018:
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	ldr	r3, .L3104+56	@ tmp822,
	mov	r10, r3	@ tmp822, tmp822
	movs	r3, #84	@ tmp715,
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp711, _1217,
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	add	r3, r3, r10	@ tmp715, tmp822
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	add	r0, r0, ip	@ tmp712, tmp818
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	mov	ip, r3	@ tmp715, tmp715
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	movs	r3, #71	@ tmp716,
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	ldrsb	r2, [r4, r3]	@ tmp717,
	lsls	r3, r2, #2	@ tmp719, tmp717,
	adds	r3, r3, r2	@ tmp720, tmp719, tmp717
	lsls	r3, r3, #1	@ tmp721, tmp720,
	adds	r3, r3, r2	@ tmp722, tmp721, tmp717
	add	r3, r3, ip	@ tmp723, tmp715
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	movs	r2, r7	@ _1215, _1215
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	str	r3, [sp, #4]	@ tmp723,
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	movs	r3, #52	@ tmp725,
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	add	r2, r2, r8	@ _1215, tmp819
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r2, r3]	@ tmp727, RtWidths
	add	r1, r1, fp	@ tmp709, tmp816
	str	r3, [sp]	@ tmp727,
@ Patches/../C_code.c:4612: 	case 15: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option14[proc->Option[14]], UseHuffmanEncoding)); i++;  
	movs	r2, #0	@,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:4613: 	if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ _1229,
	bne	.LCB18607	@
	b	.L3013	@long jump	@
.LCB18607:
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	adds	r2, r6, r5	@ _1231, offset, _1229
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	movs	r0, r2	@ _1233, _1231
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	lsls	r1, r5, #7	@ tmp730, _1229,
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ _1233,
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, #220	@ _1243,
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	adds	r5, r5, #1	@ i,
	b	.L3105		@
.L3106:
	.align	2
.L3104:
	.word	gBG0TilemapBuffer
	.word	.LANCHOR1+72
	.word	gStatScreen+184
	.word	PutDrawText
	.word	Option1
	.word	.LANCHOR2
	.word	.LANCHOR3+36
	.word	.LANCHOR3
	.word	Option6
	.word	.LANCHOR4+28
	.word	.LANCHOR5
	.word	.LANCHOR6+24
	.word	Option12
	.word	Option13
	.word	.LANCHOR6
.L3105:
.L3017:
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	ip, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	movs	r3, #120	@ tmp1073,
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp734, _1233,
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	add	r0, r0, ip	@ tmp735, tmp818
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	mov	ip, r3	@ tmp1073, tmp1073
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	subs	r3, r3, #48	@ tmp739,
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	ldrsb	r3, [r4, r3]	@ tmp740,
	add	r10, r10, ip	@ tmp738, tmp1073
	mov	ip, r3	@ tmp740, tmp740
	mov	r7, ip	@ tmp740, tmp740
	lsls	r3, r3, #3	@ tmp742, tmp740,
	subs	r3, r3, r7	@ tmp743, tmp742, tmp740
	lsls	r3, r3, #1	@ tmp744, tmp743,
	add	r3, r3, r10	@ tmp745, tmp738
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	str	r3, [sp, #4]	@ tmp745,
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	movs	r3, r2	@ _1231, _1231
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	movs	r2, #52	@ tmp747,
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	add	r3, r3, r8	@ _1231, tmp819
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r3, r2]	@ tmp749, RtWidths
	add	r1, r1, fp	@ tmp732, tmp816
	str	r3, [sp]	@ tmp749,
@ Patches/../C_code.c:4614: 	case 16: PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option15[proc->Option[15]], UseHuffmanEncoding)); i++;  
	movs	r2, #0	@,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:4615: 	if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ i,
	beq	.LCB18667	@
	b	.L3016	@long jump	@
.LCB18667:
	b	.L3013		@
.L3042:
@ Patches/../C_code.c:4581: 	switch (offset) { 
	movs	r3, #6	@ prephitmp_1092,
	mov	r10, r3	@ prephitmp_1092, prephitmp_1092
	movs	r3, #215	@ prephitmp_1091,
	lsls	r3, r3, #2	@ prephitmp_1091, prephitmp_1091,
	str	r3, [sp, #16]	@ prephitmp_1091, %sfp
	movs	r3, #5	@ prephitmp_1070,
	str	r3, [sp, #24]	@ prephitmp_1070, %sfp
	movs	r3, #183	@ prephitmp_1069,
	lsls	r3, r3, #2	@ prephitmp_1069, prephitmp_1069,
	str	r3, [sp, #20]	@ prephitmp_1069, %sfp
	movs	r3, #4	@ prephitmp_1042,
	str	r3, [sp, #32]	@ prephitmp_1042, %sfp
	movs	r3, #151	@ prephitmp_1041,
	lsls	r3, r3, #2	@ prephitmp_1041, prephitmp_1041,
	str	r3, [sp, #28]	@ prephitmp_1041, %sfp
	movs	r3, #3	@ prephitmp_1008,
	str	r3, [sp, #40]	@ prephitmp_1008, %sfp
	adds	r3, r3, #218	@ prephitmp_1007,
	adds	r3, r3, #255	@ prephitmp_1007,
	str	r3, [sp, #36]	@ prephitmp_1007, %sfp
	subs	r3, r3, #219	@ prephitmp_968,
	subs	r3, r3, #255	@ prephitmp_968,
	str	r3, [sp, #48]	@ prephitmp_968, %sfp
	adds	r3, r3, #91	@ prephitmp_967,
	adds	r3, r3, #255	@ prephitmp_967,
	str	r3, [sp, #44]	@ prephitmp_967, %sfp
	subs	r3, r3, #92	@ prephitmp_922,
	subs	r3, r3, #255	@ prephitmp_922,
	str	r3, [sp, #52]	@ prephitmp_922, %sfp
	adds	r3, r3, #219	@ prephitmp_921,
	mov	r8, r3	@ prephitmp_921, prephitmp_921
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	movs	r0, #21	@ _955,
	movs	r5, #2	@ _953,
	mov	r9, r3	@ tmp817, tmp817
	b	.L3031		@
.L3043:
	movs	r3, #5	@ prephitmp_1092,
	mov	r10, r3	@ prephitmp_1092, prephitmp_1092
	movs	r3, #183	@ prephitmp_1091,
	lsls	r3, r3, #2	@ prephitmp_1091, prephitmp_1091,
	str	r3, [sp, #16]	@ prephitmp_1091, %sfp
	movs	r3, #4	@ prephitmp_1070,
	str	r3, [sp, #24]	@ prephitmp_1070, %sfp
	movs	r3, #151	@ prephitmp_1069,
	lsls	r3, r3, #2	@ prephitmp_1069, prephitmp_1069,
	str	r3, [sp, #20]	@ prephitmp_1069, %sfp
	movs	r3, #3	@ prephitmp_1042,
	str	r3, [sp, #32]	@ prephitmp_1042, %sfp
	adds	r3, r3, #218	@ prephitmp_1041,
	adds	r3, r3, #255	@ prephitmp_1041,
	str	r3, [sp, #28]	@ prephitmp_1041, %sfp
	subs	r3, r3, #219	@ prephitmp_1008,
	ldr	r2, .L3107	@ tmp816,
	subs	r3, r3, #255	@ prephitmp_1008,
	str	r3, [sp, #40]	@ prephitmp_1008, %sfp
	adds	r3, r3, #91	@ prephitmp_1007,
	adds	r3, r3, #255	@ prephitmp_1007,
	mov	fp, r2	@ tmp816, tmp816
	ldr	r2, .L3107+4	@ tmp817,
	str	r3, [sp, #36]	@ prephitmp_1007, %sfp
	subs	r3, r3, #92	@ prephitmp_968,
	subs	r3, r3, #255	@ prephitmp_968,
	mov	r9, r2	@ tmp817, tmp817
	ldr	r2, .L3107+8	@ tmp819,
	str	r3, [sp, #48]	@ prephitmp_968, %sfp
	adds	r3, r3, #219	@ prephitmp_967,
	str	r3, [sp, #44]	@ prephitmp_967, %sfp
	movs	r0, #22	@ _995,
	mov	r8, r2	@ tmp819, tmp819
	subs	r3, r3, #217	@ _993,
	b	.L3030		@
.L3044:
	movs	r3, #4	@ prephitmp_1092,
	mov	r10, r3	@ prephitmp_1092, prephitmp_1092
	movs	r3, #151	@ prephitmp_1091,
	lsls	r3, r3, #2	@ prephitmp_1091, prephitmp_1091,
	str	r3, [sp, #16]	@ prephitmp_1091, %sfp
	movs	r3, #3	@ prephitmp_1070,
	str	r3, [sp, #24]	@ prephitmp_1070, %sfp
	adds	r3, r3, #218	@ prephitmp_1069,
	adds	r3, r3, #255	@ prephitmp_1069,
	str	r3, [sp, #20]	@ prephitmp_1069, %sfp
	subs	r3, r3, #219	@ prephitmp_1042,
	ldr	r2, .L3107	@ tmp816,
	subs	r3, r3, #255	@ prephitmp_1042,
	str	r3, [sp, #32]	@ prephitmp_1042, %sfp
	adds	r3, r3, #91	@ prephitmp_1041,
	adds	r3, r3, #255	@ prephitmp_1041,
	mov	fp, r2	@ tmp816, tmp816
	ldr	r2, .L3107+4	@ tmp817,
	str	r3, [sp, #28]	@ prephitmp_1041, %sfp
	subs	r3, r3, #92	@ prephitmp_1008,
	subs	r3, r3, #255	@ prephitmp_1008,
	mov	r9, r2	@ tmp817, tmp817
	ldr	r2, .L3107+8	@ tmp819,
	str	r3, [sp, #40]	@ prephitmp_1008, %sfp
	adds	r3, r3, #219	@ prephitmp_1007,
	str	r3, [sp, #36]	@ prephitmp_1007, %sfp
	movs	r0, #23	@ _1029,
	mov	r8, r2	@ tmp819, tmp819
	subs	r3, r3, #216	@ _1027,
	b	.L3029		@
.L3045:
	movs	r3, #3	@ prephitmp_1092,
	mov	r10, r3	@ prephitmp_1092, prephitmp_1092
	adds	r3, r3, #218	@ prephitmp_1091,
	adds	r3, r3, #255	@ prephitmp_1091,
	str	r3, [sp, #16]	@ prephitmp_1091, %sfp
	subs	r3, r3, #219	@ prephitmp_1070,
	ldr	r2, .L3107	@ tmp816,
	subs	r3, r3, #255	@ prephitmp_1070,
	str	r3, [sp, #24]	@ prephitmp_1070, %sfp
	adds	r3, r3, #91	@ prephitmp_1069,
	adds	r3, r3, #255	@ prephitmp_1069,
	mov	fp, r2	@ tmp816, tmp816
	ldr	r2, .L3107+4	@ tmp817,
	str	r3, [sp, #20]	@ prephitmp_1069, %sfp
	subs	r3, r3, #92	@ prephitmp_1042,
	subs	r3, r3, #255	@ prephitmp_1042,
	mov	r9, r2	@ tmp817, tmp817
	ldr	r2, .L3107+8	@ tmp819,
	str	r3, [sp, #32]	@ prephitmp_1042, %sfp
	adds	r3, r3, #219	@ prephitmp_1041,
	str	r3, [sp, #28]	@ prephitmp_1041, %sfp
	movs	r0, #24	@ _1057,
	mov	r8, r2	@ tmp819, tmp819
	subs	r3, r3, #215	@ _1055,
	b	.L3028		@
.L3046:
	movs	r3, #2	@ prephitmp_1092,
	mov	r10, r3	@ prephitmp_1092, prephitmp_1092
	adds	r3, r3, #91	@ prephitmp_1091,
	adds	r3, r3, #255	@ prephitmp_1091,
	str	r3, [sp, #16]	@ prephitmp_1091, %sfp
	subs	r3, r3, #92	@ prephitmp_1070,
	subs	r3, r3, #255	@ prephitmp_1070,
	str	r3, [sp, #24]	@ prephitmp_1070, %sfp
	adds	r3, r3, #219	@ prephitmp_1069,
	str	r3, [sp, #20]	@ prephitmp_1069, %sfp
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	mov	r9, r3	@ tmp817, tmp817
	ldr	r3, .L3107+8	@ tmp819,
	movs	r0, #25	@ _1079,
	movs	r2, #6	@ _1077,
	mov	r8, r3	@ tmp819, tmp819
	ldr	r5, .L3107+12	@ tmp820,
	b	.L3027		@
.L3047:
	movs	r3, #1	@ prephitmp_1092,
	mov	r10, r3	@ prephitmp_1092, prephitmp_1092
	adds	r3, r3, #219	@ prephitmp_1091,
	str	r3, [sp, #16]	@ prephitmp_1091, %sfp
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	mov	r9, r3	@ tmp817, tmp817
	ldr	r3, .L3107+8	@ tmp819,
	movs	r0, #26	@ _1095,
	movs	r2, #7	@ _1093,
	mov	r8, r3	@ tmp819, tmp819
	b	.L3026		@
.L3048:
	movs	r3, #8	@ _1103,
	mov	ip, r3	@ _1103, _1103
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	mov	r9, r3	@ tmp817, tmp817
	ldr	r3, .L3107+8	@ tmp819,
	movs	r5, #1	@ _1117,
	movs	r1, #220	@ _1115,
	movs	r0, #27	@ _1105,
	mov	r8, r3	@ tmp819, tmp819
	b	.L3025		@
.L3049:
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	mov	r9, r3	@ tmp817, tmp817
	ldr	r3, .L3107+8	@ tmp819,
	movs	r5, #1	@ _1133,
	movs	r1, #220	@ _1131,
	movs	r0, #28	@ _1121,
	movs	r2, #9	@ _1119,
	mov	r8, r3	@ tmp819, tmp819
	b	.L3024		@
.L3050:
	ldr	r2, .L3107	@ tmp816,
	mov	fp, r2	@ tmp816, tmp816
	ldr	r2, .L3107+4	@ tmp817,
	mov	r9, r2	@ tmp817, tmp817
	ldr	r2, .L3107+8	@ tmp819,
	mov	r8, r2	@ tmp819, tmp819
	ldr	r2, .L3107+16	@ tmp821,
	movs	r5, #1	@ _1149,
	movs	r1, #220	@ _1147,
	movs	r0, #29	@ _1137,
	movs	r3, #10	@ _1135,
	mov	r10, r2	@ tmp821, tmp821
	b	.L3023		@
.L3051:
	ldr	r2, .L3107	@ tmp816,
	mov	fp, r2	@ tmp816, tmp816
	ldr	r2, .L3107+4	@ tmp817,
	mov	r9, r2	@ tmp817, tmp817
	ldr	r2, .L3107+8	@ tmp819,
	mov	r8, r2	@ tmp819, tmp819
	ldr	r2, .L3107+16	@ tmp821,
	movs	r5, #1	@ _1165,
	movs	r1, #220	@ _1163,
	movs	r0, #30	@ _1153,
	movs	r3, #11	@ _1151,
	mov	r10, r2	@ tmp821, tmp821
	b	.L3022		@
.L3052:
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	mov	r9, r3	@ tmp817, tmp817
	ldr	r3, .L3107+8	@ tmp819,
	movs	r5, #1	@ _1181,
	movs	r1, #220	@ _1179,
	movs	r0, #31	@ _1169,
	movs	r2, #12	@ _1167,
	mov	r8, r3	@ tmp819, tmp819
	b	.L3021		@
.L3053:
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	mov	r9, r3	@ tmp817, tmp817
	ldr	r3, .L3107+8	@ tmp819,
	movs	r5, #1	@ _1197,
	movs	r1, #220	@ _1195,
	movs	r0, #32	@ _1185,
	movs	r2, #13	@ _1183,
	mov	r8, r3	@ tmp819, tmp819
	b	.L3020		@
.L3054:
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	mov	r9, r3	@ tmp817, tmp817
	ldr	r3, .L3107+8	@ tmp819,
	movs	r5, #1	@ _1213,
	movs	r1, #220	@ _1211,
	movs	r0, #33	@ _1201,
	movs	r2, #14	@ _1199,
	mov	r8, r3	@ tmp819, tmp819
	b	.L3019		@
.L3055:
	movs	r3, #15	@ _1215,
	movs	r7, r3	@ _1215, _1215
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	mov	r9, r3	@ tmp817, tmp817
	ldr	r3, .L3107+8	@ tmp819,
	movs	r5, #1	@ _1229,
	movs	r1, #220	@ _1227,
	movs	r0, #34	@ _1217,
	mov	r8, r3	@ tmp819, tmp819
	b	.L3018		@
.L3056:
	ldr	r3, .L3107	@ tmp816,
	mov	fp, r3	@ tmp816, tmp816
	ldr	r3, .L3107+4	@ tmp817,
	mov	r9, r3	@ tmp817, tmp817
	ldr	r3, .L3107+8	@ tmp819,
	mov	r8, r3	@ tmp819, tmp819
	ldr	r3, .L3107+20	@ tmp822,
	movs	r5, #1	@ i,
	movs	r1, #220	@ _1243,
	movs	r0, #35	@ _1233,
	movs	r2, #16	@ _1231,
	mov	r10, r3	@ tmp822, tmp822
	b	.L3017		@
.L3033:
@ Patches/../C_code.c:4582: 	case 0: TileMap_FillRect(TILEMAP_LOCATED(gBG0TilemapBuffer, NUMBER_X-6, Y_HAND), 9, 2, 0); // seed first 
	ldr	r5, .L3107+24	@ tmp438,
	movs	r3, #0	@,
	movs	r0, r5	@, tmp438
	movs	r2, #2	@,
	movs	r1, #9	@,
	ldr	r7, .L3107+28	@ tmp439,
	bl	.L223		@
@ Patches/../C_code.c:4583: 	PutNumber(TILEMAP_LOCATED(gBG0TilemapBuffer, NUMBER_X-1, 3+((i)*2)), white, proc->seed); i++; 
	movs	r0, r5	@ tmp438, tmp438
	movs	r1, #0	@,
	ldr	r3, .L3107+32	@ tmp442,
	ldr	r2, [r4, #44]	@ proc_355(D)->seed, proc_355(D)->seed
	adds	r0, r0, #10	@ tmp438,
	bl	.L14		@
	movs	r3, #8	@ prephitmp_1092,
	mov	r10, r3	@ prephitmp_1092, prephitmp_1092
	ldr	r3, .L3107+36	@ prephitmp_1091,
	str	r3, [sp, #16]	@ prephitmp_1091, %sfp
	movs	r3, #7	@ prephitmp_1070,
	str	r3, [sp, #24]	@ prephitmp_1070, %sfp
	movs	r3, #247	@ prephitmp_1069,
	lsls	r3, r3, #2	@ prephitmp_1069, prephitmp_1069,
	str	r3, [sp, #20]	@ prephitmp_1069, %sfp
	movs	r3, #6	@ prephitmp_1042,
	str	r3, [sp, #32]	@ prephitmp_1042, %sfp
	movs	r3, #215	@ prephitmp_1041,
	lsls	r3, r3, #2	@ prephitmp_1041, prephitmp_1041,
	str	r3, [sp, #28]	@ prephitmp_1041, %sfp
	movs	r3, #5	@ prephitmp_1008,
	str	r3, [sp, #40]	@ prephitmp_1008, %sfp
	movs	r3, #183	@ prephitmp_1007,
	lsls	r3, r3, #2	@ prephitmp_1007, prephitmp_1007,
	str	r3, [sp, #36]	@ prephitmp_1007, %sfp
	movs	r3, #4	@ prephitmp_968,
	str	r3, [sp, #48]	@ prephitmp_968, %sfp
	movs	r3, #151	@ prephitmp_967,
	lsls	r3, r3, #2	@ prephitmp_967, prephitmp_967,
	str	r3, [sp, #44]	@ prephitmp_967, %sfp
	movs	r3, #3	@ prephitmp_922,
	movs	r1, #174	@ prephitmp_915,
	str	r3, [sp, #52]	@ prephitmp_922, %sfp
	adds	r3, r3, #218	@ prephitmp_921,
	adds	r3, r3, #255	@ prephitmp_921,
	mov	r8, r3	@ prephitmp_921, prephitmp_921
	movs	r5, #2	@ prephitmp_916,
	lsls	r1, r1, #1	@ prephitmp_915, prephitmp_915,
	b	.L3032		@
.L3101:
@ Patches/../C_code.c:4621: 		if ((proc->Option[17] != 3) || (!IsSkill(proc->skill))) {
	movs	r3, #55	@ tmp791,
	ldrb	r2, [r4, r3]	@ _285,
@ Patches/../C_code.c:4493:     if (skillId == 0)
	subs	r3, r2, #1	@ tmp792, _285,
@ Patches/../C_code.c:4496:     if (skillId == 255)
	lsls	r3, r3, #24	@ tmp796, tmp792,
	lsrs	r3, r3, #24	@ tmp795, tmp796,
	cmp	r3, #253	@ tmp795,
	bls	.LCB19040	@
	b	.L3036	@long jump	@
.LCB19040:
@ Patches/../C_code.c:4499:     return !!SkillDescTable[skillId];
	ldr	r3, .L3107+40	@ tmp797,
	lsls	r2, r2, #1	@ tmp798, _285,
	ldrh	r0, [r2, r3]	@ _401, SkillDescTable
@ Patches/../C_code.c:4621: 		if ((proc->Option[17] != 3) || (!IsSkill(proc->skill))) {
	cmp	r0, #0	@ _401,
	bne	.LCB19045	@
	b	.L3036	@long jump	@
.LCB19045:
@ Patches/../C_code.c:4503:     char* desc = GetStringFromIndex(SkillDescTable[skillId]);
	ldr	r3, .L3107+44	@ tmp807,
	bl	.L14		@
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	ldrb	r3, [r0]	@ _408, *desc_407
@ Patches/../C_code.c:4503:     char* desc = GetStringFromIndex(SkillDescTable[skillId]);
	movs	r1, r0	@ desc, tmp824
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	cmp	r3, #0	@ _408,
	beq	.L3038		@,
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	movs	r2, r0	@ it, desc
	b	.L3040		@
.L3039:
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	ldrb	r3, [r2, #1]	@ _408, MEM[(char *)it_411]
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	adds	r2, r2, #1	@ it,
@ Patches/../C_code.c:4505:     for (char* it = desc; *it; ++it)
	cmp	r3, #0	@ _408,
	beq	.L3038		@,
.L3040:
@ Patches/../C_code.c:4507:         if (*it == ':')
	cmp	r3, #58	@ _408,
	bne	.L3039		@,
@ Patches/../C_code.c:4509:             *it = 0;
	movs	r3, #0	@ tmp808,
	strb	r3, [r2]	@ tmp808, *it_416
.L3038:
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	ldr	r0, .L3107+48	@ tmp812,
	add	r2, sp, #56	@,,
	bl	GetCombinedString		@
@ Patches/../C_code.c:4626: 		PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], GetCombinedString(Option17[proc->Option[17]], GetSkillName(proc->skill), string)); i++; 
	str	r0, [sp, #4]	@ tmp825,
	b	.L3099		@
.L3100:
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	adds	r3, r5, r6	@ _267, i, offset
	mov	ip, r3	@ _267, _267
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	ldr	r3, .L3107+24	@ tmp758,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	lsls	r1, r5, #7	@ tmp754, i,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	mov	r0, ip	@ tmp759, _267
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	adds	r1, r1, r3	@ tmp757, tmp754, tmp758
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	movs	r2, #73	@ tmp765,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	ldr	r3, [sp, #12]	@ tmp818, %sfp
	mov	r8, r3	@ tmp818, tmp818
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	ldrsb	r2, [r4, r2]	@ tmp766,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	adds	r0, r0, #19	@ tmp759,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	lsls	r0, r0, #3	@ tmp760, tmp759,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	add	r0, r0, r8	@ tmp761, tmp818
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	mov	r8, r2	@ tmp766, tmp766
	lsls	r2, r2, #2	@ tmp768, tmp766,
	ldr	r3, .L3107+52	@ tmp764,
	add	r2, r2, r8	@ tmp769, tmp766
	lsls	r2, r2, #1	@ tmp770, tmp769,
	adds	r3, r3, r2	@ tmp771, tmp764, tmp770
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	movs	r2, #52	@ tmp773,
	str	r3, [sp, #4]	@ tmp771,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	ldr	r3, .L3107+8	@ tmp772,
	add	r3, r3, ip	@ tmp774, _267
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	ldrb	r3, [r3, r2]	@ tmp775, RtWidths
	ldr	r7, .L3107+4	@ tmp776,
	str	r3, [sp]	@ tmp775,
	movs	r2, #0	@,
	movs	r3, #0	@,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	adds	r5, r5, #1	@ i,
@ Patches/../C_code.c:4617: 	case 17: { if (DisplayTimedHitsOption) { PutDrawText(&th[i+offset+hOff], TILEMAP_LOCATED(gBG0TilemapBuffer, 14, 3+((i)*2)), white, 0, RtWidths[i+offset], PutStringInBuffer(Option16[proc->Option[16]], UseHuffmanEncoding)); i++;  
	bl	.L223		@
@ Patches/../C_code.c:4618: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r5, #8	@ i,
	beq	.LCB19113	@
	bl	.L3014	@far jump	@
.LCB19113:
	bl	.L3013	@ far jump	@
.L3108:
	.align	2
.L3107:
	.word	gBG0TilemapBuffer
	.word	PutDrawText
	.word	.LANCHOR2
	.word	.LANCHOR3
	.word	.LANCHOR5
	.word	.LANCHOR6
	.word	gBG0TilemapBuffer+220
	.word	TileMap_FillRect
	.word	PutNumber
	.word	1116
	.word	SkillDescTable
	.word	GetStringFromIndex
	.word	.LANCHOR7+90
	.word	.LANCHOR7+20
	.size	DrawConfigMenu, .-DrawConfigMenu
	.align	1
	.p2align 2,,3
	.global	DisplayVertUiHand
	.syntax unified
	.code	16
	.thumb_func
	.type	DisplayVertUiHand, %function
DisplayVertUiHand:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:4712:     if ((GetGameClock() - 1) == sPrevHandClockFrame)
	ldr	r6, .L3113	@ tmp163,
@ Patches/../C_code.c:4711: {
	sub	sp, sp, #12	@,,
@ Patches/../C_code.c:4711: {
	movs	r4, r0	@ x, tmp166
	movs	r5, r1	@ y, tmp167
@ Patches/../C_code.c:4712:     if ((GetGameClock() - 1) == sPrevHandClockFrame)
	bl	.L341		@
@ Patches/../C_code.c:4712:     if ((GetGameClock() - 1) == sPrevHandClockFrame)
	ldr	r7, .L3113+4	@ tmp164,
@ Patches/../C_code.c:4712:     if ((GetGameClock() - 1) == sPrevHandClockFrame)
	ldr	r3, [r7]	@ sPrevHandClockFrame, sPrevHandClockFrame
@ Patches/../C_code.c:4712:     if ((GetGameClock() - 1) == sPrevHandClockFrame)
	subs	r0, r0, #1	@ tmp138,
@ Patches/../C_code.c:4712:     if ((GetGameClock() - 1) == sPrevHandClockFrame)
	cmp	r0, r3	@ tmp138, sPrevHandClockFrame
	beq	.L3112		@,
	ldr	r3, .L3113+8	@ tmp165,
.L3110:
@ Patches/../C_code.c:4718:     sPrevHandScreenPosition.x = x;
	strh	r4, [r3]	@ x, sPrevHandScreenPosition.x
@ Patches/../C_code.c:4719:     sPrevHandScreenPosition.y = y;
	strh	r5, [r3, #2]	@ y, sPrevHandScreenPosition.y
@ Patches/../C_code.c:4720:     sPrevHandClockFrame = GetGameClock();
	bl	.L341		@
@ Patches/../C_code.c:4720:     sPrevHandClockFrame = GetGameClock();
	str	r0, [r7]	@ tmp169, sPrevHandClockFrame
@ Patches/../C_code.c:4722:     y += (sHandVOffsetLookup[Mod(GetGameClock(), ARRAY_COUNT(sHandVOffsetLookup))] - 14);
	bl	.L341		@
@ Patches/../C_code.c:4722:     y += (sHandVOffsetLookup[Mod(GetGameClock(), ARRAY_COUNT(sHandVOffsetLookup))] - 14);
	ldr	r3, .L3113+12	@ tmp152,
	movs	r1, #32	@,
	bl	.L14		@
@ Patches/../C_code.c:4722:     y += (sHandVOffsetLookup[Mod(GetGameClock(), ARRAY_COUNT(sHandVOffsetLookup))] - 14);
	movs	r1, #108	@ tmp156,
@ Patches/../C_code.c:4723:     PutSprite(2, x, y, sSprite_VertHand, 0);
	ldr	r2, .L3113+16	@ tmp153,
	movs	r3, r2	@ tmp154, tmp153
@ Patches/../C_code.c:4722:     y += (sHandVOffsetLookup[Mod(GetGameClock(), ARRAY_COUNT(sHandVOffsetLookup))] - 14);
	adds	r2, r2, r0	@ tmp157, tmp153, tmp171
	ldrb	r2, [r2, r1]	@ tmp158, sHandVOffsetLookup
@ Patches/../C_code.c:4723:     PutSprite(2, x, y, sSprite_VertHand, 0);
	movs	r1, #0	@ tmp161,
@ Patches/../C_code.c:4722:     y += (sHandVOffsetLookup[Mod(GetGameClock(), ARRAY_COUNT(sHandVOffsetLookup))] - 14);
	subs	r2, r2, #14	@ tmp159,
@ Patches/../C_code.c:4723:     PutSprite(2, x, y, sSprite_VertHand, 0);
	str	r1, [sp]	@ tmp161,
	movs	r0, #2	@,
	movs	r1, r4	@, x
	adds	r3, r3, #100	@ tmp154,
	ldr	r4, .L3113+20	@ tmp162,
@ Patches/../C_code.c:4722:     y += (sHandVOffsetLookup[Mod(GetGameClock(), ARRAY_COUNT(sHandVOffsetLookup))] - 14);
	adds	r2, r2, r5	@ y, tmp159, y
@ Patches/../C_code.c:4723:     PutSprite(2, x, y, sSprite_VertHand, 0);
	bl	.L240		@
@ Patches/../C_code.c:4724: }
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3112:
@ Patches/../C_code.c:4714:         x = (x + sPrevHandScreenPosition.x) >> 1;
	ldr	r3, .L3113+8	@ tmp165,
	movs	r1, #0	@ tmp173,
	ldrsh	r2, [r3, r1]	@ sPrevHandScreenPosition, tmp165, tmp173
@ Patches/../C_code.c:4714:         x = (x + sPrevHandScreenPosition.x) >> 1;
	adds	r4, r2, r4	@ _7, sPrevHandScreenPosition, x
@ Patches/../C_code.c:4715:         y = (y + sPrevHandScreenPosition.y) >> 1;
	movs	r1, #2	@ tmp174,
	ldrsh	r2, [r3, r1]	@ tmp144, tmp165, tmp174
@ Patches/../C_code.c:4715:         y = (y + sPrevHandScreenPosition.y) >> 1;
	adds	r5, r2, r5	@ _10, tmp144, y
@ Patches/../C_code.c:4714:         x = (x + sPrevHandScreenPosition.x) >> 1;
	asrs	r4, r4, #1	@ x, _7,
@ Patches/../C_code.c:4715:         y = (y + sPrevHandScreenPosition.y) >> 1;
	asrs	r5, r5, #1	@ y, _10,
	b	.L3110		@
.L3114:
	.align	2
.L3113:
	.word	GetGameClock
	.word	sPrevHandClockFrame
	.word	sPrevHandScreenPosition
	.word	Mod
	.word	.LANCHOR7
	.word	PutSprite
	.size	DisplayVertUiHand, .-DisplayVertUiHand
	.align	1
	.p2align 2,,3
	.global	DisplayHand
	.syntax unified
	.code	16
	.thumb_func
	.type	DisplayHand, %function
DisplayHand:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:4649: 	if (type) { 
	cmp	r2, #0	@ tmp120,
	beq	.L3116		@,
@ Patches/../C_code.c:4650: 		DisplayVertUiHand(x, y); 
	bl	DisplayVertUiHand		@
.L3115:
@ Patches/../C_code.c:4653: } 
	@ sp needed	@
	pop	{r4}
	pop	{r0}
	bx	r0
.L3116:
@ Patches/../C_code.c:4652: 	else { DisplayUiHand(x, y); } 
	ldr	r3, .L3118	@ tmp117,
	bl	.L14		@
@ Patches/../C_code.c:4653: } 
	b	.L3115		@
.L3119:
	.align	2
.L3118:
	.word	DisplayUiHand
	.size	DisplayHand, .-DisplayHand
	.align	1
	.p2align 2,,3
	.global	InitUnitDef
	.syntax unified
	.code	16
	.thumb_func
	.type	InitUnitDef, %function
InitUnitDef:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:4731:     uDef->charIndex = unit->pCharacterData->number;
	ldr	r6, [r1]	@ _1, unit_33(D)->pCharacterData
@ Patches/../C_code.c:4761: } 
	@ sp needed	@
@ Patches/../C_code.c:4731:     uDef->charIndex = unit->pCharacterData->number;
	ldrh	r3, [r6, #4]	@ MEM <const vector(2) unsigned char> [(unsigned char *)_1 + 4B], MEM <const vector(2) unsigned char> [(unsigned char *)_1 + 4B]
@ Patches/../C_code.c:4731:     uDef->charIndex = unit->pCharacterData->number;
	strh	r3, [r0]	@ MEM <const vector(2) unsigned char> [(unsigned char *)_1 + 4B], MEM <vector(2) unsigned char> [(unsigned char *)uDef_34(D)]
@ Patches/../C_code.c:4733:     uDef->leaderCharIndex = unit->supports[UNIT_SUPPORT_MAX_COUNT-1];
	movs	r3, #56	@ tmp161,
@ Patches/../C_code.c:4734:     uDef->autolevel = true; 
	movs	r7, #1	@ tmp166,
@ Patches/../C_code.c:4733:     uDef->leaderCharIndex = unit->supports[UNIT_SUPPORT_MAX_COUNT-1];
	ldrb	r3, [r1, r3]	@ tmp162,
@ Patches/../C_code.c:4737:     uDef->xPosition = unit->xPos; 
	movs	r5, #16	@ _11,
@ Patches/../C_code.c:4733:     uDef->leaderCharIndex = unit->supports[UNIT_SUPPORT_MAX_COUNT-1];
	strb	r3, [r0, #2]	@ tmp162, uDef_34(D)->leaderCharIndex
@ Patches/../C_code.c:4738:     uDef->yPosition = unit->yPos; 
	movs	r3, #17	@ _13,
@ Patches/../C_code.c:4734:     uDef->autolevel = true; 
	ldrb	r2, [r1, #11]	@ tmp174,
	ldrb	r6, [r6, #11]	@ tmp183,
	lsrs	r2, r2, #6	@ tmp175, tmp174,
	lsls	r2, r2, #1	@ tmp177, tmp175,
	orrs	r2, r7	@ tmp181, tmp166
	lsls	r6, r6, #3	@ tmp184, tmp183,
	orrs	r2, r6	@ tmp187, tmp184
@ Patches/../C_code.c:4737:     uDef->xPosition = unit->xPos; 
	ldrsb	r5, [r1, r5]	@ _11,* _11
@ Patches/../C_code.c:4738:     uDef->yPosition = unit->yPos; 
	ldrsb	r3, [r1, r3]	@ _13,* _13
@ Patches/../C_code.c:4746: 	uDef->itemDrop = (unit->state & US_DROP_ITEM) != 0; 
	ldr	r4, [r1, #12]	@ unit_33(D)->state, unit_33(D)->state
@ Patches/../C_code.c:4734:     uDef->autolevel = true; 
	strb	r2, [r0, #3]	@ tmp187, MEM <unsigned char> [(struct UnitDefinition *)uDef_34(D) + 3B]
@ Patches/../C_code.c:4737:     uDef->xPosition = unit->xPos; 
	movs	r2, #63	@ tmp192,
@ Patches/../C_code.c:4746: 	uDef->itemDrop = (unit->state & US_DROP_ITEM) != 0; 
	lsls	r4, r4, #19	@ tmp170, unit_33(D)->state,
@ Patches/../C_code.c:4737:     uDef->xPosition = unit->xPos; 
	ands	r3, r2	@ tmp193, tmp192
@ Patches/../C_code.c:4746: 	uDef->itemDrop = (unit->state & US_DROP_ITEM) != 0; 
	lsrs	r4, r4, #31	@ _17, tmp170,
@ Patches/../C_code.c:4737:     uDef->xPosition = unit->xPos; 
	ands	r2, r5	@ tmp200, _11
	lsls	r3, r3, #6	@ tmp195, tmp193,
	orrs	r3, r2	@ tmp202, tmp200
	lsls	r4, r4, #13	@ tmp203, _17,
	orrs	r3, r4	@ tmp204, tmp203
	str	r3, [r0, #4]	@ tmp204, MEM <unsigned int> [(struct UnitDefinition *)uDef_34(D) + 4B]
@ Patches/../C_code.c:4751: 	uDef->redas = NULL; 
	movs	r3, #0	@ tmp205,
	str	r3, [r0, #8]	@ tmp205, uDef_34(D)->redas
@ Patches/../C_code.c:4754: 	uDef->items[1] = unit->items[1]; 
	ldrh	r4, [r1, #32]	@ tmp217,
@ Patches/../C_code.c:4753: 	uDef->items[0] = unit->items[0]; 
	ldrb	r3, [r1, #30]	@ tmp221,
@ Patches/../C_code.c:4755: 	uDef->items[2] = unit->items[2]; 
	ldrh	r2, [r1, #34]	@ tmp226,
@ Patches/../C_code.c:4753: 	uDef->items[0] = unit->items[0]; 
	lsls	r4, r4, #24	@ tmp219, tmp217,
	lsrs	r4, r4, #16	@ tmp220, tmp219,
	orrs	r3, r4	@ tmp230, tmp220
	lsls	r2, r2, #24	@ tmp228, tmp226,
@ Patches/../C_code.c:4756: 	uDef->items[3] = unit->items[3]; 
	ldrh	r4, [r1, #36]	@ tmp235,
@ Patches/../C_code.c:4753: 	uDef->items[0] = unit->items[0]; 
	lsrs	r2, r2, #8	@ tmp229, tmp228,
	lsls	r4, r4, #24	@ tmp238, tmp235,
	orrs	r3, r2	@ tmp239, tmp229
	orrs	r3, r4	@ tmp241, tmp238
	str	r3, [r0, #12]	@ tmp241, MEM <vector(4) unsigned char> [(unsigned char *)uDef_34(D) + 12B]
@ Patches/../C_code.c:4759: 	uDef->ai[2] = unit->ai3And4 & 0xFF;
	movs	r3, #64	@ tmp242,
	ldrh	r2, [r1, r3]	@ _28,
@ Patches/../C_code.c:4758: 	uDef->ai[1] = unit->ai2;
	adds	r3, r3, #4	@ tmp249,
@ Patches/../C_code.c:4757: 	uDef->ai[0] = unit->ai1;
	ldrb	r4, [r1, r3]	@ tmp250,
	subs	r3, r3, #2	@ tmp244,
	ldrb	r3, [r1, r3]	@ tmp252,
	lsls	r4, r4, #8	@ tmp251, tmp250,
	lsls	r1, r2, #24	@ tmp256, _28,
	lsrs	r1, r1, #8	@ tmp257, tmp256,
	orrs	r3, r4	@ tmp258, tmp251
	lsrs	r2, r2, #8	@ tmp263, _28,
	lsls	r2, r2, #24	@ tmp265, tmp263,
	orrs	r3, r1	@ tmp266, tmp257
	orrs	r3, r2	@ tmp268, tmp265
	str	r3, [r0, #16]	@ tmp268, MEM <vector(4) unsigned char> [(unsigned char *)uDef_34(D) + 16B]
@ Patches/../C_code.c:4761: } 
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
	.size	InitUnitDef, .-InitUnitDef
	.align	1
	.p2align 2,,3
	.global	ReloadAllUnits
	.syntax unified
	.code	16
	.thumb_func
	.type	ReloadAllUnits, %function
ReloadAllUnits:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 24
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r9	@,
	mov	r7, r8	@,
@ Patches/../C_code.c:4764: 	if (!((proc->calledFromChapter) && (proc->reloadUnits))) { 
	movs	r3, #53	@ tmp121,
@ Patches/../C_code.c:4763: void ReloadAllUnits(ConfigMenuProc* proc) { 
	push	{r7, lr}	@
@ Patches/../C_code.c:4764: 	if (!((proc->calledFromChapter) && (proc->reloadUnits))) { 
	ldrb	r3, [r0, r3]	@ tmp122,
@ Patches/../C_code.c:4763: void ReloadAllUnits(ConfigMenuProc* proc) { 
	sub	sp, sp, #28	@,,
@ Patches/../C_code.c:4764: 	if (!((proc->calledFromChapter) && (proc->reloadUnits))) { 
	cmp	r3, #0	@ tmp122,
	beq	.L3121		@,
@ Patches/../C_code.c:4764: 	if (!((proc->calledFromChapter) && (proc->reloadUnits))) { 
	movs	r3, #54	@ tmp123,
@ Patches/../C_code.c:4764: 	if (!((proc->calledFromChapter) && (proc->reloadUnits))) { 
	ldrb	r3, [r0, r3]	@ tmp124,
	cmp	r3, #0	@ tmp124,
	beq	.L3121		@,
@ Patches/../C_code.c:4775: 		ClearUnit(unit); 
	ldr	r3, .L3138	@ tmp133,
	mov	r9, r3	@ tmp133, tmp133
@ Patches/../C_code.c:4776: 		LoadUnit(&uDef); 
	ldr	r3, .L3138+4	@ tmp134,
@ Patches/../C_code.c:4770: 	for (int i = 1; i<0xC0; ++i) { 
	movs	r5, #1	@ i,
@ Patches/../C_code.c:4776: 		LoadUnit(&uDef); 
	mov	r8, r3	@ tmp134, tmp134
	ldr	r7, .L3138+8	@ tmp131,
.L3124:
@ Patches/../C_code.c:4771: 		unit = GetUnit(i); 
	movs	r0, r5	@, i
	bl	.L223		@
	subs	r4, r0, #0	@ unit, tmp136,
@ Patches/../C_code.c:4772: 		if (!UNIT_IS_VALID(unit)) { continue; } 
	beq	.L3123		@,
@ Patches/../C_code.c:4772: 		if (!UNIT_IS_VALID(unit)) { continue; } 
	ldr	r3, [r0]	@ unit_10->pCharacterData, unit_10->pCharacterData
	cmp	r3, #0	@ unit_10->pCharacterData,
	beq	.L3123		@,
@ Patches/../C_code.c:4774: 		InitUnitDef(&uDef, unit); 
	movs	r1, r0	@, unit
@ Patches/../C_code.c:4773: 		state = unit->state; 
	ldr	r6, [r0, #12]	@ state, unit_10->state
@ Patches/../C_code.c:4774: 		InitUnitDef(&uDef, unit); 
	add	r0, sp, #4	@ tmp140,,
	bl	InitUnitDef		@
@ Patches/../C_code.c:4775: 		ClearUnit(unit); 
	movs	r0, r4	@, unit
	bl	.L557		@
@ Patches/../C_code.c:4776: 		LoadUnit(&uDef); 
	add	r0, sp, #4	@ tmp141,,
	bl	.L179		@
@ Patches/../C_code.c:4777: 		unit->state = state; 
	str	r6, [r4, #12]	@ state, unit_10->state
.L3123:
@ Patches/../C_code.c:4770: 	for (int i = 1; i<0xC0; ++i) { 
	adds	r5, r5, #1	@ i,
@ Patches/../C_code.c:4770: 	for (int i = 1; i<0xC0; ++i) { 
	cmp	r5, #192	@ i,
	bne	.L3124		@,
.L3121:
@ Patches/../C_code.c:4779: } 
	add	sp, sp, #28	@,,
	@ sp needed	@
	pop	{r6, r7}
	mov	r9, r7
	mov	r8, r6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3139:
	.align	2
.L3138:
	.word	ClearUnit
	.word	LoadUnit
	.word	GetUnit
	.size	ReloadAllUnits, .-ReloadAllUnits
	.align	1
	.p2align 2,,3
	.global	RedrawAllText
	.syntax unified
	.code	16
	.thumb_func
	.type	RedrawAllText, %function
RedrawAllText:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 48
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r7, r10	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
	mov	lr, fp	@,
	push	{r5, r6, r7, lr}	@
	ldr	r6, .L3227	@ tmp595,
	movs	r7, r6	@ _232, tmp595
	mov	r10, r0	@ proc, tmp601
	movs	r4, r6	@ ivtmp.1901, tmp595
	adds	r7, r7, #17	@ _232,
	ldr	r5, .L3227+4	@ tmp596,
	sub	sp, sp, #60	@,,
	adds	r7, r7, #255	@ _232,
.L3141:
@ Patches/../C_code.c:5095: 		ClearText(&th[i]);
	movs	r0, r4	@, ivtmp.1901
@ Patches/../C_code.c:5094: 	for (int i = 0; i < 34; ++i) { 
	adds	r4, r4, #8	@ ivtmp.1901,
@ Patches/../C_code.c:5095: 		ClearText(&th[i]);
	bl	.L3231		@
@ Patches/../C_code.c:5094: 	for (int i = 0; i < 34; ++i) { 
	cmp	r4, r7	@ ivtmp.1901, _232
	bne	.L3141		@,
@ Patches/../C_code.c:5097: 	TileMap_FillRect(TILEMAP_LOCATED(gBG0TilemapBuffer, 0, 0), 0x1d, 0x13, 0); // all 
	ldr	r3, .L3227+8	@ tmp597,
	mov	r8, r3	@ tmp597, tmp597
	movs	r2, #19	@,
	movs	r3, #0	@,
	movs	r1, #29	@,
	mov	r0, r8	@, tmp597
	ldr	r4, .L3227+12	@ tmp324,
	bl	.L240		@
@ Patches/../C_code.c:5099: 	int offset = proc->offset;
	movs	r3, #49	@ tmp325,
	mov	r2, r10	@ proc, proc
	ldrb	r7, [r2, r3]	@ offset,
@ Patches/../C_code.c:5104: 	switch (offset) { 
	cmp	r7, #18	@ offset,
	bls	.LCB19450	@
	b	.L3224	@long jump	@
.LCB19450:
	ldr	r2, .L3227+16	@ tmp330,
	lsls	r3, r7, #2	@ tmp328, offset,
	ldr	r3, [r2, r3]	@ tmp331,
	mov	pc, r3	@ tmp331
	.section	.rodata
	.align	2
.L3144:
	.word	.L3162
	.word	.L3165
	.word	.L3166
	.word	.L3167
	.word	.L3168
	.word	.L3169
	.word	.L3170
	.word	.L3171
	.word	.L3172
	.word	.L3173
	.word	.L3174
	.word	.L3175
	.word	.L3176
	.word	.L3177
	.word	.L3178
	.word	.L3179
	.word	.L3180
	.word	.L3181
	.word	.L3182
	.text
.L3181:
	ldr	r3, .L3227+20	@ tmp599,
	mov	r9, r3	@ tmp599, tmp599
	ldr	r3, .L3227+24	@ tmp600,
	movs	r4, #0	@ i,
	mov	fp, r3	@ tmp600, tmp600
.L3145:
@ Patches/../C_code.c:5140: 		case 17: { if (DisplayTimedHitsOption) { 
	ldr	r3, .L3227+28	@ tmp552,
@ Patches/../C_code.c:5140: 		case 17: { if (DisplayTimedHitsOption) { 
	ldr	r3, [r3]	@ DisplayTimedHitsOption, DisplayTimedHitsOption
	cmp	r3, #0	@ DisplayTimedHitsOption,
	beq	.LCB19472	@
	b	.L3225	@long jump	@
.LCB19472:
.L3143:
@ Patches/../C_code.c:5144: 		case 18: { if (DisplayRandomSkillsOption) { 
	ldr	r3, .L3227+32	@ tmp570,
@ Patches/../C_code.c:5144: 		case 18: { if (DisplayRandomSkillsOption) { 
	ldr	r3, [r3]	@ DisplayRandomSkillsOption, DisplayRandomSkillsOption
	cmp	r3, #0	@ DisplayRandomSkillsOption,
	beq	.LCB19477	@
	b	.L3226	@long jump	@
.LCB19477:
.L3142:
@ Patches/../C_code.c:5152: 	DrawConfigMenu(proc);
	mov	r0, r10	@, proc
	bl	DrawConfigMenu		@
@ Patches/../C_code.c:5153: 	PutDrawText(&th[sizeof(tWidths) + sizeof(RtWidths)], TILEMAP_LOCATED(gBG0TilemapBuffer, 9, 0), green, 0, 6, PutStringInBuffer((const char*)&RandomizerText, false)); 
	mov	r3, fp	@ tmp600, tmp600
	adds	r3, r3, #112	@ tmp600,
	str	r3, [sp, #4]	@ tmp591,
	movs	r3, #6	@ tmp592,
	movs	r2, #4	@,
	ldr	r1, .L3227+36	@ tmp588,
	str	r3, [sp]	@ tmp592,
	ldr	r0, .L3227+40	@ tmp589,
	movs	r3, #0	@,
	bl	.L557		@
@ Patches/../C_code.c:5155: 	BG_EnableSyncByMask(BG0_SYNC_BIT);
	movs	r0, #1	@,
	ldr	r3, .L3227+44	@ tmp594,
	bl	.L14		@
@ Patches/../C_code.c:5157: }
	add	sp, sp, #60	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3182:
	ldr	r3, .L3227+20	@ tmp599,
	mov	r9, r3	@ tmp599, tmp599
	ldr	r3, .L3227+24	@ tmp600,
@ Patches/../C_code.c:5104: 	switch (offset) { 
	movs	r4, #0	@ i,
	mov	fp, r3	@ tmp600, tmp600
	b	.L3143		@
.L3165:
	ldr	r3, .L3227+48	@ prephitmp_776,
	mov	fp, r3	@ prephitmp_776, prephitmp_776
	movs	r3, #6	@ prephitmp_757,
	str	r3, [sp, #16]	@ prephitmp_757, %sfp
	ldr	r3, .L3227+52	@ prephitmp_756,
	str	r3, [sp, #12]	@ prephitmp_756, %sfp
	movs	r3, #5	@ prephitmp_731,
	str	r3, [sp, #24]	@ prephitmp_731, %sfp
	ldr	r3, .L3227+56	@ prephitmp_730,
	str	r3, [sp, #20]	@ prephitmp_730, %sfp
	movs	r3, #4	@ prephitmp_699,
	str	r3, [sp, #32]	@ prephitmp_699, %sfp
	ldr	r3, .L3227+60	@ prephitmp_698,
	str	r3, [sp, #28]	@ prephitmp_698, %sfp
	movs	r3, #3	@ prephitmp_661,
	str	r3, [sp, #40]	@ prephitmp_661, %sfp
	adds	r3, r3, #196	@ prephitmp_660,
	adds	r3, r3, #255	@ prephitmp_660,
	str	r3, [sp, #36]	@ prephitmp_660, %sfp
	subs	r3, r3, #197	@ prephitmp_617,
	subs	r3, r3, #255	@ prephitmp_617,
	str	r3, [sp, #48]	@ prephitmp_617, %sfp
	adds	r3, r3, #69	@ prephitmp_616,
	adds	r3, r3, #255	@ prephitmp_616,
	str	r3, [sp, #44]	@ prephitmp_616, %sfp
	subs	r3, r3, #70	@ prephitmp_611,
	subs	r3, r3, #255	@ prephitmp_611,
	str	r3, [sp, #52]	@ prephitmp_611, %sfp
	ldr	r3, .L3227+20	@ tmp599,
	movs	r4, #7	@ prephitmp_777,
	movs	r1, #198	@ prephitmp_610,
	mov	r9, r3	@ tmp599, tmp599
	ldr	r5, .L3227+64	@ tmp598,
.L3161:
@ Patches/../C_code.c:5107: 		case 1: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&VarianceText, false)); i++; 
	movs	r3, r5	@ tmp342, tmp598
	adds	r3, r3, #20	@ tmp342,
	str	r3, [sp, #4]	@ tmp342,
	movs	r3, #5	@ tmp343,
	movs	r2, #3	@,
	str	r3, [sp]	@ tmp343,
	ldr	r0, .L3227+68	@ tmp340,
	movs	r3, #0	@,
@ Patches/../C_code.c:5107: 		case 1: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&VarianceText, false)); i++; 
	add	r1, r1, r8	@ tmp338, tmp597
@ Patches/../C_code.c:5107: 		case 1: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&VarianceText, false)); i++; 
	bl	.L557		@
@ Patches/../C_code.c:5109: 		case 2: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&CharactersText, false)); i++; 
	ldr	r3, [sp, #52]	@ prephitmp_611, %sfp
	adds	r3, r7, r3	@ _648, offset, prephitmp_611
.L3160:
@ Patches/../C_code.c:5109: 		case 2: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&CharactersText, false)); i++; 
	movs	r2, r5	@ tmp351, tmp598
	adds	r2, r2, #32	@ tmp351,
	str	r2, [sp, #4]	@ tmp351,
@ Patches/../C_code.c:5109: 		case 2: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&CharactersText, false)); i++; 
	movs	r2, #44	@ tmp353,
@ Patches/../C_code.c:5109: 		case 2: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&CharactersText, false)); i++; 
	lsls	r0, r3, #3	@ tmp347, _648,
@ Patches/../C_code.c:5109: 		case 2: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&CharactersText, false)); i++; 
	adds	r3, r5, r3	@ tmp354, tmp598, _648
@ Patches/../C_code.c:5109: 		case 2: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&CharactersText, false)); i++; 
	ldrb	r3, [r3, r2]	@ tmp355, tWidths
	ldr	r1, [sp, #44]	@ prephitmp_616, %sfp
	str	r3, [sp]	@ tmp355,
	add	r1, r1, r8	@ prephitmp_616, tmp597
@ Patches/../C_code.c:5109: 		case 2: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&CharactersText, false)); i++; 
	movs	r3, #0	@,
@ Patches/../C_code.c:5109: 		case 2: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&CharactersText, false)); i++; 
	adds	r0, r6, r0	@ tmp348, tmp595, tmp347
@ Patches/../C_code.c:5109: 		case 2: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&CharactersText, false)); i++; 
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5111: 		case 3: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&BaseStatsText, false)); i++; 
	ldr	r3, [sp, #48]	@ prephitmp_617, %sfp
	adds	r3, r7, r3	@ _686, offset, prephitmp_617
.L3159:
@ Patches/../C_code.c:5111: 		case 3: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&BaseStatsText, false)); i++; 
	movs	r2, r5	@ tmp363, tmp598
	adds	r2, r2, #64	@ tmp363,
	str	r2, [sp, #4]	@ tmp363,
@ Patches/../C_code.c:5111: 		case 3: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&BaseStatsText, false)); i++; 
	movs	r2, #44	@ tmp365,
@ Patches/../C_code.c:5111: 		case 3: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&BaseStatsText, false)); i++; 
	lsls	r0, r3, #3	@ tmp359, _686,
@ Patches/../C_code.c:5111: 		case 3: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&BaseStatsText, false)); i++; 
	adds	r3, r5, r3	@ tmp366, tmp598, _686
@ Patches/../C_code.c:5111: 		case 3: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&BaseStatsText, false)); i++; 
	ldrb	r3, [r3, r2]	@ tmp367, tWidths
	ldr	r1, [sp, #36]	@ prephitmp_660, %sfp
	str	r3, [sp]	@ tmp367,
	add	r1, r1, r8	@ prephitmp_660, tmp597
@ Patches/../C_code.c:5111: 		case 3: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&BaseStatsText, false)); i++; 
	movs	r3, #0	@,
@ Patches/../C_code.c:5111: 		case 3: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&BaseStatsText, false)); i++; 
	adds	r0, r6, r0	@ tmp360, tmp595, tmp359
@ Patches/../C_code.c:5111: 		case 3: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&BaseStatsText, false)); i++; 
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5113: 		case 4: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&GrowthsText, false)); i++; 
	ldr	r3, [sp, #40]	@ prephitmp_661, %sfp
	adds	r3, r7, r3	@ _718, offset, prephitmp_661
.L3158:
@ Patches/../C_code.c:5113: 		case 4: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&GrowthsText, false)); i++; 
	movs	r2, r5	@ tmp375, tmp598
	adds	r2, r2, #76	@ tmp375,
	str	r2, [sp, #4]	@ tmp375,
@ Patches/../C_code.c:5113: 		case 4: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&GrowthsText, false)); i++; 
	movs	r2, #44	@ tmp377,
@ Patches/../C_code.c:5113: 		case 4: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&GrowthsText, false)); i++; 
	lsls	r0, r3, #3	@ tmp371, _718,
@ Patches/../C_code.c:5113: 		case 4: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&GrowthsText, false)); i++; 
	adds	r3, r5, r3	@ tmp378, tmp598, _718
@ Patches/../C_code.c:5113: 		case 4: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&GrowthsText, false)); i++; 
	ldrb	r3, [r3, r2]	@ tmp379, tWidths
	ldr	r1, [sp, #28]	@ prephitmp_698, %sfp
	str	r3, [sp]	@ tmp379,
	add	r1, r1, r8	@ prephitmp_698, tmp597
@ Patches/../C_code.c:5113: 		case 4: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&GrowthsText, false)); i++; 
	movs	r3, #0	@,
@ Patches/../C_code.c:5113: 		case 4: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&GrowthsText, false)); i++; 
	adds	r0, r6, r0	@ tmp372, tmp595, tmp371
@ Patches/../C_code.c:5113: 		case 4: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&GrowthsText, false)); i++; 
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5115: 		case 5: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&LevelupsText, false)); i++; 
	ldr	r3, [sp, #32]	@ prephitmp_699, %sfp
	adds	r3, r7, r3	@ _744, offset, prephitmp_699
.L3157:
@ Patches/../C_code.c:5115: 		case 5: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&LevelupsText, false)); i++; 
	movs	r2, r5	@ tmp387, tmp598
	adds	r2, r2, #84	@ tmp387,
	str	r2, [sp, #4]	@ tmp387,
@ Patches/../C_code.c:5115: 		case 5: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&LevelupsText, false)); i++; 
	movs	r2, #44	@ tmp389,
@ Patches/../C_code.c:5115: 		case 5: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&LevelupsText, false)); i++; 
	lsls	r0, r3, #3	@ tmp383, _744,
@ Patches/../C_code.c:5115: 		case 5: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&LevelupsText, false)); i++; 
	adds	r3, r5, r3	@ tmp390, tmp598, _744
@ Patches/../C_code.c:5115: 		case 5: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&LevelupsText, false)); i++; 
	ldrb	r3, [r3, r2]	@ tmp391, tWidths
	ldr	r1, [sp, #20]	@ prephitmp_730, %sfp
	str	r3, [sp]	@ tmp391,
	add	r1, r1, r8	@ prephitmp_730, tmp597
@ Patches/../C_code.c:5115: 		case 5: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&LevelupsText, false)); i++; 
	movs	r3, #0	@,
@ Patches/../C_code.c:5115: 		case 5: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&LevelupsText, false)); i++; 
	adds	r0, r6, r0	@ tmp384, tmp595, tmp383
@ Patches/../C_code.c:5115: 		case 5: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&LevelupsText, false)); i++; 
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5117: 		case 6: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&StatCapsText, false)); i++; 
	ldr	r3, [sp, #24]	@ prephitmp_731, %sfp
	adds	r3, r7, r3	@ _764, offset, prephitmp_731
.L3156:
@ Patches/../C_code.c:5117: 		case 6: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&StatCapsText, false)); i++; 
	movs	r2, r5	@ tmp399, tmp598
	adds	r2, r2, #96	@ tmp399,
	str	r2, [sp, #4]	@ tmp399,
@ Patches/../C_code.c:5117: 		case 6: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&StatCapsText, false)); i++; 
	movs	r2, #44	@ tmp401,
@ Patches/../C_code.c:5117: 		case 6: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&StatCapsText, false)); i++; 
	lsls	r0, r3, #3	@ tmp395, _764,
@ Patches/../C_code.c:5117: 		case 6: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&StatCapsText, false)); i++; 
	adds	r3, r5, r3	@ tmp402, tmp598, _764
@ Patches/../C_code.c:5117: 		case 6: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&StatCapsText, false)); i++; 
	ldrb	r3, [r3, r2]	@ tmp403, tWidths
	ldr	r1, [sp, #12]	@ prephitmp_756, %sfp
	str	r3, [sp]	@ tmp403,
	add	r1, r1, r8	@ prephitmp_756, tmp597
@ Patches/../C_code.c:5117: 		case 6: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&StatCapsText, false)); i++; 
	movs	r3, #0	@,
@ Patches/../C_code.c:5117: 		case 6: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&StatCapsText, false)); i++; 
	adds	r0, r6, r0	@ tmp396, tmp595, tmp395
@ Patches/../C_code.c:5117: 		case 6: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&StatCapsText, false)); i++; 
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5119: 		case 7: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ClassText, false)); i++; 
	ldr	r3, [sp, #16]	@ prephitmp_757, %sfp
	adds	r3, r7, r3	@ _778, offset, prephitmp_757
.L3155:
@ Patches/../C_code.c:5119: 		case 7: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ClassText, false)); i++; 
	movs	r2, r5	@ tmp411, tmp598
	adds	r2, r2, #108	@ tmp411,
	str	r2, [sp, #4]	@ tmp411,
@ Patches/../C_code.c:5119: 		case 7: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ClassText, false)); i++; 
	movs	r2, #44	@ tmp413,
	mov	r1, fp	@ prephitmp_776, prephitmp_776
@ Patches/../C_code.c:5119: 		case 7: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ClassText, false)); i++; 
	lsls	r0, r3, #3	@ tmp407, _778,
@ Patches/../C_code.c:5119: 		case 7: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ClassText, false)); i++; 
	adds	r3, r5, r3	@ tmp414, tmp598, _778
@ Patches/../C_code.c:5119: 		case 7: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ClassText, false)); i++; 
	ldrb	r3, [r3, r2]	@ tmp415, tWidths
	add	r1, r1, r8	@ prephitmp_776, tmp597
	str	r3, [sp]	@ tmp415,
	adds	r0, r6, r0	@ tmp408, tmp595, tmp407
@ Patches/../C_code.c:5119: 		case 7: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ClassText, false)); i++; 
	movs	r3, #0	@,
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5120: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ prephitmp_777,
	bne	.LCB19673	@
	b	.L3223	@long jump	@
.LCB19673:
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	lsls	r1, r4, #7	@ tmp418, prephitmp_777,
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	adds	r3, r7, r4	@ _786, offset, prephitmp_777
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	adds	r1, r1, #198	@ _796,
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	adds	r4, r4, #1	@ _798,
.L3154:
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	movs	r2, r5	@ tmp426, tmp598
	adds	r2, r2, #116	@ tmp426,
	str	r2, [sp, #4]	@ tmp426,
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	movs	r2, #44	@ tmp428,
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	lsls	r0, r3, #3	@ tmp422, _786,
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	adds	r3, r5, r3	@ tmp429, tmp598, _786
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	ldrb	r3, [r3, r2]	@ tmp430, tWidths
	add	r1, r1, r8	@ tmp420, tmp597
	str	r3, [sp]	@ tmp430,
	adds	r0, r6, r0	@ tmp423, tmp595, tmp422
@ Patches/../C_code.c:5121: 		case 8: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemsText, false)); i++;  
	movs	r3, #0	@,
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5122: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ _798,
	bne	.LCB19696	@
	b	.L3223	@long jump	@
.LCB19696:
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	lsls	r1, r4, #7	@ tmp433, _798,
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	adds	r3, r7, r4	@ _800, offset, _798
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	adds	r1, r1, #198	@ _810,
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	adds	r4, r4, #1	@ _812,
.L3153:
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	movs	r2, r5	@ tmp441, tmp598
	adds	r2, r2, #124	@ tmp441,
	str	r2, [sp, #4]	@ tmp441,
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	movs	r2, #44	@ tmp443,
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	lsls	r0, r3, #3	@ tmp437, _800,
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	adds	r3, r5, r3	@ tmp444, tmp598, _800
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	ldrb	r3, [r3, r2]	@ tmp445, tWidths
	add	r1, r1, r8	@ tmp435, tmp597
	str	r3, [sp]	@ tmp445,
	adds	r0, r6, r0	@ tmp438, tmp595, tmp437
@ Patches/../C_code.c:5123: 		case 9: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ModeText, false)); i++;  // Classic/Casual 
	movs	r3, #0	@,
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5124: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ _812,
	bne	.LCB19719	@
	b	.L3223	@long jump	@
.LCB19719:
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	lsls	r1, r4, #7	@ tmp448, _812,
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	adds	r3, r7, r4	@ _814, offset, _812
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	adds	r1, r1, #198	@ _824,
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	adds	r4, r4, #1	@ _826,
.L3152:
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	ldr	r2, .L3227+24	@ tmp600,
	mov	fp, r2	@ tmp600, tmp600
	adds	r2, r2, #4	@ tmp456,
	str	r2, [sp, #4]	@ tmp456,
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	movs	r2, #44	@ tmp458,
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	lsls	r0, r3, #3	@ tmp452, _814,
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	adds	r3, r5, r3	@ tmp459, tmp598, _814
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	ldrb	r3, [r3, r2]	@ tmp460, tWidths
	add	r1, r1, r8	@ tmp450, tmp597
	str	r3, [sp]	@ tmp460,
	adds	r0, r6, r0	@ tmp453, tmp595, tmp452
@ Patches/../C_code.c:5125: 		case 10: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&MusicText, false)); i++; 
	movs	r3, #0	@,
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5126: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ _826,
	bne	.LCB19743	@
	b	.L3142	@long jump	@
.LCB19743:
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	lsls	r1, r4, #7	@ tmp463, _826,
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	adds	r3, r7, r4	@ _828, offset, _826
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	adds	r1, r1, #198	@ _838,
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	adds	r4, r4, #1	@ _840,
.L3151:
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	mov	r2, fp	@ tmp471, tmp600
	adds	r2, r2, #12	@ tmp471,
	str	r2, [sp, #4]	@ tmp471,
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	movs	r2, #44	@ tmp473,
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	lsls	r0, r3, #3	@ tmp467, _828,
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	adds	r3, r5, r3	@ tmp474, tmp598, _828
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	ldrb	r3, [r3, r2]	@ tmp475, tWidths
	add	r1, r1, r8	@ tmp465, tmp597
	str	r3, [sp]	@ tmp475,
	adds	r0, r6, r0	@ tmp468, tmp595, tmp467
@ Patches/../C_code.c:5127: 		case 11: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ColoursText, false)); i++;  
	movs	r3, #0	@,
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5128: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ _840,
	bne	.LCB19766	@
	b	.L3142	@long jump	@
.LCB19766:
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	lsls	r1, r4, #7	@ tmp478, _840,
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	adds	r3, r7, r4	@ _842, offset, _840
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	adds	r1, r1, #198	@ _852,
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	adds	r4, r4, #1	@ _854,
.L3150:
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	mov	r2, fp	@ tmp486, tmp600
	adds	r2, r2, #20	@ tmp486,
	str	r2, [sp, #4]	@ tmp486,
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	movs	r2, #44	@ tmp488,
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	lsls	r0, r3, #3	@ tmp482, _842,
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	adds	r3, r5, r3	@ tmp489, tmp598, _842
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	ldrb	r3, [r3, r2]	@ tmp490, tWidths
	add	r1, r1, r8	@ tmp480, tmp597
	str	r3, [sp]	@ tmp490,
	adds	r0, r6, r0	@ tmp483, tmp595, tmp482
@ Patches/../C_code.c:5129: 		case 12: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&ItemDurabilityText, false)); i++;  
	movs	r3, #0	@,
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5130: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ _854,
	bne	.LCB19789	@
	b	.L3142	@long jump	@
.LCB19789:
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	lsls	r1, r4, #7	@ tmp493, _854,
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	adds	r3, r7, r4	@ _856, offset, _854
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	adds	r1, r1, #198	@ _866,
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	adds	r4, r4, #1	@ _868,
.L3149:
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	mov	r2, fp	@ tmp501, tmp600
	adds	r2, r2, #36	@ tmp501,
	str	r2, [sp, #4]	@ tmp501,
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	movs	r2, #44	@ tmp503,
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	lsls	r0, r3, #3	@ tmp497, _856,
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	adds	r3, r5, r3	@ tmp504, tmp598, _856
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	ldrb	r3, [r3, r2]	@ tmp505, tWidths
	add	r1, r1, r8	@ tmp495, tmp597
	str	r3, [sp]	@ tmp505,
	adds	r0, r6, r0	@ tmp498, tmp595, tmp497
@ Patches/../C_code.c:5131: 		case 13: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&PlayerBonusText, false)); i++;  // make players have bonus levels
	movs	r3, #0	@,
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5132: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ _868,
	bne	.LCB19812	@
	b	.L3142	@long jump	@
.LCB19812:
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	lsls	r1, r4, #7	@ tmp508, _868,
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	adds	r3, r7, r4	@ _870, offset, _868
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	adds	r1, r1, #198	@ _880,
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	adds	r4, r4, #1	@ _882,
.L3148:
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	mov	r2, fp	@ tmp516, tmp600
	adds	r2, r2, #52	@ tmp516,
	str	r2, [sp, #4]	@ tmp516,
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	movs	r2, #44	@ tmp518,
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	lsls	r0, r3, #3	@ tmp512, _870,
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	adds	r3, r5, r3	@ tmp519, tmp598, _870
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	ldrb	r3, [r3, r2]	@ tmp520, tWidths
	add	r1, r1, r8	@ tmp510, tmp597
	str	r3, [sp]	@ tmp520,
	adds	r0, r6, r0	@ tmp513, tmp595, tmp512
@ Patches/../C_code.c:5133: 		case 14: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&EnemyDiffBonusText, false)); i++;  // make enemies have more bonus levels?
	movs	r3, #0	@,
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5134: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ _882,
	bne	.LCB19835	@
	b	.L3142	@long jump	@
.LCB19835:
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	lsls	r1, r4, #7	@ tmp523, _882,
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	adds	r3, r7, r4	@ _884, offset, _882
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	adds	r1, r1, #198	@ _894,
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	adds	r4, r4, #1	@ _896,
.L3147:
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	mov	r2, fp	@ tmp531, tmp600
	adds	r2, r2, #72	@ tmp531,
	str	r2, [sp, #4]	@ tmp531,
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	movs	r2, #44	@ tmp533,
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	lsls	r0, r3, #3	@ tmp527, _884,
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	adds	r3, r5, r3	@ tmp534, tmp598, _884
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	ldrb	r3, [r3, r2]	@ tmp535, tWidths
	add	r1, r1, r8	@ tmp525, tmp597
	str	r3, [sp]	@ tmp535,
	adds	r0, r6, r0	@ tmp528, tmp595, tmp527
@ Patches/../C_code.c:5135: 		case 15: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&FogText, false)); i++;  
	movs	r3, #0	@,
	subs	r2, r2, #41	@,
	bl	.L557		@
@ Patches/../C_code.c:5136: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ _896,
	bne	.LCB19858	@
	b	.L3142	@long jump	@
.LCB19858:
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	lsls	r1, r4, #7	@ tmp538, _896,
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	adds	r3, r7, r4	@ _898, offset, _896
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	adds	r1, r1, #198	@ _908,
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	adds	r4, r4, #1	@ i,
.L3146:
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	lsls	r0, r3, #3	@ tmp542, _898,
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	adds	r5, r5, r3	@ tmp549, tmp598, _898
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	movs	r3, #44	@ tmp548,
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	mov	r2, fp	@ tmp546, tmp600
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	ldrb	r3, [r5, r3]	@ tmp550, tWidths
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	adds	r2, r2, #76	@ tmp546,
	str	r2, [sp, #4]	@ tmp546,
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	str	r3, [sp]	@ tmp550,
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	movs	r2, #3	@,
	movs	r3, #0	@,
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	add	r1, r1, r8	@ tmp540, tmp597
	adds	r0, r6, r0	@ tmp543, tmp595, tmp542
@ Patches/../C_code.c:5137: 		case 16: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkipChapterText, false)); i++;  
	bl	.L557		@
@ Patches/../C_code.c:5138: 		if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ i,
	beq	.LCB19881	@
	b	.L3145	@long jump	@
.LCB19881:
	b	.L3142		@
.L3166:
@ Patches/../C_code.c:5104: 	switch (offset) { 
	ldr	r3, .L3227+52	@ prephitmp_776,
	mov	fp, r3	@ prephitmp_776, prephitmp_776
	movs	r3, #5	@ prephitmp_757,
	str	r3, [sp, #16]	@ prephitmp_757, %sfp
	ldr	r3, .L3227+56	@ prephitmp_756,
	str	r3, [sp, #12]	@ prephitmp_756, %sfp
	movs	r3, #4	@ prephitmp_731,
	str	r3, [sp, #24]	@ prephitmp_731, %sfp
	ldr	r3, .L3227+60	@ prephitmp_730,
	str	r3, [sp, #20]	@ prephitmp_730, %sfp
	movs	r3, #3	@ prephitmp_699,
	str	r3, [sp, #32]	@ prephitmp_699, %sfp
	adds	r3, r3, #196	@ prephitmp_698,
	adds	r3, r3, #255	@ prephitmp_698,
	str	r3, [sp, #28]	@ prephitmp_698, %sfp
	subs	r3, r3, #197	@ prephitmp_661,
	subs	r3, r3, #255	@ prephitmp_661,
	str	r3, [sp, #40]	@ prephitmp_661, %sfp
	adds	r3, r3, #69	@ prephitmp_660,
	adds	r3, r3, #255	@ prephitmp_660,
	str	r3, [sp, #36]	@ prephitmp_660, %sfp
	subs	r3, r3, #70	@ prephitmp_617,
	subs	r3, r3, #255	@ prephitmp_617,
	ldr	r2, .L3227+20	@ tmp599,
	str	r3, [sp, #48]	@ prephitmp_617, %sfp
	adds	r3, r3, #197	@ prephitmp_616,
	str	r3, [sp, #44]	@ prephitmp_616, %sfp
	movs	r4, #6	@ prephitmp_777,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r5, .L3227+64	@ tmp598,
	subs	r3, r3, #196	@ _648,
	b	.L3160		@
.L3173:
	ldr	r2, .L3227+20	@ tmp599,
	movs	r4, #1	@ _812,
	movs	r1, #198	@ _810,
	movs	r3, #9	@ _800,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r5, .L3227+64	@ tmp598,
	b	.L3153		@
.L3174:
	ldr	r2, .L3227+20	@ tmp599,
	movs	r4, #1	@ _826,
	movs	r1, #198	@ _824,
	movs	r3, #10	@ _814,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r5, .L3227+64	@ tmp598,
	b	.L3152		@
.L3228:
	.align	2
.L3227:
	.word	gStatScreen+24
	.word	ClearText
	.word	gBG0TilemapBuffer
	.word	TileMap_FillRect
	.word	.L3144
	.word	PutDrawText
	.word	.LANCHOR9
	.word	DisplayTimedHitsOption
	.word	DisplayRandomSkillsOption
	.word	gBG0TilemapBuffer+18
	.word	gStatScreen+328
	.word	BG_EnableSyncByMask
	.word	966
	.word	838
	.word	710
	.word	582
	.word	.LANCHOR8
	.word	gStatScreen+32
.L3175:
	ldr	r2, .L3229	@ tmp599,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r2, .L3229+4	@ tmp600,
	movs	r4, #1	@ _840,
	movs	r1, #198	@ _838,
	movs	r3, #11	@ _828,
	mov	fp, r2	@ tmp600, tmp600
	ldr	r5, .L3229+8	@ tmp598,
	b	.L3151		@
.L3176:
	ldr	r2, .L3229	@ tmp599,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r2, .L3229+4	@ tmp600,
	movs	r4, #1	@ _854,
	movs	r1, #198	@ _852,
	movs	r3, #12	@ _842,
	mov	fp, r2	@ tmp600, tmp600
	ldr	r5, .L3229+8	@ tmp598,
	b	.L3150		@
.L3177:
	ldr	r2, .L3229	@ tmp599,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r2, .L3229+4	@ tmp600,
	movs	r4, #1	@ _868,
	movs	r1, #198	@ _866,
	movs	r3, #13	@ _856,
	mov	fp, r2	@ tmp600, tmp600
	ldr	r5, .L3229+8	@ tmp598,
	b	.L3149		@
.L3178:
	ldr	r2, .L3229	@ tmp599,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r2, .L3229+4	@ tmp600,
	movs	r4, #1	@ _882,
	movs	r1, #198	@ _880,
	movs	r3, #14	@ _870,
	mov	fp, r2	@ tmp600, tmp600
	ldr	r5, .L3229+8	@ tmp598,
	b	.L3148		@
.L3179:
	ldr	r2, .L3229	@ tmp599,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r2, .L3229+4	@ tmp600,
	movs	r4, #1	@ _896,
	movs	r1, #198	@ _894,
	movs	r3, #15	@ _884,
	mov	fp, r2	@ tmp600, tmp600
	ldr	r5, .L3229+8	@ tmp598,
	b	.L3147		@
.L3180:
	ldr	r2, .L3229	@ tmp599,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r2, .L3229+4	@ tmp600,
	movs	r4, #1	@ i,
	movs	r1, #198	@ _908,
	movs	r3, #16	@ _898,
	mov	fp, r2	@ tmp600, tmp600
	ldr	r5, .L3229+8	@ tmp598,
	b	.L3146		@
.L3169:
	movs	r3, #227	@ prephitmp_776,
	lsls	r3, r3, #1	@ prephitmp_776, prephitmp_776,
	mov	fp, r3	@ prephitmp_776, prephitmp_776
	subs	r3, r3, #197	@ prephitmp_757,
	subs	r3, r3, #255	@ prephitmp_757,
	str	r3, [sp, #16]	@ prephitmp_757, %sfp
	adds	r3, r3, #69	@ prephitmp_756,
	adds	r3, r3, #255	@ prephitmp_756,
	str	r3, [sp, #12]	@ prephitmp_756, %sfp
	subs	r3, r3, #70	@ prephitmp_731,
	subs	r3, r3, #255	@ prephitmp_731,
	ldr	r2, .L3229	@ tmp599,
	str	r3, [sp, #24]	@ prephitmp_731, %sfp
	adds	r3, r3, #197	@ prephitmp_730,
	str	r3, [sp, #20]	@ prephitmp_730, %sfp
	movs	r4, #3	@ prephitmp_777,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r5, .L3229+8	@ tmp598,
	subs	r3, r3, #193	@ _744,
	b	.L3157		@
.L3170:
	movs	r3, #163	@ prephitmp_776,
	lsls	r3, r3, #1	@ prephitmp_776, prephitmp_776,
	mov	fp, r3	@ prephitmp_776, prephitmp_776
	subs	r3, r3, #70	@ prephitmp_757,
	subs	r3, r3, #255	@ prephitmp_757,
	ldr	r2, .L3229	@ tmp599,
	str	r3, [sp, #16]	@ prephitmp_757, %sfp
	adds	r3, r3, #197	@ prephitmp_756,
	str	r3, [sp, #12]	@ prephitmp_756, %sfp
	movs	r4, #2	@ prephitmp_777,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r5, .L3229+8	@ tmp598,
	subs	r3, r3, #192	@ _764,
	b	.L3156		@
.L3171:
	movs	r3, #198	@ prephitmp_776,
	ldr	r2, .L3229	@ tmp599,
	mov	fp, r3	@ prephitmp_776, prephitmp_776
	movs	r4, #1	@ prephitmp_777,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r5, .L3229+8	@ tmp598,
	subs	r3, r3, #191	@ _778,
	b	.L3155		@
.L3172:
	ldr	r2, .L3229	@ tmp599,
	movs	r4, #1	@ _798,
	movs	r1, #198	@ _796,
	movs	r3, #8	@ _786,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r5, .L3229+8	@ tmp598,
	b	.L3154		@
.L3167:
	ldr	r3, .L3229+12	@ prephitmp_776,
	mov	fp, r3	@ prephitmp_776, prephitmp_776
	movs	r3, #4	@ prephitmp_757,
	str	r3, [sp, #16]	@ prephitmp_757, %sfp
	ldr	r3, .L3229+16	@ prephitmp_756,
	str	r3, [sp, #12]	@ prephitmp_756, %sfp
	movs	r3, #3	@ prephitmp_731,
	str	r3, [sp, #24]	@ prephitmp_731, %sfp
	adds	r3, r3, #196	@ prephitmp_730,
	adds	r3, r3, #255	@ prephitmp_730,
	str	r3, [sp, #20]	@ prephitmp_730, %sfp
	subs	r3, r3, #197	@ prephitmp_699,
	subs	r3, r3, #255	@ prephitmp_699,
	str	r3, [sp, #32]	@ prephitmp_699, %sfp
	adds	r3, r3, #69	@ prephitmp_698,
	adds	r3, r3, #255	@ prephitmp_698,
	str	r3, [sp, #28]	@ prephitmp_698, %sfp
	subs	r3, r3, #70	@ prephitmp_661,
	subs	r3, r3, #255	@ prephitmp_661,
	ldr	r2, .L3229	@ tmp599,
	str	r3, [sp, #40]	@ prephitmp_661, %sfp
	adds	r3, r3, #197	@ prephitmp_660,
	str	r3, [sp, #36]	@ prephitmp_660, %sfp
	movs	r4, #5	@ prephitmp_777,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r5, .L3229+8	@ tmp598,
	subs	r3, r3, #195	@ _686,
	b	.L3159		@
.L3168:
	ldr	r3, .L3229+16	@ prephitmp_776,
	mov	fp, r3	@ prephitmp_776, prephitmp_776
	movs	r3, #3	@ prephitmp_757,
	str	r3, [sp, #16]	@ prephitmp_757, %sfp
	adds	r3, r3, #196	@ prephitmp_756,
	adds	r3, r3, #255	@ prephitmp_756,
	str	r3, [sp, #12]	@ prephitmp_756, %sfp
	subs	r3, r3, #197	@ prephitmp_731,
	subs	r3, r3, #255	@ prephitmp_731,
	str	r3, [sp, #24]	@ prephitmp_731, %sfp
	adds	r3, r3, #69	@ prephitmp_730,
	adds	r3, r3, #255	@ prephitmp_730,
	str	r3, [sp, #20]	@ prephitmp_730, %sfp
	subs	r3, r3, #70	@ prephitmp_699,
	subs	r3, r3, #255	@ prephitmp_699,
	ldr	r2, .L3229	@ tmp599,
	str	r3, [sp, #32]	@ prephitmp_699, %sfp
	adds	r3, r3, #197	@ prephitmp_698,
	str	r3, [sp, #28]	@ prephitmp_698, %sfp
	movs	r4, #4	@ prephitmp_777,
	mov	r9, r2	@ tmp599, tmp599
	ldr	r5, .L3229+8	@ tmp598,
	subs	r3, r3, #194	@ _718,
	b	.L3158		@
.L3162:
@ Patches/../C_code.c:5105: 		case 0: PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SeedText, false)); i++;  // Classic/Casual 
	ldr	r5, .L3229+8	@ tmp598,
	movs	r3, r5	@ tmp335, tmp598
	adds	r3, r3, #12	@ tmp335,
	str	r3, [sp, #4]	@ tmp335,
	movs	r3, #3	@ tmp336,
	ldr	r4, .L3229	@ tmp599,
	ldr	r1, .L3229+20	@ tmp332,
	str	r3, [sp]	@ tmp336,
	movs	r2, #3	@,
	movs	r3, #0	@,
	movs	r0, r6	@, tmp595
	bl	.L240		@
	ldr	r3, .L3229+24	@ prephitmp_776,
	mov	fp, r3	@ prephitmp_776, prephitmp_776
	movs	r3, #7	@ prephitmp_757,
	str	r3, [sp, #16]	@ prephitmp_757, %sfp
	ldr	r3, .L3229+28	@ prephitmp_756,
	str	r3, [sp, #12]	@ prephitmp_756, %sfp
	movs	r3, #6	@ prephitmp_731,
	str	r3, [sp, #24]	@ prephitmp_731, %sfp
	ldr	r3, .L3229+32	@ prephitmp_730,
	str	r3, [sp, #20]	@ prephitmp_730, %sfp
	movs	r3, #5	@ prephitmp_699,
	str	r3, [sp, #32]	@ prephitmp_699, %sfp
	ldr	r3, .L3229+12	@ prephitmp_698,
	str	r3, [sp, #28]	@ prephitmp_698, %sfp
	movs	r3, #4	@ prephitmp_661,
	str	r3, [sp, #40]	@ prephitmp_661, %sfp
	ldr	r3, .L3229+16	@ prephitmp_660,
	str	r3, [sp, #36]	@ prephitmp_660, %sfp
	movs	r3, #3	@ prephitmp_617,
	movs	r1, #163	@ prephitmp_610,
	str	r3, [sp, #48]	@ prephitmp_617, %sfp
	adds	r3, r3, #196	@ prephitmp_616,
	adds	r3, r3, #255	@ prephitmp_616,
	str	r3, [sp, #44]	@ prephitmp_616, %sfp
	subs	r3, r3, #197	@ prephitmp_611,
	subs	r3, r3, #255	@ prephitmp_611,
	mov	r9, r4	@ tmp599, tmp599
	str	r3, [sp, #52]	@ prephitmp_611, %sfp
	movs	r4, #8	@ prephitmp_777,
	lsls	r1, r1, #1	@ prephitmp_610, prephitmp_610,
	b	.L3161		@
.L3223:
	ldr	r3, .L3229+4	@ tmp600,
	mov	fp, r3	@ tmp600, tmp600
	b	.L3142		@
.L3226:
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	mov	r3, fp	@ tmp582, tmp600
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	movs	r2, #44	@ tmp584,
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	adds	r3, r3, #104	@ tmp582,
	str	r3, [sp, #4]	@ tmp582,
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	ldr	r3, .L3229+8	@ tmp583,
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	adds	r7, r4, r7	@ _211, i, offset
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	adds	r3, r3, r7	@ tmp585, tmp583, _211
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	ldrb	r3, [r3, r2]	@ tmp586, tWidths
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	lsls	r1, r4, #7	@ tmp573, i,
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	lsls	r0, r7, #3	@ tmp578, _211,
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	adds	r1, r1, #198	@ tmp575,
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	str	r3, [sp]	@ tmp586,
	add	r1, r1, r8	@ tmp576, tmp597
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	movs	r3, #0	@,
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	adds	r0, r6, r0	@ tmp579, tmp595, tmp578
@ Patches/../C_code.c:5145: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&SkillsText, false)); i++;  
	subs	r2, r2, #41	@,
	bl	.L557		@
	b	.L3142		@
.L3225:
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	mov	r3, fp	@ tmp564, tmp600
	adds	r3, r3, #92	@ tmp564,
	str	r3, [sp, #4]	@ tmp564,
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	ldr	r3, .L3229+8	@ tmp565,
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	adds	r2, r4, r7	@ _198, i, offset
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	lsls	r0, r2, #3	@ tmp560, _198,
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	adds	r3, r3, r2	@ tmp567, tmp565, _198
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	movs	r2, #44	@ tmp566,
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	lsls	r1, r4, #7	@ tmp555, i,
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	ldrb	r3, [r3, r2]	@ tmp568, tWidths
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	adds	r1, r1, #198	@ tmp557,
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	str	r3, [sp]	@ tmp568,
	add	r1, r1, r8	@ tmp558, tmp597
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	movs	r3, #0	@,
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	adds	r0, r6, r0	@ tmp561, tmp595, tmp560
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	subs	r2, r2, #41	@,
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	adds	r4, r4, #1	@ i,
@ Patches/../C_code.c:5141: 			PutDrawText(&th[i+offset], TILEMAP_LOCATED(gBG0TilemapBuffer, 3, 3+((i)*2)), gold, 0, tWidths[i+offset], PutStringInBuffer((const char*)&TimedHitsText, false)); i++;  
	bl	.L557		@
@ Patches/../C_code.c:5142: 			if (i > SRR_MAXDISP) { break; } 
	cmp	r4, #8	@ i,
	beq	.LCB20251	@
	b	.L3143	@long jump	@
.LCB20251:
	b	.L3142		@
.L3224:
	ldr	r3, .L3229	@ tmp599,
	mov	r9, r3	@ tmp599, tmp599
	ldr	r3, .L3229+4	@ tmp600,
	mov	fp, r3	@ tmp600, tmp600
	b	.L3142		@
.L3230:
	.align	2
.L3229:
	.word	PutDrawText
	.word	.LANCHOR9
	.word	.LANCHOR8
	.word	710
	.word	582
	.word	gBG0TilemapBuffer+198
	.word	1094
	.word	966
	.word	838
	.size	RedrawAllText, .-RedrawAllText
	.align	1
	.p2align 2,,3
	.global	ConfigMenuLoop
	.syntax unified
	.code	16
	.thumb_func
	.type	ConfigMenuLoop, %function
ConfigMenuLoop:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r7, r10	@,
	mov	r5, r8	@,
	mov	lr, fp	@,
	mov	r6, r9	@,
	push	{r5, r6, r7, lr}	@
@ Patches/../C_code.c:4791: 	if (proc->offset) {
	movs	r5, #49	@ tmp432,
@ Patches/../C_code.c:4795: 	if ((SRR_TotalOptions > SRR_MAXDISP) && (proc->offset < (SRR_TotalOptions - SRR_MAXDISP))) {
	ldr	r3, .L3446	@ tmp431,
	ldr	r7, [r3]	@ pretmp_593, SRR_TotalOptions
@ Patches/../C_code.c:4791: 	if (proc->offset) {
	ldrb	r3, [r0, r5]	@ tmp433,
@ Patches/../C_code.c:4790: void ConfigMenuLoop(ConfigMenuProc* proc) { 
	movs	r4, r0	@ proc, tmp1340
	sub	sp, sp, #44	@,,
@ Patches/../C_code.c:4791: 	if (proc->offset) {
	cmp	r3, #0	@ tmp433,
	beq	.LCB20294	@
	b	.L3427	@long jump	@
.LCB20294:
@ Patches/../C_code.c:4795: 	if ((SRR_TotalOptions > SRR_MAXDISP) && (proc->offset < (SRR_TotalOptions - SRR_MAXDISP))) {
	cmp	r7, #7	@ pretmp_593,
	ble	.LCB20296	@
	b	.L3428	@long jump	@
.LCB20296:
.L3235:
@ Patches/../C_code.c:4801: 	u16 keys = sKeyStatusBuffer.newKeys; 
	ldr	r3, .L3446+4	@ tmp1314,
	mov	r8, r3	@ tmp1314, tmp1314
	ldrh	r5, [r3, #8]	@ keys,
@ Patches/../C_code.c:4802: 	if (!proc->freezeSeed) { proc->seed = GetInitialSeed(2); proc->redraw = true; } 
	movs	r3, #52	@ tmp442,
@ Patches/../C_code.c:4802: 	if (!proc->freezeSeed) { proc->seed = GetInitialSeed(2); proc->redraw = true; } 
	ldrb	r3, [r4, r3]	@ tmp443,
	cmp	r3, #0	@ tmp443,
	bne	.LCB20304	@
	b	.L3429	@long jump	@
.LCB20304:
.L3237:
@ Patches/../C_code.c:4803: 	int id = proc->id;
	movs	r3, #48	@ tmp447,
@ Patches/../C_code.c:4803: 	int id = proc->id;
	ldrsb	r6, [r4, r3]	@ id,
@ Patches/../C_code.c:4804: 	int offset = proc->offset;
	adds	r3, r3, #1	@ tmp448,
@ Patches/../C_code.c:4804: 	int offset = proc->offset;
	ldrb	r3, [r4, r3]	@ offset,
	str	r3, [sp, #4]	@ offset, %sfp
@ Patches/../C_code.c:4806: 	if ((keys & START_BUTTON)||(keys & A_BUTTON)) { //press A or Start to continue
	movs	r3, #9	@ tmp452,
	tst	r3, r5	@ tmp452, keys
	beq	.LCB20316	@
	b	.L3430	@long jump	@
.LCB20316:
@ Patches/../C_code.c:4923: 	if (!keys) { keys = sKeyStatusBuffer.repeatedKeys; } 
	cmp	r5, #0	@ keys,
	bne	.L3276		@,
@ Patches/../C_code.c:4923: 	if (!keys) { keys = sKeyStatusBuffer.repeatedKeys; } 
	mov	r3, r8	@ tmp1314, tmp1314
	ldrh	r5, [r3, #6]	@ keys,
.L3276:
@ Patches/../C_code.c:4927: 	if ((id == 0) && (offset == 0)) { 
	ldr	r3, [sp, #4]	@ _119, %sfp
	orrs	r3, r6	@ _119, id
	mov	r8, r3	@ _119, _119
@ Patches/../C_code.c:4927: 	if ((id == 0) && (offset == 0)) { 
	bne	.L3277		@,
@ Patches/../C_code.c:4929: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	adds	r3, r3, #52	@ tmp929,
@ Patches/../C_code.c:4929: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	ldrb	r3, [r4, r3]	@ tmp930,
	cmp	r3, #0	@ tmp930,
	bne	.LCB20331	@
	b	.L3431	@long jump	@
.LCB20331:
.L3278:
@ Patches/../C_code.c:4930: 		proc->freezeSeed = true; 
	movs	r3, #52	@ tmp934,
	movs	r2, #1	@ tmp935,
	strb	r2, [r4, r3]	@ tmp935, proc_282(D)->freezeSeed
	ldr	r3, .L3446+8	@ tmp1324,
	movs	r2, r3	@ ivtmp.1945, tmp1324
	mov	ip, r3	@ tmp1324, tmp1324
@ Patches/../C_code.c:4684: 	int result = 1; 
	movs	r3, #1	@ result,
@ Patches/../C_code.c:4685: 	while (number > DigitDecimalTable[result]) { result++; } 
	ldr	r0, .L3446+12	@ tmp940,
	adds	r2, r2, #132	@ ivtmp.1945,
.L3279:
	adds	r2, r2, #4	@ ivtmp.1945,
@ Patches/../C_code.c:4685: 	while (number > DigitDecimalTable[result]) { result++; } 
	subs	r1, r2, #4	@ tmp939, ivtmp.1945,
@ Patches/../C_code.c:4685: 	while (number > DigitDecimalTable[result]) { result++; } 
	ldr	r1, [r1]	@ MEM[(long unsigned int *)_458 + 4294967292B], MEM[(long unsigned int *)_458 + 4294967292B]
@ Patches/../C_code.c:4685: 	while (number > DigitDecimalTable[result]) { result++; } 
	adds	r3, r3, #1	@ result,
@ Patches/../C_code.c:4685: 	while (number > DigitDecimalTable[result]) { result++; } 
	cmp	r1, r0	@ MEM[(long unsigned int *)_458 + 4294967292B], tmp940
	bls	.L3279		@,
@ Patches/../C_code.c:4687: 	if (result > 6) { result = 6; } 
	cmp	r3, #7	@ result,
	bne	.LCB20351	@
	b	.L3432	@long jump	@
.LCB20351:
.L3280:
	movs	r2, #16	@ tmp945,
	mov	r10, r2	@ tmp945, tmp945
@ Patches/../C_code.c:4936: 		  if (proc->digit > 0) { proc->digit--; }
	movs	r1, #51	@ tmp1527,
@ Patches/../C_code.c:4935: 		if (keys & DPAD_RIGHT) {
	mov	r0, r10	@ tmp945, tmp945
	ands	r2, r5	@ _514, keys
	mov	r9, r2	@ _514, _514
@ Patches/../C_code.c:4936: 		  if (proc->digit > 0) { proc->digit--; }
	ldrsb	r2, [r4, r1]	@ _128,
	subs	r1, r1, #19	@ tmp951,
	ands	r1, r5	@ tmp951, keys
	str	r1, [sp]	@ tmp951, %sfp
@ Patches/../C_code.c:4935: 		if (keys & DPAD_RIGHT) {
	tst	r0, r5	@ tmp945, keys
	bne	.LCB20370	@
	b	.L3281	@long jump	@
.LCB20370:
@ Patches/../C_code.c:4936: 		  if (proc->digit > 0) { proc->digit--; }
	cmp	r2, #0	@ _128,
	bgt	.LCB20372	@
	b	.L3282	@long jump	@
.LCB20372:
@ Patches/../C_code.c:4936: 		  if (proc->digit > 0) { proc->digit--; }
	subs	r0, r2, #1	@ tmp956, _128,
	lsls	r0, r0, #24	@ tmp957, tmp956,
	mov	r10, r0	@ tmp957, tmp957
	lsrs	r0, r0, #24	@ _126, tmp957,
	mov	fp, r0	@ _126, _126
	mov	r0, r10	@ tmp957, tmp957
	movs	r1, #51	@ tmp1526,
	asrs	r0, r0, #24	@ _127, tmp957,
	strb	r0, [r4, r1]	@ _127, proc_282(D)->digit
@ Patches/../C_code.c:4939: 		if (keys & DPAD_LEFT) {
	ldr	r1, [sp]	@ _592, %sfp
	cmp	r1, #0	@ _592,
	beq	.LCB20387	@
	b	.L3283	@long jump	@
.LCB20387:
	movs	r2, r0	@ _128, _127
.L3284:
@ Patches/../C_code.c:4944: 		if (proc->digit) { 
	cmp	r2, #0	@ _128,
	bne	.LCB20392	@
	b	.L3287	@long jump	@
.LCB20392:
.L3286:
@ Patches/../C_code.c:4945: 			if (keys & DPAD_UP) {
	lsls	r3, r5, #25	@ tmp1358, keys,
	bpl	.L3288		@,
@ Patches/../C_code.c:4946: 				if (proc->seed == max) { proc->seed = min; } 
	ldr	r1, [r4, #44]	@ _136, proc_282(D)->seed
@ Patches/../C_code.c:4946: 				if (proc->seed == max) { proc->seed = min; } 
	ldr	r3, .L3446+16	@ tmp981,
	cmp	r1, r3	@ _136, tmp981
	beq	.L3289		@,
@ Patches/../C_code.c:4948: 					proc->seed += DigitDecimalTable[proc->digit]; 
	mov	r8, r1	@ _136, _136
@ Patches/../C_code.c:4948: 					proc->seed += DigitDecimalTable[proc->digit]; 
	lsls	r0, r2, #2	@ tmp983, _128,
	add	r0, r0, ip	@ tmp984, tmp1324
@ Patches/../C_code.c:4948: 					proc->seed += DigitDecimalTable[proc->digit]; 
	ldr	r0, [r0, #124]	@ DigitDecimalTable[_581], DigitDecimalTable[_581]
	add	r8, r8, r0	@ _136, DigitDecimalTable[_581]
@ Patches/../C_code.c:4949: 					if (proc->seed > max) { proc->seed = max; } 
	cmp	r8, r3	@ _119, tmp981
	ble	.L3289		@,
	mov	r8, r3	@ _119, tmp981
.L3289:
@ Patches/../C_code.c:4946: 				if (proc->seed == max) { proc->seed = min; } 
	mov	r3, r8	@ _119, _119
@ Patches/../C_code.c:4951: 				proc->redraw = RedrawSome;
	movs	r1, #1	@ tmp989,
@ Patches/../C_code.c:4946: 				if (proc->seed == max) { proc->seed = min; } 
	str	r3, [r4, #44]	@ _119, proc_282(D)->seed
@ Patches/../C_code.c:4951: 				proc->redraw = RedrawSome;
	movs	r3, #50	@ tmp988,
	strb	r1, [r4, r3]	@ tmp989, proc_282(D)->redraw
.L3288:
@ Patches/../C_code.c:4953: 			if (keys & DPAD_DOWN) {
	lsls	r5, r5, #24	@ tmp1359, keys,
	bpl	.L3291		@,
@ Patches/../C_code.c:4955: 				if (proc->seed == min) { proc->seed = max; } 
	ldr	r1, [r4, #44]	@ _142, proc_282(D)->seed
@ Patches/../C_code.c:4955: 				if (proc->seed == min) { proc->seed = max; } 
	cmp	r1, #0	@ _142,
	beq	.LCB20429	@
	b	.L3433	@long jump	@
.LCB20429:
	ldr	r3, .L3446+16	@ _304,
.L3292:
@ Patches/../C_code.c:4955: 				if (proc->seed == min) { proc->seed = max; } 
	str	r3, [r4, #44]	@ _304, proc_282(D)->seed
@ Patches/../C_code.c:4961: 				proc->redraw = RedrawSome;
	movs	r1, #1	@ tmp1004,
	movs	r3, #50	@ tmp1003,
	strb	r1, [r4, r3]	@ tmp1004, proc_282(D)->redraw
.L3291:
@ Patches/../C_code.c:4964: 			DisplayHand(CursorLocationTable[proc->digit].x, CursorLocationTable[proc->digit].y + (offset * 8), true); 	
	ldr	r3, .L3446+20	@ tmp1006,
	lsls	r2, r2, #3	@ tmp1007, _128,
	adds	r3, r3, r2	@ tmp1008, tmp1006, tmp1007
@ Patches/../C_code.c:4650: 		DisplayVertUiHand(x, y); 
	adds	r3, r3, #28	@,
	ldmia	r3!, {r0, r1}	@,,
	bl	DisplayVertUiHand		@
@ Patches/../C_code.c:4965: 			if (proc->redraw == RedrawSome) { 
	movs	r3, #50	@ tmp1016,
@ Patches/../C_code.c:4965: 			if (proc->redraw == RedrawSome) { 
	ldrb	r3, [r4, r3]	@ tmp1017,
	cmp	r3, #1	@ tmp1017,
	beq	.LCB20448	@
	b	.L3232	@long jump	@
.LCB20448:
.L3294:
@ Patches/../C_code.c:4966: 				proc->redraw = RedrawNone; 
	movs	r3, #50	@ tmp1018,
	movs	r2, #0	@ tmp1019,
@ Patches/../C_code.c:4967: 				DrawConfigMenu(proc); 
	movs	r0, r4	@, proc
@ Patches/../C_code.c:4966: 				proc->redraw = RedrawNone; 
	strb	r2, [r4, r3]	@ tmp1019, proc_282(D)->redraw
@ Patches/../C_code.c:4967: 				DrawConfigMenu(proc); 
	bl	DrawConfigMenu		@
	b	.L3232		@
.L3277:
@ Patches/../C_code.c:4974: 	if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3) && (proc->choosingSkill)) { 
	ldr	r3, [sp, #4]	@ offset, %sfp
	adds	r2, r6, r3	@ _155, id, offset
@ Patches/../C_code.c:4974: 	if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3) && (proc->choosingSkill)) { 
	cmp	r2, r7	@ _155, pretmp_593
	bne	.LCB20462	@
	b	.L3295	@long jump	@
.LCB20462:
.L3298:
@ Patches/../C_code.c:5010:     if (keys & DPAD_DOWN) {
	lsls	r3, r5, #24	@ tmp1362, keys,
	bmi	.LCB20469	@
	b	.L3317	@long jump	@
.LCB20469:
@ Patches/../C_code.c:5036: 	DisplayHand(SRR_CursorLocationTable[id].x, SRR_CursorLocationTable[id].y, 0); 	
	ldr	r3, .L3446+20	@ tmp1325,
	lsls	r5, r6, #3	@ tmp1310, id,
	adds	r1, r3, r5	@ tmp1118, tmp1325, tmp1310
@ Patches/../C_code.c:5036: 	DisplayHand(SRR_CursorLocationTable[id].x, SRR_CursorLocationTable[id].y, 0); 	
	adds	r1, r1, #100	@,
	ldmia	r1, {r0, r1}	@,,
@ Patches/../C_code.c:5011: 		if (id < SRR_MAXDISP) { proc->id++; } 
	cmp	r6, #6	@ id,
	bgt	.LCB20476	@
	b	.L3318	@long jump	@
.LCB20476:
@ Patches/../C_code.c:5012: 		else if ((id+offset) < SRR_TotalOptions) { proc->offset++; proc->redraw = RedrawAll; } 
	cmp	r2, r7	@ _155, pretmp_593
	blt	.LCB20478	@
	b	.L3319	@long jump	@
.LCB20478:
@ Patches/../C_code.c:5012: 		else if ((id+offset) < SRR_TotalOptions) { proc->offset++; proc->redraw = RedrawAll; } 
	movs	r2, #49	@ tmp1124,
@ Patches/../C_code.c:5012: 		else if ((id+offset) < SRR_TotalOptions) { proc->offset++; proc->redraw = RedrawAll; } 
	ldrb	r3, [r4, r2]	@ tmp1126,
	adds	r3, r3, #1	@ tmp1127,
	strb	r3, [r4, r2]	@ tmp1127, proc_282(D)->offset
@ Patches/../C_code.c:5012: 		else if ((id+offset) < SRR_TotalOptions) { proc->offset++; proc->redraw = RedrawAll; } 
	movs	r3, #50	@ tmp1130,
	subs	r2, r2, #47	@ tmp1131,
	strb	r2, [r4, r3]	@ tmp1131, proc_282(D)->redraw
.L3297:
@ Patches/../C_code.c:4652: 	else { DisplayUiHand(x, y); } 
	ldr	r3, .L3446+24	@ tmp1279,
	bl	.L14		@
@ Patches/../C_code.c:5037: 	if (proc->redraw == RedrawSome) { 
	movs	r3, #50	@ tmp1280,
	ldrb	r3, [r4, r3]	@ _223,
@ Patches/../C_code.c:5037: 	if (proc->redraw == RedrawSome) { 
	cmp	r3, #1	@ _223,
	bne	.LCB20493	@
	b	.L3434	@long jump	@
.LCB20493:
.L3329:
@ Patches/../C_code.c:5042: 	if (proc->redraw == RedrawAll) { 
	cmp	r3, #2	@ _223,
	beq	.LCB20496	@
	b	.L3232	@long jump	@
.LCB20496:
@ Patches/../C_code.c:5043: 		proc->redraw = RedrawNone; 
	movs	r2, #0	@ tmp1292,
	adds	r3, r3, #48	@ tmp1291,
@ Patches/../C_code.c:5044: 		RedrawAllText(proc); 
	movs	r0, r4	@, proc
@ Patches/../C_code.c:5043: 		proc->redraw = RedrawNone; 
	strb	r2, [r4, r3]	@ tmp1292, proc_282(D)->redraw
@ Patches/../C_code.c:5044: 		RedrawAllText(proc); 
	bl	RedrawAllText		@
	b	.L3232		@
.L3447:
	.align	2
.L3446:
	.word	SRR_TotalOptions
	.word	sKeyStatusBuffer
	.word	.LANCHOR9
	.word	999998
	.word	999999
	.word	.LANCHOR10
	.word	DisplayUiHand
.L3430:
@ Patches/../C_code.c:4810: 		if (RandValues->seed != proc->seed) { reloadUnits = true; } 
	ldr	r3, .L3448	@ tmp1315,
	ldr	r1, [r3]	@ RandValues.262_11, RandValues
	mov	fp, r3	@ tmp1315, tmp1315
	ldr	r3, [r1]	@ *RandValues.262_11, *RandValues.262_11
	lsls	r3, r3, #12	@ tmp458, *RandValues.262_11,
	lsrs	r2, r3, #12	@ _12, tmp458,
@ Patches/../C_code.c:4810: 		if (RandValues->seed != proc->seed) { reloadUnits = true; } 
	ldr	r3, [r4, #44]	@ _14, proc_282(D)->seed
	str	r3, [sp, #12]	@ _14, %sfp
@ Patches/../C_code.c:4811: 		if (RandValues->variance != proc->Option[0]) { reloadUnits = true; } 
	movs	r3, #57	@ tmp459,
@ Patches/../C_code.c:4811: 		if (RandValues->variance != proc->Option[0]) { reloadUnits = true; } 
	movs	r5, #1	@ reloadUnits,
@ Patches/../C_code.c:4811: 		if (RandValues->variance != proc->Option[0]) { reloadUnits = true; } 
	ldrsb	r0, [r4, r3]	@ _17,
@ Patches/../C_code.c:4811: 		if (RandValues->variance != proc->Option[0]) { reloadUnits = true; } 
	ldrh	r3, [r1, #2]	@ *RandValues.262_11, *RandValues.262_11
	lsls	r3, r3, #23	@ tmp464, *RandValues.262_11,
@ Patches/../C_code.c:4811: 		if (RandValues->variance != proc->Option[0]) { reloadUnits = true; } 
	str	r0, [sp, #16]	@ _17, %sfp
@ Patches/../C_code.c:4811: 		if (RandValues->variance != proc->Option[0]) { reloadUnits = true; } 
	str	r5, [sp]	@ reloadUnits, %sfp
@ Patches/../C_code.c:4811: 		if (RandValues->variance != proc->Option[0]) { reloadUnits = true; } 
	lsrs	r3, r3, #27	@ tmp465, tmp464,
@ Patches/../C_code.c:4811: 		if (RandValues->variance != proc->Option[0]) { reloadUnits = true; } 
	cmp	r3, r0	@ tmp465, _17
	bne	.L3239		@,
@ Patches/../C_code.c:4810: 		if (RandValues->seed != proc->seed) { reloadUnits = true; } 
	ldr	r3, [sp, #12]	@ _14, %sfp
	subs	r2, r2, r3	@ tmp469, _12, _14
	subs	r3, r2, #1	@ tmp470, tmp469
	sbcs	r2, r2, r3	@ tmp469, tmp469, tmp470
	str	r2, [sp]	@ tmp469, %sfp
.L3239:
@ Patches/../C_code.c:4812: 		if (RecruitValues->recruitment != proc->Option[1]) { reloadUnits = true; } 
	ldr	r3, .L3448+4	@ tmp471,
	ldr	r3, [r3]	@ RecruitValues.264_19, RecruitValues
	mov	r9, r3	@ RecruitValues.264_19, RecruitValues.264_19
@ Patches/../C_code.c:4812: 		if (RecruitValues->recruitment != proc->Option[1]) { reloadUnits = true; } 
	movs	r3, #58	@ tmp472,
	ldrsb	r2, [r4, r3]	@ _22,
@ Patches/../C_code.c:4812: 		if (RecruitValues->recruitment != proc->Option[1]) { reloadUnits = true; } 
	mov	r3, r9	@ RecruitValues.264_19, RecruitValues.264_19
	ldrb	r3, [r3]	@ *RecruitValues.264_19, *RecruitValues.264_19
	lsls	r3, r3, #29	@ tmp477, *RecruitValues.264_19,
@ Patches/../C_code.c:4812: 		if (RecruitValues->recruitment != proc->Option[1]) { reloadUnits = true; } 
	str	r2, [sp, #20]	@ _22, %sfp
@ Patches/../C_code.c:4812: 		if (RecruitValues->recruitment != proc->Option[1]) { reloadUnits = true; } 
	lsrs	r3, r3, #29	@ tmp478, tmp477,
@ Patches/../C_code.c:4812: 		if (RecruitValues->recruitment != proc->Option[1]) { reloadUnits = true; } 
	cmp	r3, r2	@ tmp478, _22
	beq	.L3240		@,
@ Patches/../C_code.c:4812: 		if (RecruitValues->recruitment != proc->Option[1]) { reloadUnits = true; } 
	movs	r3, #1	@ reloadUnits,
	str	r3, [sp]	@ reloadUnits, %sfp
.L3240:
@ Patches/../C_code.c:4813: 		if (RandBitflags->base != proc->Option[2]) { reloadUnits = true; } 
	ldr	r3, .L3448+8	@ tmp1316,
	str	r3, [sp, #8]	@ tmp1316, %sfp
	ldr	r2, [r3]	@ RandBitflags.265_24, RandBitflags
@ Patches/../C_code.c:4813: 		if (RandBitflags->base != proc->Option[2]) { reloadUnits = true; } 
	movs	r3, #59	@ tmp481,
	ldrsb	r3, [r4, r3]	@ _27,
	movs	r5, r3	@ _27, _27
	str	r3, [sp, #24]	@ _27, %sfp
@ Patches/../C_code.c:4813: 		if (RandBitflags->base != proc->Option[2]) { reloadUnits = true; } 
	ldrb	r3, [r2]	@ *RandBitflags.265_24, *RandBitflags.265_24
	lsls	r0, r3, #30	@ tmp486, *RandBitflags.265_24,
	lsrs	r0, r0, #30	@ tmp487, tmp486,
@ Patches/../C_code.c:4813: 		if (RandBitflags->base != proc->Option[2]) { reloadUnits = true; } 
	cmp	r0, r5	@ tmp487, _27
	beq	.L3241		@,
@ Patches/../C_code.c:4813: 		if (RandBitflags->base != proc->Option[2]) { reloadUnits = true; } 
	movs	r0, #1	@ reloadUnits,
	str	r0, [sp]	@ reloadUnits, %sfp
.L3241:
@ Patches/../C_code.c:4814: 		if (RandBitflags->growth != proc->Option[3]) { reloadUnits = true; } 
	movs	r0, #60	@ tmp489,
	ldrsb	r0, [r4, r0]	@ _31,
	mov	r10, r0	@ _31, _31
@ Patches/../C_code.c:4814: 		if (RandBitflags->growth != proc->Option[3]) { reloadUnits = true; } 
	lsls	r0, r3, #28	@ tmp494, *RandBitflags.265_24,
	lsrs	r0, r0, #30	@ tmp495, tmp494,
@ Patches/../C_code.c:4814: 		if (RandBitflags->growth != proc->Option[3]) { reloadUnits = true; } 
	cmp	r0, r10	@ tmp495, _31
	beq	.L3242		@,
@ Patches/../C_code.c:4814: 		if (RandBitflags->growth != proc->Option[3]) { reloadUnits = true; } 
	movs	r0, #1	@ reloadUnits,
	str	r0, [sp]	@ reloadUnits, %sfp
.L3242:
@ Patches/../C_code.c:4815: 		if (RandBitflags->levelups != proc->Option[4]) { reloadUnits = true; } 
	movs	r0, #61	@ tmp497,
	ldrsb	r0, [r4, r0]	@ _35,
@ Patches/../C_code.c:4815: 		if (RandBitflags->levelups != proc->Option[4]) { reloadUnits = true; } 
	lsls	r3, r3, #26	@ tmp502, *RandBitflags.265_24,
@ Patches/../C_code.c:4815: 		if (RandBitflags->levelups != proc->Option[4]) { reloadUnits = true; } 
	str	r0, [sp, #28]	@ _35, %sfp
@ Patches/../C_code.c:4815: 		if (RandBitflags->levelups != proc->Option[4]) { reloadUnits = true; } 
	lsrs	r3, r3, #30	@ tmp503, tmp502,
@ Patches/../C_code.c:4815: 		if (RandBitflags->levelups != proc->Option[4]) { reloadUnits = true; } 
	cmp	r3, r0	@ tmp503, _35
	beq	.L3243		@,
@ Patches/../C_code.c:4815: 		if (RandBitflags->levelups != proc->Option[4]) { reloadUnits = true; } 
	movs	r3, #1	@ reloadUnits,
	str	r3, [sp]	@ reloadUnits, %sfp
.L3243:
@ Patches/../C_code.c:4816: 		if (RandBitflags->caps != proc->Option[5]) { reloadUnits = true; } 
	movs	r3, #62	@ tmp505,
	ldrsb	r0, [r4, r3]	@ _39,
@ Patches/../C_code.c:4816: 		if (RandBitflags->caps != proc->Option[5]) { reloadUnits = true; } 
	ldrh	r3, [r2]	@ *RandBitflags.265_24, *RandBitflags.265_24
	lsls	r3, r3, #23	@ tmp510, *RandBitflags.265_24,
@ Patches/../C_code.c:4816: 		if (RandBitflags->caps != proc->Option[5]) { reloadUnits = true; } 
	str	r0, [sp, #32]	@ _39, %sfp
@ Patches/../C_code.c:4816: 		if (RandBitflags->caps != proc->Option[5]) { reloadUnits = true; } 
	lsrs	r3, r3, #29	@ tmp511, tmp510,
@ Patches/../C_code.c:4816: 		if (RandBitflags->caps != proc->Option[5]) { reloadUnits = true; } 
	cmp	r3, r0	@ tmp511, _39
	beq	.L3244		@,
@ Patches/../C_code.c:4816: 		if (RandBitflags->caps != proc->Option[5]) { reloadUnits = true; } 
	movs	r3, #1	@ reloadUnits,
	str	r3, [sp]	@ reloadUnits, %sfp
.L3244:
@ Patches/../C_code.c:4817: 		if (RandBitflags->class != proc->Option[6]) { reloadUnits = true; } 
	movs	r3, #63	@ tmp513,
	ldrsb	r0, [r4, r3]	@ _43,
@ Patches/../C_code.c:4817: 		if (RandBitflags->class != proc->Option[6]) { reloadUnits = true; } 
	ldrb	r3, [r2, #1]	@ *RandBitflags.265_24, *RandBitflags.265_24
	lsls	r3, r3, #29	@ tmp518, *RandBitflags.265_24,
@ Patches/../C_code.c:4817: 		if (RandBitflags->class != proc->Option[6]) { reloadUnits = true; } 
	str	r0, [sp, #36]	@ _43, %sfp
@ Patches/../C_code.c:4817: 		if (RandBitflags->class != proc->Option[6]) { reloadUnits = true; } 
	lsrs	r3, r3, #30	@ tmp519, tmp518,
@ Patches/../C_code.c:4817: 		if (RandBitflags->class != proc->Option[6]) { reloadUnits = true; } 
	cmp	r3, r0	@ tmp519, _43
	beq	.L3245		@,
@ Patches/../C_code.c:4817: 		if (RandBitflags->class != proc->Option[6]) { reloadUnits = true; } 
	movs	r3, #1	@ reloadUnits,
	str	r3, [sp]	@ reloadUnits, %sfp
.L3245:
@ Patches/../C_code.c:4818: 		if (RandBitflags->playerBonus != proc->Option[12]) { reloadUnits = true; } 
	movs	r0, #69	@ tmp528,
@ Patches/../C_code.c:4818: 		if (RandBitflags->playerBonus != proc->Option[12]) { reloadUnits = true; } 
	ldrh	r3, [r2, #2]	@ *RandBitflags.265_24, *RandBitflags.265_24
@ Patches/../C_code.c:4818: 		if (RandBitflags->playerBonus != proc->Option[12]) { reloadUnits = true; } 
	ldrsb	r0, [r4, r0]	@ tmp529,
@ Patches/../C_code.c:4818: 		if (RandBitflags->playerBonus != proc->Option[12]) { reloadUnits = true; } 
	lsls	r3, r3, #20	@ tmp525, *RandBitflags.265_24,
	lsrs	r3, r3, #27	@ tmp526, tmp525,
@ Patches/../C_code.c:4818: 		if (RandBitflags->playerBonus != proc->Option[12]) { reloadUnits = true; } 
	cmp	r3, r0	@ tmp526, tmp529
	beq	.L3246		@,
@ Patches/../C_code.c:4818: 		if (RandBitflags->playerBonus != proc->Option[12]) { reloadUnits = true; } 
	movs	r3, #1	@ reloadUnits,
	str	r3, [sp]	@ reloadUnits, %sfp
.L3246:
@ Patches/../C_code.c:4819: 		if (RandValues->bonus != proc->Option[13]) { reloadUnits = true; } 
	movs	r5, #70	@ tmp537,
@ Patches/../C_code.c:4819: 		if (RandValues->bonus != proc->Option[13]) { reloadUnits = true; } 
	ldrb	r0, [r1, #3]	@ *RandValues.262_11, *RandValues.262_11
@ Patches/../C_code.c:4819: 		if (RandValues->bonus != proc->Option[13]) { reloadUnits = true; } 
	ldrsb	r5, [r4, r5]	@ tmp538,
@ Patches/../C_code.c:4819: 		if (RandValues->bonus != proc->Option[13]) { reloadUnits = true; } 
	lsls	r3, r0, #26	@ tmp534, *RandValues.262_11,
	lsrs	r3, r3, #27	@ tmp535, tmp534,
@ Patches/../C_code.c:4819: 		if (RandValues->bonus != proc->Option[13]) { reloadUnits = true; } 
	cmp	r3, r5	@ tmp535, tmp538
	beq	.L3247		@,
@ Patches/../C_code.c:4819: 		if (RandValues->bonus != proc->Option[13]) { reloadUnits = true; } 
	movs	r3, #1	@ reloadUnits,
	str	r3, [sp]	@ reloadUnits, %sfp
.L3247:
@ Patches/../C_code.c:4820: 		if (DisplayRandomSkillsOption) {
	ldr	r3, .L3448+12	@ tmp1317,
	mov	r8, r3	@ tmp1317, tmp1317
@ Patches/../C_code.c:4820: 		if (DisplayRandomSkillsOption) {
	ldr	r3, [r3]	@ DisplayRandomSkillsOption, DisplayRandomSkillsOption
	cmp	r3, #0	@ DisplayRandomSkillsOption,
	beq	.L3248		@,
@ Patches/../C_code.c:4821: 			if (RandValues->skills != proc->Option[17]) { reloadUnits = true; } 
	movs	r3, #74	@ tmp548,
	ldrsb	r3, [r4, r3]	@ tmp549,
@ Patches/../C_code.c:4821: 			if (RandValues->skills != proc->Option[17]) { reloadUnits = true; } 
	lsrs	r0, r0, #6	@ tmp546, *RandValues.262_11,
@ Patches/../C_code.c:4821: 			if (RandValues->skills != proc->Option[17]) { reloadUnits = true; } 
	cmp	r0, r3	@ tmp546, tmp549
	beq	.L3248		@,
@ Patches/../C_code.c:4821: 			if (RandValues->skills != proc->Option[17]) { reloadUnits = true; } 
	movs	r3, #1	@ reloadUnits,
	str	r3, [sp]	@ reloadUnits, %sfp
.L3248:
@ Patches/../C_code.c:4824: 		RandValues->seed = proc->seed; 
	movs	r0, #31	@ tmp553,
	ldr	r3, [sp, #16]	@ _17, %sfp
	ands	r0, r3	@ tmp554, _17
	ldr	r3, [sp, #12]	@ _14, %sfp
	lsls	r3, r3, #12	@ tmp558, _14,
	lsls	r0, r0, #20	@ tmp556, tmp554,
	lsrs	r3, r3, #12	@ tmp557, tmp558,
	orrs	r3, r0	@ tmp560, tmp556
	ldr	r0, [r1]	@ MEM[(struct RandomizerValues *)RandValues.262_11], MEM[(struct RandomizerValues *)RandValues.262_11]
	lsrs	r0, r0, #25	@ tmp564, MEM[(struct RandomizerValues *)RandValues.262_11],
	lsls	r0, r0, #25	@ tmp562, tmp564,
	orrs	r3, r0	@ tmp565, tmp562
	str	r3, [r1]	@ tmp565, MEM[(struct RandomizerValues *)RandValues.262_11]
@ Patches/../C_code.c:4826: 		RecruitValues->recruitment = proc->Option[1]; 
	mov	r3, r9	@ RecruitValues.264_19, RecruitValues.264_19
	ldrb	r1, [r3]	@ MEM[(struct RecruitmentValues *)RecruitValues.264_19], MEM[(struct RecruitmentValues *)RecruitValues.264_19]
	movs	r3, #15	@ tmp569,
	ldr	r0, [sp, #20]	@ _22, %sfp
	bics	r1, r3	@ tmp568, tmp569
	subs	r3, r3, #8	@ tmp573,
	ands	r0, r3	@ _22, tmp573
	orrs	r1, r0	@ tmp581, tmp572
	mov	r0, r9	@ RecruitValues.264_19, RecruitValues.264_19
	strb	r1, [r0]	@ tmp581, MEM[(struct RecruitmentValues *)RecruitValues.264_19]
@ Patches/../C_code.c:4828: 		RandBitflags->base = proc->Option[2]; 
	movs	r1, #3	@ tmp586,
	mov	r0, r10	@ tmp587, _31
	ands	r0, r1	@ tmp587, tmp586
	lsls	r0, r0, #2	@ tmp589, tmp587,
	mov	ip, r0	@ tmp589, tmp589
	mov	r5, ip	@ tmp589, tmp589
	ldr	r0, [sp, #24]	@ _27, %sfp
	ands	r0, r1	@ _27, tmp586
	orrs	r0, r5	@ tmp596, tmp589
	ldr	r5, [sp, #28]	@ _35, %sfp
	ands	r1, r5	@ tmp601, _35
	lsls	r1, r1, #4	@ tmp603, tmp601,
	orrs	r1, r0	@ tmp604, tmp596
	ldr	r0, [sp, #32]	@ _39, %sfp
	ands	r3, r0	@ tmp609, _39
@ Patches/../C_code.c:4830: 		if (proc->Option[3] > 3) { RandBitflags->grow50 = true; } 
	mov	r0, r10	@ _31, _31
@ Patches/../C_code.c:4828: 		RandBitflags->base = proc->Option[2]; 
	lsls	r3, r3, #6	@ tmp611, tmp609,
	orrs	r3, r1	@ tmp612, tmp604
@ Patches/../C_code.c:4830: 		if (proc->Option[3] > 3) { RandBitflags->grow50 = true; } 
	movs	r1, #1	@ tmp613,
	cmp	r0, #3	@ _31,
	bgt	.LCB20733	@
	b	.L3435	@long jump	@
.LCB20733:
.L3249:
@ Patches/../C_code.c:4828: 		RandBitflags->base = proc->Option[2]; 
	lsls	r1, r1, #28	@ tmp619, tmp613,
	orrs	r3, r1	@ tmp621, tmp619
	ldr	r0, .L3448+16	@ tmp625,
	ldr	r1, [r2]	@ MEM[(struct RandomizerSettings *)RandBitflags.265_24], MEM[(struct RandomizerSettings *)RandBitflags.265_24]
	ands	r1, r0	@ tmp623, tmp625
	orrs	r3, r1	@ tmp626, tmp623
	str	r3, [r2]	@ tmp626, MEM[(struct RandomizerSettings *)RandBitflags.265_24]
@ Patches/../C_code.c:4835: 		if (proc->Option[6] == 4) { RandBitflags->class = 1; RecruitValues->newClasses = 1; } 
	ldr	r3, [sp, #36]	@ _43, %sfp
	cmp	r3, #4	@ _43,
	bne	.LCB20746	@
	b	.L3250	@long jump	@
.LCB20746:
@ Patches/../C_code.c:4834: 		RandBitflags->class = proc->Option[6];
	movs	r1, #3	@ tmp633,
	movs	r0, #6	@ tmp639,
	ands	r1, r3	@ tmp632, _43
	ldrb	r3, [r2, #1]	@ RandBitflags.265_24->class, RandBitflags.265_24->class
	lsls	r1, r1, #1	@ tmp635, tmp632,
	bics	r3, r0	@ tmp638, tmp639
	orrs	r3, r1	@ tmp642, tmp635
	strb	r3, [r2, #1]	@ tmp642, RandBitflags.265_24->class
.L3251:
@ Patches/../C_code.c:4836: 		RandBitflags->itemStats = ((proc->Option[7] == 1) || (proc->Option[7] == 3)); 
	movs	r3, #64	@ tmp666,
@ Patches/../C_code.c:4837: 		RandBitflags->foundItems = ((proc->Option[7] == 1) || (proc->Option[7] == 2)); 
	movs	r1, #0	@ tmp676,
	movs	r5, #1	@ tmp675,
@ Patches/../C_code.c:4836: 		RandBitflags->itemStats = ((proc->Option[7] == 1) || (proc->Option[7] == 3)); 
	ldrsb	r3, [r4, r3]	@ _373,
@ Patches/../C_code.c:4837: 		RandBitflags->foundItems = ((proc->Option[7] == 1) || (proc->Option[7] == 2)); 
	subs	r0, r3, #1	@ tmp668, _373,
	lsls	r0, r0, #24	@ tmp673, tmp668,
	lsrs	r0, r0, #24	@ tmp672, tmp673,
	cmp	r5, r0	@ tmp675, tmp672
	adcs	r1, r1, r1	@ tmp674, tmp676, tmp676
@ Patches/../C_code.c:4836: 		RandBitflags->itemStats = ((proc->Option[7] == 1) || (proc->Option[7] == 3)); 
	movs	r0, #2	@ tmp679,
	bics	r3, r0	@ tmp681, tmp679
	subs	r3, r3, #1	@ tmp684,
	rsbs	r0, r3, #0	@ tmp685, tmp684
	adcs	r3, r3, r0	@ tmp683, tmp684, tmp685
@ Patches/../C_code.c:4838: 		RandBitflags->shopItems = ((proc->Option[7] == 1) || (proc->Option[7] == 2)); 
	lsls	r0, r1, #12	@ tmp687, _72,
	lsls	r1, r1, #11	@ tmp688, _72,
	orrs	r1, r0	@ tmp689, tmp687
	lsls	r3, r3, #19	@ tmp686, tmp683,
	ldr	r0, .L3448+20	@ tmp695,
	orrs	r3, r1	@ tmp691, tmp689
	ldr	r1, [r2]	@ MEM[(struct RandomizerSettings *)RandBitflags.265_24], MEM[(struct RandomizerSettings *)RandBitflags.265_24]
	ands	r1, r0	@ tmp693, tmp695
	orrs	r3, r1	@ tmp696, tmp693
	str	r3, [r2]	@ tmp696, MEM[(struct RandomizerSettings *)RandBitflags.265_24]
@ Patches/../C_code.c:4839: 		if (proc->Option[8] == 1){ SetFlag(CasualModeFlag); } 
	ldr	r3, .L3448+24	@ tmp697,
	ldr	r0, [r3]	@ pretmp_579, CasualModeFlag
@ Patches/../C_code.c:4839: 		if (proc->Option[8] == 1){ SetFlag(CasualModeFlag); } 
	movs	r3, #65	@ tmp698,
@ Patches/../C_code.c:4839: 		if (proc->Option[8] == 1){ SetFlag(CasualModeFlag); } 
	ldrsb	r3, [r4, r3]	@ tmp699,
	cmp	r3, #1	@ tmp699,
	bne	.LCB20789	@
	b	.L3436	@long jump	@
.LCB20789:
@ Patches/../C_code.c:4840: 		else { UnsetFlag(CasualModeFlag); } 
	ldr	r3, .L3448+28	@ tmp701,
	bl	.L14		@
.L3253:
@ Patches/../C_code.c:4842: 		RandBitflags->randMusic = proc->Option[9]; 
	ldr	r3, [sp, #8]	@ tmp1316, %sfp
	ldr	r2, [r3]	@ RandBitflags.292_78, RandBitflags
@ Patches/../C_code.c:4843: 		RandBitflags->colours = proc->Option[10]; 
	movs	r3, #67	@ tmp703,
@ Patches/../C_code.c:4842: 		RandBitflags->randMusic = proc->Option[9]; 
	movs	r0, #7	@ tmp709,
	ldrb	r3, [r4, r3]	@ tmp707,
	ands	r0, r3	@ tmp710, tmp707
@ Patches/../C_code.c:4842: 		RandBitflags->randMusic = proc->Option[9]; 
	movs	r3, #66	@ tmp713,
@ Patches/../C_code.c:4842: 		RandBitflags->randMusic = proc->Option[9]; 
	movs	r1, #3	@ tmp719,
	ldrb	r3, [r4, r3]	@ tmp717,
	ands	r3, r1	@ tmp720, tmp719
	lsls	r0, r0, #16	@ tmp712, tmp710,
	lsls	r3, r3, #14	@ tmp722, tmp720,
	orrs	r3, r0	@ tmp723, tmp712
@ Patches/../C_code.c:4844: 		RandBitflags->itemDur = proc->Option[11]; 
	movs	r0, #68	@ tmp724,
@ Patches/../C_code.c:4842: 		RandBitflags->randMusic = proc->Option[9]; 
	ldrb	r0, [r4, r0]	@ tmp728,
	ands	r0, r1	@ tmp731, tmp719
	lsls	r0, r0, #21	@ tmp733, tmp731,
	orrs	r0, r3	@ tmp734, tmp723
@ Patches/../C_code.c:4845: 		RandBitflags->playerBonus = proc->Option[12]; 
	movs	r3, #69	@ tmp735,
@ Patches/../C_code.c:4842: 		RandBitflags->randMusic = proc->Option[9]; 
	ldrb	r1, [r4, r3]	@ tmp739,
	subs	r3, r3, #38	@ tmp741,
	ands	r1, r3	@ tmp742, tmp741
	lsls	r1, r1, #23	@ tmp744, tmp742,
	ldr	r5, .L3448+32	@ tmp750,
	orrs	r1, r0	@ tmp746, tmp734
	ldr	r0, [r2]	@ MEM[(struct RandomizerSettings *)RandBitflags.292_78], MEM[(struct RandomizerSettings *)RandBitflags.292_78]
	ands	r0, r5	@ tmp748, tmp750
	orrs	r1, r0	@ tmp751, tmp748
	str	r1, [r2]	@ tmp751, MEM[(struct RandomizerSettings *)RandBitflags.292_78]
@ Patches/../C_code.c:4846: 		RandValues->bonus = proc->Option[13];
	mov	r1, fp	@ tmp1315, tmp1315
	ldr	r0, [r1]	@ RandValues.296_87, RandValues
@ Patches/../C_code.c:4846: 		RandValues->bonus = proc->Option[13];
	movs	r1, #70	@ tmp753,
@ Patches/../C_code.c:4846: 		RandValues->bonus = proc->Option[13];
	movs	r5, #62	@ tmp767,
	ldrb	r1, [r4, r1]	@ tmp759,
	ands	r3, r1	@ tmp760, tmp759
	ldrb	r1, [r0, #3]	@ RandValues.296_87->bonus, RandValues.296_87->bonus
	lsls	r3, r3, #1	@ tmp763, tmp760,
	bics	r1, r5	@ tmp766, tmp767
	orrs	r3, r1	@ tmp770, tmp766
	strb	r3, [r0, #3]	@ tmp770, RandValues.296_87->bonus
@ Patches/../C_code.c:4848: 		if (DisplayRandomSkillsOption) {
	mov	r3, r8	@ tmp1317, tmp1317
	ldr	r3, [r3]	@ DisplayRandomSkillsOption, DisplayRandomSkillsOption
	cmp	r3, #0	@ DisplayRandomSkillsOption,
	beq	.L3254		@,
@ Patches/../C_code.c:4849: 			RandValues->skills = proc->Option[17]; 
	movs	r3, #74	@ tmp774,
@ Patches/../C_code.c:4849: 			RandValues->skills = proc->Option[17]; 
	ldrb	r1, [r0, #3]	@ RandValues.296_87->skills, RandValues.296_87->skills
	ldrb	r2, [r4, r3]	@ tmp778,
	subs	r3, r3, #11	@ tmp785,
	lsls	r2, r2, #6	@ tmp779, tmp778,
	ands	r3, r1	@ tmp784, RandValues.296_87->skills
	orrs	r3, r2	@ tmp788, tmp779
@ Patches/../C_code.c:4850: 			AlwaysSkill[0] = proc->skill; 
	movs	r2, #55	@ tmp791,
@ Patches/../C_code.c:4849: 			RandValues->skills = proc->Option[17]; 
	strb	r3, [r0, #3]	@ tmp788, RandValues.296_87->skills
@ Patches/../C_code.c:4850: 			AlwaysSkill[0] = proc->skill; 
	ldr	r3, .L3448+36	@ tmp790,
@ Patches/../C_code.c:4850: 			AlwaysSkill[0] = proc->skill; 
	ldrb	r2, [r4, r2]	@ _93,
@ Patches/../C_code.c:4850: 			AlwaysSkill[0] = proc->skill; 
	ldr	r3, [r3]	@ AlwaysSkill.299_92, AlwaysSkill
@ Patches/../C_code.c:4850: 			AlwaysSkill[0] = proc->skill; 
	strb	r2, [r3]	@ _93, *AlwaysSkill.299_92
@ Patches/../C_code.c:4865: 		if (RandBitflags->fog != proc->Option[14]) { 
	ldr	r3, [sp, #8]	@ tmp1316, %sfp
	ldr	r2, [r3]	@ RandBitflags.292_78, RandBitflags
.L3254:
@ Patches/../C_code.c:4853: 		if (DisplayTimedHitsOption) { 
	ldr	r3, .L3448+40	@ tmp794,
@ Patches/../C_code.c:4853: 		if (DisplayTimedHitsOption) { 
	ldr	r3, [r3]	@ DisplayTimedHitsOption, DisplayTimedHitsOption
	cmp	r3, #0	@ DisplayTimedHitsOption,
	beq	.L3256		@,
@ Patches/../C_code.c:4854: 			int timedHits = proc->Option[16];
	movs	r3, #73	@ tmp796,
@ Patches/../C_code.c:4857: 			TimedHitsDifficultyRam->difficulty = 0; 
	movs	r5, #127	@ tmp801,
@ Patches/../C_code.c:4854: 			int timedHits = proc->Option[16];
	ldrsb	r0, [r4, r3]	@ timedHits,
@ Patches/../C_code.c:4855: 			TimedHitsDifficultyRam->off = false;
	ldr	r3, .L3448+44	@ tmp797,
	ldr	r3, [r3]	@ TimedHitsDifficultyRam.301_96, TimedHitsDifficultyRam
@ Patches/../C_code.c:4857: 			TimedHitsDifficultyRam->difficulty = 0; 
	ldrb	r1, [r3]	@ MEM[(struct TimedHitsDifficultyStruct *)TimedHitsDifficultyRam.301_96], MEM[(struct TimedHitsDifficultyStruct *)TimedHitsDifficultyRam.301_96]
	bics	r1, r5	@ tmp800, tmp801
	strb	r1, [r3]	@ tmp800, MEM[(struct TimedHitsDifficultyStruct *)TimedHitsDifficultyRam.301_96]
@ Patches/../C_code.c:4858: 			if (timedHits == 0) { TimedHitsDifficultyRam->off = true; }  
	cmp	r0, #0	@ timedHits,
	beq	.LCB20879	@
	b	.L3257	@long jump	@
.LCB20879:
@ Patches/../C_code.c:4858: 			if (timedHits == 0) { TimedHitsDifficultyRam->off = true; }  
	movs	r0, #64	@ tmp811,
	lsls	r1, r1, #24	@ TimedHitsDifficultyRam.301_96->off,,
	lsrs	r1, r1, #24	@ TimedHitsDifficultyRam.301_96->off, TimedHitsDifficultyRam.301_96->off,
	orrs	r1, r0	@ tmp813, tmp811
	strb	r1, [r3]	@ tmp813,* TimedHitsDifficultyRam.301_96
.L3256:
@ Patches/../C_code.c:4865: 		if (RandBitflags->fog != proc->Option[14]) { 
	movs	r3, #71	@ tmp845,
	mov	r8, r3	@ tmp845, tmp845
	ldrsb	r0, [r4, r3]	@ _100,
@ Patches/../C_code.c:4865: 		if (RandBitflags->fog != proc->Option[14]) { 
	ldrb	r3, [r2, #3]	@ *prephitmp_567, *prephitmp_567
	lsls	r3, r3, #25	@ tmp850, *prephitmp_567,
	lsrs	r3, r3, #30	@ tmp851, tmp850,
@ Patches/../C_code.c:4865: 		if (RandBitflags->fog != proc->Option[14]) { 
	cmp	r3, r0	@ tmp851, _100
	beq	.L3261		@,
@ Patches/../C_code.c:4866: 			if ((proc->Option[14] == 1) && proc->calledFromChapter) { 
	cmp	r0, #1	@ _100,
	bne	.LCB20898	@
	b	.L3437	@long jump	@
.LCB20898:
.L3262:
@ Patches/../C_code.c:4869: 			if ((proc->Option[14] == 2) && proc->calledFromChapter) { 
	cmp	r0, #2	@ _100,
	bne	.LCB20901	@
	b	.L3438	@long jump	@
.LCB20901:
.L3264:
@ Patches/../C_code.c:4872: 			if ((proc->Option[14] == 0) && proc->calledFromChapter) { 
	cmp	r0, #0	@ _100,
	bne	.L3422		@,
@ Patches/../C_code.c:4872: 			if ((proc->Option[14] == 0) && proc->calledFromChapter) { 
	movs	r3, #53	@ tmp863,
@ Patches/../C_code.c:4872: 			if ((proc->Option[14] == 0) && proc->calledFromChapter) { 
	ldrb	r3, [r4, r3]	@ tmp864,
	cmp	r3, #0	@ tmp864,
	beq	.LCB20908	@
	b	.L3267	@long jump	@
.LCB20908:
.L3422:
@ Patches/../C_code.c:4876: 		RandBitflags->fog = proc->Option[14]; 
	ldr	r3, [sp, #8]	@ tmp1316, %sfp
	ldr	r2, [r3]	@ RandBitflags.292_78, RandBitflags
.L3261:
@ Patches/../C_code.c:4876: 		RandBitflags->fog = proc->Option[14]; 
	movs	r1, #3	@ tmp876,
	ands	r1, r0	@ tmp875, _100
	movs	r0, #96	@ tmp882,
	ldrb	r3, [r2, #3]	@ prephitmp_578->fog, prephitmp_578->fog
	lsls	r1, r1, #5	@ tmp878, tmp875,
	bics	r3, r0	@ tmp881, tmp882
	orrs	r3, r1	@ tmp885, tmp878
	strb	r3, [r2, #3]	@ tmp885, prephitmp_578->fog
@ Patches/../C_code.c:4878: 		RecruitmentProc* recruitmentProc = Proc_Find(RecruitmentProcCmd1); 
	ldr	r3, .L3448+48	@ tmp1320,
	movs	r0, r3	@ tmp888, tmp1320
	mov	r8, r3	@ tmp1320, tmp1320
	ldr	r3, .L3448+52	@ tmp1321,
	adds	r0, r0, #16	@ tmp888,
	mov	r10, r3	@ tmp1321, tmp1321
	bl	.L14		@
@ Patches/../C_code.c:4879: 		if (recruitmentProc) { Proc_Break(recruitmentProc); } 
	ldr	r3, .L3448+56	@ tmp1322,
	mov	fp, r3	@ tmp1322, tmp1322
@ Patches/../C_code.c:4879: 		if (recruitmentProc) { Proc_Break(recruitmentProc); } 
	cmp	r0, #0	@ recruitmentProc,
	beq	.L3268		@,
@ Patches/../C_code.c:4879: 		if (recruitmentProc) { Proc_Break(recruitmentProc); } 
	bl	.L14		@
.L3268:
@ Patches/../C_code.c:4880: 		recruitmentProc = Proc_Find(RecruitmentProcCmd2); 
	mov	r0, r8	@ tmp892, tmp1320
	adds	r0, r0, #48	@ tmp892,
	bl	.L785		@
@ Patches/../C_code.c:4881: 		if (recruitmentProc) { Proc_Break(recruitmentProc); } 
	cmp	r0, #0	@ recruitmentProc,
	beq	.L3269		@,
@ Patches/../C_code.c:4881: 		if (recruitmentProc) { Proc_Break(recruitmentProc); } 
	bl	.L434		@
.L3269:
@ Patches/../C_code.c:4882: 		recruitmentProc = Proc_Find(RecruitmentProcCmd3); 
	mov	r0, r8	@ tmp896, tmp1320
	adds	r0, r0, #80	@ tmp896,
	bl	.L785		@
@ Patches/../C_code.c:4883: 		if (recruitmentProc) { Proc_Break(recruitmentProc); } 
	cmp	r0, #0	@ recruitmentProc,
	beq	.L3270		@,
@ Patches/../C_code.c:4883: 		if (recruitmentProc) { Proc_Break(recruitmentProc); } 
	bl	.L434		@
.L3270:
@ Patches/../C_code.c:4884: 		recruitmentProc = Proc_Find(RecruitmentProcCmd4); 
	mov	r0, r8	@ tmp1320, tmp1320
	adds	r0, r0, #112	@ tmp1320,
	bl	.L785		@
@ Patches/../C_code.c:4885: 		if (recruitmentProc) { Proc_Break(recruitmentProc); } 
	cmp	r0, #0	@ recruitmentProc,
	beq	.L3271		@,
@ Patches/../C_code.c:4885: 		if (recruitmentProc) { Proc_Break(recruitmentProc); } 
	bl	.L434		@
.L3271:
@ Patches/../C_code.c:4888: 		if (proc->Option[15] && ((id + offset) == (SRR_TotalOptions-2))) { 
	movs	r3, #72	@ tmp903,
@ Patches/../C_code.c:4888: 		if (proc->Option[15] && ((id + offset) == (SRR_TotalOptions-2))) { 
	ldrsb	r3, [r4, r3]	@ tmp904,
	cmp	r3, #0	@ tmp904,
	beq	.L3272		@,
@ Patches/../C_code.c:4888: 		if (proc->Option[15] && ((id + offset) == (SRR_TotalOptions-2))) { 
	ldr	r3, [sp, #4]	@ offset, %sfp
	mov	ip, r3	@ offset, offset
@ Patches/../C_code.c:4888: 		if (proc->Option[15] && ((id + offset) == (SRR_TotalOptions-2))) { 
	subs	r7, r7, #2	@ tmp906,
@ Patches/../C_code.c:4888: 		if (proc->Option[15] && ((id + offset) == (SRR_TotalOptions-2))) { 
	add	r6, r6, ip	@ tmp905, offset
@ Patches/../C_code.c:4888: 		if (proc->Option[15] && ((id + offset) == (SRR_TotalOptions-2))) { 
	cmp	r6, r7	@ tmp905, tmp906
	bne	.L3272		@,
@ Patches/../C_code.c:4892: 			if (proc->calledFromChapter) { 
	movs	r3, #53	@ tmp907,
@ Patches/../C_code.c:4892: 			if (proc->calledFromChapter) { 
	ldrb	r3, [r4, r3]	@ tmp908,
	cmp	r3, #0	@ tmp908,
	beq	.LCB20973	@
	b	.L3439	@long jump	@
.LCB20973:
.L3272:
@ Patches/../C_code.c:4904: 		RandBitflags->disp = 1; 
	ldr	r3, [sp, #8]	@ tmp1316, %sfp
	ldr	r6, .L3448+60	@ ivtmp.1918,
	ldr	r2, [r3]	@ RandBitflags, RandBitflags
	movs	r3, #128	@ tmp917,
	movs	r5, r6	@ _275, ivtmp.1918
	ldrb	r1, [r2, #3]	@ RandBitflags.311_114->disp, RandBitflags.311_114->disp
	rsbs	r3, r3, #0	@ tmp917, tmp917
	orrs	r3, r1	@ tmp916, RandBitflags.311_114->disp
	adds	r5, r5, #33	@ _275,
	strb	r3, [r2, #3]	@ tmp916, RandBitflags.311_114->disp
	ldr	r7, .L3448+64	@ tmp1323,
	adds	r5, r5, #255	@ _275,
.L3273:
@ Patches/../C_code.c:4909: 			ClearText(&th[i]);
	movs	r0, r6	@, ivtmp.1918
@ Patches/../C_code.c:4908: 		for (int i = 0; i < 36; ++i) { 
	adds	r6, r6, #8	@ ivtmp.1918,
@ Patches/../C_code.c:4909: 			ClearText(&th[i]);
	bl	.L223		@
@ Patches/../C_code.c:4908: 		for (int i = 0; i < 36; ++i) { 
	cmp	r6, r5	@ ivtmp.1918, _275
	bne	.L3273		@,
@ Patches/../C_code.c:4912: 		if (reloadUnits) { proc->reloadUnits = true; *MaxClasses = 0; } 
	ldr	r3, [sp]	@ reloadUnits, %sfp
	cmp	r3, #0	@ reloadUnits,
	beq	.LCB20996	@
	b	.L3440	@long jump	@
.LCB20996:
	b	.L3449		@
.L3450:
	.align	2
.L3448:
	.word	RandValues
	.word	RecruitValues
	.word	RandBitflags
	.word	DisplayRandomSkillsOption
	.word	-268435968
	.word	-1587201
	.word	CasualModeFlag
	.word	UnsetFlag
	.word	-266846209
	.word	AlwaysSkill
	.word	DisplayTimedHitsOption
	.word	TimedHitsDifficultyRam
	.word	.LANCHOR0
	.word	Proc_Find
	.word	Proc_Break
	.word	gStatScreen+24
	.word	ClearText
.L3449:
.L3274:
@ Patches/../C_code.c:4914: 		Proc_Break((ProcPtr)proc);
	movs	r0, r4	@, proc
	bl	.L434		@
.L3232:
@ Patches/../C_code.c:5047: } 
	add	sp, sp, #44	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3429:
@ Patches/../C_code.c:4802: 	if (!proc->freezeSeed) { proc->seed = GetInitialSeed(2); proc->redraw = true; } 
	movs	r0, #2	@,
	bl	GetInitialSeed		@
@ Patches/../C_code.c:4802: 	if (!proc->freezeSeed) { proc->seed = GetInitialSeed(2); proc->redraw = true; } 
	movs	r3, #50	@ tmp444,
	movs	r2, #1	@ tmp445,
@ Patches/../C_code.c:4802: 	if (!proc->freezeSeed) { proc->seed = GetInitialSeed(2); proc->redraw = true; } 
	str	r0, [r4, #44]	@ tmp1341, proc_282(D)->seed
@ Patches/../C_code.c:4802: 	if (!proc->freezeSeed) { proc->seed = GetInitialSeed(2); proc->redraw = true; } 
	strb	r2, [r4, r3]	@ tmp445, proc_282(D)->redraw
	b	.L3237		@
.L3427:
@ Patches/../C_code.c:4792:         DisplayUiVArrow(MENU_X+(8*8), MENU_Y+8, 0x3240, 1); // up arrow 
	movs	r2, #201	@,
	movs	r3, #1	@,
	movs	r1, #16	@,
	movs	r0, #82	@,
	ldr	r6, .L3451	@ tmp1313,
	lsls	r2, r2, #6	@,,
	bl	.L341		@
@ Patches/../C_code.c:4795: 	if ((SRR_TotalOptions > SRR_MAXDISP) && (proc->offset < (SRR_TotalOptions - SRR_MAXDISP))) {
	cmp	r7, #7	@ pretmp_593,
	bgt	.LCB21062	@
	b	.L3235	@long jump	@
.LCB21062:
@ Patches/../C_code.c:4795: 	if ((SRR_TotalOptions > SRR_MAXDISP) && (proc->offset < (SRR_TotalOptions - SRR_MAXDISP))) {
	ldrb	r2, [r4, r5]	@ tmp437,
@ Patches/../C_code.c:4795: 	if ((SRR_TotalOptions > SRR_MAXDISP) && (proc->offset < (SRR_TotalOptions - SRR_MAXDISP))) {
	subs	r3, r7, #7	@ tmp438, pretmp_593,
@ Patches/../C_code.c:4795: 	if ((SRR_TotalOptions > SRR_MAXDISP) && (proc->offset < (SRR_TotalOptions - SRR_MAXDISP))) {
	cmp	r2, r3	@ tmp437, tmp438
	blt	.LCB21066	@
	b	.L3235	@long jump	@
.LCB21066:
	b	.L3332		@
.L3317:
@ Patches/../C_code.c:5017:     else if (keys & DPAD_UP) {
	lsls	r3, r5, #25	@ tmp1364, keys,
	bpl	.LCB21076	@
	b	.L3321	@long jump	@
.LCB21076:
	movs	r3, #16	@ tmp1173,
	ands	r3, r5	@ tmp1173, keys
	mov	r9, r3	@ _514, tmp1173
.L3320:
@ Patches/../C_code.c:5024:     else if (keys & DPAD_RIGHT) {
	mov	r3, r9	@ _514, _514
	cmp	r3, #0	@ _514,
	bne	.LCB21086	@
	b	.L3324	@long jump	@
.LCB21086:
@ Patches/../C_code.c:5025: 		id--; id += offset; 
	ldr	r3, [sp, #4]	@ offset, %sfp
	mov	ip, r3	@ offset, offset
@ Patches/../C_code.c:5025: 		id--; id += offset; 
	subs	r6, r6, #1	@ id,
@ Patches/../C_code.c:5025: 		id--; id += offset; 
	add	r6, r6, ip	@ id, offset
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	adds	r3, r4, r6	@ tmp1319, proc, id
	movs	r2, r3	@ tmp1210, tmp1319
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	movs	r0, #36	@ tmp1212,
	ldr	r1, .L3451+4	@ tmp1211,
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	adds	r2, r2, #57	@ tmp1210,
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	adds	r1, r1, r6	@ tmp1213, tmp1211, id
	ldrb	r1, [r1, r0]	@ tmp1214, OptionAmounts
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	ldrb	r2, [r2]	@ _202, *proc_282(D)
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	subs	r1, r1, #1	@ tmp1215,
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	lsls	r2, r2, #24	@ _202, _202,
@ Patches/../C_code.c:5027: 		else { proc->Option[id] = 0;  } 
	movs	r0, #0	@ cstore_123,
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	asrs	r2, r2, #24	@ _202, _202,
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	cmp	r2, r1	@ _202, tmp1215
	bge	.LCB21104	@
	b	.L3441	@long jump	@
.LCB21104:
.L3325:
	adds	r3, r3, #57	@ tmp1221,
	strb	r0, [r3]	@ cstore_123, proc_282(D)->Option[id_335]
.L3424:
@ Patches/../C_code.c:5034: 		proc->redraw = RedrawSome; id++; id -= offset; 
	movs	r3, #50	@ tmp1268,
	movs	r2, #1	@ tmp1269,
	strb	r2, [r4, r3]	@ tmp1269, proc_282(D)->redraw
@ Patches/../C_code.c:5034: 		proc->redraw = RedrawSome; id++; id -= offset; 
	ldr	r3, [sp, #4]	@ offset, %sfp
@ Patches/../C_code.c:5034: 		proc->redraw = RedrawSome; id++; id -= offset; 
	adds	r6, r6, #1	@ id,
@ Patches/../C_code.c:5034: 		proc->redraw = RedrawSome; id++; id -= offset; 
	subs	r6, r6, r3	@ id, id, offset
.L3425:
@ Patches/../C_code.c:5036: 	DisplayHand(SRR_CursorLocationTable[id].x, SRR_CursorLocationTable[id].y, 0); 	
	ldr	r3, .L3451+8	@ tmp1271,
	lsls	r2, r6, #3	@ tmp1272, id,
	adds	r3, r3, r2	@ tmp1273, tmp1271, tmp1272
@ Patches/../C_code.c:5036: 	DisplayHand(SRR_CursorLocationTable[id].x, SRR_CursorLocationTable[id].y, 0); 	
	adds	r3, r3, #100	@,
	ldmia	r3!, {r0, r1}	@,,
@ Patches/../C_code.c:4652: 	else { DisplayUiHand(x, y); } 
	ldr	r3, .L3451+12	@ tmp1279,
	bl	.L14		@
@ Patches/../C_code.c:5037: 	if (proc->redraw == RedrawSome) { 
	movs	r3, #50	@ tmp1280,
	ldrb	r3, [r4, r3]	@ _223,
@ Patches/../C_code.c:5037: 	if (proc->redraw == RedrawSome) { 
	cmp	r3, #1	@ _223,
	beq	.LCB21128	@
	b	.L3329	@long jump	@
.LCB21128:
.L3434:
@ Patches/../C_code.c:5038: 		if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3)) { proc->choosingSkill = true; } 
	ldr	r2, [sp, #4]	@ offset, %sfp
	mov	ip, r2	@ offset, offset
	add	r6, r6, ip	@ tmp1281, offset
@ Patches/../C_code.c:5038: 		if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3)) { proc->choosingSkill = true; } 
	cmp	r6, r7	@ tmp1281, pretmp_593
	bne	.LCB21134	@
	b	.L3442	@long jump	@
.LCB21134:
.L3330:
@ Patches/../C_code.c:5039: 		proc->redraw = RedrawNone; 
	movs	r3, #0	@ tmp1288,
	movs	r5, #50	@ tmp1287,
@ Patches/../C_code.c:5040: 		DrawConfigMenu(proc); 
	movs	r0, r4	@, proc
@ Patches/../C_code.c:5039: 		proc->redraw = RedrawNone; 
	strb	r3, [r4, r5]	@ tmp1288, proc_282(D)->redraw
@ Patches/../C_code.c:5040: 		DrawConfigMenu(proc); 
	bl	DrawConfigMenu		@
@ Patches/../C_code.c:5042: 	if (proc->redraw == RedrawAll) { 
	ldrb	r3, [r4, r5]	@ _223,
	b	.L3329		@
.L3440:
@ Patches/../C_code.c:4912: 		if (reloadUnits) { proc->reloadUnits = true; *MaxClasses = 0; } 
	movs	r3, #54	@ tmp921,
	movs	r2, #1	@ tmp922,
	strb	r2, [r4, r3]	@ tmp922, proc_282(D)->reloadUnits
@ Patches/../C_code.c:4912: 		if (reloadUnits) { proc->reloadUnits = true; *MaxClasses = 0; } 
	movs	r2, #0	@ tmp925,
@ Patches/../C_code.c:4912: 		if (reloadUnits) { proc->reloadUnits = true; *MaxClasses = 0; } 
	ldr	r3, .L3451+16	@ tmp924,
	ldr	r3, [r3]	@ MaxClasses.313_118, MaxClasses
@ Patches/../C_code.c:4912: 		if (reloadUnits) { proc->reloadUnits = true; *MaxClasses = 0; } 
	strb	r2, [r3]	@ tmp925, *MaxClasses.313_118
	b	.L3274		@
.L3435:
@ Patches/../C_code.c:4830: 		if (proc->Option[3] > 3) { RandBitflags->grow50 = true; } 
	movs	r1, #0	@ tmp613,
	b	.L3249		@
.L3281:
@ Patches/../C_code.c:4939: 		if (keys & DPAD_LEFT) {
	ldr	r1, [sp]	@ _592, %sfp
	cmp	r1, #0	@ _592,
	bne	.LCB21164	@
	b	.L3284	@long jump	@
.LCB21164:
@ Patches/../C_code.c:4940: 		  if (proc->digit < (max_digits)) { proc->digit++; }
	cmp	r2, r3	@ _128, result
	bge	.LCB21166	@
	b	.L3443	@long jump	@
.LCB21166:
.L3285:
@ Patches/../C_code.c:4941: 		  else { proc->digit = 0; } 
	movs	r3, #51	@ tmp971,
	movs	r2, #0	@ tmp972,
	strb	r2, [r4, r3]	@ tmp972, proc_282(D)->digit
.L3287:
@ Patches/../C_code.c:4974: 	if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3) && (proc->choosingSkill)) { 
	cmp	r7, #0	@ pretmp_593,
	beq	.L3345		@,
@ Patches/../C_code.c:5010:     if (keys & DPAD_DOWN) {
	lsls	r3, r5, #24	@ tmp1360, keys,
	bmi	.LCB21180	@
	b	.L3296	@long jump	@
.LCB21180:
	ldr	r3, .L3451+8	@ tmp1325,
	lsls	r5, r6, #3	@ tmp1310, id,
.L3318:
@ Patches/../C_code.c:5011: 		if (id < SRR_MAXDISP) { proc->id++; } 
	movs	r1, #48	@ tmp1028,
@ Patches/../C_code.c:5011: 		if (id < SRR_MAXDISP) { proc->id++; } 
	ldrb	r2, [r4, r1]	@ tmp1030,
@ Patches/../C_code.c:5036: 	DisplayHand(SRR_CursorLocationTable[id].x, SRR_CursorLocationTable[id].y, 0); 	
	adds	r3, r3, r5	@ tmp1036, tmp1325, tmp1310
@ Patches/../C_code.c:5011: 		if (id < SRR_MAXDISP) { proc->id++; } 
	adds	r2, r2, #1	@ tmp1031,
@ Patches/../C_code.c:5036: 	DisplayHand(SRR_CursorLocationTable[id].x, SRR_CursorLocationTable[id].y, 0); 	
	adds	r3, r3, #100	@,
@ Patches/../C_code.c:5011: 		if (id < SRR_MAXDISP) { proc->id++; } 
	strb	r2, [r4, r1]	@ tmp1031, proc_282(D)->id
@ Patches/../C_code.c:5036: 	DisplayHand(SRR_CursorLocationTable[id].x, SRR_CursorLocationTable[id].y, 0); 	
	ldmia	r3!, {r0, r1}	@,,
	b	.L3297		@
.L3437:
@ Patches/../C_code.c:4866: 			if ((proc->Option[14] == 1) && proc->calledFromChapter) { 
	movs	r3, #53	@ tmp853,
@ Patches/../C_code.c:4866: 			if ((proc->Option[14] == 1) && proc->calledFromChapter) { 
	ldrb	r3, [r4, r3]	@ tmp854,
	cmp	r3, #0	@ tmp854,
	bne	.LCB21199	@
	b	.L3422	@long jump	@
.LCB21199:
@ Patches/../C_code.c:4867: 				UpdateMapViewWithFog(0); 
	movs	r0, #0	@,
	ldr	r3, .L3451+20	@ tmp855,
	bl	.L14		@
@ Patches/../C_code.c:4869: 			if ((proc->Option[14] == 2) && proc->calledFromChapter) { 
	mov	r3, r8	@ tmp845, tmp845
	ldrsb	r0, [r4, r3]	@ _100,
	b	.L3262		@
.L3345:
@ Patches/../C_code.c:4974: 	if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3) && (proc->choosingSkill)) { 
	movs	r2, #0	@ _155,
.L3295:
@ Patches/../C_code.c:4974: 	if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3) && (proc->choosingSkill)) { 
	movs	r3, #74	@ tmp1042,
@ Patches/../C_code.c:4974: 	if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3) && (proc->choosingSkill)) { 
	ldrsb	r3, [r4, r3]	@ tmp1043,
	cmp	r3, #3	@ tmp1043,
	beq	.LCB21215	@
	b	.L3298	@long jump	@
.LCB21215:
@ Patches/../C_code.c:4974: 	if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3) && (proc->choosingSkill)) { 
	adds	r3, r3, #53	@ tmp1044,
@ Patches/../C_code.c:4974: 	if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3) && (proc->choosingSkill)) { 
	ldrb	r1, [r4, r3]	@ tmp1045,
	cmp	r1, #0	@ tmp1045,
	bne	.LCB21219	@
	b	.L3298	@long jump	@
.LCB21219:
@ Patches/../C_code.c:4976: 		if (keys & DPAD_UP) {
	lsls	r2, r5, #25	@ tmp1361, keys,
	bmi	.LCB21225	@
	b	.L3299	@long jump	@
.LCB21225:
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	ldr	r2, .L3451+24	@ tmp1055,
@ Patches/../C_code.c:4977: 			proc->skill = GetNextAlwaysSkill(proc->skill); 
	subs	r3, r3, #1	@ tmp1053,
@ Patches/../C_code.c:4977: 			proc->skill = GetNextAlwaysSkill(proc->skill); 
	ldrb	r3, [r4, r3]	@ tmp1054,
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	ldr	r0, [r2]	@ NumberOfSkills.6_336, NumberOfSkills
@ Patches/../C_code.c:197: 	id++; 
	adds	r3, r3, #1	@ id,
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	cmp	r0, r3	@ NumberOfSkills.6_336, id
	bgt	.LCB21232	@
	b	.L3300	@long jump	@
.LCB21232:
	ldr	r1, .L3451+28	@ tmp1312,
	b	.L3302		@
.L3444:
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	adds	r3, r3, #1	@ id,
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	cmp	r0, r3	@ NumberOfSkills.6_336, id
	bne	.LCB21240	@
	b	.L3306	@long jump	@
.LCB21240:
.L3302:
@ Patches/../C_code.c:199: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r2, [r1, r3]	@ MEM[(unsigned char *)&AlwaysSkillTable + _337 * 1], MEM[(unsigned char *)&AlwaysSkillTable + _337 * 1]
	cmp	r2, #0	@ MEM[(unsigned char *)&AlwaysSkillTable + _337 * 1],
	beq	.L3444		@,
.L3310:
@ Patches/../C_code.c:4981: 			proc->skill = GetPreviousAlwaysSkill(proc->skill); 
	lsls	r3, r3, #24	@ tmp1084, id,
	lsrs	r3, r3, #24	@ _554, tmp1084,
.L3312:
	movs	r2, #55	@ tmp1085,
	strb	r3, [r4, r2]	@ _554, proc_282(D)->skill
@ Patches/../C_code.c:4982: 			proc->redraw = RedrawSome;
	movs	r3, #50	@ tmp1087,
	subs	r2, r2, #54	@ tmp1088,
	strb	r2, [r4, r3]	@ tmp1088, proc_282(D)->redraw
.L3307:
@ Patches/../C_code.c:4999: 		DisplayHand(CursorLocationTable[proc->digit].x+12, CursorLocationTable[proc->digit].y + (offset * 8) + 32, true); 
	movs	r3, #51	@ tmp1294,
	ldrsb	r2, [r4, r3]	@ _168,
@ Patches/../C_code.c:4999: 		DisplayHand(CursorLocationTable[proc->digit].x+12, CursorLocationTable[proc->digit].y + (offset * 8) + 32, true); 
	ldr	r3, .L3451+8	@ tmp1295,
	lsls	r2, r2, #3	@ tmp1296, _168,
	adds	r2, r3, r2	@ tmp1297, tmp1295, tmp1296
@ Patches/../C_code.c:4999: 		DisplayHand(CursorLocationTable[proc->digit].x+12, CursorLocationTable[proc->digit].y + (offset * 8) + 32, true); 
	ldr	r1, [r2, #32]	@ CursorLocationTable[_168].y, CursorLocationTable[_168].y
@ Patches/../C_code.c:4999: 		DisplayHand(CursorLocationTable[proc->digit].x+12, CursorLocationTable[proc->digit].y + (offset * 8) + 32, true); 
	ldr	r3, [sp, #4]	@ offset, %sfp
@ Patches/../C_code.c:4999: 		DisplayHand(CursorLocationTable[proc->digit].x+12, CursorLocationTable[proc->digit].y + (offset * 8) + 32, true); 
	ldr	r0, [r2, #28]	@ CursorLocationTable[_168].x, CursorLocationTable[_168].x
@ Patches/../C_code.c:4999: 		DisplayHand(CursorLocationTable[proc->digit].x+12, CursorLocationTable[proc->digit].y + (offset * 8) + 32, true); 
	adds	r1, r1, #32	@ tmp1299,
@ Patches/../C_code.c:4999: 		DisplayHand(CursorLocationTable[proc->digit].x+12, CursorLocationTable[proc->digit].y + (offset * 8) + 32, true); 
	lsls	r3, r3, #3	@ tmp1301, offset,
@ Patches/../C_code.c:4999: 		DisplayHand(CursorLocationTable[proc->digit].x+12, CursorLocationTable[proc->digit].y + (offset * 8) + 32, true); 
	adds	r1, r1, r3	@ tmp1302, tmp1299, tmp1301
@ Patches/../C_code.c:4999: 		DisplayHand(CursorLocationTable[proc->digit].x+12, CursorLocationTable[proc->digit].y + (offset * 8) + 32, true); 
	adds	r0, r0, #12	@ tmp1307,
@ Patches/../C_code.c:4650: 		DisplayVertUiHand(x, y); 
	bl	DisplayVertUiHand		@
.L3331:
@ Patches/../C_code.c:5001: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	movs	r5, #52	@ tmp1100,
@ Patches/../C_code.c:5001: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	ldrb	r3, [r4, r5]	@ tmp1101,
	cmp	r3, #0	@ tmp1101,
	bne	.LCB21276	@
	b	.L3315	@long jump	@
.LCB21276:
@ Patches/../C_code.c:5003: 		if (proc->redraw == RedrawSome) { 
	movs	r3, #50	@ tmp1102,
@ Patches/../C_code.c:5002: 		proc->freezeSeed = true; 	
	movs	r2, #1	@ tmp1104,
@ Patches/../C_code.c:5003: 		if (proc->redraw == RedrawSome) { 
	ldrb	r3, [r4, r3]	@ pretmp_560,
@ Patches/../C_code.c:5002: 		proc->freezeSeed = true; 	
	strb	r2, [r4, r5]	@ tmp1104, proc_282(D)->freezeSeed
@ Patches/../C_code.c:5003: 		if (proc->redraw == RedrawSome) { 
	cmp	r3, #1	@ pretmp_560,
	beq	.LCB21282	@
	b	.L3232	@long jump	@
.LCB21282:
	b	.L3294		@
.L3428:
	ldr	r6, .L3451	@ tmp1313,
.L3332:
@ Patches/../C_code.c:4796: 		DisplayUiVArrow(MENU_X+(8*8), MENU_Y+(16*9), 0x3240, 0);
	movs	r2, #201	@,
	movs	r3, #0	@,
	movs	r1, #152	@,
	movs	r0, #82	@,
	lsls	r2, r2, #6	@,,
	bl	.L341		@
	b	.L3235		@
.L3436:
@ Patches/../C_code.c:4839: 		if (proc->Option[8] == 1){ SetFlag(CasualModeFlag); } 
	ldr	r3, .L3451+32	@ tmp700,
	bl	.L14		@
	b	.L3253		@
.L3250:
@ Patches/../C_code.c:4835: 		if (proc->Option[6] == 4) { RandBitflags->class = 1; RecruitValues->newClasses = 1; } 
	movs	r1, #6	@ tmp649,
	ldrb	r3, [r2, #1]	@ RandBitflags.265_24->class, RandBitflags.265_24->class
	bics	r3, r1	@ tmp648, tmp649
	movs	r1, #2	@ tmp651,
	orrs	r3, r1	@ tmp653, tmp651
	strb	r3, [r2, #1]	@ tmp653, RandBitflags.265_24->class
@ Patches/../C_code.c:4835: 		if (proc->Option[6] == 4) { RandBitflags->class = 1; RecruitValues->newClasses = 1; } 
	mov	r3, r9	@ RecruitValues.264_19, RecruitValues.264_19
	movs	r1, #48	@ tmp660,
	ldrb	r3, [r3]	@ RecruitValues.264_19->newClasses, RecruitValues.264_19->newClasses
	bics	r3, r1	@ tmp659, tmp660
	movs	r1, #16	@ tmp662,
	orrs	r3, r1	@ tmp664, tmp662
	mov	r1, r9	@ RecruitValues.264_19, RecruitValues.264_19
	strb	r3, [r1]	@ tmp664, RecruitValues.264_19->newClasses
	b	.L3251		@
.L3431:
@ Patches/../C_code.c:4929: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	movs	r0, #0	@,
	bl	GetInitialSeed		@
@ Patches/../C_code.c:4929: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	movs	r3, #50	@ tmp931,
	movs	r2, #1	@ tmp932,
@ Patches/../C_code.c:4929: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	str	r0, [r4, #44]	@ tmp1346, proc_282(D)->seed
@ Patches/../C_code.c:4929: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	strb	r2, [r4, r3]	@ tmp932, proc_282(D)->redraw
	b	.L3278		@
.L3321:
@ Patches/../C_code.c:5018: 		if ((id + offset) <= 0) { proc->id = SRR_MAXDISP; proc->offset = SRR_TotalOptions - SRR_MAXDISP; proc->redraw = RedrawAll; } 
	cmp	r2, #0	@ _155,
	ble	.L3322		@,
@ Patches/../C_code.c:5019: 		else if ((!id) && (offset)) { proc->offset--; proc->redraw = RedrawAll; } 
	cmp	r6, #0	@ id,
	beq	.LCB21341	@
	b	.L3323	@long jump	@
.LCB21341:
	ldr	r3, [sp, #4]	@ offset, %sfp
	cmp	r3, #0	@ offset,
	bne	.LCB21347	@
	b	.L3323	@long jump	@
.LCB21347:
@ Patches/../C_code.c:5019: 		else if ((!id) && (offset)) { proc->offset--; proc->redraw = RedrawAll; } 
	movs	r2, #49	@ tmp1185,
@ Patches/../C_code.c:5019: 		else if ((!id) && (offset)) { proc->offset--; proc->redraw = RedrawAll; } 
	ldrb	r3, [r4, r2]	@ tmp1187,
	subs	r3, r3, #1	@ tmp1188,
	strb	r3, [r4, r2]	@ tmp1188, proc_282(D)->offset
@ Patches/../C_code.c:5019: 		else if ((!id) && (offset)) { proc->offset--; proc->redraw = RedrawAll; } 
	movs	r3, #50	@ tmp1191,
	subs	r2, r2, #47	@ tmp1192,
	movs	r1, #24	@ prephitmp_551,
	movs	r0, #18	@ prephitmp_533,
	strb	r2, [r4, r3]	@ tmp1192, proc_282(D)->redraw
	b	.L3297		@
.L3257:
@ Patches/../C_code.c:4859: 			if (timedHits == 1) { TimedHitsDifficultyRam->alwaysA = true; }  
	cmp	r0, #1	@ timedHits,
	beq	.LCB21362	@
	b	.L3258	@long jump	@
.LCB21362:
@ Patches/../C_code.c:4859: 			if (timedHits == 1) { TimedHitsDifficultyRam->alwaysA = true; }  
	movs	r0, #32	@ tmp819,
	ldrb	r1, [r3]	@ TimedHitsDifficultyRam.301_96->alwaysA, TimedHitsDifficultyRam.301_96->alwaysA
	orrs	r1, r0	@ tmp821, tmp819
	strb	r1, [r3]	@ tmp821,* TimedHitsDifficultyRam.301_96
	b	.L3256		@
.L3438:
@ Patches/../C_code.c:4869: 			if ((proc->Option[14] == 2) && proc->calledFromChapter) { 
	movs	r3, #53	@ tmp857,
@ Patches/../C_code.c:4869: 			if ((proc->Option[14] == 2) && proc->calledFromChapter) { 
	ldrb	r3, [r4, r3]	@ tmp858,
	cmp	r3, #0	@ tmp858,
	bne	.LCB21374	@
	b	.L3422	@long jump	@
.LCB21374:
@ Patches/../C_code.c:4870: 				UpdateMapViewWithFog(3); 
	movs	r0, #3	@,
	ldr	r3, .L3451+20	@ tmp860,
	bl	.L14		@
@ Patches/../C_code.c:4872: 			if ((proc->Option[14] == 0) && proc->calledFromChapter) { 
	movs	r3, #71	@ tmp861,
	ldrsb	r0, [r4, r3]	@ _100,
	b	.L3264		@
.L3296:
@ Patches/../C_code.c:5017:     else if (keys & DPAD_UP) {
	lsls	r3, r5, #25	@ tmp1363, keys,
	bmi	.LCB21389	@
	b	.L3320	@long jump	@
.LCB21389:
.L3322:
@ Patches/../C_code.c:5018: 		if ((id + offset) <= 0) { proc->id = SRR_MAXDISP; proc->offset = SRR_TotalOptions - SRR_MAXDISP; proc->redraw = RedrawAll; } 
	movs	r3, #48	@ tmp1145,
	movs	r2, #7	@ tmp1146,
	strb	r2, [r4, r3]	@ tmp1146, proc_282(D)->id
@ Patches/../C_code.c:5018: 		if ((id + offset) <= 0) { proc->id = SRR_MAXDISP; proc->offset = SRR_TotalOptions - SRR_MAXDISP; proc->redraw = RedrawAll; } 
	subs	r3, r7, #7	@ tmp1149, pretmp_593,
@ Patches/../C_code.c:5018: 		if ((id + offset) <= 0) { proc->id = SRR_MAXDISP; proc->offset = SRR_TotalOptions - SRR_MAXDISP; proc->redraw = RedrawAll; } 
	adds	r2, r2, #42	@ tmp1150,
	strb	r3, [r4, r2]	@ tmp1149, proc_282(D)->offset
@ Patches/../C_code.c:5018: 		if ((id + offset) <= 0) { proc->id = SRR_MAXDISP; proc->offset = SRR_TotalOptions - SRR_MAXDISP; proc->redraw = RedrawAll; } 
	movs	r3, #50	@ tmp1152,
	subs	r2, r2, #47	@ tmp1153,
	strb	r2, [r4, r3]	@ tmp1153, proc_282(D)->redraw
	b	.L3425		@
.L3432:
@ Patches/../C_code.c:4687: 	if (result > 6) { result = 6; } 
	subs	r3, r3, #1	@ result,
	b	.L3280		@
.L3282:
@ Patches/../C_code.c:4937: 		  else { proc->digit = max_digits; } 
	lsls	r2, r3, #24	@ tmp961, result,
	movs	r3, #51	@ tmp1525,
	asrs	r2, r2, #24	@ _128, tmp961,
	strb	r2, [r4, r3]	@ _128, proc_282(D)->digit
@ Patches/../C_code.c:4939: 		if (keys & DPAD_LEFT) {
	ldr	r3, [sp]	@ _592, %sfp
	cmp	r3, #0	@ _592,
	beq	.LCB21415	@
	b	.L3285	@long jump	@
.LCB21415:
	b	.L3286		@
.L3324:
@ Patches/../C_code.c:5030:     else if (keys & DPAD_LEFT) {
	lsls	r5, r5, #26	@ tmp1365, keys,
	bmi	.LCB21425	@
	b	.L3425	@long jump	@
.LCB21425:
@ Patches/../C_code.c:5031: 		id--; id += offset; 
	ldr	r3, [sp, #4]	@ offset, %sfp
	mov	ip, r3	@ offset, offset
@ Patches/../C_code.c:5031: 		id--; id += offset; 
	subs	r6, r6, #1	@ id,
@ Patches/../C_code.c:5031: 		id--; id += offset; 
	add	r6, r6, ip	@ id, offset
@ Patches/../C_code.c:5032: 		if (proc->Option[id] > 0) { proc->Option[id]--; } 
	adds	r2, r4, r6	@ tmp1318, proc, id
	movs	r3, r2	@ tmp1251, tmp1318
	adds	r3, r3, #57	@ tmp1251,
	ldrb	r3, [r3]	@ _211, *proc_282(D)
	lsls	r3, r3, #24	@ _211, _211,
	asrs	r3, r3, #24	@ _211, _211,
@ Patches/../C_code.c:5032: 		if (proc->Option[id] > 0) { proc->Option[id]--; } 
	cmp	r3, #0	@ _211,
	bgt	.L3423		@,
@ Patches/../C_code.c:5033: 		else { proc->Option[id] = OptionAmounts[id] - 1;  } 
	movs	r1, #36	@ tmp1258,
@ Patches/../C_code.c:5033: 		else { proc->Option[id] = OptionAmounts[id] - 1;  } 
	ldr	r3, .L3451+4	@ tmp1257,
	adds	r3, r3, r6	@ tmp1259, tmp1257, id
@ Patches/../C_code.c:5033: 		else { proc->Option[id] = OptionAmounts[id] - 1;  } 
	ldrb	r3, [r3, r1]	@ tmp1261, OptionAmounts
.L3423:
	subs	r3, r3, #1	@ tmp1262,
	lsls	r3, r3, #24	@ tmp1263, tmp1262,
	asrs	r3, r3, #24	@ _215, tmp1263,
	adds	r2, r2, #57	@ tmp1266,
	strb	r3, [r2]	@ _215, proc_282(D)->Option[id_328]
	b	.L3424		@
.L3319:
@ Patches/../C_code.c:5013: 		else { proc->id = 0; proc->offset = 0; proc->redraw = RedrawAll; } 
	movs	r3, #0	@ tmp1133,
@ Patches/../C_code.c:5013: 		else { proc->id = 0; proc->offset = 0; proc->redraw = RedrawAll; } 
	movs	r2, #2	@ tmp1136,
@ Patches/../C_code.c:5013: 		else { proc->id = 0; proc->offset = 0; proc->redraw = RedrawAll; } 
	strh	r3, [r4, #48]	@ tmp1133, MEM <unsigned short> [(void *)proc_282(D) + 48B]
@ Patches/../C_code.c:5013: 		else { proc->id = 0; proc->offset = 0; proc->redraw = RedrawAll; } 
	adds	r3, r3, #50	@ tmp1135,
	strb	r2, [r4, r3]	@ tmp1136, proc_282(D)->redraw
	b	.L3297		@
.L3442:
@ Patches/../C_code.c:5038: 		if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3)) { proc->choosingSkill = true; } 
	movs	r2, #74	@ tmp1282,
@ Patches/../C_code.c:5038: 		if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3)) { proc->choosingSkill = true; } 
	ldrsb	r2, [r4, r2]	@ tmp1283,
	cmp	r2, #3	@ tmp1283,
	beq	.LCB21465	@
	b	.L3330	@long jump	@
.LCB21465:
@ Patches/../C_code.c:5038: 		if (((id+offset) == SRR_TotalOptions) && (proc->Option[17] == 3)) { proc->choosingSkill = true; } 
	adds	r2, r2, #53	@ tmp1284,
	strb	r3, [r4, r2]	@ _223, proc_282(D)->choosingSkill
	b	.L3330		@
.L3283:
@ Patches/../C_code.c:4940: 		  if (proc->digit < (max_digits)) { proc->digit++; }
	cmp	r3, fp	@ result, _126
	bgt	.LCB21473	@
	b	.L3285	@long jump	@
.LCB21473:
@ Patches/../C_code.c:4940: 		  if (proc->digit < (max_digits)) { proc->digit++; }
	movs	r3, #51	@ tmp1524,
	strb	r2, [r4, r3]	@ _128, proc_282(D)->digit
	b	.L3286		@
.L3443:
	movs	r3, #51	@ tmp1523,
	adds	r2, r2, #1	@ tmp967,
	lsls	r2, r2, #24	@ tmp968, tmp967,
	asrs	r2, r2, #24	@ _128, tmp968,
	strb	r2, [r4, r3]	@ _128, proc_282(D)->digit
	b	.L3284		@
.L3441:
@ Patches/../C_code.c:5026: 		if (proc->Option[id] < (OptionAmounts[id]-1)) { proc->Option[id]++; } 
	adds	r2, r2, #1	@ tmp1217,
	lsls	r2, r2, #24	@ tmp1218, tmp1217,
	asrs	r0, r2, #24	@ cstore_123, tmp1218,
	b	.L3325		@
.L3433:
@ Patches/../C_code.c:4957: 					proc->seed -= DigitDecimalTable[proc->digit]; 
	lsls	r3, r2, #2	@ tmp999, _128,
	add	r3, r3, ip	@ tmp1000, tmp1324
@ Patches/../C_code.c:4957: 					proc->seed -= DigitDecimalTable[proc->digit]; 
	ldr	r3, [r3, #124]	@ DigitDecimalTable[_581], DigitDecimalTable[_581]
	subs	r3, r1, r3	@ _304, _142, DigitDecimalTable[_581]
@ Patches/../C_code.c:4958: 					if (proc->seed < min) { proc->seed = min; } 
	mvns	r1, r3	@ tmp1332, _304
	asrs	r1, r1, #31	@ tmp1331, tmp1332,
	ands	r3, r1	@ _304, tmp1331
	b	.L3292		@
.L3305:
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	cmp	r0, r2	@ NumberOfSkills.6_336, i
	bne	.LCB21509	@
	b	.L3312	@long jump	@
.LCB21509:
.L3306:
@ Patches/../C_code.c:202: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r3, [r1, r2]	@ _557, MEM[(unsigned char *)&AlwaysSkillTable + _276 * 1]
@ Patches/../C_code.c:202: 		if (AlwaysSkillTable[i]) { return i; } 
	cmp	r3, #0	@ _557,
	beq	.L3305		@,
.L3426:
@ Patches/../C_code.c:4981: 			proc->skill = GetPreviousAlwaysSkill(proc->skill); 
	lsls	r3, r2, #24	@ tmp1083, i,
	lsrs	r3, r3, #24	@ _554, tmp1083,
	b	.L3312		@
.L3323:
@ Patches/../C_code.c:5020: 		else { proc->id--;  } 
	movs	r2, #48	@ tmp1194,
@ Patches/../C_code.c:5020: 		else { proc->id--;  } 
	ldrb	r3, [r4, r2]	@ tmp1196,
	subs	r3, r3, #1	@ tmp1197,
	strb	r3, [r4, r2]	@ tmp1197, proc_282(D)->id
	b	.L3425		@
.L3439:
@ Patches/../C_code.c:4898: 			CallEndEvent();
	ldr	r3, .L3451+36	@ tmp909,
	bl	.L14		@
	b	.L3272		@
.L3267:
@ Patches/../C_code.c:4873: 				UpdateMapViewWithFog(-1); 
	movs	r0, #1	@,
	ldr	r3, .L3451+20	@ tmp867,
	rsbs	r0, r0, #0	@,
	bl	.L14		@
@ Patches/../C_code.c:4876: 		RandBitflags->fog = proc->Option[14]; 
	movs	r3, #71	@ tmp868,
	ldrsb	r0, [r4, r3]	@ _100,
	b	.L3422		@
.L3258:
@ Patches/../C_code.c:4860: 			if (timedHits == 2) { TimedHitsDifficultyRam->difficulty = 2; }  
	cmp	r0, #2	@ timedHits,
	bne	.L3259		@,
@ Patches/../C_code.c:4860: 			if (timedHits == 2) { TimedHitsDifficultyRam->difficulty = 2; }  
	ldrb	r1, [r3]	@ TimedHitsDifficultyRam.301_96->difficulty, TimedHitsDifficultyRam.301_96->difficulty
	adds	r0, r0, #29	@ tmp828,
	bics	r1, r0	@ tmp827, tmp828
	movs	r0, #2	@ tmp830,
	orrs	r1, r0	@ tmp832, tmp830
	strb	r1, [r3]	@ tmp832,* TimedHitsDifficultyRam.301_96
	b	.L3256		@
.L3259:
@ Patches/../C_code.c:4861: 			if (timedHits == 3) { TimedHitsDifficultyRam->difficulty = 3; }  
	cmp	r0, #3	@ timedHits,
	beq	.LCB21559	@
	b	.L3256	@long jump	@
.LCB21559:
@ Patches/../C_code.c:4861: 			if (timedHits == 3) { TimedHitsDifficultyRam->difficulty = 3; }  
	ldrb	r1, [r3]	@ TimedHitsDifficultyRam.301_96->difficulty, TimedHitsDifficultyRam.301_96->difficulty
	adds	r0, r0, #28	@ tmp839,
	bics	r1, r0	@ tmp838, tmp839
	movs	r0, #3	@ tmp841,
	orrs	r1, r0	@ tmp843, tmp841
	strb	r1, [r3]	@ tmp843,* TimedHitsDifficultyRam.301_96
	b	.L3256		@
.L3299:
@ Patches/../C_code.c:4980: 		else if (keys & DPAD_DOWN) {
	movs	r2, #128	@ tmp1071,
	movs	r1, r2	@ tmp1073, tmp1071
	ands	r1, r5	@ tmp1073, keys
	tst	r2, r5	@ tmp1071, keys
	beq	.L3308		@,
@ Patches/../C_code.c:4981: 			proc->skill = GetPreviousAlwaysSkill(proc->skill); 
	movs	r3, #55	@ tmp1075,
@ Patches/../C_code.c:4981: 			proc->skill = GetPreviousAlwaysSkill(proc->skill); 
	ldrb	r3, [r4, r3]	@ tmp1076,
@ Patches/../C_code.c:207: 	id--; 
	subs	r3, r3, #1	@ id,
@ Patches/../C_code.c:208: 	for (int i = id; i > 0; --i) { 
	cmp	r3, #0	@ id,
	ble	.L3309		@,
	ldr	r1, .L3451+28	@ tmp1312,
	b	.L3311		@
.L3452:
	.align	2
.L3451:
	.word	DisplayUiVArrow
	.word	.LANCHOR11
	.word	.LANCHOR10
	.word	DisplayUiHand
	.word	MaxClasses
	.word	UpdateMapViewWithFog
	.word	NumberOfSkills
	.word	AlwaysSkillTable
	.word	SetFlag
	.word	CallEndEvent
.L3445:
@ Patches/../C_code.c:208: 	for (int i = id; i > 0; --i) { 
	subs	r3, r3, #1	@ id,
@ Patches/../C_code.c:208: 	for (int i = id; i > 0; --i) { 
	cmp	r3, #0	@ id,
	beq	.L3309		@,
.L3311:
@ Patches/../C_code.c:209: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r2, [r1, r3]	@ MEM[(unsigned char *)&AlwaysSkillTable + _423 * 1], MEM[(unsigned char *)&AlwaysSkillTable + _423 * 1]
	cmp	r2, #0	@ MEM[(unsigned char *)&AlwaysSkillTable + _423 * 1],
	beq	.L3445		@,
	b	.L3310		@
.L3315:
@ Patches/../C_code.c:5001: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	movs	r0, #0	@,
	bl	GetInitialSeed		@
@ Patches/../C_code.c:5002: 		proc->freezeSeed = true; 	
	movs	r3, #1	@ tmp1107,
@ Patches/../C_code.c:5001: 		if (!proc->freezeSeed) { proc->seed = GetInitialSeed(0); proc->redraw = RedrawSome; }
	str	r0, [r4, #44]	@ tmp1347, proc_282(D)->seed
@ Patches/../C_code.c:5002: 		proc->freezeSeed = true; 	
	strb	r3, [r4, r5]	@ tmp1107, proc_282(D)->freezeSeed
	bl	.L3294	@ far jump	@
.L3308:
@ Patches/../C_code.c:4991: 		else if (keys & DPAD_LEFT) {
	movs	r2, #48	@ tmp1093,
	tst	r2, r5	@ tmp1093, keys
	bne	.LCB21629	@
	b	.L3307	@long jump	@
.LCB21629:
@ Patches/../C_code.c:4985: 			proc->choosingSkill = false; 
	strb	r1, [r4, r3]	@ tmp1073, proc_282(D)->choosingSkill
	b	.L3331		@
.L3309:
@ Patches/../C_code.c:211: 	for (int i = NumberOfSkills; i > 0; --i) { 
	ldr	r3, .L3453	@ tmp1080,
	ldr	r2, [r3]	@ i, NumberOfSkills
@ Patches/../C_code.c:211: 	for (int i = NumberOfSkills; i > 0; --i) { 
	cmp	r2, #0	@ i,
	ble	.L3347		@,
	ldr	r1, .L3453+4	@ tmp1312,
	b	.L3314		@
.L3313:
@ Patches/../C_code.c:211: 	for (int i = NumberOfSkills; i > 0; --i) { 
	subs	r2, r2, #1	@ i,
@ Patches/../C_code.c:211: 	for (int i = NumberOfSkills; i > 0; --i) { 
	cmp	r2, #0	@ i,
	bne	.LCB21646	@
	b	.L3312	@long jump	@
.LCB21646:
.L3314:
@ Patches/../C_code.c:212: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r3, [r1, r2]	@ _554, MEM[(unsigned char *)&AlwaysSkillTable + _390 * 1]
@ Patches/../C_code.c:212: 		if (AlwaysSkillTable[i]) { return i; } 
	cmp	r3, #0	@ _554,
	beq	.L3313		@,
	b	.L3426		@
.L3300:
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	cmp	r0, #0	@ NumberOfSkills.6_336,
	ble	.L3347		@,
	movs	r2, #0	@ i,
	ldr	r1, .L3453+4	@ tmp1312,
	b	.L3306		@
.L3347:
@ Patches/../C_code.c:211: 	for (int i = NumberOfSkills; i > 0; --i) { 
	movs	r3, #0	@ _554,
	b	.L3312		@
.L3454:
	.align	2
.L3453:
	.word	NumberOfSkills
	.word	AlwaysSkillTable
	.size	ConfigMenuLoop, .-ConfigMenuLoop
	.align	1
	.p2align 2,,3
	.global	InitDraw
	.syntax unified
	.code	16
	.thumb_func
	.type	InitDraw, %function
InitDraw:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
	mov	lr, fp	@,
	mov	r7, r10	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
@ Patches/../C_code.c:5165: 	RegisterBlankTile(0); // so bg fill works I guess 
	ldr	r3, .L3460	@ tmp136,
@ Patches/../C_code.c:5160: void InitDraw(ConfigMenuProc* proc) { 
	push	{r5, r6, r7, lr}	@
@ Patches/../C_code.c:5160: void InitDraw(ConfigMenuProc* proc) { 
	mov	r9, r0	@ proc, tmp185
@ Patches/../C_code.c:5165: 	RegisterBlankTile(0); // so bg fill works I guess 
	movs	r0, #0	@,
	bl	.L14		@
@ Patches/../C_code.c:3864: 	SetupBackgrounds(0);
	movs	r0, #0	@,
	ldr	r3, .L3460+4	@ tmp137,
	bl	.L14		@
@ Patches/../C_code.c:3870: 	gLCDControlBuffer.dispcnt.mode = 0;
	movs	r2, #120	@ tmp145,
	ldr	r3, .L3460+8	@ tmp182,
	mov	r8, r3	@ tmp182, tmp182
	ldrh	r3, [r3]	@ MEM[(struct DispCnt *)&gLCDControlBuffer], MEM[(struct DispCnt *)&gLCDControlBuffer]
	ands	r2, r3	@ tmp144, MEM[(struct DispCnt *)&gLCDControlBuffer]
	movs	r3, #128	@ tmp148,
	lsls	r3, r3, #5	@ tmp148, tmp148,
	orrs	r3, r2	@ tmp147, tmp144
	mov	r2, r8	@ tmp182, tmp182
@ Patches/../C_code.c:5167: 	BG_Fill(gBG0TilemapBuffer, 0); 
	movs	r1, #0	@,
@ Patches/../C_code.c:3870: 	gLCDControlBuffer.dispcnt.mode = 0;
	strh	r3, [r2]	@ tmp147, MEM[(struct DispCnt *)&gLCDControlBuffer]
@ Patches/../C_code.c:5167: 	BG_Fill(gBG0TilemapBuffer, 0); 
	ldr	r0, .L3460+12	@ tmp150,
	ldr	r3, .L3460+16	@ tmp151,
	bl	.L14		@
@ Patches/../C_code.c:5168: 	BG_EnableSyncByMask(BG0_SYNC_BIT); 
	ldr	r3, .L3460+20	@ tmp183,
	movs	r0, #1	@,
	mov	r10, r3	@ tmp183, tmp183
	bl	.L14		@
@ Patches/../C_code.c:5171: 	ResetTextFont();
	ldr	r3, .L3460+24	@ tmp153,
	bl	.L14		@
@ Patches/../C_code.c:5172: 	SetTextFontGlyphs(0);
	movs	r0, #0	@,
	ldr	r3, .L3460+28	@ tmp154,
	bl	.L14		@
@ Patches/../C_code.c:5173: 	SetTextFont(0);
	movs	r0, #0	@,
	ldr	r3, .L3460+32	@ tmp155,
	bl	.L14		@
@ Patches/../C_code.c:5174: 	InitSystemTextFont();
	ldr	r3, .L3460+36	@ tmp156,
	bl	.L14		@
@ Patches/../C_code.c:5176: 	ResetText(); // need this 
	ldr	r3, .L3460+40	@ tmp157,
	bl	.L14		@
	movs	r3, #24	@ _81,
	ldr	r4, .L3460+44	@ ivtmp.1968,
	rsbs	r3, r3, #0	@ _81, _81
	mov	fp, r3	@ _81, _81
	movs	r7, r4	@ _82, ivtmp.1968
	ldr	r5, .L3460+48	@ ivtmp.1967,
	ldr	r6, .L3460+52	@ tmp184,
	add	fp, fp, r4	@ _81, ivtmp.1968
	adds	r7, r7, #152	@ _82,
.L3456:
@ Patches/../C_code.c:5206: 	InitText(&th[i], tWidths[i]);
	movs	r0, r4	@, ivtmp.1968
	ldrb	r1, [r5]	@ MEM[(unsigned char *)_80], MEM[(unsigned char *)_80]
@ Patches/../C_code.c:5205: 	for (int i = 0; i < sizeof(tWidths); ++i) { 
	adds	r4, r4, #8	@ ivtmp.1968,
@ Patches/../C_code.c:5206: 	InitText(&th[i], tWidths[i]);
	bl	.L341		@
@ Patches/../C_code.c:5205: 	for (int i = 0; i < sizeof(tWidths); ++i) { 
	adds	r5, r5, #1	@ ivtmp.1967,
	cmp	r4, r7	@ ivtmp.1968, _82
	bne	.L3456		@,
	mov	r7, fp	@ _81, _81
	ldr	r5, .L3460+56	@ ivtmp.1958,
	adds	r7, r7, #73	@ _81,
	ldr	r4, .L3460+60	@ ivtmp.1959,
	adds	r7, r7, #255	@ _81,
.L3457:
@ Patches/../C_code.c:5210: 	InitText(&th[i+hOff], RtWidths[i]);
	movs	r0, r4	@, ivtmp.1959
	ldrb	r1, [r5]	@ MEM[(unsigned char *)_70], MEM[(unsigned char *)_70]
@ Patches/../C_code.c:5209: 	for (int i = 0; i < sizeof(RtWidths); ++i) { 
	adds	r4, r4, #8	@ ivtmp.1959,
@ Patches/../C_code.c:5210: 	InitText(&th[i+hOff], RtWidths[i]);
	bl	.L341		@
@ Patches/../C_code.c:5209: 	for (int i = 0; i < sizeof(RtWidths); ++i) { 
	adds	r5, r5, #1	@ ivtmp.1958,
	cmp	r4, r7	@ ivtmp.1959, _72
	bne	.L3457		@,
@ Patches/../C_code.c:5212: 	InitText(&th[sizeof(tWidths) + sizeof(RtWidths)], 6); // "Randomizer" title  
	movs	r1, #6	@,
@ Patches/../C_code.c:5255: }
	@ sp needed	@
@ Patches/../C_code.c:5212: 	InitText(&th[sizeof(tWidths) + sizeof(RtWidths)], 6); // "Randomizer" title  
	ldr	r0, .L3460+64	@ tmp164,
	bl	.L341		@
@ Patches/../C_code.c:5215: 	LoadObjUIGfx(); 
	ldr	r3, .L3460+68	@ tmp166,
	bl	.L14		@
@ Patches/../C_code.c:5216: 	UnpackUiVArrowGfx(0x240, 3);
	movs	r0, #144	@,
	movs	r1, #3	@,
	ldr	r3, .L3460+72	@ tmp168,
	lsls	r0, r0, #2	@,,
	bl	.L14		@
@ Patches/../C_code.c:5218: 	RedrawAllText(proc); 
	mov	r0, r9	@, proc
	bl	RedrawAllText		@
@ Patches/../C_code.c:5226: 	gLCDControlBuffer.dispcnt.mode = 0;
	mov	r3, r8	@ tmp182, tmp182
	movs	r2, #120	@ tmp176,
	ldrh	r3, [r3]	@ MEM[(struct DispCnt *)&gLCDControlBuffer], MEM[(struct DispCnt *)&gLCDControlBuffer]
	ands	r2, r3	@ tmp175, MEM[(struct DispCnt *)&gLCDControlBuffer]
	movs	r3, #128	@ tmp179,
	lsls	r3, r3, #5	@ tmp179, tmp179,
	orrs	r3, r2	@ tmp178, tmp175
	mov	r2, r8	@ tmp182, tmp182
@ Patches/../C_code.c:5254: 	BG_EnableSyncByMask(BG0_SYNC_BIT|BG1_SYNC_BIT);
	movs	r0, #3	@,
@ Patches/../C_code.c:5226: 	gLCDControlBuffer.dispcnt.mode = 0;
	strh	r3, [r2]	@ tmp178, MEM[(struct DispCnt *)&gLCDControlBuffer]
@ Patches/../C_code.c:5254: 	BG_EnableSyncByMask(BG0_SYNC_BIT|BG1_SYNC_BIT);
	bl	.L785		@
@ Patches/../C_code.c:5255: }
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r3, r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3461:
	.align	2
.L3460:
	.word	RegisterBlankTile
	.word	SetupBackgrounds
	.word	gLCDControlBuffer
	.word	gBG0TilemapBuffer
	.word	BG_Fill
	.word	BG_EnableSyncByMask
	.word	ResetTextFont
	.word	SetTextFontGlyphs
	.word	SetTextFont
	.word	InitSystemTextFont
	.word	ResetText
	.word	gStatScreen+24
	.word	.LANCHOR8+44
	.word	InitText
	.word	.LANCHOR2+52
	.word	gStatScreen+176
	.word	gStatScreen+328
	.word	LoadObjUIGfx
	.word	UnpackUiVArrowGfx
	.size	InitDraw, .-InitDraw
	.align	1
	.p2align 2,,3
	.global	StartConfigMenu
	.syntax unified
	.code	16
	.thumb_func
	.type	StartConfigMenu, %function
StartConfigMenu:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	movs	r1, r0	@ parent, tmp208
@ Patches/../C_code.c:5259: 	RecruitValues->pauseNameReplace = true; 
	movs	r0, #8	@ tmp138,
	ldr	r3, .L3482	@ tmp133,
	ldr	r2, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r2]	@ RecruitValues.325_1->pauseNameReplace, RecruitValues.325_1->pauseNameReplace
	orrs	r3, r0	@ tmp140, tmp138
@ Patches/../C_code.c:5258: ConfigMenuProc* StartConfigMenu(ProcPtr parent) { 
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:5261: 	if (parent) { proc = (ConfigMenuProc*)Proc_StartBlocking((ProcPtr)&ConfigMenuProcCmd, parent); } 
	ldr	r0, .L3482+4	@ tmp142,
@ Patches/../C_code.c:5259: 	RecruitValues->pauseNameReplace = true; 
	strb	r3, [r2]	@ tmp140, RecruitValues.325_1->pauseNameReplace
@ Patches/../C_code.c:5261: 	if (parent) { proc = (ConfigMenuProc*)Proc_StartBlocking((ProcPtr)&ConfigMenuProcCmd, parent); } 
	cmp	r1, #0	@ parent,
	beq	.L3463		@,
@ Patches/../C_code.c:5261: 	if (parent) { proc = (ConfigMenuProc*)Proc_StartBlocking((ProcPtr)&ConfigMenuProcCmd, parent); } 
	ldr	r3, .L3482+8	@ tmp143,
	bl	.L14		@
	movs	r4, r0	@ <retval>, tmp209
.L3464:
@ Patches/../C_code.c:5263: 	if (proc) { 
	cmp	r4, #0	@ <retval>,
	beq	.L3462		@,
@ Patches/../C_code.c:5265: 		proc->Option[i] = 0; } 
	movs	r0, r4	@ tmp146, <retval>
	movs	r2, #20	@,
	ldr	r3, .L3482+12	@ tmp149,
	movs	r1, #0	@,
	adds	r0, r0, #57	@ tmp146,
	bl	.L14		@
@ Patches/../C_code.c:5266: 		proc->reloadUnits = false; 
	movs	r3, #54	@ tmp152,
	movs	r2, #0	@ tmp153,
	strb	r2, [r4, r3]	@ tmp153, proc_9->reloadUnits
@ Patches/../C_code.c:5267: 		if (!DefaultConfigToVanilla) {
	ldr	r3, .L3482+16	@ tmp155,
@ Patches/../C_code.c:5267: 		if (!DefaultConfigToVanilla) {
	ldr	r3, [r3]	@ DefaultConfigToVanilla, DefaultConfigToVanilla
	cmp	r3, #0	@ DefaultConfigToVanilla,
	beq	.L3480		@,
.L3466:
@ Patches/../C_code.c:5281: 		proc->calledFromChapter = false; 
	movs	r3, #0	@ tmp170,
	movs	r2, #53	@ tmp169,
	strb	r3, [r4, r2]	@ tmp170, proc_9->calledFromChapter
@ Patches/../C_code.c:5280: 		proc->id = 1; 
	subs	r2, r2, #52	@ tmp172,
	strh	r2, [r4, #48]	@ tmp172, MEM <unsigned short> [(void *)proc_9 + 48B]
@ Patches/../C_code.c:5283: 		proc->redraw = 0; 
	adds	r2, r2, #49	@ tmp174,
	strb	r3, [r4, r2]	@ tmp170, proc_9->redraw
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	ldr	r3, .L3482+20	@ tmp177,
	ldr	r1, [r3]	@ NumberOfSkills.6_61, NumberOfSkills
	cmp	r1, #1	@ NumberOfSkills.6_61,
	ble	.L3467		@,
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	movs	r3, #1	@ i,
	ldr	r0, .L3482+24	@ tmp207,
	b	.L3469		@
.L3481:
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	adds	r3, r3, #1	@ i,
@ Patches/../C_code.c:198: 	for (int i = id; i < NumberOfSkills; ++i) { 
	cmp	r3, r1	@ i, NumberOfSkills.6_61
	beq	.L3473		@,
.L3469:
@ Patches/../C_code.c:199: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r2, [r0, r3]	@ MEM[(unsigned char *)&AlwaysSkillTable + _32 * 1], MEM[(unsigned char *)&AlwaysSkillTable + _32 * 1]
	cmp	r2, #0	@ MEM[(unsigned char *)&AlwaysSkillTable + _32 * 1],
	beq	.L3481		@,
@ Patches/../C_code.c:5284: 		proc->skill = GetNextAlwaysSkill(0); 
	lsls	r3, r3, #24	@ tmp184, i,
	lsrs	r3, r3, #24	@ prephitmp_54, tmp184,
.L3471:
	movs	r2, #55	@ tmp185,
@ Patches/../C_code.c:5285: 		proc->choosingSkill = 0; 
	movs	r5, #0	@ tmp188,
@ Patches/../C_code.c:5284: 		proc->skill = GetNextAlwaysSkill(0); 
	strb	r3, [r4, r2]	@ prephitmp_54, proc_9->skill
@ Patches/../C_code.c:5285: 		proc->choosingSkill = 0; 
	movs	r3, #56	@ tmp187,
	strb	r5, [r4, r3]	@ tmp188, proc_9->choosingSkill
@ Patches/../C_code.c:5287: 		if (RandValues->seed) { proc->freezeSeed = true; } 
	ldr	r3, .L3482+28	@ tmp191,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldr	r3, [r3]	@ *RandValues.327_5, *RandValues.327_5
	lsls	r3, r3, #12	@ tmp194, *RandValues.327_5,
@ Patches/../C_code.c:5287: 		if (RandValues->seed) { proc->freezeSeed = true; } 
	subs	r2, r3, #1	@ tmp197, tmp194
	sbcs	r3, r3, r2	@ tmp196, tmp194, tmp197
	movs	r2, #52	@ tmp198,
@ Patches/../C_code.c:5288: 		proc->seed = GetInitialSeed(2); 
	movs	r0, #2	@,
	strb	r3, [r4, r2]	@ tmp196, MEM <struct ConfigMenuProc> [(void *)proc_9].freezeSeed
	bl	GetInitialSeed		@
@ Patches/../C_code.c:5289: 		proc->digit = 0; 
	movs	r3, #51	@ tmp199,
@ Patches/../C_code.c:5288: 		proc->seed = GetInitialSeed(2); 
	str	r0, [r4, #44]	@ tmp211, proc_9->seed
@ Patches/../C_code.c:5289: 		proc->digit = 0; 
	strb	r5, [r4, r3]	@ tmp188, proc_9->digit
@ Patches/../C_code.c:5290: 		StartGreenText(proc); 
	movs	r0, r4	@, <retval>
	ldr	r3, .L3482+32	@ tmp202,
	bl	.L14		@
@ Patches/../C_code.c:5292: 		proc->Option[16] = 1; // timed hits 
	movs	r3, #73	@ tmp203,
	movs	r2, #1	@ tmp204,
	strb	r2, [r4, r3]	@ tmp204, proc_9->Option[16]
.L3462:
@ Patches/../C_code.c:5303: } 
	@ sp needed	@
	movs	r0, r4	@, <retval>
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L3472:
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	cmp	r2, r1	@ i, NumberOfSkills.6_61
	beq	.L3471		@,
.L3473:
@ Patches/../C_code.c:202: 		if (AlwaysSkillTable[i]) { return i; } 
	ldrb	r3, [r0, r2]	@ prephitmp_54, MEM[(unsigned char *)&AlwaysSkillTable + _33 * 1]
@ Patches/../C_code.c:202: 		if (AlwaysSkillTable[i]) { return i; } 
	cmp	r3, #0	@ prephitmp_54,
	beq	.L3472		@,
@ Patches/../C_code.c:5284: 		proc->skill = GetNextAlwaysSkill(0); 
	lsls	r2, r2, #24	@ tmp183, i,
	lsrs	r3, r2, #24	@ prephitmp_54, tmp183,
	b	.L3471		@
.L3480:
@ Patches/../C_code.c:5268: 		proc->Option[0] = OptionAmounts[0]-1; // start on 100% 
	adds	r2, r2, #20	@ tmp148,
	adds	r3, r3, #57	@ tmp157,
	strb	r2, [r4, r3]	@ tmp148, proc_9->Option[0]
@ Patches/../C_code.c:5271: 		proc->Option[3] = 1; 
	ldr	r2, .L3482+36	@ tmp162,
@ Patches/../C_code.c:5269: 		proc->Option[1] = 1; 
	movs	r3, #2	@ tmp160,
@ Patches/../C_code.c:5271: 		proc->Option[3] = 1; 
	str	r2, [r4, #60]	@ tmp162, MEM <unsigned int> [(signed char *)proc_9 + 60B]
@ Patches/../C_code.c:5275: 		proc->Option[7] = 1; 
	movs	r1, #1	@ tmp164,
	movs	r2, #64	@ tmp163,
@ Patches/../C_code.c:5269: 		proc->Option[1] = 1; 
	adds	r3, r3, #255	@ tmp160,
	strh	r3, [r4, #58]	@ tmp160, MEM <unsigned short> [(signed char *)proc_9 + 58B]
@ Patches/../C_code.c:5275: 		proc->Option[7] = 1; 
	strb	r1, [r4, r2]	@ tmp164, proc_9->Option[7]
@ Patches/../C_code.c:5277: 		proc->Option[9] = 1; // Random BGM 
	adds	r2, r2, #2	@ tmp166,
	strh	r3, [r4, r2]	@ tmp160, MEM <vector(2) signed char> [(signed char *)proc_9 + 66B]
	b	.L3466		@
.L3463:
@ Patches/../C_code.c:5262: 	else { proc = (ConfigMenuProc*)Proc_Start((ProcPtr)&ConfigMenuProcCmd, PROC_TREE_3); } 
	movs	r1, #3	@,
	ldr	r3, .L3482+40	@ tmp145,
	bl	.L14		@
	movs	r4, r0	@ <retval>, tmp210
	b	.L3464		@
.L3467:
@ Patches/../C_code.c:201: 	for (int i = 0; i < NumberOfSkills; ++i) { 
	cmp	r1, #1	@ NumberOfSkills.6_61,
	bne	.L3474		@,
	movs	r2, #0	@ i,
	ldr	r0, .L3482+24	@ tmp207,
	b	.L3473		@
.L3474:
	movs	r3, #0	@ prephitmp_54,
	b	.L3471		@
.L3483:
	.align	2
.L3482:
	.word	RecruitValues
	.word	ConfigMenuProcCmd
	.word	Proc_StartBlocking
	.word	memset
	.word	DefaultConfigToVanilla
	.word	NumberOfSkills
	.word	AlwaysSkillTable
	.word	RandValues
	.word	StartGreenText
	.word	16843009
	.word	Proc_Start
	.size	StartConfigMenu, .-StartConfigMenu
	.align	1
	.p2align 2,,3
	.global	MenuStartConfigMenu
	.syntax unified
	.code	16
	.thumb_func
	.type	MenuStartConfigMenu, %function
MenuStartConfigMenu:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:5321: 	gLCDControlBuffer.dispcnt.bg0_on = 0;
	movs	r2, #15	@ tmp187,
@ Patches/../C_code.c:5320: int MenuStartConfigMenu(ProcPtr parent) { 
	mov	lr, r8	@,
@ Patches/../C_code.c:5321: 	gLCDControlBuffer.dispcnt.bg0_on = 0;
	ldr	r5, .L3501	@ tmp388,
	ldrb	r3, [r5, #1]	@ MEM <unsigned char> [(struct DispCnt *)&gLCDControlBuffer + 1B], MEM <unsigned char> [(struct DispCnt *)&gLCDControlBuffer + 1B]
@ Patches/../C_code.c:5320: int MenuStartConfigMenu(ProcPtr parent) { 
	push	{lr}	@
@ Patches/../C_code.c:5321: 	gLCDControlBuffer.dispcnt.bg0_on = 0;
	bics	r3, r2	@ tmp186, tmp187
	strb	r3, [r5, #1]	@ tmp186, MEM <unsigned char> [(struct DispCnt *)&gLCDControlBuffer + 1B]
@ Patches/../C_code.c:5325: 	ConfigMenuProc* proc = StartConfigMenu(parent); 
	bl	StartConfigMenu		@
@ Patches/../C_code.c:5326: 	proc->calledFromChapter = true; 
	movs	r3, #53	@ tmp193,
	movs	r2, #1	@ tmp194,
@ Patches/../C_code.c:5329: 	proc->Option[0] = RandValues->variance; 
	ldr	r6, .L3501+4	@ tmp389,
@ Patches/../C_code.c:5326: 	proc->calledFromChapter = true; 
	strb	r2, [r0, r3]	@ tmp194, proc_71->calledFromChapter
@ Patches/../C_code.c:5329: 	proc->Option[0] = RandValues->variance; 
	ldr	r3, [r6]	@ RandValues, RandValues
	ldrh	r3, [r3, #2]	@ *RandValues.328_1, *RandValues.328_1
	lsls	r3, r3, #23	@ tmp202, *RandValues.328_1,
	lsrs	r3, r3, #27	@ tmp201, tmp202,
@ Patches/../C_code.c:5329: 	proc->Option[0] = RandValues->variance; 
	adds	r2, r2, #56	@ tmp203,
	strb	r3, [r0, r2]	@ tmp201, proc_71->Option[0]
@ Patches/../C_code.c:5330: 	proc->Option[1] = RecruitValues->recruitment; 
	ldr	r3, .L3501+8	@ tmp204,
	ldr	r1, [r3]	@ RecruitValues.329_4, RecruitValues
	ldrb	r3, [r1]	@ *RecruitValues.329_4, *RecruitValues.329_4
	lsls	r3, r3, #29	@ tmp209, *RecruitValues.329_4,
	lsrs	r3, r3, #29	@ tmp208, tmp209,
@ Patches/../C_code.c:5330: 	proc->Option[1] = RecruitValues->recruitment; 
	adds	r2, r2, #1	@ tmp210,
	strb	r3, [r0, r2]	@ tmp208, proc_71->Option[1]
@ Patches/../C_code.c:5325: 	ConfigMenuProc* proc = StartConfigMenu(parent); 
	movs	r4, r0	@ proc, tmp396
@ Patches/../C_code.c:5331: 	proc->Option[2] = RandBitflags->base; 
	movs	r0, #59	@ tmp217,
@ Patches/../C_code.c:5331: 	proc->Option[2] = RandBitflags->base; 
	ldr	r7, .L3501+12	@ tmp390,
	ldr	r3, [r7]	@ RandBitflags.330_7, RandBitflags
	ldrb	r2, [r3]	@ *RandBitflags.330_7, *RandBitflags.330_7
	lsls	r2, r2, #30	@ tmp216, *RandBitflags.330_7,
	lsrs	r2, r2, #30	@ tmp215, tmp216,
@ Patches/../C_code.c:5331: 	proc->Option[2] = RandBitflags->base; 
	strb	r2, [r4, r0]	@ tmp215, proc_71->Option[2]
@ Patches/../C_code.c:5332: 	proc->Option[3] = RandBitflags->growth + (RandBitflags->grow50*4); 
	movs	r2, #4	@ tmp228,
@ Patches/../C_code.c:5332: 	proc->Option[3] = RandBitflags->growth + (RandBitflags->grow50*4); 
	ldrb	r0, [r3, #3]	@ *RandBitflags.330_7, *RandBitflags.330_7
	lsls	r0, r0, #27	@ tmp222, *RandBitflags.330_7,
@ Patches/../C_code.c:5332: 	proc->Option[3] = RandBitflags->growth + (RandBitflags->grow50*4); 
	asrs	r0, r0, #31	@ tmp223, tmp222,
	ands	r2, r0	@ tmp227, tmp223
@ Patches/../C_code.c:5332: 	proc->Option[3] = RandBitflags->growth + (RandBitflags->grow50*4); 
	ldrb	r0, [r3]	@ *RandBitflags.330_7, *RandBitflags.330_7
	lsls	r0, r0, #28	@ tmp233, *RandBitflags.330_7,
	lsrs	r0, r0, #30	@ tmp232, tmp233,
@ Patches/../C_code.c:5332: 	proc->Option[3] = RandBitflags->growth + (RandBitflags->grow50*4); 
	adds	r2, r2, r0	@ tmp235, tmp227, tmp232
@ Patches/../C_code.c:5332: 	proc->Option[3] = RandBitflags->growth + (RandBitflags->grow50*4); 
	movs	r0, #60	@ tmp236,
	strb	r2, [r4, r0]	@ tmp235, proc_71->Option[3]
@ Patches/../C_code.c:5333: 	proc->Option[4] = RandBitflags->levelups; 
	ldrb	r2, [r3]	@ *RandBitflags.330_7, *RandBitflags.330_7
	lsls	r2, r2, #26	@ tmp242, *RandBitflags.330_7,
	lsrs	r2, r2, #30	@ tmp241, tmp242,
@ Patches/../C_code.c:5333: 	proc->Option[4] = RandBitflags->levelups; 
	adds	r0, r0, #1	@ tmp243,
	strb	r2, [r4, r0]	@ tmp241, proc_71->Option[4]
@ Patches/../C_code.c:5334: 	proc->Option[5] = RandBitflags->caps; 
	ldrh	r2, [r3]	@ *RandBitflags.330_7, *RandBitflags.330_7
	lsls	r2, r2, #23	@ tmp248, *RandBitflags.330_7,
	lsrs	r2, r2, #29	@ tmp247, tmp248,
@ Patches/../C_code.c:5334: 	proc->Option[5] = RandBitflags->caps; 
	adds	r0, r0, #1	@ tmp249,
	strb	r2, [r4, r0]	@ tmp247, proc_71->Option[5]
@ Patches/../C_code.c:5336: 	if (RecruitValues->newClasses) { proc->Option[6] = 4; } 
	ldrb	r0, [r1]	@ *RecruitValues.329_4, *RecruitValues.329_4
	movs	r1, #48	@ tmp261,
	mov	ip, r1	@ tmp261, tmp261
@ Patches/../C_code.c:5335: 	proc->Option[6] = RandBitflags->class; 
	ldrb	r2, [r3, #1]	@ *RandBitflags.330_7, *RandBitflags.330_7
	lsls	r2, r2, #29	@ tmp254, *RandBitflags.330_7,
	lsrs	r2, r2, #30	@ _21, tmp254,
	mov	r8, r2	@ _21, _21
@ Patches/../C_code.c:5336: 	if (RecruitValues->newClasses) { proc->Option[6] = 4; } 
	mov	r2, ip	@ tmp261, tmp261
@ Patches/../C_code.c:5336: 	if (RecruitValues->newClasses) { proc->Option[6] = 4; } 
	subs	r1, r1, #44	@ _22,
@ Patches/../C_code.c:5336: 	if (RecruitValues->newClasses) { proc->Option[6] = 4; } 
	tst	r2, r0	@ tmp261, *RecruitValues.329_4
	bne	.L3485		@,
@ Patches/../C_code.c:5335: 	proc->Option[6] = RandBitflags->class; 
	mov	r1, r8	@ _22, _21
.L3485:
	movs	r2, #63	@ tmp266,
	strb	r1, [r4, r2]	@ _22, MEM <struct ConfigMenuProc> [(void *)proc_71].Option[6]
@ Patches/../C_code.c:5337: 	if (RandBitflags->itemStats && RandBitflags->foundItems) { proc->Option[7] = 1; } 
	movs	r1, #24	@ tmp273,
	ldrb	r2, [r3, #2]	@ *RandBitflags.330_7, *RandBitflags.330_7
@ Patches/../C_code.c:5337: 	if (RandBitflags->itemStats && RandBitflags->foundItems) { proc->Option[7] = 1; } 
	tst	r1, r2	@ tmp273, *RandBitflags.330_7
	bne	.L3499		@,
@ Patches/../C_code.c:5339: 	else if (RandBitflags->foundItems) { proc->Option[7] = 2; } 
	ldrb	r2, [r3, #1]	@ *RandBitflags.330_7, *RandBitflags.330_7
@ Patches/../C_code.c:5339: 	else if (RandBitflags->foundItems) { proc->Option[7] = 2; } 
	movs	r3, #48	@ tmp291,
	ands	r3, r2	@ tmp293, *RandBitflags.330_7
	subs	r2, r3, #1	@ tmp296, tmp293
	sbcs	r3, r3, r2	@ tmp295, tmp293, tmp296
	lsls	r3, r3, #1	@ _60, tmp295,
.L3487:
@ Patches/../C_code.c:5337: 	if (RandBitflags->itemStats && RandBitflags->foundItems) { proc->Option[7] = 1; } 
	movs	r2, #64	@ tmp299,
	strb	r3, [r4, r2]	@ _60, proc_71->Option[7]
@ Patches/../C_code.c:5341: 	proc->Option[8] = CheckFlag(CasualModeFlag);
	ldr	r3, .L3501+16	@ tmp301,
	ldr	r0, [r3]	@ CasualModeFlag, CasualModeFlag
	ldr	r3, .L3501+20	@ tmp303,
	bl	.L14		@
@ Patches/../C_code.c:5341: 	proc->Option[8] = CheckFlag(CasualModeFlag);
	movs	r3, #65	@ tmp304,
@ Patches/../C_code.c:5342: 	proc->Option[9] = RandBitflags->randMusic;		
	movs	r1, #66	@ tmp312,
@ Patches/../C_code.c:5341: 	proc->Option[8] = CheckFlag(CasualModeFlag);
	strb	r0, [r4, r3]	@ tmp397, proc_71->Option[8]
@ Patches/../C_code.c:5346: 	proc->Option[13] = RandValues->bonus;		
	movs	r0, #70	@ tmp337,
@ Patches/../C_code.c:5342: 	proc->Option[9] = RandBitflags->randMusic;		
	ldr	r3, [r7]	@ RandBitflags.342_34, RandBitflags
	ldrb	r2, [r3, #1]	@ *RandBitflags.342_34, *RandBitflags.342_34
	lsrs	r2, r2, #6	@ tmp310, *RandBitflags.342_34,
@ Patches/../C_code.c:5342: 	proc->Option[9] = RandBitflags->randMusic;		
	strb	r2, [r4, r1]	@ tmp310, proc_71->Option[9]
@ Patches/../C_code.c:5343: 	proc->Option[10] = RandBitflags->colours;		
	ldrb	r2, [r3, #2]	@ *RandBitflags.342_34, *RandBitflags.342_34
	lsls	r2, r2, #29	@ tmp317, *RandBitflags.342_34,
	lsrs	r2, r2, #29	@ tmp316, tmp317,
@ Patches/../C_code.c:5343: 	proc->Option[10] = RandBitflags->colours;		
	adds	r1, r1, #1	@ tmp318,
	strb	r2, [r4, r1]	@ tmp316, proc_71->Option[10]
@ Patches/../C_code.c:5344: 	proc->Option[11] = RandBitflags->itemDur;		
	ldrb	r2, [r3, #2]	@ *RandBitflags.342_34, *RandBitflags.342_34
	lsls	r2, r2, #25	@ tmp323, *RandBitflags.342_34,
	lsrs	r2, r2, #30	@ tmp322, tmp323,
@ Patches/../C_code.c:5344: 	proc->Option[11] = RandBitflags->itemDur;		
	adds	r1, r1, #1	@ tmp324,
	strb	r2, [r4, r1]	@ tmp322, proc_71->Option[11]
@ Patches/../C_code.c:5345: 	proc->Option[12] = RandBitflags->playerBonus;	
	ldrh	r2, [r3, #2]	@ *RandBitflags.342_34, *RandBitflags.342_34
	lsls	r2, r2, #20	@ tmp329, *RandBitflags.342_34,
	lsrs	r2, r2, #27	@ tmp328, tmp329,
@ Patches/../C_code.c:5345: 	proc->Option[12] = RandBitflags->playerBonus;	
	adds	r1, r1, #1	@ tmp330,
	strb	r2, [r4, r1]	@ tmp328, proc_71->Option[12]
@ Patches/../C_code.c:5346: 	proc->Option[13] = RandValues->bonus;		
	ldr	r1, [r6]	@ RandValues.346_43, RandValues
	ldrb	r2, [r1, #3]	@ *RandValues.346_43, *RandValues.346_43
	lsls	r2, r2, #26	@ tmp336, *RandValues.346_43,
	lsrs	r2, r2, #27	@ tmp335, tmp336,
@ Patches/../C_code.c:5346: 	proc->Option[13] = RandValues->bonus;		
	strb	r2, [r4, r0]	@ tmp335, proc_71->Option[13]
@ Patches/../C_code.c:5347: 	proc->Option[14] = RandBitflags->fog;
	movs	r2, #71	@ tmp343,
@ Patches/../C_code.c:5347: 	proc->Option[14] = RandBitflags->fog;
	ldrb	r3, [r3, #3]	@ *RandBitflags.342_34, *RandBitflags.342_34
	lsls	r3, r3, #25	@ tmp342, *RandBitflags.342_34,
	lsrs	r3, r3, #30	@ tmp341, tmp342,
@ Patches/../C_code.c:5347: 	proc->Option[14] = RandBitflags->fog;
	strb	r3, [r4, r2]	@ tmp341, proc_71->Option[14]
@ Patches/../C_code.c:5350: 	if (DisplayTimedHitsOption) { 
	ldr	r3, .L3501+24	@ tmp344,
@ Patches/../C_code.c:5350: 	if (DisplayTimedHitsOption) { 
	ldr	r3, [r3]	@ DisplayTimedHitsOption, DisplayTimedHitsOption
	cmp	r3, #0	@ DisplayTimedHitsOption,
	beq	.L3489		@,
@ Patches/../C_code.c:5352: 		if (TimedHitsDifficultyRam->alwaysA) { proc->Option[16] = 1; }  
	ldr	r3, .L3501+28	@ tmp347,
	ldr	r3, [r3]	@ TimedHitsDifficultyRam, TimedHitsDifficultyRam
	ldrb	r2, [r3]	@ _50, *TimedHitsDifficultyRam.349_49
@ Patches/../C_code.c:5353: 		if (TimedHitsDifficultyRam->difficulty == 2) { proc->Option[16] = 2; }  
	movs	r3, #31	@ tmp351,
	ands	r3, r2	@ _52, _50
@ Patches/../C_code.c:5353: 		if (TimedHitsDifficultyRam->difficulty == 2) { proc->Option[16] = 2; }  
	cmp	r3, #2	@ _52,
	beq	.L3491		@,
@ Patches/../C_code.c:5354: 		if (TimedHitsDifficultyRam->difficulty == 3) { proc->Option[16] = 3; }  
	cmp	r3, #3	@ _52,
	bne	.L3500		@,
.L3491:
@ Patches/../C_code.c:5354: 		if (TimedHitsDifficultyRam->difficulty == 3) { proc->Option[16] = 3; }  
	movs	r2, #73	@ tmp364,
	strb	r3, [r4, r2]	@ _52, proc_71->Option[16]
.L3489:
@ Patches/../C_code.c:5358: 	if (DisplayRandomSkillsOption) { 
	ldr	r3, .L3501+32	@ tmp367,
@ Patches/../C_code.c:5358: 	if (DisplayRandomSkillsOption) { 
	ldr	r3, [r3]	@ DisplayRandomSkillsOption, DisplayRandomSkillsOption
	cmp	r3, #0	@ DisplayRandomSkillsOption,
	beq	.L3493		@,
@ Patches/../C_code.c:5359: 		proc->Option[17] = RandValues->skills;
	movs	r2, #74	@ tmp374,
@ Patches/../C_code.c:5359: 		proc->Option[17] = RandValues->skills;
	ldrb	r3, [r1, #3]	@ *RandValues.346_43, *RandValues.346_43
	lsrs	r3, r3, #6	@ tmp372, *RandValues.346_43,
@ Patches/../C_code.c:5359: 		proc->Option[17] = RandValues->skills;
	strb	r3, [r4, r2]	@ tmp372, proc_71->Option[17]
@ Patches/../C_code.c:5360: 		proc->skill = AlwaysSkill[0];
	ldr	r3, .L3501+36	@ tmp376,
	ldr	r3, [r3]	@ AlwaysSkill, AlwaysSkill
	ldrb	r2, [r3]	@ _57, *AlwaysSkill.354_56
@ Patches/../C_code.c:5360: 		proc->skill = AlwaysSkill[0];
	movs	r3, #55	@ tmp377,
	strb	r2, [r4, r3]	@ _57, proc_71->skill
.L3493:
@ Patches/../C_code.c:5365: } 
	@ sp needed	@
@ Patches/../C_code.c:5363: 	gLCDControlBuffer.dispcnt.bg0_on = 0;
	movs	r2, #1	@ tmp385,
	ldrb	r3, [r5, #1]	@ gLCDControlBuffer.dispcnt.bg0_on, gLCDControlBuffer.dispcnt.bg0_on
	bics	r3, r2	@ tmp384, tmp385
@ Patches/../C_code.c:5365: } 
	movs	r0, #5	@,
@ Patches/../C_code.c:5363: 	gLCDControlBuffer.dispcnt.bg0_on = 0;
	strb	r3, [r5, #1]	@ tmp384, gLCDControlBuffer.dispcnt.bg0_on
@ Patches/../C_code.c:5365: } 
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3499:
@ Patches/../C_code.c:5337: 	if (RandBitflags->itemStats && RandBitflags->foundItems) { proc->Option[7] = 1; } 
	ldrb	r2, [r3, #1]	@ *RandBitflags.330_7, *RandBitflags.330_7
	movs	r3, #48	@ tmp282,
	ands	r3, r2	@ tmp284, *RandBitflags.330_7
	subs	r2, r3, #1	@ tmp392, tmp284
	sbcs	r3, r3, r2	@ tmp391, tmp284, tmp392
	movs	r2, #1	@ tmp394,
	rsbs	r3, r3, #0	@ tmp393, tmp391
	bics	r3, r2	@ _60, tmp394
	adds	r3, r3, #3	@ _60,
	b	.L3487		@
.L3500:
	movs	r3, #73	@ tmp362,
@ Patches/../C_code.c:5352: 		if (TimedHitsDifficultyRam->alwaysA) { proc->Option[16] = 1; }  
	lsls	r2, r2, #26	@ tmp361, _50,
	lsrs	r2, r2, #31	@ tmp360, tmp361,
	strb	r2, [r4, r3]	@ tmp360, MEM <struct ConfigMenuProc> [(void *)proc_71].Option[16]
	b	.L3489		@
.L3502:
	.align	2
.L3501:
	.word	gLCDControlBuffer
	.word	RandValues
	.word	RecruitValues
	.word	RandBitflags
	.word	CasualModeFlag
	.word	CheckFlag
	.word	DisplayTimedHitsOption
	.word	TimedHitsDifficultyRam
	.word	DisplayRandomSkillsOption
	.word	AlwaysSkill
	.size	MenuStartConfigMenu, .-MenuStartConfigMenu
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC634:
	.ascii	"-\000"
	.text
	.align	1
	.p2align 2,,3
	.global	PutNumberBonus
	.syntax unified
	.code	16
	.thumb_func
	.type	PutNumberBonus, %function
PutNumberBonus:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	movs	r4, r0	@ number, tmp153
	movs	r5, r1	@ tm, tmp154
	sub	sp, sp, #12	@,,
@ Patches/../C_code.c:5377:     if (number == 0) { 
	cmp	r0, #0	@ number,
	beq	.L3503		@,
@ Patches/../C_code.c:5381: 	if (number > 0) { 
	ble	.L3505		@,
@ Patches/../C_code.c:5382:     PutSpecialChar(tm, green, 0x15); // + 
	movs	r0, r5	@, tm
	movs	r2, #21	@,
	movs	r1, #4	@,
	ldr	r3, .L3514	@ tmp121,
	bl	.L14		@
@ Patches/../C_code.c:5383:     PutNumberSmall(tm + ((number >= 10) ? 2 : 1), green, number);
	movs	r0, #2	@ iftmp.355_2,
@ Patches/../C_code.c:5383:     PutNumberSmall(tm + ((number >= 10) ? 2 : 1), green, number);
	cmp	r4, #9	@ number,
	ble	.L3506		@,
@ Patches/../C_code.c:5383:     PutNumberSmall(tm + ((number >= 10) ? 2 : 1), green, number);
	adds	r0, r0, #2	@ iftmp.355_2,
.L3506:
@ Patches/../C_code.c:5383:     PutNumberSmall(tm + ((number >= 10) ? 2 : 1), green, number);
	movs	r2, r4	@, number
	movs	r1, #4	@,
	ldr	r3, .L3514+4	@ tmp123,
	adds	r0, r5, r0	@ tmp122, tm, iftmp.355_2
	bl	.L14		@
.L3503:
@ Patches/../C_code.c:5397: }
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3505:
@ Patches/../C_code.c:5389:     PutDrawText(0, tm, gold, 2, 1, "-"); 
	ldr	r3, .L3514+8	@ tmp124,
	str	r3, [sp, #4]	@ tmp124,
	movs	r3, #1	@ tmp125,
	movs	r2, #3	@,
	str	r3, [sp]	@ tmp125,
	ldr	r7, .L3514+12	@ tmp126,
@ Patches/../C_code.c:5386: 	number = ~number + 1; // neg 
	rsbs	r6, r0, #0	@ number, number
@ Patches/../C_code.c:5389:     PutDrawText(0, tm, gold, 2, 1, "-"); 
	adds	r3, r3, #1	@,
	movs	r0, #0	@,
	bl	.L223		@
@ Patches/../C_code.c:5395:     PutNumberSmall(tm + ((number >= 10) ? 2 : 1), gold, number);
	movs	r0, #2	@ iftmp.356_11,
@ Patches/../C_code.c:5395:     PutNumberSmall(tm + ((number >= 10) ? 2 : 1), gold, number);
	adds	r4, r4, #9	@ tmp167, number,
	bge	.L3507		@,
@ Patches/../C_code.c:5395:     PutNumberSmall(tm + ((number >= 10) ? 2 : 1), gold, number);
	adds	r0, r0, #2	@ iftmp.356_11,
.L3507:
@ Patches/../C_code.c:5395:     PutNumberSmall(tm + ((number >= 10) ? 2 : 1), gold, number);
	movs	r2, r6	@, number
	movs	r1, #3	@,
	ldr	r3, .L3514+4	@ tmp128,
	adds	r0, r5, r0	@ tmp127, tm, iftmp.356_11
	bl	.L14		@
	b	.L3503		@
.L3515:
	.align	2
.L3514:
	.word	PutSpecialChar
	.word	PutNumberSmall
	.word	.LC634
	.word	PutDrawText
	.size	PutNumberBonus, .-PutNumberBonus
	.align	1
	.p2align 2,,3
	.global	NewDrawStatWithBar
	.syntax unified
	.code	16
	.thumb_func
	.type	NewDrawStatWithBar, %function
NewDrawStatWithBar:
	@ Function supports interworking.
	@ args = 8, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r7, r9	@,
	mov	r6, r8	@,
	mov	lr, r10	@,
	movs	r5, r3	@ base, tmp234
	push	{r6, r7, lr}	@
	sub	sp, sp, #16	@,,
@ Patches/../C_code.c:2195:     int diff = total - base;
	ldr	r3, [sp, #48]	@ tmp244, total
	subs	r3, r3, r5	@ diff, tmp244, base
	mov	r8, r3	@ diff, diff
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	ldr	r3, .L3527	@ tmp157,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrh	r3, [r3]	@ *RandBitflags.134_42, *RandBitflags.134_42
	lsls	r3, r3, #23	@ tmp162, *RandBitflags.134_42,
	lsrs	r3, r3, #29	@ _43, tmp162,
@ Patches/../C_code.c:2194: {
	movs	r7, r1	@ x, tmp232
	subs	r1, r3, #2	@ tmp164, _43,
	lsls	r1, r1, #24	@ tmp168, tmp164,
	mov	r9, r0	@ num, tmp231
	lsrs	r1, r1, #24	@ tmp167, tmp168,
	cmp	r1, #4	@ tmp167,
	bhi	.L3522		@,
	lsls	r1, r3, #4	@ tmp170, _43,
	subs	r3, r1, r3	@ tmp171, tmp170, _43
	subs	r3, r3, #30	@ result,
.L3517:
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r1, .L3527+4	@ tmp172,
@ Patches/../C_code.c:2146: 	if (result > maxStat) { result = maxStat; } 
	ldr	r6, [r1]	@ result, maxStat
	cmp	r6, r3	@ result, result
	ble	.L3518		@,
	movs	r6, r3	@ result, result
.L3518:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r3, r6, #1	@ tmp240, result,
	beq	.L3526		@,
.L3519:
@ Patches/../C_code.c:2198:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y),
	ldr	r3, .L3527+8	@ tmp225,
	mov	r10, r3	@ tmp225, tmp225
@ Patches/../C_code.c:2198:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y),
	ldr	r3, [sp, #52]	@ tmp246, max
	subs	r1, r5, r3	@ tmp227, base, tmp246
	subs	r3, r1, #1	@ tmp228, tmp227
	sbcs	r1, r1, r3	@ tmp226, tmp227, tmp228
	movs	r3, #1	@ tmp230,
@ Patches/../C_code.c:2198:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y),
	lsls	r4, r2, #5	@ _1, y,
	adds	r0, r4, r7	@ tmp173, _1, x
@ Patches/../C_code.c:2198:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y),
	rsbs	r1, r1, #0	@ tmp229, tmp226
	bics	r1, r3	@ iftmp.138_27, tmp230
@ Patches/../C_code.c:2198:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y),
	lsls	r0, r0, #1	@ tmp174, tmp173,
@ Patches/../C_code.c:2198:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y),
	ldr	r3, .L3527+12	@ tmp176,
	movs	r2, r5	@, base
@ Patches/../C_code.c:2198:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y),
	add	r0, r0, r10	@ _5, tmp225
@ Patches/../C_code.c:2198:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y),
	adds	r1, r1, #4	@ iftmp.138_27,
@ Patches/../C_code.c:2198:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y),
	bl	.L14		@
@ Patches/../C_code.c:2201:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 1, y));
	adds	r1, r7, #1	@ tmp177, x,
	adds	r1, r1, r4	@ tmp178, tmp177, _1
@ Patches/../C_code.c:2201:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 1, y));
	lsls	r1, r1, #1	@ tmp179, tmp178,
@ Patches/../C_code.c:2201:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 1, y));
	mov	r0, r8	@, diff
	add	r1, r1, r10	@ tmp180, tmp225
	bl	PutNumberBonus		@
@ Patches/../C_code.c:2203:     if (total > globalCap)
	ldr	r3, [sp, #48]	@ tmp247, total
	cmp	r3, r6	@ tmp247, result
	ble	.L3521		@,
@ Patches/../C_code.c:2206:         diff = total - base;
	subs	r3, r6, r5	@ diff, result, base
	mov	r8, r3	@ diff, diff
.L3521:
@ Patches/../C_code.c:2210:         gUiTmScratchC + TILEMAP_INDEX(x - 2, y + 1),
	adds	r4, r4, r7	@ tmp184, _1, x
	adds	r4, r4, #30	@ tmp185,
@ Patches/../C_code.c:2210:         gUiTmScratchC + TILEMAP_INDEX(x - 2, y + 1),
	lsls	r4, r4, #1	@ tmp186, tmp185,
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	mov	r10, r4	@ tmp186, tmp186
	ldr	r3, .L3527+16	@ tmp188,
	add	r10, r10, r3	@ tmp186, tmp188
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	mov	r3, r9	@ num, num
	lsls	r7, r3, #1	@ tmp190, num,
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	ldr	r3, .L3527+20	@ tmp251,
	mov	ip, r3	@ tmp251, tmp251
@ Patches/../C_code.c:2211:         TILEREF(0, 6), max * 41 / globalCap, base * 41 / globalCap, diff * 41 / globalCap);
	mov	r3, r8	@ diff, diff
	lsls	r0, r3, #2	@ tmp195, diff,
	add	r0, r0, r8	@ tmp196, diff
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	ldr	r3, .L3527+24	@ tmp202,
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	add	r7, r7, r9	@ tmp191, num
@ Patches/../C_code.c:2211:         TILEREF(0, 6), max * 41 / globalCap, base * 41 / globalCap, diff * 41 / globalCap);
	lsls	r0, r0, #3	@ tmp197, tmp196,
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	movs	r1, r6	@, result
@ Patches/../C_code.c:2211:         TILEREF(0, 6), max * 41 / globalCap, base * 41 / globalCap, diff * 41 / globalCap);
	add	r0, r0, r8	@ tmp198, diff
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	lsls	r7, r7, #1	@ tmp192, tmp191,
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	movs	r4, r3	@ tmp202, tmp202
	add	r7, r7, ip	@ tmp193, tmp251
	bl	.L14		@
	str	r0, [sp, #8]	@ tmp235,
@ Patches/../C_code.c:2211:         TILEREF(0, 6), max * 41 / globalCap, base * 41 / globalCap, diff * 41 / globalCap);
	lsls	r0, r5, #2	@ tmp205, base,
	adds	r0, r0, r5	@ tmp206, tmp205, base
	lsls	r0, r0, #3	@ tmp207, tmp206,
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	movs	r1, r6	@, result
@ Patches/../C_code.c:2211:         TILEREF(0, 6), max * 41 / globalCap, base * 41 / globalCap, diff * 41 / globalCap);
	adds	r0, r0, r5	@ tmp208, tmp207, base
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	bl	.L240		@
@ Patches/../C_code.c:2211:         TILEREF(0, 6), max * 41 / globalCap, base * 41 / globalCap, diff * 41 / globalCap);
	ldr	r3, [sp, #52]	@ tmp254, max
	mov	ip, r3	@ tmp255, tmp255
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	str	r0, [sp, #4]	@ tmp236,
@ Patches/../C_code.c:2211:         TILEREF(0, 6), max * 41 / globalCap, base * 41 / globalCap, diff * 41 / globalCap);
	lsls	r0, r3, #2	@ tmp215, tmp254,
	add	r0, r0, ip	@ tmp216, tmp255
	lsls	r0, r0, #3	@ tmp217, tmp216,
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	movs	r1, r6	@, result
@ Patches/../C_code.c:2211:         TILEREF(0, 6), max * 41 / globalCap, base * 41 / globalCap, diff * 41 / globalCap);
	add	r0, r0, ip	@ tmp218, tmp257
@ Patches/../C_code.c:2209:     DrawStatBarGfx(0x401 + num*6, 6,
	bl	.L240		@
	movs	r3, #192	@,
	str	r0, [sp]	@ tmp237,
	mov	r2, r10	@, tmp187
	movs	r1, #6	@,
	movs	r0, r7	@, tmp193
	ldr	r4, .L3527+28	@ tmp224,
	lsls	r3, r3, #7	@,,
	bl	.L240		@
@ Patches/../C_code.c:2212: }
	add	sp, sp, #16	@,,
	@ sp needed	@
	pop	{r5, r6, r7}
	mov	r10, r7
	mov	r9, r6
	mov	r8, r5
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3522:
@ Patches/../C_code.c:2137: 	switch (RandBitflags->caps) { 
	movs	r3, #1	@ result,
	rsbs	r3, r3, #0	@ result, result
	b	.L3517		@
.L3526:
@ Patches/../C_code.c:2152: 	if (result == (-1)) { result = 30; } 
	adds	r6, r6, #31	@ result,
	b	.L3519		@
.L3528:
	.align	2
.L3527:
	.word	RandBitflags
	.word	maxStat
	.word	gUiTmScratchA
	.word	PutNumberOrBlank
	.word	gUiTmScratchC
	.word	1025
	.word	__aeabi_idiv
	.word	DrawStatBarGfx
	.size	NewDrawStatWithBar, .-NewDrawStatWithBar
	.align	1
	.p2align 2,,3
	.global	PrintDebugNumberToBG
	.syntax unified
	.code	16
	.thumb_func
	.type	PrintDebugNumberToBG, %function
PrintDebugNumberToBG:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r9	@,
	mov	r7, r8	@,
	push	{r7, lr}	@
	movs	r4, r3	@ n, tmp150
	sub	sp, sp, #12	@,,
@ Patches/../C_code.c:5407: 	while (n != 0) {
	cmp	r3, #0	@ n,
	beq	.L3529		@,
@ Patches/../C_code.c:5411:         PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(x, y), (char *)&c);
	lsls	r2, r2, #5	@ tmp128, y,
	ldr	r3, .L3536	@ tmp131,
	adds	r5, r2, r1	@ tmp129, tmp128, x
	lsls	r5, r5, #1	@ tmp130, tmp129,
	adds	r5, r5, r3	@ ivtmp.2004, tmp130, tmp131
	ldr	r3, .L3536+4	@ tmp146,
	mov	r9, r3	@ tmp146, tmp146
	mov	r3, sp	@ tmp155,
	adds	r6, r3, #6	@ tmp145, tmp155,
	ldr	r3, .L3536+8	@ tmp147,
	mov	r8, r3	@ tmp147, tmp147
	ldr	r7, .L3536+12	@ tmp144,
.L3531:
@ Patches/../C_code.c:5408:         u16 c = '0' + Mod(n, 10);
	movs	r1, #10	@,
	movs	r0, r4	@, n
	bl	.L557		@
@ Patches/../C_code.c:5408:         u16 c = '0' + Mod(n, 10);
	adds	r0, r0, #48	@ tmp135,
@ Patches/../C_code.c:5410:         n /= 10;
	movs	r1, #10	@,
@ Patches/../C_code.c:5408:         u16 c = '0' + Mod(n, 10);
	strh	r0, [r6]	@ tmp135, c
@ Patches/../C_code.c:5410:         n /= 10;
	movs	r0, r4	@, n
	bl	.L179		@
@ Patches/../C_code.c:5411:         PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(x, y), (char *)&c);
	movs	r1, r6	@, tmp145
@ Patches/../C_code.c:5410:         n /= 10;
	movs	r4, r0	@ n, tmp152
@ Patches/../C_code.c:5411:         PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(x, y), (char *)&c);
	movs	r0, r5	@, ivtmp.2004
	bl	.L223		@
@ Patches/../C_code.c:5407: 	while (n != 0) {
	subs	r5, r5, #2	@ ivtmp.2004,
	cmp	r4, #0	@ n,
	bne	.L3531		@,
.L3529:
@ Patches/../C_code.c:5414: } 
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r6, r7}
	mov	r9, r7
	mov	r8, r6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3537:
	.align	2
.L3536:
	.word	gBG0TilemapBuffer
	.word	Mod
	.word	__aeabi_idiv
	.word	PrintDebugStringToBG
	.size	PrintDebugNumberToBG, .-PrintDebugNumberToBG
	.align	1
	.p2align 2,,3
	.global	StatScreenSelectLoop
	.syntax unified
	.code	16
	.thumb_func
	.type	StatScreenSelectLoop, %function
StatScreenSelectLoop:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:5424: 	if (sKeyStatusBuffer.newKeys & R_BUTTON)
	ldr	r5, .L3559	@ tmp183,
	ldrh	r3, [r5, #8]	@ _1,
@ Patches/../C_code.c:5421: void StatScreenSelectLoop(ProcPtr proc) { 
	movs	r4, r0	@ proc, tmp184
@ Patches/../C_code.c:5424: 	if (sKeyStatusBuffer.newKeys & R_BUTTON)
	lsls	r2, r3, #23	@ tmp188, _1,
	bpl	.L3539		@,
@ Patches/../C_code.c:5426: 			int page = gStatScreen.page; 
	ldr	r3, .L3559+4	@ tmp136,
	ldrb	r6, [r3]	@ _2, gStatScreen
@ Patches/../C_code.c:5428: 			if (SkillSysInstalled) { 
	ldr	r3, .L3559+8	@ tmp137,
@ Patches/../C_code.c:5428: 			if (SkillSysInstalled) { 
	ldr	r3, [r3]	@ SkillSysInstalled, SkillSysInstalled
	cmp	r3, #0	@ SkillSysInstalled,
	bne	.L3557		@,
.L3541:
@ Patches/../C_code.c:5432: 			Proc_Goto(proc, 0); // TODO: label name 
	movs	r1, #0	@,
	movs	r0, r4	@, proc
	ldr	r3, .L3559+12	@ tmp140,
	bl	.L14		@
@ Patches/../C_code.c:5433: 			StartStatScreenHelp(page, proc);
	ldr	r3, .L3559+16	@ tmp141,
	movs	r1, r4	@, proc
	movs	r0, r6	@, page
	bl	.L14		@
@ Patches/../C_code.c:5435: 	if (sKeyStatusBuffer.newKeys & SELECT_BUTTON)
	ldrh	r3, [r5, #8]	@ _1,
.L3539:
@ Patches/../C_code.c:5435: 	if (sKeyStatusBuffer.newKeys & SELECT_BUTTON)
	lsls	r3, r3, #29	@ tmp189, _1,
	bpl	.L3538		@,
@ Patches/../C_code.c:5437: 			int page = gStatScreen.page; 
	ldr	r3, .L3559+4	@ tmp150,
@ Patches/../C_code.c:5439: 			if (SkillSysInstalled) { 
	ldr	r6, .L3559+8	@ tmp151,
@ Patches/../C_code.c:5437: 			int page = gStatScreen.page; 
	ldrb	r5, [r3]	@ _5, gStatScreen
@ Patches/../C_code.c:5439: 			if (SkillSysInstalled) { 
	ldr	r3, [r6]	@ SkillSysInstalled, SkillSysInstalled
	cmp	r3, #0	@ SkillSysInstalled,
	bne	.L3558		@,
.L3545:
@ Patches/../C_code.c:5448: 			if (page) { return; } 
	cmp	r5, #0	@ page,
	bne	.L3538		@,
@ Patches/../C_code.c:5449: 			Proc_Goto(proc, 0); // TODO: label name
	movs	r1, #0	@,
	movs	r0, r4	@, proc
	ldr	r3, .L3559+12	@ tmp157,
	bl	.L14		@
@ Patches/../C_code.c:5450: 			if (!RandBitflags->disp) { RandBitflags->disp = 1; } 
	ldr	r3, .L3559+20	@ tmp158,
@ Patches/../C_code.c:5450: 			if (!RandBitflags->disp) { RandBitflags->disp = 1; } 
	movs	r2, #128	@ tmp167,
@ Patches/../C_code.c:5450: 			if (!RandBitflags->disp) { RandBitflags->disp = 1; } 
	ldr	r1, [r3]	@ RandBitflags.360_9, RandBitflags
	movs	r3, #127	@ tmp177,
@ Patches/../C_code.c:5450: 			if (!RandBitflags->disp) { RandBitflags->disp = 1; } 
	ldrb	r0, [r1, #3]	@ *RandBitflags.360_9, *RandBitflags.360_9
	bics	r2, r0	@ tmp171, *RandBitflags.360_9
	ands	r3, r0	@ tmp176, *RandBitflags.360_9
	orrs	r3, r2	@ tmp180, tmp171
	strb	r3, [r1, #3]	@ tmp180, RandBitflags.360_9->disp
@ Patches/../C_code.c:5452: 			StatScreen_Display(proc); 
	movs	r0, r4	@, proc
	ldr	r3, .L3559+24	@ tmp182,
	bl	.L14		@
.L3538:
@ Patches/../C_code.c:5456: } 
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r0}
	bx	r0
.L3557:
@ Patches/../C_code.c:5429: 				page = GetStatScreenPage(); 
	ldr	r3, .L3559+28	@ tmp139,
	bl	.L14		@
	movs	r6, r0	@ page, tmp185
	b	.L3541		@
.L3558:
@ Patches/../C_code.c:5440: 				page = GetStatScreenPage(); 
	ldr	r3, .L3559+28	@ tmp153,
	bl	.L14		@
@ Patches/../C_code.c:5444: 			if (SkillSysInstalled) { 
	ldr	r3, [r6]	@ SkillSysInstalled, SkillSysInstalled
@ Patches/../C_code.c:5440: 				page = GetStatScreenPage(); 
	movs	r5, r0	@ page, tmp186
@ Patches/../C_code.c:5444: 			if (SkillSysInstalled) { 
	cmp	r3, #0	@ SkillSysInstalled,
	beq	.L3545		@,
@ Patches/../C_code.c:5445: 				if (!PressSelectFE8Something()) { return; } 
	ldr	r3, .L3559+32	@ tmp156,
	bl	.L14		@
@ Patches/../C_code.c:5445: 				if (!PressSelectFE8Something()) { return; } 
	cmp	r0, #0	@ tmp187,
	bne	.L3545		@,
	b	.L3538		@
.L3560:
	.align	2
.L3559:
	.word	sKeyStatusBuffer
	.word	gStatScreen
	.word	SkillSysInstalled
	.word	Proc_Goto
	.word	StartStatScreenHelp
	.word	RandBitflags
	.word	StatScreen_Display
	.word	GetStatScreenPage
	.word	PressSelectFE8Something
	.size	StatScreenSelectLoop, .-StatScreenSelectLoop
	.align	1
	.p2align 2,,3
	.global	DrawGrowthWithDifference
	.syntax unified
	.code	16
	.thumb_func
	.type	DrawGrowthWithDifference, %function
DrawGrowthWithDifference:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:5459: {
	movs	r4, r0	@ x, tmp141
@ Patches/../C_code.c:5464: }
	@ sp needed	@
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	lsls	r7, r1, #5	@ _1, tmp142,
	adds	r0, r0, #1	@ tmp130,
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	ldr	r6, .L3562	@ tmp134,
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	adds	r0, r0, r7	@ tmp131, tmp130, _1
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	lsls	r0, r0, #1	@ tmp132, tmp131,
@ Patches/../C_code.c:5460:     int diff = modified - base;
	subs	r5, r3, r2	@ diff, tmp144, base
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	adds	r0, r0, r6	@ tmp133, tmp132, tmp134
	ldr	r3, .L3562+4	@ tmp135,
	movs	r1, #2	@,
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	adds	r4, r4, #2	@ tmp136,
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	bl	.L14		@
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	adds	r1, r4, r7	@ tmp137, tmp136, _1
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	lsls	r1, r1, #1	@ tmp138, tmp137,
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	movs	r0, r5	@, diff
	adds	r1, r1, r6	@ tmp139, tmp138, tmp134
	bl	PutNumberBonus		@
@ Patches/../C_code.c:5464: }
	pop	{r3, r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3563:
	.align	2
.L3562:
	.word	gUiTmScratchA
	.word	PutNumberOrBlank
	.size	DrawGrowthWithDifference, .-DrawGrowthWithDifference
	.align	1
	.p2align 2,,3
	.global	GetUnitCon
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitCon, %function
GetUnitCon:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5468: int GetUnitCon(struct Unit* unit) { return UNIT_CON(unit); } 
	ldr	r3, [r0, #4]	@ unit_11(D)->pClassData, unit_11(D)->pClassData
@ Patches/../C_code.c:5468: int GetUnitCon(struct Unit* unit) { return UNIT_CON(unit); } 
	@ sp needed	@
@ Patches/../C_code.c:5468: int GetUnitCon(struct Unit* unit) { return UNIT_CON(unit); } 
	ldr	r2, [r0]	@ unit_11(D)->pCharacterData, unit_11(D)->pCharacterData
	ldrb	r3, [r3, #17]	@ tmp127,
	ldrb	r2, [r2, #19]	@ tmp129,
	ldrb	r0, [r0, #26]	@ tmp131,
	lsls	r3, r3, #24	@ tmp127, tmp127,
	lsls	r2, r2, #24	@ tmp129, tmp129,
	asrs	r2, r2, #24	@ tmp129, tmp129,
	asrs	r3, r3, #24	@ tmp127, tmp127,
	lsls	r0, r0, #24	@ tmp131, tmp131,
	adds	r3, r3, r2	@ tmp130, tmp127, tmp129
	asrs	r0, r0, #24	@ tmp131, tmp131,
	adds	r0, r3, r0	@ tmp125, tmp130, tmp131
@ Patches/../C_code.c:5468: int GetUnitCon(struct Unit* unit) { return UNIT_CON(unit); } 
	bx	lr
	.size	GetUnitCon, .-GetUnitCon
	.align	1
	.p2align 2,,3
	.global	GetUnitMov
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMov, %function
GetUnitMov:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5469: int GetUnitMov(struct Unit* unit) { return UNIT_MOV(unit); } 
	ldr	r3, [r0, #4]	@ unit_7(D)->pClassData, unit_7(D)->pClassData
@ Patches/../C_code.c:5469: int GetUnitMov(struct Unit* unit) { return UNIT_MOV(unit); } 
	@ sp needed	@
@ Patches/../C_code.c:5469: int GetUnitMov(struct Unit* unit) { return UNIT_MOV(unit); } 
	ldrb	r3, [r3, #18]	@ tmp123,
	ldrb	r0, [r0, #29]	@ tmp124,
	lsls	r3, r3, #24	@ tmp123, tmp123,
	lsls	r0, r0, #24	@ tmp124, tmp124,
	asrs	r3, r3, #24	@ tmp123, tmp123,
	asrs	r0, r0, #24	@ tmp124, tmp124,
	adds	r0, r3, r0	@ tmp121, tmp123, tmp124
@ Patches/../C_code.c:5469: int GetUnitMov(struct Unit* unit) { return UNIT_MOV(unit); } 
	bx	lr
	.size	GetUnitMov, .-GetUnitMov
	.align	1
	.p2align 2,,3
	.global	GetUnitMag
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMag, %function
GetUnitMag:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5470: int GetUnitMag(struct Unit* unit) { return unit->_u3A; } 
	movs	r3, #58	@ tmp118,
@ Patches/../C_code.c:5470: int GetUnitMag(struct Unit* unit) { return unit->_u3A; } 
	@ sp needed	@
@ Patches/../C_code.c:5470: int GetUnitMag(struct Unit* unit) { return unit->_u3A; } 
	ldrb	r0, [r0, r3]	@ tmp117,
@ Patches/../C_code.c:5470: int GetUnitMag(struct Unit* unit) { return unit->_u3A; } 
	bx	lr
	.size	GetUnitMag, .-GetUnitMag
	.align	1
	.p2align 2,,3
	.global	_GetTalkee
	.syntax unified
	.code	16
	.thumb_func
	.type	_GetTalkee, %function
_GetTalkee:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r10	@,
	mov	r6, r8	@,
	mov	r7, r9	@,
	push	{r6, r7, lr}	@
@ Patches/../C_code.c:5545: 	const struct TalkEventCond* talkCond = GetChapterEventDataPointer(gCh)->characterBasedEvents;
	ldr	r3, .L3589	@ tmp135,
@ Patches/../C_code.c:5544: int _GetTalkee(int unitID) { 
	movs	r5, r0	@ unitID, tmp151
@ Patches/../C_code.c:5545: 	const struct TalkEventCond* talkCond = GetChapterEventDataPointer(gCh)->characterBasedEvents;
	ldrb	r0, [r3]	@ gCh, gCh
	ldr	r3, .L3589+4	@ tmp137,
	bl	.L14		@
	movs	r3, #255	@ tmp156,
	ldr	r4, [r0, #4]	@ ivtmp.2029, _3->characterBasedEvents
	lsls	r3, r3, #4	@ tmp156, tmp156,
	adds	r6, r4, r3	@ _43, ivtmp.2029, tmp156
@ Patches/../C_code.c:5552: 		if (flag) { if (CheckFlag(flag)) { continue; } } 
	ldr	r3, .L3589+8	@ tmp148,
	mov	r10, r3	@ tmp148, tmp148
@ Patches/../C_code.c:5561: 			unit = GetUnitFromCharId(pid); 
	ldr	r3, .L3589+12	@ tmp149,
	mov	r8, r3	@ tmp149, tmp149
@ Patches/../C_code.c:5563: 			if (unit->state & (US_DEAD|US_NOT_DEPLOYED|US_BIT16)) { continue; } 
	ldr	r3, .L3589+16	@ tmp150,
	mov	r9, r3	@ tmp150, tmp150
	b	.L3570		@
.L3588:
@ Patches/../C_code.c:5553: 		pid = talkCond[i].pidB; 
	ldrb	r7, [r4, #9]	@ <retval>, MEM[(unsigned char *)_18 + 9B]
@ Patches/../C_code.c:5559: 		if (pid) { 
	cmp	r7, #0	@ <retval>,
	bne	.L3587		@,
.L3573:
@ Patches/../C_code.c:5548: 	for (int i = 0; i < 255; ++i) { 
	adds	r4, r4, #16	@ ivtmp.2029,
	cmp	r4, r6	@ ivtmp.2029, _43
	beq	.L3568		@,
.L3570:
@ Patches/../C_code.c:5549: 		if (!talkCond[i].eventType) { break; } 
	ldrh	r3, [r4]	@ MEM[(short unsigned int *)_18], MEM[(short unsigned int *)_18]
	cmp	r3, #0	@ MEM[(short unsigned int *)_18],
	beq	.L3568		@,
@ Patches/../C_code.c:5550: 		if (talkCond[i].pidA != unitID) { continue; } 
	ldrb	r3, [r4, #8]	@ MEM[(unsigned char *)_18 + 8B], MEM[(unsigned char *)_18 + 8B]
@ Patches/../C_code.c:5550: 		if (talkCond[i].pidA != unitID) { continue; } 
	cmp	r3, r5	@ MEM[(unsigned char *)_18 + 8B], unitID
	bne	.L3573		@,
@ Patches/../C_code.c:5551: 		flag = talkCond[i].flag; 
	ldrh	r0, [r4, #2]	@ flag, MEM[(short unsigned int *)_18 + 2B]
@ Patches/../C_code.c:5552: 		if (flag) { if (CheckFlag(flag)) { continue; } } 
	cmp	r0, #0	@ flag,
	beq	.L3588		@,
@ Patches/../C_code.c:5552: 		if (flag) { if (CheckFlag(flag)) { continue; } } 
	bl	.L785		@
@ Patches/../C_code.c:5552: 		if (flag) { if (CheckFlag(flag)) { continue; } } 
	cmp	r0, #0	@ tmp153,
	bne	.L3573		@,
@ Patches/../C_code.c:5553: 		pid = talkCond[i].pidB; 
	ldrb	r7, [r4, #9]	@ <retval>, MEM[(unsigned char *)_18 + 9B]
@ Patches/../C_code.c:5559: 		if (pid) { 
	cmp	r7, #0	@ <retval>,
	beq	.L3573		@,
.L3587:
@ Patches/../C_code.c:5561: 			unit = GetUnitFromCharId(pid); 
	lsls	r0, r7, #16	@ _13, <retval>,
	asrs	r0, r0, #16	@ _13, _13,
	bl	.L179		@
@ Patches/../C_code.c:5562: 			if (!UNIT_IS_VALID(unit)) { continue; } 
	cmp	r0, #0	@ unit,
	beq	.L3573		@,
@ Patches/../C_code.c:5562: 			if (!UNIT_IS_VALID(unit)) { continue; } 
	ldr	r3, [r0]	@ unit_32->pCharacterData, unit_32->pCharacterData
	cmp	r3, #0	@ unit_32->pCharacterData,
	beq	.L3573		@,
@ Patches/../C_code.c:5563: 			if (unit->state & (US_DEAD|US_NOT_DEPLOYED|US_BIT16)) { continue; } 
	mov	r2, r9	@ tmp150, tmp150
@ Patches/../C_code.c:5563: 			if (unit->state & (US_DEAD|US_NOT_DEPLOYED|US_BIT16)) { continue; } 
	ldr	r3, [r0, #12]	@ unit_32->state, unit_32->state
@ Patches/../C_code.c:5563: 			if (unit->state & (US_DEAD|US_NOT_DEPLOYED|US_BIT16)) { continue; } 
	tst	r3, r2	@ unit_32->state, tmp150
	bne	.L3573		@,
.L3567:
@ Patches/../C_code.c:5568: } 
	@ sp needed	@
	movs	r0, r7	@, <retval>
	pop	{r5, r6, r7}
	mov	r10, r7
	mov	r9, r6
	mov	r8, r5
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3568:
@ Patches/../C_code.c:5567: 	return 0; 
	movs	r7, #0	@ <retval>,
	b	.L3567		@
.L3590:
	.align	2
.L3589:
	.word	gCh
	.word	GetChapterEventDataPointer
	.word	CheckFlag
	.word	GetUnitFromCharId
	.word	65548
	.size	_GetTalkee, .-_GetTalkee
	.section	.rodata.str1.4
	.align	2
.LC664:
	.ascii	" SRR V1.4.B          by Vesly\000"
	.align	2
.LC667:
	.ascii	"discord.com/invite/XEZ\000"
	.align	2
.LC669:
	.ascii	")\000"
	.align	2
.LC671:
	.ascii	".\000"
	.align	2
.LC673:
	.ascii	"TJQ\000"
	.text
	.align	1
	.p2align 2,,3
	.global	DrawVersionNumber
	.syntax unified
	.code	16
	.thumb_func
	.type	DrawVersionNumber, %function
DrawVersionNumber:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:5758: void DrawVersionNumber(int addr) { 
	movs	r4, r0	@ addr, tmp133
@ Patches/../C_code.c:5760: 	SetupDebugFontForOBJ(0x5000, 5); 
	movs	r0, #160	@,
	movs	r1, #5	@,
	ldr	r3, .L3594	@ tmp119,
	lsls	r0, r0, #7	@,,
	bl	.L14		@
@ Patches/../C_code.c:5778: 	else { PrintDebugStringAsOBJ(0, 0, VersionNumber"          by Vesly"); } 
	ldr	r2, .L3594+4	@ tmp122,
@ Patches/../C_code.c:5773: 	if (!addr) { 
	cmp	r4, #0	@ addr,
	beq	.L3592		@,
@ Patches/../C_code.c:5777: 	if (addr) { PrintDebugStringAsOBJ(0, y+7, VersionNumber"          by Vesly"); y = 5; } 
	movs	r1, #151	@,
	movs	r0, #0	@,
	ldr	r4, .L3594+8	@ tmp132,
	bl	.L240		@
	movs	r6, #0	@ prephitmp_15,
	movs	r7, #6	@ prephitmp_14,
@ Patches/../C_code.c:5777: 	if (addr) { PrintDebugStringAsOBJ(0, y+7, VersionNumber"          by Vesly"); y = 5; } 
	movs	r5, #5	@ y,
.L3593:
@ Patches/../C_code.c:5788: } 
	@ sp needed	@
@ Patches/../C_code.c:5780: 	PrintDebugStringAsOBJ(x+0, y, "discord.com/invite/XEZ");
	movs	r1, r5	@, y
	movs	r0, #20	@,
	ldr	r2, .L3594+12	@ tmp124,
	bl	.L240		@
@ Patches/../C_code.c:5781: 	PrintDebugStringAsOBJ(x+177, y+1, ")");
	movs	r1, r7	@, prephitmp_14
	movs	r0, #197	@,
	ldr	r2, .L3594+16	@ tmp126,
	bl	.L240		@
@ Patches/../C_code.c:5782: 	PrintDebugStringAsOBJ(x+173, y-5, ".");
	movs	r1, r6	@, prephitmp_15
	movs	r0, #193	@,
	ldr	r2, .L3594+20	@ tmp128,
	bl	.L240		@
@ Patches/../C_code.c:5783: 	PrintDebugStringAsOBJ(x+180, y, "TJQ");
	movs	r1, r5	@, y
	movs	r0, #200	@,
	ldr	r2, .L3594+24	@ tmp130,
	bl	.L240		@
@ Patches/../C_code.c:5788: } 
	pop	{r3, r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3592:
@ Patches/../C_code.c:5778: 	else { PrintDebugStringAsOBJ(0, 0, VersionNumber"          by Vesly"); } 
	movs	r1, #0	@,
	movs	r0, #0	@,
	ldr	r4, .L3594+8	@ tmp132,
	bl	.L240		@
	movs	r6, #134	@ prephitmp_15,
	movs	r7, #140	@ prephitmp_14,
@ Patches/../C_code.c:5774: 	y -= 5; 
	movs	r5, #139	@ y,
	b	.L3593		@
.L3595:
	.align	2
.L3594:
	.word	SetupDebugFontForOBJ
	.word	.LC664
	.word	PrintDebugStringAsOBJ
	.word	.LC667
	.word	.LC669
	.word	.LC671
	.word	.LC673
	.size	DrawVersionNumber, .-DrawVersionNumber
	.align	1
	.p2align 2,,3
	.global	DrawStatus
	.syntax unified
	.code	16
	.thumb_func
	.type	DrawStatus, %function
DrawStatus:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 72
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r7, r8	@,
	mov	lr, r9	@,
@ Patches/../C_code.c:5831:     if (gStatScreen.unit->statusIndex != UNIT_STATUS_RECOVER)
	movs	r6, #48	@ tmp136,
@ Patches/../C_code.c:5828: void DrawStatus(int x, int y) { 
	push	{r7, lr}	@
@ Patches/../C_code.c:5831:     if (gStatScreen.unit->statusIndex != UNIT_STATUS_RECOVER)
	movs	r7, #15	@ tmp138,
@ Patches/../C_code.c:5831:     if (gStatScreen.unit->statusIndex != UNIT_STATUS_RECOVER)
	ldr	r4, .L3609	@ tmp210,
	ldr	r5, [r4, #12]	@ _1, gStatScreen.unit
@ Patches/../C_code.c:5831:     if (gStatScreen.unit->statusIndex != UNIT_STATUS_RECOVER)
	ldrb	r3, [r5, r6]	@ *_1, *_1
@ Patches/../C_code.c:5828: void DrawStatus(int x, int y) { 
	mov	r8, r0	@ x, tmp211
	mov	r9, r1	@ y, tmp212
	sub	sp, sp, #76	@,,
@ Patches/../C_code.c:5831:     if (gStatScreen.unit->statusIndex != UNIT_STATUS_RECOVER)
	ands	r3, r7	@ _3, tmp138
@ Patches/../C_code.c:5831:     if (gStatScreen.unit->statusIndex != UNIT_STATUS_RECOVER)
	cmp	r3, #10	@ _3,
	beq	.L3597		@,
@ Patches/../C_code.c:5840:                 GetUnitStatusName(gStatScreen.unit));
	movs	r0, r5	@, _1
@ Patches/../C_code.c:5835:         if (gStatScreen.unit->statusIndex == UNIT_STATUS_NONE)
	cmp	r3, #0	@ _3,
	beq	.L3607		@,
@ Patches/../C_code.c:5847:                 GetUnitStatusName(gStatScreen.unit));
	ldr	r3, .L3609+4	@ tmp147,
	bl	.L14		@
	movs	r3, r0	@ _5, tmp214
@ Patches/../C_code.c:5844:             Text_InsertDrawString(
	movs	r0, r4	@ tmp148, tmp210
	movs	r2, #2	@,
	movs	r1, #22	@,
	ldr	r5, .L3609+8	@ tmp149,
	adds	r0, r0, #136	@ tmp148,
	bl	.L3231		@
@ Patches/../C_code.c:5852:         if (gStatScreen.unit->statusIndex != UNIT_STATUS_NONE)
	movs	r3, #48	@ tmp151,
@ Patches/../C_code.c:5852:         if (gStatScreen.unit->statusIndex != UNIT_STATUS_NONE)
	ldr	r2, [r4, #12]	@ _6, gStatScreen.unit
@ Patches/../C_code.c:5852:         if (gStatScreen.unit->statusIndex != UNIT_STATUS_NONE)
	ldrb	r2, [r2, r3]	@ *_6, *_6
@ Patches/../C_code.c:5852:         if (gStatScreen.unit->statusIndex != UNIT_STATUS_NONE)
	lsls	r3, r2, #28	@ tmp217, *_6,
	bne	.L3608		@,
.L3596:
@ Patches/../C_code.c:5882: }
	add	sp, sp, #76	@,,
	@ sp needed	@
	pop	{r6, r7}
	mov	r9, r7
	mov	r8, r6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3607:
@ Patches/../C_code.c:5840:                 GetUnitStatusName(gStatScreen.unit));
	ldr	r3, .L3609+4	@ tmp144,
	bl	.L14		@
	movs	r3, r0	@ _4, tmp213
@ Patches/../C_code.c:5837:             Text_InsertDrawString(
	movs	r0, r4	@ tmp145, tmp210
	movs	r2, #2	@,
	movs	r1, #24	@,
	ldr	r5, .L3609+8	@ tmp146,
	adds	r0, r0, #136	@ tmp145,
	bl	.L3231		@
@ Patches/../C_code.c:5852:         if (gStatScreen.unit->statusIndex != UNIT_STATUS_NONE)
	movs	r3, #48	@ tmp151,
@ Patches/../C_code.c:5852:         if (gStatScreen.unit->statusIndex != UNIT_STATUS_NONE)
	ldr	r2, [r4, #12]	@ _6, gStatScreen.unit
@ Patches/../C_code.c:5852:         if (gStatScreen.unit->statusIndex != UNIT_STATUS_NONE)
	ldrb	r2, [r2, r3]	@ *_6, *_6
@ Patches/../C_code.c:5852:         if (gStatScreen.unit->statusIndex != UNIT_STATUS_NONE)
	lsls	r3, r2, #28	@ tmp217, *_6,
	beq	.L3596		@,
.L3608:
@ Patches/../C_code.c:5855:                 gUiTmScratchA + TILEMAP_INDEX(x, y),
	mov	r3, r9	@ y, y
	lsls	r0, r3, #5	@ tmp170, y,
	add	r0, r0, r8	@ tmp171, x
@ Patches/../C_code.c:5854:             PutNumberSmall(
	ldr	r3, .L3609+12	@ tmp174,
@ Patches/../C_code.c:5855:                 gUiTmScratchA + TILEMAP_INDEX(x, y),
	lsls	r0, r0, #1	@ tmp172, tmp171,
@ Patches/../C_code.c:5854:             PutNumberSmall(
	adds	r0, r0, r3	@ tmp173, tmp172, tmp174
	movs	r1, #0	@,
	ldr	r3, .L3609+16	@ tmp175,
	lsrs	r2, r2, #4	@ tmp168, *_6,
	bl	.L14		@
	b	.L3596		@
.L3597:
@ Patches/../C_code.c:5863:         struct Unit tmp = *gStatScreen.unit;
	movs	r2, #72	@,
	ldr	r3, .L3609+20	@ tmp180,
	movs	r1, r5	@, _1
	mov	r0, sp	@,
	bl	.L14		@
@ Patches/../C_code.c:5865:         tmp.statusIndex = 0;
	mov	r3, sp	@ tmp222,
	mov	r2, sp	@ tmp223,
	ldrb	r3, [r3, r6]	@ tmp.statusIndex, tmp.statusIndex
	bics	r3, r7	@ tmp189, tmp138
	strb	r3, [r2, r6]	@ tmp189, tmp.statusIndex
@ Patches/../C_code.c:5867:         if (gStatScreen.unit->statusIndex == UNIT_STATUS_NONE)
	ldrb	r3, [r5, r6]	@ *_1, *_1
@ Patches/../C_code.c:5872:                 GetUnitStatusName(&tmp));
	mov	r0, sp	@,
@ Patches/../C_code.c:5867:         if (gStatScreen.unit->statusIndex == UNIT_STATUS_NONE)
	tst	r7, r3	@ tmp138, *_1
	bne	.L3601		@,
@ Patches/../C_code.c:5872:                 GetUnitStatusName(&tmp));
	ldr	r3, .L3609+4	@ tmp203,
	bl	.L14		@
	movs	r3, r0	@ _18, tmp215
@ Patches/../C_code.c:5869:             Text_InsertDrawString(
	movs	r0, r4	@ tmp210, tmp210
	movs	r2, #2	@,
	movs	r1, #24	@,
	ldr	r4, .L3609+8	@ tmp205,
	adds	r0, r0, #136	@ tmp210,
	bl	.L240		@
	b	.L3596		@
.L3601:
@ Patches/../C_code.c:5879:                 GetUnitStatusName(&tmp));
	ldr	r3, .L3609+4	@ tmp207,
	bl	.L14		@
	movs	r3, r0	@ _19, tmp216
@ Patches/../C_code.c:5876:             Text_InsertDrawString(
	movs	r0, r4	@ tmp210, tmp210
	movs	r2, #2	@,
	movs	r1, #22	@,
	ldr	r4, .L3609+8	@ tmp209,
	adds	r0, r0, #136	@ tmp210,
	bl	.L240		@
@ Patches/../C_code.c:5882: }
	b	.L3596		@
.L3610:
	.align	2
.L3609:
	.word	gStatScreen
	.word	GetUnitStatusName
	.word	Text_InsertDrawString
	.word	gUiTmScratchA
	.word	PutNumberSmall
	.word	memcpy
	.size	DrawStatus, .-DrawStatus
	.align	1
	.p2align 2,,3
	.global	GetUnitUnadjustedPow
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitUnadjustedPow, %function
GetUnitUnadjustedPow:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5884: int GetUnitUnadjustedPow(struct Unit* unit) { return unit->pow; } 
	ldrb	r0, [r0, #20]	@ tmp117,
@ Patches/../C_code.c:5884: int GetUnitUnadjustedPow(struct Unit* unit) { return unit->pow; } 
	@ sp needed	@
@ Patches/../C_code.c:5884: int GetUnitUnadjustedPow(struct Unit* unit) { return unit->pow; } 
	lsls	r0, r0, #24	@ tmp117, tmp117,
	asrs	r0, r0, #24	@ tmp117, tmp117,
@ Patches/../C_code.c:5884: int GetUnitUnadjustedPow(struct Unit* unit) { return unit->pow; } 
	bx	lr
	.size	GetUnitUnadjustedPow, .-GetUnitUnadjustedPow
	.align	1
	.p2align 2,,3
	.global	GetUnitUnadjustedSkl
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitUnadjustedSkl, %function
GetUnitUnadjustedSkl:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5885: int GetUnitUnadjustedSkl(struct Unit* unit) { return unit->skl; } 
	ldrb	r0, [r0, #21]	@ tmp117,
@ Patches/../C_code.c:5885: int GetUnitUnadjustedSkl(struct Unit* unit) { return unit->skl; } 
	@ sp needed	@
@ Patches/../C_code.c:5885: int GetUnitUnadjustedSkl(struct Unit* unit) { return unit->skl; } 
	lsls	r0, r0, #24	@ tmp117, tmp117,
	asrs	r0, r0, #24	@ tmp117, tmp117,
@ Patches/../C_code.c:5885: int GetUnitUnadjustedSkl(struct Unit* unit) { return unit->skl; } 
	bx	lr
	.size	GetUnitUnadjustedSkl, .-GetUnitUnadjustedSkl
	.align	1
	.p2align 2,,3
	.global	GetUnitUnadjustedSpd
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitUnadjustedSpd, %function
GetUnitUnadjustedSpd:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5886: int GetUnitUnadjustedSpd(struct Unit* unit) { return unit->spd; } 
	ldrb	r0, [r0, #22]	@ tmp117,
@ Patches/../C_code.c:5886: int GetUnitUnadjustedSpd(struct Unit* unit) { return unit->spd; } 
	@ sp needed	@
@ Patches/../C_code.c:5886: int GetUnitUnadjustedSpd(struct Unit* unit) { return unit->spd; } 
	lsls	r0, r0, #24	@ tmp117, tmp117,
	asrs	r0, r0, #24	@ tmp117, tmp117,
@ Patches/../C_code.c:5886: int GetUnitUnadjustedSpd(struct Unit* unit) { return unit->spd; } 
	bx	lr
	.size	GetUnitUnadjustedSpd, .-GetUnitUnadjustedSpd
	.align	1
	.p2align 2,,3
	.global	GetUnitUnadjustedLck
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitUnadjustedLck, %function
GetUnitUnadjustedLck:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5887: int GetUnitUnadjustedLck(struct Unit* unit) { return unit->lck; } 
	ldrb	r0, [r0, #25]	@ tmp117,
@ Patches/../C_code.c:5887: int GetUnitUnadjustedLck(struct Unit* unit) { return unit->lck; } 
	@ sp needed	@
@ Patches/../C_code.c:5887: int GetUnitUnadjustedLck(struct Unit* unit) { return unit->lck; } 
	lsls	r0, r0, #24	@ tmp117, tmp117,
	asrs	r0, r0, #24	@ tmp117, tmp117,
@ Patches/../C_code.c:5887: int GetUnitUnadjustedLck(struct Unit* unit) { return unit->lck; } 
	bx	lr
	.size	GetUnitUnadjustedLck, .-GetUnitUnadjustedLck
	.align	1
	.p2align 2,,3
	.global	GetUnitUnadjustedDef
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitUnadjustedDef, %function
GetUnitUnadjustedDef:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5888: int GetUnitUnadjustedDef(struct Unit* unit) { return unit->def; } 
	ldrb	r0, [r0, #23]	@ tmp117,
@ Patches/../C_code.c:5888: int GetUnitUnadjustedDef(struct Unit* unit) { return unit->def; } 
	@ sp needed	@
@ Patches/../C_code.c:5888: int GetUnitUnadjustedDef(struct Unit* unit) { return unit->def; } 
	lsls	r0, r0, #24	@ tmp117, tmp117,
	asrs	r0, r0, #24	@ tmp117, tmp117,
@ Patches/../C_code.c:5888: int GetUnitUnadjustedDef(struct Unit* unit) { return unit->def; } 
	bx	lr
	.size	GetUnitUnadjustedDef, .-GetUnitUnadjustedDef
	.align	1
	.p2align 2,,3
	.global	GetUnitUnadjustedRes
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitUnadjustedRes, %function
GetUnitUnadjustedRes:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5889: int GetUnitUnadjustedRes(struct Unit* unit) { return unit->res; } 
	ldrb	r0, [r0, #24]	@ tmp117,
@ Patches/../C_code.c:5889: int GetUnitUnadjustedRes(struct Unit* unit) { return unit->res; } 
	@ sp needed	@
@ Patches/../C_code.c:5889: int GetUnitUnadjustedRes(struct Unit* unit) { return unit->res; } 
	lsls	r0, r0, #24	@ tmp117, tmp117,
	asrs	r0, r0, #24	@ tmp117, tmp117,
@ Patches/../C_code.c:5889: int GetUnitUnadjustedRes(struct Unit* unit) { return unit->res; } 
	bx	lr
	.size	GetUnitUnadjustedRes, .-GetUnitUnadjustedRes
	.align	1
	.p2align 2,,3
	.global	GetUnitUnadjustedMag
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitUnadjustedMag, %function
GetUnitUnadjustedMag:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	movs	r3, #58	@ tmp118,
	@ sp needed	@
	ldrb	r0, [r0, r3]	@ tmp117,
	bx	lr
	.size	GetUnitUnadjustedMag, .-GetUnitUnadjustedMag
	.align	1
	.p2align 2,,3
	.global	GetUnitUnadjustedMov
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitUnadjustedMov, %function
GetUnitUnadjustedMov:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5893: int GetUnitUnadjustedMov(struct Unit* unit) { return UNIT_MOV_BASE(unit); } 
	ldr	r3, [r0, #4]	@ unit_4(D)->pClassData, unit_4(D)->pClassData
@ Patches/../C_code.c:5893: int GetUnitUnadjustedMov(struct Unit* unit) { return UNIT_MOV_BASE(unit); } 
	@ sp needed	@
@ Patches/../C_code.c:5893: int GetUnitUnadjustedMov(struct Unit* unit) { return UNIT_MOV_BASE(unit); } 
	movs	r0, #18	@ tmp118,
	ldrsb	r0, [r3, r0]	@ tmp118,
@ Patches/../C_code.c:5893: int GetUnitUnadjustedMov(struct Unit* unit) { return UNIT_MOV_BASE(unit); } 
	bx	lr
	.size	GetUnitUnadjustedMov, .-GetUnitUnadjustedMov
	.align	1
	.p2align 2,,3
	.global	GetUnitMaxMov
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMaxMov, %function
GetUnitMaxMov:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5894: int GetUnitMaxMov(struct Unit* unit) { return UNIT_MOV_MAX(unit); } 
	movs	r0, #15	@,
	@ sp needed	@
	bx	lr
	.size	GetUnitMaxMov, .-GetUnitMaxMov
	.align	1
	.p2align 2,,3
	.global	GetUnitUnadjustedCon
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitUnadjustedCon, %function
GetUnitUnadjustedCon:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5895: int GetUnitUnadjustedCon(struct Unit* unit) { return UNIT_CON_BASE(unit); } 
	ldr	r3, [r0, #4]	@ unit_8(D)->pClassData, unit_8(D)->pClassData
@ Patches/../C_code.c:5895: int GetUnitUnadjustedCon(struct Unit* unit) { return UNIT_CON_BASE(unit); } 
	@ sp needed	@
@ Patches/../C_code.c:5895: int GetUnitUnadjustedCon(struct Unit* unit) { return UNIT_CON_BASE(unit); } 
	ldr	r2, [r0]	@ unit_8(D)->pCharacterData, unit_8(D)->pCharacterData
	movs	r0, #19	@ tmp126,
	ldrb	r3, [r3, #17]	@ tmp124,
	ldrsb	r0, [r2, r0]	@ tmp126,
	lsls	r3, r3, #24	@ tmp124, tmp124,
	asrs	r3, r3, #24	@ tmp124, tmp124,
	adds	r0, r3, r0	@ tmp122, tmp124, tmp126
@ Patches/../C_code.c:5895: int GetUnitUnadjustedCon(struct Unit* unit) { return UNIT_CON_BASE(unit); } 
	bx	lr
	.size	GetUnitUnadjustedCon, .-GetUnitUnadjustedCon
	.align	1
	.p2align 2,,3
	.global	GetUnitMaxCon
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMaxCon, %function
GetUnitMaxCon:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:5896: int GetUnitMaxCon(struct Unit* unit) { return UNIT_CON_MAX(unit); } 
	ldr	r3, [r0, #4]	@ unit_4(D)->pClassData, unit_4(D)->pClassData
@ Patches/../C_code.c:5896: int GetUnitMaxCon(struct Unit* unit) { return UNIT_CON_MAX(unit); } 
	@ sp needed	@
@ Patches/../C_code.c:5896: int GetUnitMaxCon(struct Unit* unit) { return UNIT_CON_MAX(unit); } 
	movs	r0, #25	@ tmp118,
	ldrsb	r0, [r3, r0]	@ tmp118,
@ Patches/../C_code.c:5896: int GetUnitMaxCon(struct Unit* unit) { return UNIT_CON_MAX(unit); } 
	bx	lr
	.size	GetUnitMaxCon, .-GetUnitMaxCon
	.section	.rodata.str1.4
	.align	2
.LC686:
	.ascii	"Mov\000"
	.align	2
.LC690:
	.ascii	"HP\000"
	.align	2
.LC695:
	.ascii	"Con\000"
	.align	2
.LC701:
	.ascii	"Aid\000"
	.align	2
.LC706:
	.ascii	"Trv\000"
	.align	2
.LC711:
	.ascii	"Affin\000"
	.align	2
.LC715:
	.ascii	"Cond\000"
	.align	2
.LC719:
	.ascii	"Talk\000"
	.align	2
.LC724:
	.ascii	"Skills\000"
	.text
	.align	1
	.p2align 2,,3
	.global	DrawStatByID
	.syntax unified
	.code	16
	.thumb_func
	.type	DrawStatByID, %function
DrawStatByID:
	@ Function supports interworking.
	@ args = 8, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	r6, r9	@,
	mov	r7, r10	@,
	mov	r5, r8	@,
	mov	lr, fp	@,
	push	{r5, r6, r7, lr}	@
	sub	sp, sp, #20	@,,
@ Patches/../C_code.c:5912: int DrawStatByID(int barID, int x, int y, int disp, struct Unit* unit, int id) { 
	str	r3, [sp, #8]	@ tmp789, %sfp
@ Patches/../C_code.c:5913: 	if (gStatScreenFunction[id].specialCase) { 
	ldr	r3, .L3692	@ tmp777,
	mov	r10, r3	@ tmp777, tmp777
@ Patches/../C_code.c:5912: int DrawStatByID(int barID, int x, int y, int disp, struct Unit* unit, int id) { 
	movs	r6, r2	@ y, tmp788
@ Patches/../C_code.c:5913: 	if (gStatScreenFunction[id].specialCase) { 
	mov	r2, r10	@ tmp777, tmp777
	ldr	r3, [sp, #60]	@ tmp856, id
	lsls	r4, r3, #2	@ tmp779, tmp856,
	adds	r3, r4, r3	@ tmp363, tmp779, tmp857
	lsls	r3, r3, #2	@ tmp364, tmp363,
	ldr	r3, [r2, r3]	@ _1, gStatScreenFunction[id_268(D)].specialCase
@ Patches/../C_code.c:5912: int DrawStatByID(int barID, int x, int y, int disp, struct Unit* unit, int id) { 
	mov	r9, r0	@ barID, tmp786
	movs	r5, r1	@ x, tmp787
@ Patches/../C_code.c:5913: 	if (gStatScreenFunction[id].specialCase) { 
	cmp	r3, #0	@ _1,
	beq	.L3623		@,
@ Patches/../C_code.c:5914: 		switch (gStatScreenFunction[id].specialCase) { 
	cmp	r3, #17	@ _1,
	bhi	.L3623		@,
	ldr	r2, .L3692+4	@ tmp367,
	lsls	r3, r3, #2	@ tmp365, _1,
	ldr	r3, [r2, r3]	@ tmp368,
	mov	pc, r3	@ tmp368
	.section	.rodata
	.align	2
.L3625:
	.word	.L3623
	.word	.L3641
	.word	.L3640
	.word	.L3639
	.word	.L3638
	.word	.L3637
	.word	.L3636
	.word	.L3635
	.word	.L3634
	.word	.L3633
	.word	.L3632
	.word	.L3631
	.word	.L3630
	.word	.L3629
	.word	.L3628
	.word	.L3627
	.word	.L3626
	.word	.L3624
	.text
.L3624:
@ Patches/../C_code.c:6079: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_UNUSUED,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FF));
	ldr	r3, .L3692+8	@ tmp712,
	ldr	r0, .L3692+12	@,
	bl	.L14		@
@ Patches/../C_code.c:6079: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_UNUSUED,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FF));
	lsls	r3, r6, #5	@ tmp713, y,
	subs	r1, r5, #4	@ tmp714, x,
	adds	r1, r3, r1	@ tmp715, tmp713, tmp714
@ Patches/../C_code.c:6079: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_UNUSUED,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FF));
	ldr	r3, .L3692+16	@ tmp718,
@ Patches/../C_code.c:6079: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_UNUSUED,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FF));
	movs	r2, r0	@ tmp817,
@ Patches/../C_code.c:6079: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_UNUSUED,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FF));
	lsls	r1, r1, #1	@ tmp716, tmp715,
@ Patches/../C_code.c:6079: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_UNUSUED,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FF));
	ldr	r0, .L3692+20	@ tmp719,
@ Patches/../C_code.c:6079: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_UNUSUED,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FF));
	adds	r1, r1, r3	@ tmp717, tmp716, tmp718
.L3687:
@ Patches/../C_code.c:6079: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_UNUSUED,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FF));
	movs	r3, #0	@ tmp720,
	str	r2, [sp, #4]	@ tmp817,
	str	r3, [sp]	@ tmp720,
	movs	r2, #3	@,
	ldr	r7, .L3692+24	@ tmp721,
	bl	.L223		@
.L3623:
@ Patches/../C_code.c:6090: 	if (gStatScreenFunction[id].GetUnitUnadjustedStat) { // could be null, in which case we draw nothing 
	ldr	r3, [sp, #60]	@ tmp897, id
	mov	ip, r3	@ tmp897, tmp897
	add	r4, r4, ip	@ tmp776, tmp897
	lsls	r4, r4, #2	@ tmp726, tmp776,
	add	r4, r4, r10	@ tmp727, tmp777
	ldr	r3, [r4, #4]	@ _236, gStatScreenFunction[id_268(D)].GetUnitUnadjustedStat
@ Patches/../C_code.c:6090: 	if (gStatScreenFunction[id].GetUnitUnadjustedStat) { // could be null, in which case we draw nothing 
	cmp	r3, #0	@ _236,
	beq	.L3647		@,
@ Patches/../C_code.c:6091: 		if (disp == 1) {
	ldr	r2, [sp, #8]	@ disp, %sfp
	cmp	r2, #1	@ disp,
	beq	.L3688		@,
@ Patches/../C_code.c:6095: 		if (disp == 0) {
	ldr	r3, [sp, #8]	@ disp, %sfp
	cmp	r3, #0	@ disp,
	bne	.L3643		@,
@ Patches/../C_code.c:6096: 			DrawGrowthWithDifference(x-1, y, gStatScreenFunction[id].GetUnitGrowth(gStatScreen.unit, false),
	ldr	r7, .L3692+28	@ tmp745,
	ldr	r3, [r4, #16]	@ gStatScreenFunction[id_268(D)].GetUnitGrowth, gStatScreenFunction[id_268(D)].GetUnitGrowth
	movs	r1, #0	@,
	ldr	r0, [r7, #12]	@ gStatScreen.unit, gStatScreen.unit
	bl	.L14		@
	mov	r8, r0	@ _245, tmp821
	ldr	r3, [r4, #16]	@ gStatScreenFunction[id_268(D)].GetUnitGrowth, gStatScreenFunction[id_268(D)].GetUnitGrowth
	movs	r1, #1	@,
	ldr	r0, [r7, #12]	@ gStatScreen.unit, gStatScreen.unit
	bl	.L14		@
@ Patches/../C_code.c:5460:     int diff = modified - base;
	mov	r3, r8	@ _245, _245
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	lsls	r6, r6, #5	@ _368, y,
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	ldr	r7, .L3692+16	@ tmp768,
@ Patches/../C_code.c:5460:     int diff = modified - base;
	subs	r4, r0, r3	@ diff, tmp822, _245
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	adds	r0, r5, r6	@ tmp765, x, _368
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	lsls	r0, r0, #1	@ tmp766, tmp765,
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	movs	r1, #2	@,
	adds	r0, r0, r7	@ tmp767, tmp766, tmp768
	mov	r2, r8	@, _245
	ldr	r3, .L3692+32	@ tmp769,
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	adds	r5, r5, #1	@ tmp770,
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	bl	.L14		@
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	adds	r1, r5, r6	@ tmp771, tmp770, _368
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	lsls	r1, r1, #1	@ tmp772, tmp771,
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	movs	r0, r4	@, diff
	adds	r1, r1, r7	@ tmp773, tmp772, tmp768
	bl	PutNumberBonus		@
.L3643:
@ Patches/../C_code.c:5925: 				return 1; break; 
	movs	r0, #1	@ <retval>,
	b	.L3622		@
.L3688:
@ Patches/../C_code.c:6092: 			NewDrawStatWithBar(barID, x, y, gStatScreenFunction[id].GetUnitUnadjustedStat(unit),
	ldr	r0, [sp, #56]	@, unit
	bl	.L14		@
	ldr	r3, [r4, #8]	@ gStatScreenFunction[id_268(D)].GetUnitStat, gStatScreenFunction[id_268(D)].GetUnitStat
	movs	r7, r0	@ _237, tmp818
	ldr	r0, [sp, #56]	@, unit
	bl	.L14		@
	mov	r8, r0	@ _239, tmp819
	ldr	r3, [r4, #12]	@ gStatScreenFunction[id_268(D)].GetUnitMaxStat, gStatScreenFunction[id_268(D)].GetUnitMaxStat
	ldr	r0, [sp, #56]	@, unit
	bl	.L14		@
@ Patches/../C_code.c:6092: 			NewDrawStatWithBar(barID, x, y, gStatScreenFunction[id].GetUnitUnadjustedStat(unit),
	mov	r3, r8	@ _239, _239
	str	r0, [sp, #4]	@ tmp820,
	str	r3, [sp]	@ _239,
	mov	r0, r9	@, barID
	movs	r3, r7	@, _237
	movs	r2, r6	@, y
	movs	r1, r5	@, x
	bl	NewDrawStatWithBar		@
@ Patches/../C_code.c:5925: 				return 1; break; 
	movs	r0, #1	@ <retval>,
	b	.L3622		@
.L3635:
@ Patches/../C_code.c:5963: 				ClearText(gStatScreen.text + STATSCREEN_TEXT_ITEM0); // clear wep1 text here 
	ldr	r4, .L3692+36	@ tmp562,
	ldr	r3, .L3692+40	@ tmp563,
	movs	r0, r4	@, tmp562
	bl	.L14		@
@ Patches/../C_code.c:5965: 				int talk_uid = _GetTalkee(unit->pCharacterData->number); 
	ldr	r3, [sp, #56]	@ tmp875, unit
	ldr	r3, [r3]	@ unit_290(D)->pCharacterData, unit_290(D)->pCharacterData
@ Patches/../C_code.c:5965: 				int talk_uid = _GetTalkee(unit->pCharacterData->number); 
	ldrb	r0, [r3, #4]	@ tmp565,
	bl	_GetTalkee		@
@ Patches/../C_code.c:5917: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Mov");
	subs	r5, r5, #4	@ tmp567,
	lsls	r1, r6, #5	@ tmp566, y,
@ Patches/../C_code.c:5967: 					PutDrawText(gStatScreen.text + STATSCREEN_TEXT_ITEM0,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Talk");
	ldr	r3, .L3692+16	@ tmp570,
@ Patches/../C_code.c:5967: 					PutDrawText(gStatScreen.text + STATSCREEN_TEXT_ITEM0,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Talk");
	adds	r1, r1, r5	@ tmp568, tmp566, tmp567
@ Patches/../C_code.c:5967: 					PutDrawText(gStatScreen.text + STATSCREEN_TEXT_ITEM0,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Talk");
	lsls	r1, r1, #1	@ tmp569, tmp568,
@ Patches/../C_code.c:5965: 				int talk_uid = _GetTalkee(unit->pCharacterData->number); 
	movs	r7, r0	@ talk_uid, tmp802
@ Patches/../C_code.c:5967: 					PutDrawText(gStatScreen.text + STATSCREEN_TEXT_ITEM0,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Talk");
	adds	r1, r1, r3	@ _347, tmp569, tmp570
@ Patches/../C_code.c:5966: 				if (talk_uid) { 
	cmp	r0, #0	@ talk_uid,
	bne	.LCB23352	@
	b	.L3649	@long jump	@
.LCB23352:
@ Patches/../C_code.c:5967: 					PutDrawText(gStatScreen.text + STATSCREEN_TEXT_ITEM0,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Talk");
	ldr	r3, .L3692+44	@ tmp572,
	str	r3, [sp, #4]	@ tmp572,
	movs	r3, #0	@ tmp573,
	movs	r2, #3	@,
	movs	r0, r4	@, tmp562
	str	r3, [sp]	@ tmp573,
	ldr	r5, .L3692+24	@ tmp574,
	bl	.L3231		@
@ Patches/../C_code.c:5968: 					talk_uid = GetCharacterData(talk_uid)->nameTextId;
	ldr	r3, .L3692+48	@ tmp575,
	movs	r0, r7	@, talk_uid
	bl	.L14		@
@ Patches/../C_code.c:5969: 					Text_InsertDrawString(&gStatScreen.text[STATSCREEN_TEXT_ITEM0], 24, blue, GetStringFromIndex(talk_uid));
	ldr	r3, .L3692+8	@ tmp577,
@ Patches/../C_code.c:5968: 					talk_uid = GetCharacterData(talk_uid)->nameTextId;
	ldrh	r0, [r0]	@ talk_uid, *_104
.L3685:
@ Patches/../C_code.c:5945: 				Text_InsertDrawString(&gStatScreen.text[STATSCREEN_TEXT_RESCUENAME], 24, blue, GetUnitRescueName(unit));
	bl	.L14		@
@ Patches/../C_code.c:5945: 				Text_InsertDrawString(&gStatScreen.text[STATSCREEN_TEXT_RESCUENAME], 24, blue, GetUnitRescueName(unit));
	movs	r2, #2	@,
@ Patches/../C_code.c:5945: 				Text_InsertDrawString(&gStatScreen.text[STATSCREEN_TEXT_RESCUENAME], 24, blue, GetUnitRescueName(unit));
	movs	r3, r0	@ _72, tmp800
@ Patches/../C_code.c:5945: 				Text_InsertDrawString(&gStatScreen.text[STATSCREEN_TEXT_RESCUENAME], 24, blue, GetUnitRescueName(unit));
	movs	r1, #24	@,
	movs	r0, r4	@, tmp520
	ldr	r4, .L3692+52	@ tmp526,
	bl	.L240		@
.L3647:
@ Patches/../C_code.c:5941: 				return 0; break;
	movs	r0, #0	@ <retval>,
.L3622:
@ Patches/../C_code.c:6102: } 
	add	sp, sp, #20	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3634:
@ Patches/../C_code.c:5980: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_BWL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Skills");
	lsls	r1, r6, #5	@ tmp587, y,
	subs	r5, r5, #4	@ tmp588,
@ Patches/../C_code.c:5980: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_BWL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Skills");
	ldr	r3, .L3692+16	@ tmp592,
@ Patches/../C_code.c:5980: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_BWL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Skills");
	adds	r1, r1, r5	@ tmp589, tmp587, tmp588
@ Patches/../C_code.c:5980: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_BWL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Skills");
	lsls	r1, r1, #1	@ tmp590, tmp589,
@ Patches/../C_code.c:5980: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_BWL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Skills");
	adds	r1, r1, r3	@ tmp591, tmp590, tmp592
	ldr	r3, .L3692+56	@ tmp594,
	str	r3, [sp, #4]	@ tmp594,
	movs	r3, #0	@ tmp595,
	movs	r2, #3	@,
	ldr	r0, .L3692+60	@ tmp593,
	str	r3, [sp]	@ tmp595,
	ldr	r4, .L3692+24	@ tmp596,
	bl	.L240		@
@ Patches/../C_code.c:5981: 				return 0; break;
	b	.L3647		@
.L3641:
@ Patches/../C_code.c:5916: 				if (disp == 1) { // 9, 1?
	ldr	r3, [sp, #8]	@ disp, %sfp
	cmp	r3, #1	@ disp,
	bne	.LCB23418	@
	b	.L3689	@long jump	@
.LCB23418:
@ Patches/../C_code.c:5921: 				if (disp == 0) { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "HP"); 
	ldr	r2, [sp, #8]	@ disp, %sfp
	cmp	r2, #0	@ disp,
	bne	.L3643		@,
@ Patches/../C_code.c:5921: 				if (disp == 0) { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "HP"); 
	lsls	r3, r6, #5	@ _14, y,
	mov	r9, r3	@ _14, _14
	subs	r1, r1, #4	@ tmp404,
@ Patches/../C_code.c:5921: 				if (disp == 0) { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "HP"); 
	ldr	r6, .L3692+16	@ tmp408,
	ldr	r3, .L3692+64	@ tmp410,
@ Patches/../C_code.c:5921: 				if (disp == 0) { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "HP"); 
	add	r1, r1, r9	@ tmp405, _14
@ Patches/../C_code.c:5921: 				if (disp == 0) { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "HP"); 
	ldr	r0, .L3692+68	@ tmp409,
@ Patches/../C_code.c:5921: 				if (disp == 0) { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "HP"); 
	lsls	r1, r1, #1	@ tmp406, tmp405,
@ Patches/../C_code.c:5921: 				if (disp == 0) { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "HP"); 
	str	r3, [sp, #4]	@ tmp410,
	str	r2, [sp]	@ disp,
	movs	r3, #0	@,
	adds	r2, r2, #3	@,
	ldr	r7, .L3692+24	@ tmp412,
	adds	r1, r1, r6	@ tmp407, tmp406, tmp408
	str	r0, [sp, #8]	@ tmp409, %sfp
	bl	.L223		@
@ Patches/../C_code.c:5922: 				DrawGrowthWithDifference(x-1, y, gStatScreenFunction[id].GetUnitGrowth(gStatScreen.unit, false),
	movs	r3, #96	@ tmp413,
	rsbs	r3, r3, #0	@ tmp413, tmp413
	mov	r8, r3	@ tmp413, tmp413
	ldr	r3, [sp, #8]	@ tmp409, %sfp
	mov	ip, r3	@ tmp409, tmp409
	add	r8, r8, ip	@ tmp413, tmp409
	mov	r3, r8	@ tmp413, tmp413
	ldr	r0, [r3, #12]	@ gStatScreen.unit, gStatScreen.unit
@ Patches/../C_code.c:5922: 				DrawGrowthWithDifference(x-1, y, gStatScreenFunction[id].GetUnitGrowth(gStatScreen.unit, false),
	ldr	r3, [sp, #60]	@ tmp866, id
	mov	ip, r3	@ tmp866, tmp866
	add	r4, r4, ip	@ tmp418, tmp866
	lsls	r4, r4, #2	@ tmp419, tmp418,
	add	r4, r4, r10	@ tmp420, tmp777
@ Patches/../C_code.c:5922: 				DrawGrowthWithDifference(x-1, y, gStatScreenFunction[id].GetUnitGrowth(gStatScreen.unit, false),
	ldr	r3, [r4, #16]	@ gStatScreenFunction[id_268(D)].GetUnitGrowth, gStatScreenFunction[id_268(D)].GetUnitGrowth
	movs	r1, #0	@,
	bl	.L14		@
	mov	r3, r8	@ tmp413, tmp413
	movs	r7, r0	@ _23, tmp793
	movs	r1, #1	@,
	ldr	r0, [r3, #12]	@ gStatScreen.unit, gStatScreen.unit
	ldr	r3, [r4, #16]	@ gStatScreenFunction[id_268(D)].GetUnitGrowth, gStatScreenFunction[id_268(D)].GetUnitGrowth
	bl	.L14		@
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	mov	r3, r9	@ _14, _14
@ Patches/../C_code.c:5460:     int diff = modified - base;
	subs	r4, r0, r7	@ diff, tmp794, _23
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	adds	r0, r3, r5	@ tmp433, _14, x
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	lsls	r0, r0, #1	@ tmp434, tmp433,
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	movs	r2, r7	@, _23
	movs	r1, #2	@,
	ldr	r3, .L3692+32	@ tmp437,
	adds	r0, r0, r6	@ tmp435, tmp434, tmp408
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	adds	r5, r5, #1	@ tmp438,
@ Patches/../C_code.c:5461:     PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x+1, y), blue, base);
	bl	.L14		@
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	movs	r1, r5	@ tmp438, tmp438
	add	r1, r1, r9	@ tmp438, _14
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	lsls	r1, r1, #1	@ tmp440, tmp439,
@ Patches/../C_code.c:5463:     PutNumberBonus(diff, gUiTmScratchA + TILEMAP_INDEX(x + 2, y));
	movs	r0, r4	@, diff
	adds	r1, r1, r6	@ tmp441, tmp440, tmp408
	bl	PutNumberBonus		@
@ Patches/../C_code.c:5925: 				return 1; break; 
	movs	r0, #1	@ <retval>,
	b	.L3622		@
.L3632:
@ Patches/../C_code.c:5996: 				u8* skillID = CallSkill_Getter(unit); 
	ldr	r3, .L3692+72	@ tmp613,
	ldr	r0, [sp, #56]	@, unit
	bl	.L14		@
@ Patches/../C_code.c:6003: 						DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + ((i-3)*3), y), skillID[i], 0x4000); }
	lsls	r6, r6, #5	@ tmp615, y,
	subs	r5, r5, #13	@ tmp614,
	ldr	r3, .L3692+16	@ tmp618,
	adds	r5, r5, r6	@ tmp616, tmp614, tmp615
	lsls	r5, r5, #1	@ tmp617, tmp616,
	adds	r5, r5, r3	@ ivtmp.2093, tmp617, tmp618
@ Patches/../C_code.c:6003: 						DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + ((i-3)*3), y), skillID[i], 0x4000); }
	ldr	r3, .L3692+76	@ tmp785,
@ Patches/../C_code.c:5996: 				u8* skillID = CallSkill_Getter(unit); 
	movs	r7, r0	@ skillID, tmp807
@ Patches/../C_code.c:5997: 				for (int i = 0; i<6; ++i) { 
	movs	r4, #0	@ i,
@ Patches/../C_code.c:6003: 						DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + ((i-3)*3), y), skillID[i], 0x4000); }
	mov	r8, r3	@ tmp785, tmp785
@ Patches/../C_code.c:6000: 						if (SkillSysInstalled) { 
	ldr	r6, .L3692+80	@ tmp783,
.L3659:
@ Patches/../C_code.c:5998: 					if (!(*skillID)) { return 0; break; } 
	ldrb	r3, [r7, r4]	@ _144, MEM[(u8 *)skillID_292 + _496 * 1]
@ Patches/../C_code.c:5998: 					if (!(*skillID)) { return 0; break; } 
	cmp	r3, #0	@ _144,
	beq	.L3647		@,
.L3691:
@ Patches/../C_code.c:5999: 					if (i > 2) { 
	cmp	r4, #2	@ i,
	bgt	.LCB23504	@
	b	.L3690	@long jump	@
.LCB23504:
@ Patches/../C_code.c:6000: 						if (SkillSysInstalled) { 
	ldr	r2, [r6]	@ SkillSysInstalled, SkillSysInstalled
	cmp	r2, #0	@ SkillSysInstalled,
	bne	.LCB23507	@
	b	.L3657	@long jump	@
.LCB23507:
@ Patches/../C_code.c:6001: 						DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + ((i-3)*3), y), *skillID|0x100, 0x4000); }
	movs	r1, #128	@ tmp623,
	movs	r2, #128	@,
	lsls	r1, r1, #1	@ tmp623, tmp623,
	orrs	r1, r3	@ tmp622, _144
	movs	r0, r5	@, ivtmp.2093
	ldr	r3, .L3692+76	@ tmp624,
	lsls	r2, r2, #7	@,,
	bl	.L14		@
.L3658:
@ Patches/../C_code.c:5997: 				for (int i = 0; i<6; ++i) { 
	adds	r4, r4, #1	@ i,
@ Patches/../C_code.c:5997: 				for (int i = 0; i<6; ++i) { 
	cmp	r4, #6	@ i,
	bne	.LCB23520	@
	b	.L3647	@long jump	@
.LCB23520:
@ Patches/../C_code.c:5998: 					if (!(*skillID)) { return 0; break; } 
	ldrb	r3, [r7, r4]	@ _144, MEM[(u8 *)skillID_292 + _496 * 1]
@ Patches/../C_code.c:5997: 				for (int i = 0; i<6; ++i) { 
	adds	r5, r5, #6	@ ivtmp.2093,
@ Patches/../C_code.c:5998: 					if (!(*skillID)) { return 0; break; } 
	cmp	r3, #0	@ _144,
	bne	.L3691		@,
	b	.L3647		@
.L3633:
@ Patches/../C_code.c:5984: 				u8* skillID = CallSkill_Getter(unit); 
	ldr	r3, .L3692+72	@ tmp597,
	ldr	r0, [sp, #56]	@, unit
	bl	.L14		@
	subs	r5, r5, #4	@ tmp598,
@ Patches/../C_code.c:5990: 					DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + (i*3), y), skillID[i], 0x4000); }
	lsls	r6, r6, #5	@ tmp599, y,
	adds	r4, r5, r6	@ tmp600, tmp598, tmp599
	ldr	r3, .L3692+16	@ tmp602,
	lsls	r4, r4, #1	@ tmp601, tmp600,
	adds	r4, r4, r3	@ ivtmp.2083, tmp601, tmp602
@ Patches/../C_code.c:5990: 					DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + (i*3), y), skillID[i], 0x4000); }
	ldr	r3, .L3692+76	@ tmp782,
@ Patches/../C_code.c:5984: 				u8* skillID = CallSkill_Getter(unit); 
	movs	r7, r0	@ skillID, tmp806
@ Patches/../C_code.c:5985: 				for (int i = 0; i<3; ++i) { 
	movs	r5, #0	@ i,
@ Patches/../C_code.c:5990: 					DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + (i*3), y), skillID[i], 0x4000); }
	mov	r8, r3	@ tmp782, tmp782
@ Patches/../C_code.c:5987: 					if (SkillSysInstalled) { 
	ldr	r6, .L3692+80	@ tmp780,
.L3653:
@ Patches/../C_code.c:5986: 				if (!(*skillID)) { return 0; break; } 
	ldrb	r3, [r7, r5]	@ _120, MEM[(u8 *)skillID_298 + _508 * 1]
@ Patches/../C_code.c:5986: 				if (!(*skillID)) { return 0; break; } 
	cmp	r3, #0	@ _120,
	bne	.LCB23547	@
	b	.L3647	@long jump	@
.LCB23547:
@ Patches/../C_code.c:5987: 					if (SkillSysInstalled) { 
	ldr	r2, [r6]	@ SkillSysInstalled, SkillSysInstalled
	cmp	r2, #0	@ SkillSysInstalled,
	bne	.LCB23550	@
	b	.L3651	@long jump	@
.LCB23550:
@ Patches/../C_code.c:5988: 					DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + (i*3), y), *skillID|0x100, 0x4000); }
	movs	r1, #128	@ tmp607,
	movs	r2, #128	@,
	lsls	r1, r1, #1	@ tmp607, tmp607,
	orrs	r1, r3	@ tmp606, _120
	movs	r0, r4	@, ivtmp.2083
	ldr	r3, .L3692+76	@ tmp608,
	lsls	r2, r2, #7	@,,
	bl	.L14		@
.L3652:
@ Patches/../C_code.c:5985: 				for (int i = 0; i<3; ++i) { 
	adds	r5, r5, #1	@ i,
@ Patches/../C_code.c:5985: 				for (int i = 0; i<3; ++i) { 
	adds	r4, r4, #6	@ ivtmp.2083,
	cmp	r5, #3	@ i,
	bne	.L3653		@,
	b	.L3647		@
.L3628:
@ Patches/../C_code.c:6055: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_LCKLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EE));
	ldr	r3, .L3692+8	@ tmp679,
	ldr	r0, .L3692+84	@,
	bl	.L14		@
@ Patches/../C_code.c:6055: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_LCKLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EE));
	lsls	r3, r6, #5	@ tmp680, y,
	subs	r1, r5, #4	@ tmp681, x,
	adds	r1, r3, r1	@ tmp682, tmp680, tmp681
@ Patches/../C_code.c:6055: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_LCKLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EE));
	ldr	r3, .L3692+16	@ tmp685,
@ Patches/../C_code.c:6055: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_LCKLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EE));
	lsls	r1, r1, #1	@ tmp683, tmp682,
@ Patches/../C_code.c:6055: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_LCKLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EE));
	movs	r2, r0	@ tmp814,
@ Patches/../C_code.c:6055: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_LCKLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EE));
	adds	r1, r1, r3	@ tmp684, tmp683, tmp685
@ Patches/../C_code.c:6055: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_LCKLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EE));
	ldr	r0, .L3692+88	@ tmp686,
	b	.L3687		@
.L3630:
@ Patches/../C_code.c:6039: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SKLLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EC));
	ldr	r3, .L3692+8	@ tmp657,
	ldr	r0, .L3692+92	@,
	bl	.L14		@
@ Patches/../C_code.c:6039: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SKLLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EC));
	lsls	r3, r6, #5	@ tmp658, y,
	subs	r1, r5, #4	@ tmp659, x,
	adds	r1, r3, r1	@ tmp660, tmp658, tmp659
@ Patches/../C_code.c:6039: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SKLLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EC));
	ldr	r3, .L3692+16	@ tmp663,
@ Patches/../C_code.c:6039: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SKLLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EC));
	lsls	r1, r1, #1	@ tmp661, tmp660,
@ Patches/../C_code.c:6039: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SKLLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EC));
	movs	r2, r0	@ tmp812,
@ Patches/../C_code.c:6039: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SKLLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EC));
	adds	r1, r1, r3	@ tmp662, tmp661, tmp663
@ Patches/../C_code.c:6039: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SKLLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EC));
	ldr	r0, .L3692+96	@ tmp664,
	b	.L3687		@
.L3631:
@ Patches/../C_code.c:5917: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Mov");
	subs	r2, r1, #4	@ tmp630, x,
	lsls	r3, r6, #5	@ tmp629, y,
@ Patches/../C_code.c:6015: 						PutDrawText(&gStatScreen.text[STATSCREEN_TEXT_POWLABEL],gUiTmScratchA + TILEMAP_INDEX(x-4, y),gold, 0, 0,GetStringFromIndex(0x4FF)); // Mag
	adds	r3, r3, r2	@ tmp631, tmp629, tmp630
@ Patches/../C_code.c:6015: 						PutDrawText(&gStatScreen.text[STATSCREEN_TEXT_POWLABEL],gUiTmScratchA + TILEMAP_INDEX(x-4, y),gold, 0, 0,GetStringFromIndex(0x4FF)); // Mag
	ldr	r2, .L3692+16	@ tmp633,
@ Patches/../C_code.c:6015: 						PutDrawText(&gStatScreen.text[STATSCREEN_TEXT_POWLABEL],gUiTmScratchA + TILEMAP_INDEX(x-4, y),gold, 0, 0,GetStringFromIndex(0x4FF)); // Mag
	lsls	r3, r3, #1	@ tmp632, tmp631,
@ Patches/../C_code.c:6015: 						PutDrawText(&gStatScreen.text[STATSCREEN_TEXT_POWLABEL],gUiTmScratchA + TILEMAP_INDEX(x-4, y),gold, 0, 0,GetStringFromIndex(0x4FF)); // Mag
	adds	r3, r3, r2	@ _409, tmp632, tmp633
	movs	r7, r3	@ _409, _409
@ Patches/../C_code.c:6010: 				if (!StrMagInstalled) { 
	ldr	r3, .L3692+100	@ tmp634,
@ Patches/../C_code.c:6010: 				if (!StrMagInstalled) { 
	ldr	r2, [r3]	@ StrMagInstalled, StrMagInstalled
	mov	fp, r2	@ StrMagInstalled, StrMagInstalled
	cmp	r2, #0	@ StrMagInstalled,
	beq	.LCB23612	@
	b	.L3660	@long jump	@
.LCB23612:
@ Patches/../C_code.c:6011: 					if (UnitHasMagicRank(gStatScreen.unit))
	ldr	r2, .L3692+28	@ tmp636,
	ldr	r3, .L3692+104	@ tmp638,
	ldr	r0, [r2, #12]	@ gStatScreen.unit, gStatScreen.unit
	mov	r8, r2	@ tmp636, tmp636
	bl	.L14		@
	str	r0, [sp, #12]	@ tmp639, %sfp
@ Patches/../C_code.c:6011: 					if (UnitHasMagicRank(gStatScreen.unit))
	cmp	r0, #0	@ tmp639,
	bne	.LCB23620	@
	b	.L3661	@long jump	@
.LCB23620:
@ Patches/../C_code.c:6015: 						PutDrawText(&gStatScreen.text[STATSCREEN_TEXT_POWLABEL],gUiTmScratchA + TILEMAP_INDEX(x-4, y),gold, 0, 0,GetStringFromIndex(0x4FF)); // Mag
	ldr	r3, .L3692+8	@ tmp642,
	ldr	r0, .L3692+12	@,
	bl	.L14		@
	movs	r3, r0	@ tmp809,
@ Patches/../C_code.c:6015: 						PutDrawText(&gStatScreen.text[STATSCREEN_TEXT_POWLABEL],gUiTmScratchA + TILEMAP_INDEX(x-4, y),gold, 0, 0,GetStringFromIndex(0x4FF)); // Mag
	mov	r2, fp	@ StrMagInstalled, StrMagInstalled
	mov	r0, r8	@ tmp636, tmp636
	str	r3, [sp, #4]	@ tmp809,
	movs	r3, #0	@,
	str	r2, [sp]	@ StrMagInstalled,
	adds	r0, r0, #48	@ tmp636,
.L3686:
@ Patches/../C_code.c:6031: 				else { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_POWLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FE)); } 
	movs	r1, r7	@, _409
	movs	r2, #3	@,
	ldr	r7, .L3692+24	@ tmp655,
	bl	.L223		@
	b	.L3623		@
.L3629:
@ Patches/../C_code.c:6047: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SPDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4ED));
	ldr	r3, .L3692+8	@ tmp668,
	ldr	r0, .L3692+108	@,
	bl	.L14		@
@ Patches/../C_code.c:6047: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SPDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4ED));
	lsls	r3, r6, #5	@ tmp669, y,
	subs	r1, r5, #4	@ tmp670, x,
	adds	r1, r3, r1	@ tmp671, tmp669, tmp670
@ Patches/../C_code.c:6047: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SPDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4ED));
	ldr	r3, .L3692+16	@ tmp674,
@ Patches/../C_code.c:6047: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SPDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4ED));
	lsls	r1, r1, #1	@ tmp672, tmp671,
@ Patches/../C_code.c:6047: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SPDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4ED));
	movs	r2, r0	@ tmp813,
@ Patches/../C_code.c:6047: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SPDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4ED));
	adds	r1, r1, r3	@ tmp673, tmp672, tmp674
@ Patches/../C_code.c:6047: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_SPDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4ED));
	ldr	r0, .L3692+112	@ tmp675,
	b	.L3687		@
.L3626:
@ Patches/../C_code.c:6071: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4F0));
	movs	r0, #158	@,
	ldr	r3, .L3692+8	@ tmp701,
	lsls	r0, r0, #3	@,,
	bl	.L14		@
@ Patches/../C_code.c:6071: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4F0));
	lsls	r3, r6, #5	@ tmp702, y,
	subs	r1, r5, #4	@ tmp703, x,
	adds	r1, r3, r1	@ tmp704, tmp702, tmp703
@ Patches/../C_code.c:6071: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4F0));
	ldr	r3, .L3692+16	@ tmp707,
@ Patches/../C_code.c:6071: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4F0));
	lsls	r1, r1, #1	@ tmp705, tmp704,
@ Patches/../C_code.c:6071: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4F0));
	movs	r2, r0	@ tmp816,
@ Patches/../C_code.c:6071: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4F0));
	adds	r1, r1, r3	@ tmp706, tmp705, tmp707
@ Patches/../C_code.c:6071: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4F0));
	ldr	r0, .L3692+116	@ tmp708,
	b	.L3687		@
.L3693:
	.align	2
.L3692:
	.word	gStatScreenFunction
	.word	.L3625
	.word	GetStringFromIndex
	.word	1279
	.word	gUiTmScratchA
	.word	gStatScreen+40
	.word	PutDrawText
	.word	gStatScreen
	.word	PutNumberOrBlank
	.word	gStatScreen+144
	.word	ClearText
	.word	.LC719
	.word	GetCharacterData
	.word	Text_InsertDrawString
	.word	.LC724
	.word	gStatScreen+296
	.word	.LC690
	.word	gStatScreen+96
	.word	CallSkill_Getter
	.word	DrawIcon
	.word	SkillSysInstalled
	.word	1262
	.word	gStatScreen+72
	.word	1260
	.word	gStatScreen+56
	.word	StrMagInstalled
	.word	UnitHasMagicRank
	.word	1261
	.word	gStatScreen+64
	.word	gStatScreen+88
.L3639:
@ Patches/../C_code.c:5934: 				int icon = GetUnitAidIconId(UNIT_CATTRIBUTES(gStatScreen.unit)); 
	ldr	r3, .L3694	@ tmp478,
	ldr	r3, [r3, #12]	@ _39, gStatScreen.unit
	ldmia	r3, {r2, r3}	@ _39,,
@ Patches/../C_code.c:5934: 				int icon = GetUnitAidIconId(UNIT_CATTRIBUTES(gStatScreen.unit)); 
	ldr	r3, [r3, #40]	@ _43->attributes, _43->attributes
	ldr	r0, [r2, #40]	@ _40->attributes, _40->attributes
	orrs	r0, r3	@ tmp481, _43->attributes
	ldr	r3, .L3694+4	@ tmp484,
	bl	.L14		@
@ Patches/../C_code.c:5935: 				if (SkillSysInstalled) { icon |= IconOrr*3; } 
	ldr	r3, .L3694+8	@ tmp485,
@ Patches/../C_code.c:5935: 				if (SkillSysInstalled) { icon |= IconOrr*3; } 
	ldr	r3, [r3]	@ SkillSysInstalled, SkillSysInstalled
@ Patches/../C_code.c:5934: 				int icon = GetUnitAidIconId(UNIT_CATTRIBUTES(gStatScreen.unit)); 
	mov	r9, r0	@ icon, tmp798
@ Patches/../C_code.c:5935: 				if (SkillSysInstalled) { icon |= IconOrr*3; } 
	cmp	r3, #0	@ SkillSysInstalled,
	beq	.L3646		@,
@ Patches/../C_code.c:5935: 				if (SkillSysInstalled) { icon |= IconOrr*3; } 
	ldr	r3, .L3694+12	@ tmp487,
	ldr	r2, [r3]	@ IconOrr, IconOrr
	lsls	r3, r2, #1	@ tmp490, IconOrr,
	adds	r3, r3, r2	@ tmp491, tmp490, IconOrr
@ Patches/../C_code.c:5935: 				if (SkillSysInstalled) { icon |= IconOrr*3; } 
	movs	r2, r0	@ icon, icon
	orrs	r2, r3	@ icon, tmp491
	mov	r9, r2	@ icon, icon
.L3646:
@ Patches/../C_code.c:5936: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AIDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Aid");
	ldr	r3, .L3694+16	@ tmp498,
	str	r3, [sp, #4]	@ tmp498,
	movs	r3, #0	@ tmp499,
@ Patches/../C_code.c:5936: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AIDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Aid");
	lsls	r6, r6, #5	@ _49, y,
	subs	r1, r5, #4	@ tmp492, x,
@ Patches/../C_code.c:5936: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AIDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Aid");
	ldr	r7, .L3694+20	@ tmp496,
@ Patches/../C_code.c:5936: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AIDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Aid");
	adds	r1, r1, r6	@ tmp493, tmp492, _49
@ Patches/../C_code.c:5936: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AIDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Aid");
	lsls	r1, r1, #1	@ tmp494, tmp493,
@ Patches/../C_code.c:5936: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AIDLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Aid");
	adds	r1, r1, r7	@ tmp495, tmp494, tmp496
	movs	r2, #3	@,
	str	r3, [sp]	@ tmp499,
	ldr	r0, .L3694+24	@ tmp497,
	ldr	r4, .L3694+28	@ tmp500,
	bl	.L240		@
@ Patches/../C_code.c:5937: 				PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y), blue,
	ldr	r0, [sp, #56]	@, unit
	ldr	r3, .L3694+32	@ tmp501,
	bl	.L14		@
@ Patches/../C_code.c:5937: 				PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y), blue,
	adds	r3, r6, r5	@ tmp502, _49, x
@ Patches/../C_code.c:5937: 				PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y), blue,
	lsls	r3, r3, #1	@ tmp503, tmp502,
@ Patches/../C_code.c:5937: 				PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y), blue,
	movs	r2, r0	@ _60, tmp799
@ Patches/../C_code.c:5937: 				PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y), blue,
	movs	r1, #2	@,
@ Patches/../C_code.c:5937: 				PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y), blue,
	adds	r0, r3, r7	@ tmp504, tmp503, tmp496
@ Patches/../C_code.c:5937: 				PutNumberOrBlank(gUiTmScratchA + TILEMAP_INDEX(x, y), blue,
	ldr	r3, .L3694+36	@ tmp506,
	bl	.L14		@
@ Patches/../C_code.c:5939: 				DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x+1, y),
	movs	r2, #160	@,
@ Patches/../C_code.c:5939: 				DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x+1, y),
	adds	r5, r5, #1	@ tmp508,
	adds	r3, r5, r6	@ tmp509, tmp508, _49
@ Patches/../C_code.c:5939: 				DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x+1, y),
	lsls	r3, r3, #1	@ tmp510, tmp509,
@ Patches/../C_code.c:5939: 				DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x+1, y),
	adds	r0, r3, r7	@ tmp511, tmp510, tmp496
	mov	r1, r9	@, icon
	ldr	r3, .L3694+40	@ tmp513,
	lsls	r2, r2, #7	@,,
	bl	.L14		@
@ Patches/../C_code.c:5941: 				return 0; break;
	b	.L3647		@
.L3640:
@ Patches/../C_code.c:5928: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_CONLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Con");
	subs	r3, r5, #4	@ tmp444, x,
	lsls	r1, r6, #5	@ tmp443, y,
	adds	r1, r1, r3	@ tmp445, tmp443, tmp444
@ Patches/../C_code.c:5928: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_CONLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Con");
	ldr	r3, .L3694+20	@ tmp448,
@ Patches/../C_code.c:5928: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_CONLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Con");
	lsls	r1, r1, #1	@ tmp446, tmp445,
@ Patches/../C_code.c:5928: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_CONLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Con");
	adds	r1, r1, r3	@ tmp447, tmp446, tmp448
	ldr	r0, .L3694+44	@ tmp449,
	ldr	r3, .L3694+48	@ tmp450,
.L3683:
	str	r3, [sp, #4]	@ tmp450,
	movs	r3, #0	@ tmp451,
	movs	r2, #3	@,
	str	r3, [sp]	@ tmp451,
	ldr	r7, .L3694+28	@ tmp452,
	bl	.L223		@
@ Patches/../C_code.c:5929: 				DrawStatWithBar(barID, x, y, gStatScreenFunction[id].GetUnitUnadjustedStat(unit),
	ldr	r3, [sp, #60]	@ tmp871, id
	mov	ip, r3	@ tmp871, tmp871
	add	r4, r4, ip	@ tmp456, tmp871
	lsls	r4, r4, #2	@ tmp457, tmp456,
	add	r4, r4, r10	@ tmp458, tmp777
@ Patches/../C_code.c:5929: 				DrawStatWithBar(barID, x, y, gStatScreenFunction[id].GetUnitUnadjustedStat(unit),
	ldr	r3, [r4, #4]	@ gStatScreenFunction[id_268(D)].GetUnitUnadjustedStat, gStatScreenFunction[id_268(D)].GetUnitUnadjustedStat
	ldr	r0, [sp, #56]	@, unit
	bl	.L14		@
	ldr	r3, [r4, #8]	@ gStatScreenFunction[id_268(D)].GetUnitStat, gStatScreenFunction[id_268(D)].GetUnitStat
	mov	r8, r0	@ _34, tmp795
	ldr	r0, [sp, #56]	@, unit
	bl	.L14		@
	ldr	r3, [r4, #12]	@ gStatScreenFunction[id_268(D)].GetUnitMaxStat, gStatScreenFunction[id_268(D)].GetUnitMaxStat
	movs	r7, r0	@ _36, tmp796
	ldr	r0, [sp, #56]	@, unit
	bl	.L14		@
@ Patches/../C_code.c:5929: 				DrawStatWithBar(barID, x, y, gStatScreenFunction[id].GetUnitUnadjustedStat(unit),
	mov	r3, r8	@, _34
	str	r0, [sp, #4]	@ tmp797,
	movs	r2, r6	@, y
	mov	r0, r9	@, barID
	movs	r1, r5	@, x
	str	r7, [sp]	@ _36,
	ldr	r4, .L3694+52	@ tmp477,
	bl	.L240		@
@ Patches/../C_code.c:5925: 				return 1; break; 
	movs	r0, #1	@ <retval>,
	b	.L3622		@
.L3636:
@ Patches/../C_code.c:5958: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_STATUS,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Cond");
	subs	r3, r5, #4	@ tmp552, x,
	lsls	r1, r6, #5	@ tmp551, y,
	adds	r1, r1, r3	@ tmp553, tmp551, tmp552
@ Patches/../C_code.c:5958: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_STATUS,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Cond");
	ldr	r3, .L3694+20	@ tmp556,
@ Patches/../C_code.c:5958: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_STATUS,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Cond");
	lsls	r1, r1, #1	@ tmp554, tmp553,
@ Patches/../C_code.c:5958: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_STATUS,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Cond");
	adds	r1, r1, r3	@ tmp555, tmp554, tmp556
	ldr	r3, .L3694+56	@ tmp558,
	str	r3, [sp, #4]	@ tmp558,
	movs	r3, #0	@ tmp559,
	movs	r2, #3	@,
	ldr	r0, .L3694+60	@ tmp557,
	str	r3, [sp]	@ tmp559,
	ldr	r4, .L3694+28	@ tmp560,
	bl	.L240		@
@ Patches/../C_code.c:5959: 				DrawStatus(x+1, y); 
	movs	r1, r6	@, y
	adds	r0, r5, #1	@ tmp561, x,
	bl	DrawStatus		@
@ Patches/../C_code.c:5960: 				return 0; break;
	b	.L3647		@
.L3638:
@ Patches/../C_code.c:5944: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESCUENAME,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Trv");
	lsls	r1, r6, #5	@ tmp514, y,
	subs	r5, r5, #4	@ tmp515,
@ Patches/../C_code.c:5944: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESCUENAME,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Trv");
	ldr	r3, .L3694+20	@ tmp519,
@ Patches/../C_code.c:5944: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESCUENAME,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Trv");
	adds	r1, r1, r5	@ tmp516, tmp514, tmp515
@ Patches/../C_code.c:5944: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESCUENAME,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Trv");
	lsls	r1, r1, #1	@ tmp517, tmp516,
@ Patches/../C_code.c:5944: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESCUENAME,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Trv");
	adds	r1, r1, r3	@ tmp518, tmp517, tmp519
	ldr	r3, .L3694+64	@ tmp521,
	str	r3, [sp, #4]	@ tmp521,
	movs	r3, #0	@ tmp522,
	ldr	r4, .L3694+68	@ tmp520,
	str	r3, [sp]	@ tmp522,
.L3684:
	movs	r0, r4	@, tmp520
	movs	r2, #3	@,
	ldr	r5, .L3694+28	@ tmp523,
	bl	.L3231		@
@ Patches/../C_code.c:5945: 				Text_InsertDrawString(&gStatScreen.text[STATSCREEN_TEXT_RESCUENAME], 24, blue, GetUnitRescueName(unit));
	ldr	r0, [sp, #56]	@, unit
	ldr	r3, .L3694+72	@ tmp524,
	b	.L3685		@
.L3627:
@ Patches/../C_code.c:6063: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_DEFLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EF));
	ldr	r3, .L3694+76	@ tmp690,
	ldr	r0, .L3694+80	@,
	bl	.L14		@
@ Patches/../C_code.c:6063: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_DEFLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EF));
	lsls	r3, r6, #5	@ tmp691, y,
	subs	r1, r5, #4	@ tmp692, x,
	adds	r1, r3, r1	@ tmp693, tmp691, tmp692
@ Patches/../C_code.c:6063: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_DEFLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EF));
	ldr	r3, .L3694+20	@ tmp696,
@ Patches/../C_code.c:6063: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_DEFLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EF));
	lsls	r1, r1, #1	@ tmp694, tmp693,
@ Patches/../C_code.c:6063: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_DEFLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EF));
	movs	r2, r0	@ tmp815,
@ Patches/../C_code.c:6063: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_DEFLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EF));
	adds	r1, r1, r3	@ tmp695, tmp694, tmp696
@ Patches/../C_code.c:6063: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_DEFLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4EF));
	ldr	r0, .L3694+84	@ tmp697,
	b	.L3687		@
.L3637:
@ Patches/../C_code.c:5949: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AFFINLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Affin");
	ldr	r3, .L3694+88	@ tmp533,
	ldr	r4, .L3694+92	@ tmp532,
	str	r3, [sp, #4]	@ tmp533,
	movs	r3, #0	@ tmp534,
	mov	r9, r4	@ tmp532, tmp532
@ Patches/../C_code.c:5949: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AFFINLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Affin");
	lsls	r6, r6, #5	@ _73, y,
	subs	r1, r1, #4	@ tmp527,
@ Patches/../C_code.c:5949: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AFFINLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Affin");
	ldr	r7, .L3694+20	@ tmp778,
@ Patches/../C_code.c:5949: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AFFINLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Affin");
	adds	r1, r1, r6	@ tmp528, tmp527, _73
@ Patches/../C_code.c:5949: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AFFINLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Affin");
	lsls	r1, r1, #1	@ tmp529, tmp528,
@ Patches/../C_code.c:5949: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_AFFINLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Affin");
	movs	r0, r4	@, tmp532
	adds	r1, r7, r1	@ tmp530, tmp778, tmp529
	movs	r2, #3	@,
	str	r3, [sp]	@ tmp534,
	ldr	r4, .L3694+28	@ tmp535,
	bl	.L240		@
@ Patches/../C_code.c:5950: 				int icon = GetUnitAffinityIcon(gStatScreen.unit); 
	mov	r4, r9	@ tmp532, tmp532
	subs	r4, r4, #128	@ tmp532,
	ldr	r3, .L3694+96	@ tmp538,
	ldr	r0, [r4, #12]	@ gStatScreen.unit, gStatScreen.unit
	bl	.L14		@
@ Patches/../C_code.c:5951: 				if (SkillSysInstalled) { icon |= IconOrr*2; } 
	ldr	r3, .L3694+8	@ tmp539,
@ Patches/../C_code.c:5951: 				if (SkillSysInstalled) { icon |= IconOrr*2; } 
	ldr	r3, [r3]	@ SkillSysInstalled, SkillSysInstalled
@ Patches/../C_code.c:5950: 				int icon = GetUnitAffinityIcon(gStatScreen.unit); 
	movs	r1, r0	@ icon, tmp801
@ Patches/../C_code.c:5951: 				if (SkillSysInstalled) { icon |= IconOrr*2; } 
	cmp	r3, #0	@ SkillSysInstalled,
	beq	.L3648		@,
@ Patches/../C_code.c:5951: 				if (SkillSysInstalled) { icon |= IconOrr*2; } 
	ldr	r3, .L3694+12	@ tmp541,
	ldr	r3, [r3]	@ IconOrr, IconOrr
	lsls	r3, r3, #1	@ tmp542, IconOrr,
@ Patches/../C_code.c:5951: 				if (SkillSysInstalled) { icon |= IconOrr*2; } 
	orrs	r1, r3	@ icon, tmp542
.L3648:
@ Patches/../C_code.c:5952: 				DrawIcon(
	movs	r2, #160	@,
@ Patches/../C_code.c:5953: 					gUiTmScratchA + TILEMAP_INDEX(x-1, y),
	subs	r5, r5, #1	@ tmp545,
	adds	r3, r5, r6	@ tmp546, tmp545, _73
@ Patches/../C_code.c:5953: 					gUiTmScratchA + TILEMAP_INDEX(x-1, y),
	lsls	r3, r3, #1	@ tmp547, tmp546,
@ Patches/../C_code.c:5952: 				DrawIcon(
	adds	r0, r7, r3	@ tmp548, tmp778, tmp547
	lsls	r2, r2, #7	@,,
	ldr	r3, .L3694+40	@ tmp550,
	bl	.L14		@
@ Patches/../C_code.c:5955: 				return 0; break;
	b	.L3647		@
.L3657:
@ Patches/../C_code.c:6003: 						DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + ((i-3)*3), y), skillID[i], 0x4000); }
	movs	r2, #128	@,
@ Patches/../C_code.c:6003: 						DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + ((i-3)*3), y), skillID[i], 0x4000); }
	lsls	r3, r4, #1	@ tmp626, i,
@ Patches/../C_code.c:6003: 						DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + ((i-3)*3), y), skillID[i], 0x4000); }
	movs	r0, r5	@, ivtmp.2093
	ldrb	r1, [r7, r3]	@ MEM[(u8 *)skillID_292 + _494 * 1], MEM[(u8 *)skillID_292 + _494 * 1]
	lsls	r2, r2, #7	@,,
	bl	.L179		@
	b	.L3658		@
.L3690:
@ Patches/../C_code.c:5997: 				for (int i = 0; i<6; ++i) { 
	adds	r4, r4, #1	@ i,
@ Patches/../C_code.c:5997: 				for (int i = 0; i<6; ++i) { 
	adds	r5, r5, #6	@ ivtmp.2093,
	b	.L3659		@
.L3651:
@ Patches/../C_code.c:5990: 					DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + (i*3), y), skillID[i], 0x4000); }
	movs	r2, #128	@,
@ Patches/../C_code.c:5990: 					DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + (i*3), y), skillID[i], 0x4000); }
	lsls	r3, r5, #1	@ tmp610, i,
@ Patches/../C_code.c:5990: 					DrawIcon(gUiTmScratchA + TILEMAP_INDEX(x-4 + (i*3), y), skillID[i], 0x4000); }
	movs	r0, r4	@, ivtmp.2083
	ldrb	r1, [r7, r3]	@ MEM[(u8 *)skillID_298 + _507 * 1], MEM[(u8 *)skillID_298 + _507 * 1]
	lsls	r2, r2, #7	@,,
	bl	.L179		@
	b	.L3652		@
.L3649:
@ Patches/../C_code.c:5973: 					PutDrawText(gStatScreen.text + STATSCREEN_TEXT_RESCUENAME,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Trv");
	ldr	r3, .L3694+64	@ tmp581,
	str	r0, [sp]	@ talk_uid,
	str	r3, [sp, #4]	@ tmp581,
	subs	r4, r4, #24	@ tmp580,
	movs	r3, #0	@,
	b	.L3684		@
.L3660:
@ Patches/../C_code.c:6031: 				else { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_POWLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FE)); } 
	ldr	r3, .L3694+76	@ tmp652,
	ldr	r0, .L3694+100	@,
	bl	.L14		@
	movs	r3, r0	@ tmp811,
@ Patches/../C_code.c:6031: 				else { PutDrawText(gStatScreen.text + STATSCREEN_TEXT_POWLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, GetStringFromIndex(0x4FE)); } 
	str	r3, [sp, #4]	@ tmp811,
	movs	r3, #0	@ tmp654,
	ldr	r0, .L3694+104	@ tmp653,
	str	r3, [sp]	@ tmp654,
	b	.L3686		@
.L3661:
@ Patches/../C_code.c:6024: 						PutDrawText(&gStatScreen.text[STATSCREEN_TEXT_POWLABEL], gUiTmScratchA + TILEMAP_INDEX(x-4, y), gold, 0, 0, GetStringFromIndex(0x4FE)); // Str
	ldr	r3, .L3694+76	@ tmp647,
	ldr	r0, .L3694+100	@,
	bl	.L14		@
	movs	r3, r0	@ tmp810,
@ Patches/../C_code.c:6024: 						PutDrawText(&gStatScreen.text[STATSCREEN_TEXT_POWLABEL], gUiTmScratchA + TILEMAP_INDEX(x-4, y), gold, 0, 0, GetStringFromIndex(0x4FE)); // Str
	mov	r0, r8	@ tmp636, tmp636
	str	r3, [sp, #4]	@ tmp810,
	ldr	r3, [sp, #12]	@ tmp639, %sfp
	adds	r0, r0, #48	@ tmp636,
	str	r3, [sp]	@ tmp639,
	movs	r3, #0	@,
	b	.L3686		@
.L3689:
@ Patches/../C_code.c:5917: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Mov");
	subs	r3, r5, #4	@ tmp370, x,
	lsls	r1, r6, #5	@ tmp369, y,
	adds	r1, r1, r3	@ tmp371, tmp369, tmp370
@ Patches/../C_code.c:5917: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Mov");
	ldr	r3, .L3694+20	@ tmp374,
@ Patches/../C_code.c:5917: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Mov");
	lsls	r1, r1, #1	@ tmp372, tmp371,
@ Patches/../C_code.c:5917: 				PutDrawText(gStatScreen.text + STATSCREEN_TEXT_MOVLABEL,   gUiTmScratchA + TILEMAP_INDEX(x-4, y),  gold, 0, 0, "Mov");
	adds	r1, r1, r3	@ tmp373, tmp372, tmp374
	ldr	r0, .L3694+108	@ tmp375,
	ldr	r3, .L3694+112	@ tmp376,
	b	.L3683		@
.L3695:
	.align	2
.L3694:
	.word	gStatScreen
	.word	GetUnitAidIconId
	.word	SkillSysInstalled
	.word	IconOrr
	.word	.LC701
	.word	gUiTmScratchA
	.word	gStatScreen+112
	.word	PutDrawText
	.word	CallprAidGetter
	.word	PutNumberOrBlank
	.word	DrawIcon
	.word	gStatScreen+104
	.word	.LC695
	.word	DrawStatWithBar
	.word	.LC715
	.word	gStatScreen+136
	.word	.LC706
	.word	gStatScreen+120
	.word	GetUnitRescueName
	.word	GetStringFromIndex
	.word	1263
	.word	gStatScreen+80
	.word	.LC711
	.word	gStatScreen+128
	.word	GetUnitAffinityIcon
	.word	1278
	.word	gStatScreen+48
	.word	gStatScreen+96
	.word	.LC686
	.size	DrawStatByID, .-DrawStatByID
	.align	1
	.p2align 2,,3
	.global	GetIconCoordFromStatScreenLayout
	.syntax unified
	.code	16
	.thumb_func
	.type	GetIconCoordFromStatScreenLayout, %function
GetIconCoordFromStatScreenLayout:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:6121: 	result.y = -1; 
	movs	r5, #1	@ result$y,
	rsbs	r5, r5, #0	@ result$y, result$y
@ Patches/../C_code.c:6120: 	result.x = -1; 
	movs	r6, r5	@ result$x, result$y
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	movs	r2, #0	@ i,
	ldr	r1, .L3703	@ ivtmp.2106,
@ Patches/../C_code.c:6118: struct Vec2 GetIconCoordFromStatScreenLayout(int id) { 
	ldr	r3, .L3703+4	@ ivtmp.2107,
	sub	sp, sp, #8	@,,
.L3701:
@ Patches/../C_code.c:6123: 		if (gStatScreenFunction[i].specialCase == id) { 
	ldr	r4, [r1]	@ MEM[(int *)_3], MEM[(int *)_3]
	cmp	r0, r4	@ id, MEM[(int *)_3]
	beq	.L3702		@,
.L3697:
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp128,
	lsls	r3, r3, #16	@ tmp129, tmp128,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2106,
	lsrs	r3, r3, #16	@ ivtmp.2107, tmp129,
	cmp	r2, #16	@ i,
	bne	.L3701		@,
@ Patches/../C_code.c:6127: 	return result; 
	lsls	r0, r6, #16	@ tmp145, result$x,
	lsls	r5, r5, #16	@ tmp143, result$y,
	lsrs	r0, r0, #16	@ tmp144, tmp145,
	orrs	r0, r5	@ tmp146, tmp143
@ Patches/../C_code.c:6128: } 
	add	sp, sp, #8	@,,
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L3702:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	cmp	r2, #7	@ i,
	bgt	.L3698		@,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r5, r3	@ tmp125, ivtmp.2107
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp126,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	adds	r5, r5, #16	@ tmp125,
	lsls	r5, r5, #16	@ result$y, tmp125,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	lsls	r3, r3, #16	@ tmp127, tmp126,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r6, #13	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r5, r5, #16	@ result$y, result$y,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2106,
	lsrs	r3, r3, #16	@ ivtmp.2107, tmp127,
	b	.L3701		@
.L3698:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	lsls	r5, r3, #16	@ result$y, ivtmp.2107,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r6, #21	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r5, r5, #16	@ result$y, result$y,
	b	.L3697		@
.L3704:
	.align	2
.L3703:
	.word	gStatScreenFunction
	.word	65523
	.size	GetIconCoordFromStatScreenLayout, .-GetIconCoordFromStatScreenLayout
	.align	1
	.p2align 2,,3
	.global	GetTrvCoordFromStatScreenLayout
	.syntax unified
	.code	16
	.thumb_func
	.type	GetTrvCoordFromStatScreenLayout, %function
GetTrvCoordFromStatScreenLayout:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}	@
@ Patches/../C_code.c:6121: 	result.y = -1; 
	movs	r4, #1	@ result$y,
	rsbs	r4, r4, #0	@ result$y, result$y
@ Patches/../C_code.c:6120: 	result.x = -1; 
	movs	r5, r4	@ result$x, result$y
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	movs	r2, #0	@ i,
	ldr	r1, .L3712	@ ivtmp.2122,
@ Patches/../C_code.c:6129: struct Vec2 GetTrvCoordFromStatScreenLayout() { 
	ldr	r3, .L3712+4	@ ivtmp.2123,
	sub	sp, sp, #12	@,,
.L3710:
@ Patches/../C_code.c:6123: 		if (gStatScreenFunction[i].specialCase == id) { 
	ldr	r0, [r1]	@ MEM[(int *)_6], MEM[(int *)_6]
	cmp	r0, #4	@ MEM[(int *)_6],
	beq	.L3711		@,
.L3706:
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp127,
	lsls	r3, r3, #16	@ tmp128, tmp127,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2122,
	lsrs	r3, r3, #16	@ ivtmp.2123, tmp128,
	cmp	r2, #16	@ i,
	bne	.L3710		@,
@ Patches/../C_code.c:6130: 	return GetIconCoordFromStatScreenLayout(4); 
	lsls	r0, r5, #16	@ tmp144, result$x,
	lsls	r4, r4, #16	@ tmp142, result$y,
	lsrs	r0, r0, #16	@ tmp143, tmp144,
	orrs	r0, r4	@ tmp145, tmp142
@ Patches/../C_code.c:6131: } 
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L3711:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	cmp	r2, #7	@ i,
	bgt	.L3707		@,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r4, r3	@ tmp124, ivtmp.2123
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp125,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	adds	r4, r4, #16	@ tmp124,
	lsls	r4, r4, #16	@ result$y, tmp124,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	lsls	r3, r3, #16	@ tmp126, tmp125,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r5, #13	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r4, r4, #16	@ result$y, result$y,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2122,
	lsrs	r3, r3, #16	@ ivtmp.2123, tmp126,
	b	.L3710		@
.L3707:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	lsls	r4, r3, #16	@ result$y, ivtmp.2123,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r5, #21	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r4, r4, #16	@ result$y, result$y,
	b	.L3706		@
.L3713:
	.align	2
.L3712:
	.word	gStatScreenFunction
	.word	65523
	.size	GetTrvCoordFromStatScreenLayout, .-GetTrvCoordFromStatScreenLayout
	.align	1
	.p2align 2,,3
	.global	GetSklCoordFromStatScreenLayout
	.syntax unified
	.code	16
	.thumb_func
	.type	GetSklCoordFromStatScreenLayout, %function
GetSklCoordFromStatScreenLayout:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}	@
@ Patches/../C_code.c:6121: 	result.y = -1; 
	movs	r4, #1	@ result$y,
	rsbs	r4, r4, #0	@ result$y, result$y
@ Patches/../C_code.c:6120: 	result.x = -1; 
	movs	r5, r4	@ result$x, result$y
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	movs	r2, #0	@ i,
	ldr	r1, .L3721	@ ivtmp.2138,
@ Patches/../C_code.c:6132: struct Vec2 GetSklCoordFromStatScreenLayout() { 
	ldr	r3, .L3721+4	@ ivtmp.2139,
	sub	sp, sp, #12	@,,
.L3719:
@ Patches/../C_code.c:6123: 		if (gStatScreenFunction[i].specialCase == id) { 
	ldr	r0, [r1]	@ MEM[(int *)_6], MEM[(int *)_6]
	cmp	r0, #12	@ MEM[(int *)_6],
	beq	.L3720		@,
.L3715:
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp127,
	lsls	r3, r3, #16	@ tmp128, tmp127,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2138,
	lsrs	r3, r3, #16	@ ivtmp.2139, tmp128,
	cmp	r2, #16	@ i,
	bne	.L3719		@,
@ Patches/../C_code.c:6133: 	return GetIconCoordFromStatScreenLayout(12); 
	lsls	r0, r5, #16	@ tmp144, result$x,
	lsls	r4, r4, #16	@ tmp142, result$y,
	lsrs	r0, r0, #16	@ tmp143, tmp144,
	orrs	r0, r4	@ tmp145, tmp142
@ Patches/../C_code.c:6134: } 
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L3720:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	cmp	r2, #7	@ i,
	bgt	.L3716		@,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r4, r3	@ tmp124, ivtmp.2139
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp125,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	adds	r4, r4, #16	@ tmp124,
	lsls	r4, r4, #16	@ result$y, tmp124,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	lsls	r3, r3, #16	@ tmp126, tmp125,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r5, #13	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r4, r4, #16	@ result$y, result$y,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2138,
	lsrs	r3, r3, #16	@ ivtmp.2139, tmp126,
	b	.L3719		@
.L3716:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	lsls	r4, r3, #16	@ result$y, ivtmp.2139,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r5, #21	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r4, r4, #16	@ result$y, result$y,
	b	.L3715		@
.L3722:
	.align	2
.L3721:
	.word	gStatScreenFunction
	.word	65523
	.size	GetSklCoordFromStatScreenLayout, .-GetSklCoordFromStatScreenLayout
	.align	1
	.p2align 2,,3
	.global	GetSpdCoordFromStatScreenLayout
	.syntax unified
	.code	16
	.thumb_func
	.type	GetSpdCoordFromStatScreenLayout, %function
GetSpdCoordFromStatScreenLayout:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, lr}	@
@ Patches/../C_code.c:6121: 	result.y = -1; 
	movs	r4, #1	@ result$y,
	rsbs	r4, r4, #0	@ result$y, result$y
@ Patches/../C_code.c:6120: 	result.x = -1; 
	movs	r5, r4	@ result$x, result$y
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	movs	r2, #0	@ i,
	ldr	r1, .L3730	@ ivtmp.2154,
@ Patches/../C_code.c:6135: struct Vec2 GetSpdCoordFromStatScreenLayout() { 
	ldr	r3, .L3730+4	@ ivtmp.2155,
	sub	sp, sp, #12	@,,
.L3728:
@ Patches/../C_code.c:6123: 		if (gStatScreenFunction[i].specialCase == id) { 
	ldr	r0, [r1]	@ MEM[(int *)_6], MEM[(int *)_6]
	cmp	r0, #13	@ MEM[(int *)_6],
	beq	.L3729		@,
.L3724:
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp127,
	lsls	r3, r3, #16	@ tmp128, tmp127,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2154,
	lsrs	r3, r3, #16	@ ivtmp.2155, tmp128,
	cmp	r2, #16	@ i,
	bne	.L3728		@,
@ Patches/../C_code.c:6136: 	return GetIconCoordFromStatScreenLayout(13); 
	lsls	r0, r5, #16	@ tmp144, result$x,
	lsls	r4, r4, #16	@ tmp142, result$y,
	lsrs	r0, r0, #16	@ tmp143, tmp144,
	orrs	r0, r4	@ tmp145, tmp142
@ Patches/../C_code.c:6137: } 
	add	sp, sp, #12	@,,
	@ sp needed	@
	pop	{r4, r5}
	pop	{r1}
	bx	r1
.L3729:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	cmp	r2, #7	@ i,
	bgt	.L3725		@,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r4, r3	@ tmp124, ivtmp.2155
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp125,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	adds	r4, r4, #16	@ tmp124,
	lsls	r4, r4, #16	@ result$y, tmp124,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	lsls	r3, r3, #16	@ tmp126, tmp125,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r5, #13	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r4, r4, #16	@ result$y, result$y,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2154,
	lsrs	r3, r3, #16	@ ivtmp.2155, tmp126,
	b	.L3728		@
.L3725:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	lsls	r4, r3, #16	@ result$y, ivtmp.2155,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r5, #21	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r4, r4, #16	@ result$y, result$y,
	b	.L3724		@
.L3731:
	.align	2
.L3730:
	.word	gStatScreenFunction
	.word	65523
	.size	GetSpdCoordFromStatScreenLayout, .-GetSpdCoordFromStatScreenLayout
	.align	1
	.p2align 2,,3
	.global	PageNumCtrl_DisplayBlinkIcons
	.syntax unified
	.code	16
	.thumb_func
	.type	PageNumCtrl_DisplayBlinkIcons, %function
PageNumCtrl_DisplayBlinkIcons:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:6141:     s8 displayIcon = (GetGameClock() % 32) < 20;
	ldr	r3, .L3783	@ tmp200,
@ Patches/../C_code.c:6140: {
	sub	sp, sp, #20	@,,
@ Patches/../C_code.c:6141:     s8 displayIcon = (GetGameClock() % 32) < 20;
	bl	.L14		@
@ Patches/../C_code.c:6143:     u16 palidLut[3] = { 0xC, 0xE, 0xD }; // TODO: palid constants
	ldr	r3, .L3783+4	@ tmp201,
	mov	r2, sp	@ tmp327,
	str	r3, [sp, #8]	@ tmp201, MEM <vector(2) short unsigned int> [(short unsigned int *)&palidLut]
	movs	r3, #13	@ tmp203,
	strh	r3, [r2, #12]	@ tmp203, palidLut[2]
@ Patches/../C_code.c:6145:     if (!gStatScreen.inTransition)
	movs	r3, #8	@ tmp206,
@ Patches/../C_code.c:6145:     if (!gStatScreen.inTransition)
	ldr	r5, .L3783+8	@ tmp305,
@ Patches/../C_code.c:6145:     if (!gStatScreen.inTransition)
	ldrsb	r3, [r5, r3]	@ tmp206,
	cmp	r3, #0	@ tmp206,
	bne	.L3732		@,
@ Patches/../C_code.c:6141:     s8 displayIcon = (GetGameClock() % 32) < 20;
	movs	r6, #31	@ tmp207,
@ Patches/../C_code.c:6147:         if ((gStatScreen.page == STATSCREEN_PAGE_0) && (gStatScreen.unit->state & US_RESCUING))
	ldr	r7, [r5, #12]	@ _73, gStatScreen.unit
@ Patches/../C_code.c:6147:         if ((gStatScreen.page == STATSCREEN_PAGE_0) && (gStatScreen.unit->state & US_RESCUING))
	ldrb	r2, [r5]	@ gStatScreen, gStatScreen
@ Patches/../C_code.c:6147:         if ((gStatScreen.page == STATSCREEN_PAGE_0) && (gStatScreen.unit->state & US_RESCUING))
	ldr	r3, [r7, #12]	@ pretmp_157, pretmp_156->state
@ Patches/../C_code.c:6141:     s8 displayIcon = (GetGameClock() % 32) < 20;
	ands	r6, r0	@ _2, _1
@ Patches/../C_code.c:6147:         if ((gStatScreen.page == STATSCREEN_PAGE_0) && (gStatScreen.unit->state & US_RESCUING))
	cmp	r2, #0	@ gStatScreen,
	beq	.L3779		@,
.L3735:
@ Patches/../C_code.c:6177:             if (displayIcon)
	lsls	r3, r3, #26	@ tmp325, pretmp_157,
	bpl	.L3732		@,
	cmp	r6, #19	@ _2,
	bls	.L3778		@,
.L3732:
@ Patches/../C_code.c:6187: }
	add	sp, sp, #20	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3779:
@ Patches/../C_code.c:6147:         if ((gStatScreen.page == STATSCREEN_PAGE_0) && (gStatScreen.unit->state & US_RESCUING))
	lsls	r2, r3, #27	@ tmp319, pretmp_157,
	bpl	.L3735		@,
@ Patches/../C_code.c:6121: 	result.y = -1; 
	movs	r7, #1	@ result$y,
	ldr	r4, .L3783+12	@ ivtmp.2174,
	rsbs	r7, r7, #0	@ result$y, result$y
@ Patches/../C_code.c:6147:         if ((gStatScreen.page == STATSCREEN_PAGE_0) && (gStatScreen.unit->state & US_RESCUING))
	movs	r1, r4	@ ivtmp.2192, ivtmp.2174
@ Patches/../C_code.c:6120: 	result.x = -1; 
	mov	ip, r7	@ result$x, result$y
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	movs	r2, #0	@ i,
@ Patches/../C_code.c:6147:         if ((gStatScreen.page == STATSCREEN_PAGE_0) && (gStatScreen.unit->state & US_RESCUING))
	ldr	r3, .L3783+16	@ ivtmp.2193,
.L3740:
@ Patches/../C_code.c:6123: 		if (gStatScreenFunction[i].specialCase == id) { 
	ldr	r0, [r1]	@ MEM[(int *)_121], MEM[(int *)_121]
	cmp	r0, #12	@ MEM[(int *)_121],
	beq	.L3780		@,
.L3736:
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp217,
	lsls	r3, r3, #16	@ tmp218, tmp217,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2192,
	lsrs	r3, r3, #16	@ ivtmp.2193, tmp218,
	cmp	r2, #16	@ i,
	bne	.L3740		@,
@ Patches/../C_code.c:6150: 			if (coord.x != (-1)) { 
	mov	r3, ip	@ result$x, result$x
	adds	r3, r3, #1	@ tmp320, result$x,
	beq	.L3741		@,
@ Patches/../C_code.c:6151: 				coord.x = (coord.x+2) * 8; 
	mov	r0, ip	@ result$x, result$x
@ Patches/../C_code.c:6152: 				coord.y = coord.y * 8; 
	lsls	r1, r7, #3	@ tmp220, result$y,
@ Patches/../C_code.c:6153: 				UpdateStatArrowSprites(coord.x, coord.y, 1);
	lsls	r1, r1, #16	@ tmp221, tmp220,
@ Patches/../C_code.c:6151: 				coord.x = (coord.x+2) * 8; 
	adds	r0, r0, #2	@ result$x,
@ Patches/../C_code.c:6153: 				UpdateStatArrowSprites(coord.x, coord.y, 1);
	ldr	r3, .L3783+20	@ tmp226,
	asrs	r1, r1, #16	@ tmp221, tmp221,
	lsls	r0, r0, #3	@ tmp225, tmp222,
	subs	r2, r2, #15	@,
	bl	.L14		@
.L3741:
@ Patches/../C_code.c:6121: 	result.y = -1; 
	movs	r7, #1	@ result$y,
	rsbs	r7, r7, #0	@ result$y, result$y
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r1, r4	@ ivtmp.2183, ivtmp.2174
@ Patches/../C_code.c:6120: 	result.x = -1; 
	mov	ip, r7	@ result$x, result$y
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	movs	r2, #0	@ i,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	ldr	r3, .L3783+16	@ ivtmp.2184,
.L3746:
@ Patches/../C_code.c:6123: 		if (gStatScreenFunction[i].specialCase == id) { 
	ldr	r0, [r1]	@ MEM[(int *)_99], MEM[(int *)_99]
	cmp	r0, #13	@ MEM[(int *)_99],
	beq	.L3781		@,
.L3742:
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp231,
	lsls	r3, r3, #16	@ tmp232, tmp231,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2183,
	lsrs	r3, r3, #16	@ ivtmp.2184, tmp232,
	cmp	r2, #16	@ i,
	bne	.L3746		@,
@ Patches/../C_code.c:6156: 			if (coord.x != (-1)) { 
	mov	r3, ip	@ result$x, result$x
	adds	r3, r3, #1	@ tmp321, result$x,
	beq	.L3747		@,
@ Patches/../C_code.c:6157: 				coord.x = (coord.x+2) * 8; 
	mov	r0, ip	@ result$x, result$x
@ Patches/../C_code.c:6158: 				coord.y = coord.y * 8; 
	lsls	r1, r7, #3	@ tmp234, result$y,
@ Patches/../C_code.c:6159: 				UpdateStatArrowSprites(coord.x, coord.y, 1);
	lsls	r1, r1, #16	@ tmp235, tmp234,
@ Patches/../C_code.c:6157: 				coord.x = (coord.x+2) * 8; 
	adds	r0, r0, #2	@ result$x,
@ Patches/../C_code.c:6159: 				UpdateStatArrowSprites(coord.x, coord.y, 1);
	ldr	r3, .L3783+20	@ tmp240,
	asrs	r1, r1, #16	@ tmp235, tmp235,
	lsls	r0, r0, #3	@ tmp239, tmp236,
	subs	r2, r2, #15	@,
	bl	.L14		@
.L3747:
@ Patches/../C_code.c:6162:             if (displayIcon)
	cmp	r6, #19	@ _2,
	bhi	.L3732		@,
@ Patches/../C_code.c:6121: 	result.y = -1; 
	movs	r0, #1	@ result$y,
	rsbs	r0, r0, #0	@ result$y, result$y
@ Patches/../C_code.c:6120: 	result.x = -1; 
	movs	r6, r0	@ result$x, result$y
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	movs	r2, #0	@ i,
	ldr	r3, .L3783+16	@ ivtmp.2175,
.L3753:
@ Patches/../C_code.c:6123: 		if (gStatScreenFunction[i].specialCase == id) { 
	ldr	r1, [r4]	@ MEM[(int *)_130], MEM[(int *)_130]
	cmp	r1, #4	@ MEM[(int *)_130],
	beq	.L3782		@,
.L3749:
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp245,
	lsls	r3, r3, #16	@ tmp246, tmp245,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r4, r4, #20	@ ivtmp.2174,
	lsrs	r3, r3, #16	@ ivtmp.2175, tmp246,
	cmp	r2, #16	@ i,
	bne	.L3753		@,
@ Patches/../C_code.c:6175:         if (gStatScreen.unit->state & US_RESCUED)
	ldr	r7, [r5, #12]	@ _73, gStatScreen.unit
@ Patches/../C_code.c:6165: 				if (coord.x != (-1)) { 
	adds	r3, r6, #1	@ tmp322, result$x,
	bne	.L3754		@,
@ Patches/../C_code.c:6175:         if (gStatScreen.unit->state & US_RESCUED)
	ldr	r3, [r7, #12]	@ pretmp_155->state, pretmp_155->state
@ Patches/../C_code.c:6175:         if (gStatScreen.unit->state & US_RESCUED)
	lsls	r3, r3, #26	@ tmp323, pretmp_155->state,
	bpl	.L3732		@,
.L3778:
	ldr	r4, .L3783+24	@ tmp306,
	ldr	r6, .L3783+28	@ tmp307,
.L3755:
@ Patches/../C_code.c:6183:                     TILEREF(3, 0xF & palidLut[gStatScreen.unit->rescue>>6]) + OAM2_LAYER(2));
	mov	r2, sp	@ tmp344,
	movs	r1, #8	@ tmp346,
	ldrb	r3, [r7, #27]	@ tmp294,
	lsrs	r3, r3, #6	@ tmp296, tmp294,
	adds	r2, r2, r1	@ tmp345, tmp344, tmp346
	lsls	r3, r3, #1	@ tmp298, tmp296,
	ldrh	r3, [r2, r3]	@ tmp299, palidLut
@ Patches/../C_code.c:6181:                 PutSprite(4,
	ldr	r2, .L3783+32	@ tmp347,
	mov	ip, r2	@ tmp347, tmp347
@ Patches/../C_code.c:6183:                     TILEREF(3, 0xF & palidLut[gStatScreen.unit->rescue>>6]) + OAM2_LAYER(2));
	lsls	r3, r3, #28	@ tmp302, tmp299,
	lsrs	r3, r3, #16	@ tmp301, tmp302,
@ Patches/../C_code.c:6181:                 PutSprite(4,
	add	r3, r3, ip	@ tmp303, tmp347
	str	r3, [sp]	@ tmp303,
	movs	r2, #86	@,
	movs	r3, r4	@, tmp306
	movs	r0, #4	@,
	adds	r1, r1, #2	@,
	bl	.L341		@
@ Patches/../C_code.c:6187: }
	b	.L3732		@
.L3780:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	cmp	r2, #7	@ i,
	bgt	.L3737		@,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r7, r3	@ tmp214, ivtmp.2193
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp215,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	adds	r7, r7, #16	@ tmp214,
	lsls	r7, r7, #16	@ result$y, tmp214,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	lsls	r3, r3, #16	@ tmp216, tmp215,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	adds	r0, r0, #1	@ result$x,
	mov	ip, r0	@ result$x, result$x
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r7, r7, #16	@ result$y, result$y,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2192,
	lsrs	r3, r3, #16	@ ivtmp.2193, tmp216,
	b	.L3740		@
.L3781:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	cmp	r2, #7	@ i,
	bgt	.L3743		@,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r7, r3	@ tmp228, ivtmp.2184
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp229,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	adds	r7, r7, #16	@ tmp228,
	lsls	r7, r7, #16	@ result$y, tmp228,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	lsls	r3, r3, #16	@ tmp230, tmp229,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	mov	ip, r0	@ result$x, result$x
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r7, r7, #16	@ result$y, result$y,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r1, r1, #20	@ ivtmp.2183,
	lsrs	r3, r3, #16	@ ivtmp.2184, tmp230,
	b	.L3746		@
.L3782:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	cmp	r2, #7	@ i,
	bgt	.L3750		@,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r0, r3	@ tmp242, ivtmp.2175
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r3, r3, #2	@ tmp243,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	adds	r0, r0, #16	@ tmp242,
	lsls	r0, r0, #16	@ result$y, tmp242,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	lsls	r3, r3, #16	@ tmp244, tmp243,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r6, #13	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r0, r0, #16	@ result$y, result$y,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r2, r2, #1	@ i,
@ Patches/../C_code.c:6122: 	for (int i = 0; i<16; i++) { 
	adds	r4, r4, #20	@ ivtmp.2174,
	lsrs	r3, r3, #16	@ ivtmp.2175, tmp244,
	b	.L3753		@
.L3737:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r0, #21	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	lsls	r7, r3, #16	@ result$y, ivtmp.2193,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	mov	ip, r0	@ result$x, result$x
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r7, r7, #16	@ result$y, result$y,
	b	.L3736		@
.L3743:
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r0, #21	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	lsls	r7, r3, #16	@ result$y, ivtmp.2184,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	mov	ip, r0	@ result$x, result$x
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r7, r7, #16	@ result$y, result$y,
	b	.L3742		@
.L3750:
	lsls	r0, r3, #16	@ result$y, ivtmp.2175,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	movs	r6, #21	@ result$x,
@ Patches/../C_code.c:6124: 			if (i < 8) { result.x = 0xD; result.y = 3+(i*2); } else { result.x = 0x15; result.y = 3+((i-8)*2); } 
	asrs	r0, r0, #16	@ result$y, result$y,
	b	.L3749		@
.L3754:
@ Patches/../C_code.c:6167: 					coord.y = (coord.y * 8) + 6; 
	lsls	r0, r0, #3	@ tmp253, result$y,
@ Patches/../C_code.c:6167: 					coord.y = (coord.y * 8) + 6; 
	adds	r0, r0, #6	@ tmp255,
@ Patches/../C_code.c:6166: 					coord.x = (coord.x+2) * 8; 
	adds	r6, r6, #2	@ tmp257,
@ Patches/../C_code.c:6168: 					PutSprite(4,
	lsls	r2, r0, #16	@ tmp256, tmp255,
	lsls	r1, r6, #3	@ tmp260, tmp257,
@ Patches/../C_code.c:6170: 						TILEREF(3, 0xF & palidLut[gStatScreen.unit->rescue >> 6]) + OAM2_LAYER(2));
	mov	r0, sp	@ tmp339,
	movs	r6, #8	@ tmp341,
	ldrb	r3, [r7, #27]	@ tmp262,
	lsrs	r3, r3, #6	@ tmp264, tmp262,
	adds	r0, r0, r6	@ tmp340, tmp339, tmp341
	lsls	r3, r3, #1	@ tmp266, tmp264,
	ldrh	r3, [r0, r3]	@ tmp267, palidLut
@ Patches/../C_code.c:6168: 					PutSprite(4,
	ldr	r0, .L3783+32	@ tmp342,
	mov	ip, r0	@ tmp342, tmp342
@ Patches/../C_code.c:6170: 						TILEREF(3, 0xF & palidLut[gStatScreen.unit->rescue >> 6]) + OAM2_LAYER(2));
	lsls	r3, r3, #28	@ tmp270, tmp267,
@ Patches/../C_code.c:6168: 					PutSprite(4,
	ldr	r4, .L3783+24	@ tmp306,
@ Patches/../C_code.c:6170: 						TILEREF(3, 0xF & palidLut[gStatScreen.unit->rescue >> 6]) + OAM2_LAYER(2));
	lsrs	r3, r3, #16	@ tmp269, tmp270,
@ Patches/../C_code.c:6168: 					PutSprite(4,
	add	r3, r3, ip	@ tmp271, tmp342
	str	r3, [sp]	@ tmp271,
	movs	r0, #4	@,
	movs	r3, r4	@, tmp306
	ldr	r6, .L3783+28	@ tmp307,
	asrs	r2, r2, #16	@ tmp256, tmp256,
	bl	.L341		@
@ Patches/../C_code.c:6175:         if (gStatScreen.unit->state & US_RESCUED)
	ldr	r7, [r5, #12]	@ _73, gStatScreen.unit
@ Patches/../C_code.c:6175:         if (gStatScreen.unit->state & US_RESCUED)
	ldr	r3, [r7, #12]	@ _81->state, _81->state
@ Patches/../C_code.c:6175:         if (gStatScreen.unit->state & US_RESCUED)
	lsls	r3, r3, #26	@ tmp324, _81->state,
	bmi	.L3755		@,
	b	.L3732		@
.L3784:
	.align	2
.L3783:
	.word	GetGameClock
	.word	917516
	.word	gStatScreen
	.word	gStatScreenFunction
	.word	65523
	.word	UpdateStatArrowSprites
	.word	gObject_8x8
	.word	PutSprite
	.word	2051
	.size	PageNumCtrl_DisplayBlinkIcons, .-PageNumCtrl_DisplayBlinkIcons
	.section	.rodata.str1.4
	.align	2
.LC752:
	.ascii	"0Seed\000"
	.align	2
.LC756:
	.ascii	"1Seed\000"
	.align	2
.LC758:
	.ascii	"2Seed\000"
	.align	2
.LC760:
	.ascii	"3Seed\000"
	.align	2
.LC762:
	.ascii	"4Seed\000"
	.align	2
.LC764:
	.ascii	"5Seed\000"
	.text
	.align	1
	.p2align 2,,3
	.global	DrawBarsOrGrowths
	.syntax unified
	.code	16
	.thumb_func
	.type	DrawBarsOrGrowths, %function
DrawBarsOrGrowths:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:6192: 	int disp = RandBitflags->disp; 
	ldr	r3, .L3808	@ tmp163,
@ Patches/../C_code.c:6190: void DrawBarsOrGrowths(void) { // in 807FDF0 fe7, 806ED34 fe6 
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, r9	@,
	mov	r7, r8	@,
@ Patches/../C_code.c:6192: 	int disp = RandBitflags->disp; 
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r5, [r3, #3]	@ *RandBitflags.377_1, *RandBitflags.377_1
@ Patches/../C_code.c:6193: 	struct Unit* unit = gStatScreen.unit; 
	ldr	r3, .L3808+4	@ tmp170,
	ldr	r6, [r3, #12]	@ unit, gStatScreen.unit
@ Patches/../C_code.c:6203: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { disp = 1; } 
	movs	r3, #11	@ tmp171,
	movs	r2, #192	@ tmp172,
@ Patches/../C_code.c:6190: void DrawBarsOrGrowths(void) { // in 807FDF0 fe7, 806ED34 fe6 
	push	{r7, lr}	@
@ Patches/../C_code.c:6203: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { disp = 1; } 
	ldrsb	r3, [r6, r3]	@ tmp171,
@ Patches/../C_code.c:6190: void DrawBarsOrGrowths(void) { // in 807FDF0 fe7, 806ED34 fe6 
	sub	sp, sp, #20	@,,
@ Patches/../C_code.c:6192: 	int disp = RandBitflags->disp; 
	lsrs	r5, r5, #7	@ _2, *RandBitflags.377_1,
@ Patches/../C_code.c:6203: 	if (UNIT_FACTION(unit) != FACTION_BLUE) { disp = 1; } 
	tst	r2, r3	@ tmp172, tmp171
	beq	.L3786		@,
	movs	r5, #1	@ _2,
.L3786:
@ Patches/../C_code.c:6205: 	barCount += DrawStatByID(barCount, 5, 1, disp, unit, 0); 
	movs	r3, #0	@ tmp174,
	movs	r2, #1	@,
	movs	r1, #5	@,
	str	r3, [sp, #4]	@ tmp174,
	movs	r0, #0	@,
	movs	r3, r5	@, _2
	str	r6, [sp]	@ unit,
	bl	DrawStatByID		@
@ Patches/../C_code.c:6206: 	barCount += DrawStatByID(barCount, 5, 3, disp, unit, 1); 
	movs	r3, #1	@ tmp175,
	movs	r2, #3	@,
	movs	r1, #5	@,
	str	r3, [sp, #4]	@ tmp175,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
@ Patches/../C_code.c:6205: 	barCount += DrawStatByID(barCount, 5, 1, disp, unit, 0); 
	movs	r4, r0	@ _20, tmp249
@ Patches/../C_code.c:6206: 	barCount += DrawStatByID(barCount, 5, 3, disp, unit, 1); 
	bl	DrawStatByID		@
@ Patches/../C_code.c:6207: 	barCount += DrawStatByID(barCount, 5, 5, disp, unit, 2); 
	movs	r3, #2	@ tmp176,
@ Patches/../C_code.c:6206: 	barCount += DrawStatByID(barCount, 5, 3, disp, unit, 1); 
	adds	r4, r4, r0	@ barCount, _20, tmp250
@ Patches/../C_code.c:6207: 	barCount += DrawStatByID(barCount, 5, 5, disp, unit, 2); 
	movs	r2, #5	@,
	movs	r1, #5	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp176,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6208: 	barCount += DrawStatByID(barCount, 5, 7, disp, unit, 3); 
	movs	r3, #3	@ tmp177,
@ Patches/../C_code.c:6207: 	barCount += DrawStatByID(barCount, 5, 5, disp, unit, 2); 
	adds	r4, r4, r0	@ barCount, barCount, tmp251
@ Patches/../C_code.c:6208: 	barCount += DrawStatByID(barCount, 5, 7, disp, unit, 3); 
	movs	r2, #7	@,
	movs	r1, #5	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp177,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6209: 	barCount += DrawStatByID(barCount, 5, 9, disp, unit, 4); 
	movs	r3, #4	@ tmp178,
@ Patches/../C_code.c:6208: 	barCount += DrawStatByID(barCount, 5, 7, disp, unit, 3); 
	adds	r4, r4, r0	@ barCount, barCount, tmp252
@ Patches/../C_code.c:6209: 	barCount += DrawStatByID(barCount, 5, 9, disp, unit, 4); 
	movs	r2, #9	@,
	movs	r1, #5	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp178,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6210: 	barCount += DrawStatByID(barCount, 5, 11, disp, unit, 5); 
	movs	r3, #5	@ tmp179,
@ Patches/../C_code.c:6209: 	barCount += DrawStatByID(barCount, 5, 9, disp, unit, 4); 
	adds	r4, r4, r0	@ barCount, barCount, tmp253
@ Patches/../C_code.c:6210: 	barCount += DrawStatByID(barCount, 5, 11, disp, unit, 5); 
	movs	r2, #11	@,
	movs	r1, #5	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp179,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6211: 	barCount += DrawStatByID(barCount, 5, 13, disp, unit, 6); 
	movs	r3, #6	@ tmp180,
@ Patches/../C_code.c:6210: 	barCount += DrawStatByID(barCount, 5, 11, disp, unit, 5); 
	adds	r4, r4, r0	@ barCount, barCount, tmp254
@ Patches/../C_code.c:6211: 	barCount += DrawStatByID(barCount, 5, 13, disp, unit, 6); 
	movs	r2, #13	@,
	movs	r1, #5	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp180,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6212: 	barCount += DrawStatByID(barCount, 5, 15, disp, unit, 7); 
	movs	r3, #7	@ tmp181,
@ Patches/../C_code.c:6211: 	barCount += DrawStatByID(barCount, 5, 13, disp, unit, 6); 
	adds	r4, r4, r0	@ barCount, barCount, tmp255
@ Patches/../C_code.c:6212: 	barCount += DrawStatByID(barCount, 5, 15, disp, unit, 7); 
	movs	r2, #15	@,
	movs	r1, #5	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp181,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6213: 	barCount += DrawStatByID(barCount, 13, 1, disp, unit, 8); 
	movs	r3, #8	@ tmp182,
@ Patches/../C_code.c:6212: 	barCount += DrawStatByID(barCount, 5, 15, disp, unit, 7); 
	adds	r4, r4, r0	@ barCount, barCount, tmp256
@ Patches/../C_code.c:6213: 	barCount += DrawStatByID(barCount, 13, 1, disp, unit, 8); 
	movs	r2, #1	@,
	movs	r1, #13	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp182,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6214: 	barCount += DrawStatByID(barCount, 13, 3, disp, unit, 9); 
	movs	r3, #9	@ tmp183,
@ Patches/../C_code.c:6213: 	barCount += DrawStatByID(barCount, 13, 1, disp, unit, 8); 
	adds	r4, r4, r0	@ barCount, barCount, tmp257
@ Patches/../C_code.c:6214: 	barCount += DrawStatByID(barCount, 13, 3, disp, unit, 9); 
	movs	r2, #3	@,
	movs	r1, #13	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp183,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6215: 	barCount += DrawStatByID(barCount, 13, 5, disp, unit, 10); 
	movs	r3, #10	@ tmp184,
@ Patches/../C_code.c:6214: 	barCount += DrawStatByID(barCount, 13, 3, disp, unit, 9); 
	adds	r4, r4, r0	@ barCount, barCount, tmp258
@ Patches/../C_code.c:6215: 	barCount += DrawStatByID(barCount, 13, 5, disp, unit, 10); 
	movs	r2, #5	@,
	movs	r1, #13	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp184,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6216: 	barCount += DrawStatByID(barCount, 13, 7, disp, unit, 11); 
	movs	r3, #11	@ tmp185,
@ Patches/../C_code.c:6215: 	barCount += DrawStatByID(barCount, 13, 5, disp, unit, 10); 
	adds	r4, r4, r0	@ barCount, barCount, tmp259
@ Patches/../C_code.c:6216: 	barCount += DrawStatByID(barCount, 13, 7, disp, unit, 11); 
	movs	r2, #7	@,
	movs	r1, #13	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp185,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6217: 	barCount += DrawStatByID(barCount, 13, 9, disp, unit, 12); 
	movs	r3, #12	@ tmp186,
@ Patches/../C_code.c:6216: 	barCount += DrawStatByID(barCount, 13, 7, disp, unit, 11); 
	adds	r4, r4, r0	@ barCount, barCount, tmp260
@ Patches/../C_code.c:6217: 	barCount += DrawStatByID(barCount, 13, 9, disp, unit, 12); 
	movs	r2, #9	@,
	movs	r1, #13	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp186,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6218: 	barCount += DrawStatByID(barCount, 13, 11, disp, unit, 13); 
	movs	r3, #13	@ tmp187,
@ Patches/../C_code.c:6217: 	barCount += DrawStatByID(barCount, 13, 9, disp, unit, 12); 
	adds	r4, r4, r0	@ barCount, barCount, tmp261
@ Patches/../C_code.c:6218: 	barCount += DrawStatByID(barCount, 13, 11, disp, unit, 13); 
	movs	r2, #11	@,
	movs	r1, #13	@,
	movs	r0, r4	@, barCount
	str	r3, [sp, #4]	@ tmp187,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
	bl	DrawStatByID		@
@ Patches/../C_code.c:6219: 	barCount += DrawStatByID(barCount, 13, 13, disp, unit, 14); 
	movs	r3, #14	@ tmp188,
@ Patches/../C_code.c:6218: 	barCount += DrawStatByID(barCount, 13, 11, disp, unit, 13); 
	adds	r4, r4, r0	@ barCount, barCount, tmp262
@ Patches/../C_code.c:6219: 	barCount += DrawStatByID(barCount, 13, 13, disp, unit, 14); 
	movs	r2, #13	@,
	movs	r1, #13	@,
	str	r3, [sp, #4]	@ tmp188,
	movs	r0, r4	@, barCount
	movs	r3, r5	@, _2
	str	r6, [sp]	@ unit,
	bl	DrawStatByID		@
@ Patches/../C_code.c:6220: 	barCount += DrawStatByID(barCount, 13, 15, disp, unit, 15); 
	movs	r3, #15	@ tmp190,
	movs	r2, #15	@,
	movs	r1, #13	@,
	str	r3, [sp, #4]	@ tmp190,
	str	r6, [sp]	@ unit,
	movs	r3, r5	@, _2
@ Patches/../C_code.c:6219: 	barCount += DrawStatByID(barCount, 13, 13, disp, unit, 14); 
	adds	r0, r4, r0	@ barCount, barCount, tmp263
@ Patches/../C_code.c:6220: 	barCount += DrawStatByID(barCount, 13, 15, disp, unit, 15); 
	bl	DrawStatByID		@
@ Patches/../C_code.c:6242: 	if (IsAnythingRandomized()) { 
	bl	IsAnythingRandomized		@
@ Patches/../C_code.c:6242: 	if (IsAnythingRandomized()) { 
	cmp	r0, #0	@ tmp264,
	bne	.L3807		@,
.L3785:
@ Patches/../C_code.c:6261: }
	add	sp, sp, #20	@,,
	@ sp needed	@
	pop	{r6, r7}
	mov	r9, r7
	mov	r8, r6
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3807:
@ Patches/../C_code.c:6248: 		SetupDebugFontForBG(0, VramDest_DebugFont);
	ldr	r3, .L3808+8	@ tmp191,
	movs	r0, #0	@,
	ldr	r1, [r3]	@ VramDest_DebugFont, VramDest_DebugFont
	ldr	r3, .L3808+12	@ tmp193,
	bl	.L14		@
@ Patches/../C_code.c:6249: 		switch (RecruitValues->recruitment) { 
	ldr	r3, .L3808+16	@ tmp195,
	ldr	r3, [r3]	@ RecruitValues, RecruitValues
	ldrb	r3, [r3]	@ *RecruitValues.379_8, *RecruitValues.379_8
	lsls	r3, r3, #29	@ tmp200, *RecruitValues.379_8,
@ Patches/../C_code.c:6249: 		switch (RecruitValues->recruitment) { 
	lsrs	r3, r3, #29	@ tmp203, tmp200,
	cmp	r3, #5	@ tmp203,
	bhi	.L3788		@,
	ldr	r2, .L3808+20	@ tmp209,
	lsls	r3, r3, #2	@ tmp207, tmp203,
	ldr	r3, [r2, r3]	@ tmp210,
	mov	pc, r3	@ tmp210
	.section	.rodata
	.align	2
.L3790:
	.word	.L3795
	.word	.L3794
	.word	.L3793
	.word	.L3792
	.word	.L3791
	.word	.L3789
	.text
.L3789:
@ Patches/../C_code.c:6255: 			case 5: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "5Seed"); break; } 	
	ldr	r1, .L3808+24	@ tmp226,
	ldr	r0, .L3808+28	@ tmp227,
	ldr	r7, .L3808+32	@ tmp247,
	bl	.L223		@
.L3788:
@ Patches/../C_code.c:6258: 		PrintDebugNumberToBG(0, 11, 0x13, RandValues->seed); 
	ldr	r3, .L3808+36	@ tmp230,
	ldr	r3, [r3]	@ RandValues, RandValues
	ldr	r3, [r3]	@ *RandValues.380_10, *RandValues.380_10
	lsls	r3, r3, #12	@ tmp232, *RandValues.380_10,
	lsrs	r4, r3, #12	@ n, tmp232,
@ Patches/../C_code.c:5407: 	while (n != 0) {
	cmp	r3, #0	@ tmp232,
	beq	.L3785		@,
	ldr	r3, .L3808+40	@ tmp245,
	mov	r9, r3	@ tmp245, tmp245
	ldr	r3, .L3808+44	@ tmp246,
	movs	r5, #14	@ tmp248,
	mov	r8, r3	@ tmp246, tmp246
	ldr	r6, .L3808+48	@ ivtmp.2204,
	ldr	r7, .L3808+32	@ tmp247,
	add	r5, r5, sp	@ tmp248,
.L3796:
@ Patches/../C_code.c:5408:         u16 c = '0' + Mod(n, 10);
	movs	r1, #10	@,
	movs	r0, r4	@, n
	bl	.L557		@
@ Patches/../C_code.c:5408:         u16 c = '0' + Mod(n, 10);
	adds	r0, r0, #48	@ tmp236,
@ Patches/../C_code.c:5410:         n /= 10;
	movs	r1, #10	@,
@ Patches/../C_code.c:5408:         u16 c = '0' + Mod(n, 10);
	strh	r0, [r5]	@ tmp236, c
@ Patches/../C_code.c:5410:         n /= 10;
	movs	r0, r4	@, n
	bl	.L179		@
@ Patches/../C_code.c:5411:         PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(x, y), (char *)&c);
	movs	r1, r5	@, tmp248
@ Patches/../C_code.c:5410:         n /= 10;
	movs	r4, r0	@ n, tmp266
@ Patches/../C_code.c:5411:         PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(x, y), (char *)&c);
	movs	r0, r6	@, ivtmp.2204
	bl	.L223		@
@ Patches/../C_code.c:5407: 	while (n != 0) {
	subs	r6, r6, #2	@ ivtmp.2204,
	cmp	r4, #0	@ n,
	bne	.L3796		@,
	b	.L3785		@
.L3791:
@ Patches/../C_code.c:6254: 			case 4: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "4Seed"); break; } 	
	ldr	r1, .L3808+52	@ tmp223,
	ldr	r0, .L3808+28	@ tmp224,
	ldr	r7, .L3808+32	@ tmp247,
	bl	.L223		@
@ Patches/../C_code.c:6254: 			case 4: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "4Seed"); break; } 	
	b	.L3788		@
.L3795:
@ Patches/../C_code.c:6250: 			case 0: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "0Seed"); break; } 	
	ldr	r1, .L3808+56	@ tmp211,
	ldr	r0, .L3808+28	@ tmp212,
	ldr	r7, .L3808+32	@ tmp247,
	bl	.L223		@
@ Patches/../C_code.c:6250: 			case 0: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "0Seed"); break; } 	
	b	.L3788		@
.L3794:
@ Patches/../C_code.c:6251: 			case 1: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "1Seed"); break; } 	
	ldr	r1, .L3808+60	@ tmp214,
	ldr	r0, .L3808+28	@ tmp215,
	ldr	r7, .L3808+32	@ tmp247,
	bl	.L223		@
@ Patches/../C_code.c:6251: 			case 1: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "1Seed"); break; } 	
	b	.L3788		@
.L3793:
@ Patches/../C_code.c:6252: 			case 2: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "2Seed"); break; } 	
	ldr	r1, .L3808+64	@ tmp217,
	ldr	r0, .L3808+28	@ tmp218,
	ldr	r7, .L3808+32	@ tmp247,
	bl	.L223		@
@ Patches/../C_code.c:6252: 			case 2: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "2Seed"); break; } 	
	b	.L3788		@
.L3792:
@ Patches/../C_code.c:6253: 			case 3: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "3Seed"); break; } 	
	ldr	r1, .L3808+68	@ tmp220,
	ldr	r0, .L3808+28	@ tmp221,
	ldr	r7, .L3808+32	@ tmp247,
	bl	.L223		@
@ Patches/../C_code.c:6253: 			case 3: { PrintDebugStringToBG(gBG0TilemapBuffer + TILEMAP_INDEX(0, 0x13), "3Seed"); break; } 	
	b	.L3788		@
.L3809:
	.align	2
.L3808:
	.word	RandBitflags
	.word	gStatScreen
	.word	VramDest_DebugFont
	.word	SetupDebugFontForBG
	.word	RecruitValues
	.word	.L3790
	.word	.LC764
	.word	gBG0TilemapBuffer+1216
	.word	PrintDebugStringToBG
	.word	RandValues
	.word	Mod
	.word	__aeabi_idiv
	.word	gBG0TilemapBuffer+1238
	.word	.LC762
	.word	.LC752
	.word	.LC756
	.word	.LC758
	.word	.LC760
	.size	DrawBarsOrGrowths, .-DrawBarsOrGrowths
	.align	1
	.p2align 2,,3
	.global	NewDisplayPage0
	.syntax unified
	.code	16
	.thumb_func
	.type	NewDisplayPage0, %function
NewDisplayPage0:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:6281: 	ResetText(); 
	ldr	r3, .L3816	@ tmp115,
	bl	.L14		@
@ Patches/../C_code.c:6282: 	ResetIconGraphics_();
	ldr	r3, .L3816+4	@ tmp116,
	bl	.L14		@
@ Patches/../C_code.c:6283: 	InitTexts();
	ldr	r3, .L3816+8	@ tmp117,
	bl	.L14		@
@ Patches/../C_code.c:6284: 	DisplayLeftPanel();
	ldr	r3, .L3816+12	@ tmp118,
	bl	.L14		@
@ Patches/../C_code.c:6290: 	DisplayTexts(sPage0TextInfo);
	ldr	r3, .L3816+16	@ tmp120,
	ldr	r0, .L3816+20	@ tmp119,
	bl	.L14		@
@ Patches/../C_code.c:6291:     DrawBarsOrGrowths(); 
	bl	DrawBarsOrGrowths		@
@ Patches/../C_code.c:6300: 	if (SS_EnableBWL) { 
	ldr	r3, .L3816+24	@ tmp121,
@ Patches/../C_code.c:6300: 	if (SS_EnableBWL) { 
	ldr	r3, [r3]	@ SS_EnableBWL, SS_EnableBWL
	cmp	r3, #0	@ SS_EnableBWL,
	bne	.L3815		@,
.L3810:
@ Patches/../C_code.c:6303: }
	@ sp needed	@
	pop	{r4}
	pop	{r0}
	bx	r0
.L3815:
@ Patches/../C_code.c:6301: 		DisplayBwl();
	ldr	r3, .L3816+28	@ tmp123,
	bl	.L14		@
@ Patches/../C_code.c:6303: }
	b	.L3810		@
.L3817:
	.align	2
.L3816:
	.word	ResetText
	.word	ResetIconGraphics_
	.word	InitTexts
	.word	DisplayLeftPanel
	.word	DisplayTexts
	.word	sPage0TextInfo
	.word	SS_EnableBWL
	.word	DisplayBwl
	.size	NewDisplayPage0, .-NewDisplayPage0
	.align	1
	.p2align 2,,3
	.global	StartShopScreen
	.syntax unified
	.code	16
	.thumb_func
	.type	StartShopScreen, %function
StartShopScreen:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 32
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
	mov	lr, fp	@,
	mov	r7, r10	@,
	mov	r6, r9	@,
	mov	r5, r8	@,
	push	{r5, r6, r7, lr}	@
	movs	r6, r3	@ parent, tmp310
	sub	sp, sp, #44	@,,
@ Patches/../C_code.c:6358:     EndPlayerPhaseSideWindows();
	ldr	r3, .L3887	@ tmp178,
@ Patches/../C_code.c:6353: void StartShopScreen(struct Unit* unit, u16* inventory, u8 shopType, ProcPtr parent) {
	movs	r7, r0	@ unit, tmp307
	movs	r5, r1	@ inventory, tmp308
	movs	r4, r2	@ shopType, tmp309
@ Patches/../C_code.c:6358:     EndPlayerPhaseSideWindows();
	bl	.L14		@
@ Patches/../C_code.c:6361:         proc = Proc_StartBlocking(gProcScr_Shop, parent);
	ldr	r0, .L3887+4	@ tmp179,
@ Patches/../C_code.c:6360:     if (parent != 0) {
	cmp	r6, #0	@ parent,
	bne	.LCB25034	@
	b	.L3819	@long jump	@
.LCB25034:
@ Patches/../C_code.c:6361:         proc = Proc_StartBlocking(gProcScr_Shop, parent);
	movs	r1, r6	@, parent
	ldr	r3, .L3887+8	@ tmp180,
	bl	.L14		@
	mov	r8, r0	@ proc, tmp311
.L3820:
	movs	r3, r4	@ _1, shopType
@ Patches/../C_code.c:6367:     if (shopType > 9) { proc->shopType -= 10; } 
	cmp	r4, #9	@ shopType,
	bls	.L3821		@,
@ Patches/../C_code.c:6367:     if (shopType > 9) { proc->shopType -= 10; } 
	subs	r3, r3, #10	@ tmp185,
	lsls	r3, r3, #24	@ tmp186, tmp185,
	lsrs	r3, r3, #24	@ _1, tmp186,
.L3821:
@ Patches/../C_code.c:6366:     proc->shopType = shopType;
	mov	r1, r8	@ proc, proc
	movs	r2, #97	@ tmp187,
	strb	r3, [r1, r2]	@ _1, proc_27->shopType
@ Patches/../C_code.c:6368: 	proc->unit = unit;
	str	r7, [r1, #44]	@ unit, proc_27->unit
@ Patches/../C_code.c:6371:     if (inventory != 0) {
	cmp	r5, #0	@ inventory,
	bne	.LCB25054	@
	b	.L3880	@long jump	@
.LCB25054:
.L3822:
@ Patches/../C_code.c:6375: 	if ((RandBitflags->shopItems) && ((shopType < 10) || (RandomizePrepShop))) { 
	ldr	r3, .L3887+12	@ tmp190,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #1]	@ *RandBitflags.382_2, *RandBitflags.382_2
@ Patches/../C_code.c:6375: 	if ((RandBitflags->shopItems) && ((shopType < 10) || (RandomizePrepShop))) { 
	lsls	r3, r3, #28	@ tmp330, *RandBitflags.382_2,
	bmi	.LCB25064	@
	b	.L3849	@long jump	@
.LCB25064:
@ Patches/../C_code.c:6375: 	if ((RandBitflags->shopItems) && ((shopType < 10) || (RandomizePrepShop))) { 
	cmp	r4, #9	@ shopType,
	bhi	.L3824		@,
@ Patches/../C_code.c:6377: 		int noise[4] = {0, 0, 0, 0}; 
	ldr	r3, .L3887+16	@ tmp205,
	movs	r2, #8	@,
	movs	r1, #0	@,
	add	r0, sp, #32	@,,
	bl	.L14		@
	add	r3, sp, #24	@ tmp293,,
	mov	r9, r3	@ tmp293, tmp293
.L3825:
@ Patches/../C_code.c:6381: 		noise[0] = gCh; 
	ldr	r3, .L3887+20	@ tmp217,
	ldrb	r3, [r3]	@ gCh, gCh
@ Patches/../C_code.c:6382: 		noise[1] = proc->shopType; 
	mov	r2, r8	@ proc, proc
@ Patches/../C_code.c:6381: 		noise[0] = gCh; 
	str	r3, [sp, #24]	@ gCh, noise[0]
@ Patches/../C_code.c:6382: 		noise[1] = proc->shopType; 
	movs	r3, #97	@ tmp220,
	ldrb	r3, [r2, r3]	@ tmp221,
	mov	r2, r9	@ tmp293, tmp293
	str	r3, [r2, #4]	@ tmp221, noise[1]
@ Patches/../C_code.c:6380: 		varyByCh = true; 
	movs	r3, #1	@ varyByCh,
	mov	fp, r3	@ varyByCh, varyByCh
.L3826:
	mov	r3, r9	@ ivtmp.2240, tmp293
.L3829:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_90], MEM[(int *)_90]
	cmp	r2, #0	@ MEM[(int *)_90],
	bne	.LCB25094	@
	b	.L3881	@long jump	@
.LCB25094:
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.2240,
	add	r2, sp, #40	@ tmp372,,
	cmp	r2, r3	@ tmp372, ivtmp.2240
	bne	.L3829		@,
.L3828:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	movs	r3, #3	@,
	mov	r2, r9	@, tmp293
	movs	r1, #5	@,
	movs	r0, #10	@,
	bl	HashByte_Global		@
	mov	r6, r8	@ ivtmp.2232, proc
@ Patches/../C_code.c:6393: 			if ((i == rareItemSlot) && (RareItemTableSize)) { itemId = RandRareItem(itemId, noise, i, true, varyByCh); } 
	ldr	r3, .L3887+24	@ tmp304,
	str	r3, [sp, #12]	@ tmp304, %sfp
@ Patches/../C_code.c:1932: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	ldr	r3, .L3887+28	@ tmp305,
	str	r3, [sp, #16]	@ tmp305, %sfp
@ Patches/../C_code.c:1940: 	item = RareItemTable[c]; 
	ldr	r3, .L3887+32	@ tmp306,
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	mov	r10, r0	@ tmp226, tmp313
@ Patches/../C_code.c:6385: 		int term = false; 
	movs	r7, #0	@ term,
@ Patches/../C_code.c:6387: 		for (i = 0; i < 20; i++) {
	movs	r4, #0	@ i,
@ Patches/../C_code.c:1940: 	item = RareItemTable[c]; 
	str	r3, [sp, #20]	@ tmp306, %sfp
	adds	r6, r6, #48	@ ivtmp.2232,
	b	.L3843		@
.L3883:
@ Patches/../C_code.c:6390: 			if ((!itemId) && (i < 5)) { term = true; itemId = i; } // randomized shop will have at least 5 items 
	movs	r7, #1	@ term,
	lsls	r0, r4, #16	@ tmp241, i,
	lsrs	r0, r0, #16	@ itemId, tmp241,
.L3831:
@ Patches/../C_code.c:6393: 			if ((i == rareItemSlot) && (RareItemTableSize)) { itemId = RandRareItem(itemId, noise, i, true, varyByCh); } 
	cmp	r10, r4	@ tmp226, i
	beq	.L3882		@,
.L3835:
@ Patches/../C_code.c:1945: 	if (!item) { return item; } 
	cmp	r0, #0	@ itemId,
	beq	.L3842		@,
	movs	r3, #0	@ tmp283,
	str	r3, [sp, #4]	@ tmp283,
	mov	r3, fp	@ varyByCh, varyByCh
	movs	r2, r4	@, i
	str	r3, [sp]	@ varyByCh,
	mov	r1, r9	@, tmp293
	movs	r3, #1	@,
	bl	RandNewItem.part.0		@
@ Patches/../C_code.c:6394: 			else { itemId = RandNewItem(itemId, noise, i, true, varyByCh, false); } 
	lsls	r0, r0, #16	@ tmp284, tmp318,
	lsrs	r0, r0, #16	@ itemId, tmp284,
.L3842:
@ Patches/../C_code.c:6387: 		for (i = 0; i < 20; i++) {
	adds	r4, r4, #1	@ i,
@ Patches/../C_code.c:6396: 			proc->shopItems[i] = itemId; 
	strh	r0, [r6]	@ itemId, MEM[(short unsigned int *)_32]
@ Patches/../C_code.c:6387: 		for (i = 0; i < 20; i++) {
	adds	r6, r6, #2	@ ivtmp.2232,
	cmp	r4, #20	@ i,
	beq	.L3844		@,
.L3843:
@ Patches/../C_code.c:6388: 			u16 itemId = *shopItems++;
	lsls	r3, r4, #1	@ tmp228, i,
	ldrh	r0, [r5, r3]	@ itemId, MEM[(const u16 *)shopItems_28 + _34 * 1]
@ Patches/../C_code.c:6390: 			if ((!itemId) && (i < 5)) { term = true; itemId = i; } // randomized shop will have at least 5 items 
	cmp	r0, #0	@ itemId,
	bne	.L3830		@,
@ Patches/../C_code.c:6390: 			if ((!itemId) && (i < 5)) { term = true; itemId = i; } // randomized shop will have at least 5 items 
	movs	r2, #4	@ tmp236,
	movs	r1, #0	@ tmp238,
	lsrs	r3, r4, #31	@ tmp237, i,
	cmp	r2, r4	@ tmp236, i
	adcs	r3, r3, r1	@ tmp235, tmp237, tmp238
@ Patches/../C_code.c:6390: 			if ((!itemId) && (i < 5)) { term = true; itemId = i; } // randomized shop will have at least 5 items 
	lsls	r3, r3, #24	@ tmp240, tmp235,
	bne	.L3883		@,
.L3830:
@ Patches/../C_code.c:6391: 			if ((i>=5) && (term)) { itemId = 0; } 
	movs	r3, #1	@ tmp242,
	cmp	r4, #4	@ i,
	bgt	.L3832		@,
	movs	r3, #0	@ tmp242,
.L3832:
@ Patches/../C_code.c:6391: 			if ((i>=5) && (term)) { itemId = 0; } 
	lsls	r3, r3, #24	@ tmp247, tmp242,
	beq	.L3831		@,
	cmp	r7, #0	@ term,
	beq	.L3831		@,
@ Patches/../C_code.c:6393: 			if ((i == rareItemSlot) && (RareItemTableSize)) { itemId = RandRareItem(itemId, noise, i, true, varyByCh); } 
	movs	r0, #0	@ itemId,
@ Patches/../C_code.c:6387: 		for (i = 0; i < 20; i++) {
	adds	r4, r4, #1	@ i,
@ Patches/../C_code.c:6396: 			proc->shopItems[i] = itemId; 
	strh	r0, [r6]	@ itemId, MEM[(short unsigned int *)_32]
@ Patches/../C_code.c:6393: 			if ((i == rareItemSlot) && (RareItemTableSize)) { itemId = RandRareItem(itemId, noise, i, true, varyByCh); } 
	movs	r7, #1	@ term,
@ Patches/../C_code.c:6387: 		for (i = 0; i < 20; i++) {
	adds	r6, r6, #2	@ ivtmp.2232,
	cmp	r4, #20	@ i,
	bne	.L3843		@,
.L3844:
@ Patches/../C_code.c:6408:     UpdateShopItemCounts(proc);
	mov	r0, r8	@, proc
	ldr	r3, .L3887+36	@ tmp290,
	bl	.L14		@
@ Patches/../C_code.c:6411: }
	add	sp, sp, #44	@,,
	@ sp needed	@
	pop	{r4, r5, r6, r7}
	mov	fp, r7
	mov	r10, r6
	mov	r9, r5
	mov	r8, r4
	pop	{r4, r5, r6, r7}
	pop	{r0}
	bx	r0
.L3824:
@ Patches/../C_code.c:6375: 	if ((RandBitflags->shopItems) && ((shopType < 10) || (RandomizePrepShop))) { 
	ldr	r3, .L3887+40	@ tmp208,
	ldr	r3, [r3]	@ RandomizePrepShop, RandomizePrepShop
	cmp	r3, #0	@ RandomizePrepShop,
	bne	.L3884		@,
.L3849:
	mov	r7, r8	@ tmp292, proc
	movs	r4, #0	@ ivtmp.2244,
	ldr	r6, .L3887+44	@ tmp291,
	adds	r7, r7, #48	@ tmp292,
.L3845:
@ Patches/../C_code.c:6404: 			proc->shopItems[i] = MakeNewItem(itemId);
	ldrh	r0, [r5, r4]	@ MEM[(const u16 *)shopItems_28 + ivtmp.2244_156 * 1], MEM[(const u16 *)shopItems_28 + ivtmp.2244_156 * 1]
	bl	.L341		@
@ Patches/../C_code.c:6404: 			proc->shopItems[i] = MakeNewItem(itemId);
	strh	r0, [r7, r4]	@ tmp319, MEM[(short unsigned int *)_147 + ivtmp.2244_156 * 1]
@ Patches/../C_code.c:6401: 		for (i = 0; i < 20; i++) {
	adds	r4, r4, #2	@ ivtmp.2244,
	cmp	r4, #40	@ ivtmp.2244,
	bne	.L3845		@,
	b	.L3844		@
.L3882:
@ Patches/../C_code.c:6393: 			if ((i == rareItemSlot) && (RareItemTableSize)) { itemId = RandRareItem(itemId, noise, i, true, varyByCh); } 
	ldr	r3, [sp, #12]	@ tmp304, %sfp
	ldr	r1, [r3]	@ RareItemTableSize.386_20, RareItemTableSize
	cmp	r1, #0	@ RareItemTableSize.386_20,
	beq	.L3835		@,
@ Patches/../C_code.c:1930: 	if (!item) { return item; } 
	cmp	r0, #0	@ itemId,
	beq	.L3842		@,
@ Patches/../C_code.c:1931: 	item &= 0xFF; 
	movs	r3, #255	@ tmp262,
@ Patches/../C_code.c:1932: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	ldr	r2, [sp, #16]	@ tmp305, %sfp
@ Patches/../C_code.c:1931: 	item &= 0xFF; 
	ands	r0, r3	@ item, tmp262
@ Patches/../C_code.c:1932: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	lsls	r3, r0, #1	@ tmp265, item,
@ Patches/../C_code.c:1932: 	if (ItemExceptions[item].NeverChangeFrom) { return MakeNewItem(item); } 
	ldrb	r3, [r3, r2]	@ tmp266, ItemExceptions
	cmp	r3, #0	@ tmp266,
	bne	.L3879		@,
@ Patches/../C_code.c:1934: 	if (varyByCh) { 
	mov	r3, fp	@ varyByCh, varyByCh
	cmp	r3, #0	@ varyByCh,
	bne	.L3885		@,
@ Patches/../C_code.c:1938: 		c = HashByte_Global(item, RareItemTableSize, noise, offset); 
	mov	r3, r10	@, tmp226
	mov	r2, r9	@, tmp293
	bl	HashByte_Global		@
.L3841:
@ Patches/../C_code.c:1940: 	item = RareItemTable[c]; 
	ldr	r3, [sp, #20]	@ tmp306, %sfp
	ldrb	r0, [r3, r0]	@ item, RareItemTable
.L3879:
@ Patches/../C_code.c:1941: 	return MakeNewItem(item); 
	ldr	r3, .L3887+44	@ tmp280,
	bl	.L14		@
@ Patches/../C_code.c:6393: 			if ((i == rareItemSlot) && (RareItemTableSize)) { itemId = RandRareItem(itemId, noise, i, true, varyByCh); } 
	lsls	r0, r0, #16	@ tmp281, tmp317,
	lsrs	r0, r0, #16	@ itemId, tmp281,
@ Patches/../C_code.c:1941: 	return MakeNewItem(item); 
	b	.L3842		@
.L3880:
@ Patches/../C_code.c:6370:     shopItems = gDefaultShopInventory;
	ldr	r5, .L3887+48	@ inventory,
	b	.L3822		@
.L3819:
@ Patches/../C_code.c:6363:         proc = Proc_Start(gProcScr_Shop, PROC_TREE_3);
	movs	r1, #3	@,
	ldr	r3, .L3887+52	@ tmp182,
	bl	.L14		@
	mov	r8, r0	@ proc, tmp312
	b	.L3820		@
.L3884:
@ Patches/../C_code.c:6377: 		int noise[4] = {0, 0, 0, 0}; 
	add	r3, sp, #24	@ tmp293,,
	movs	r0, r3	@, tmp293
	mov	r9, r3	@ tmp293, tmp293
	movs	r2, #16	@,
	ldr	r3, .L3887+16	@ tmp213,
	movs	r1, #0	@,
	bl	.L14		@
@ Patches/../C_code.c:6378: 		int varyByCh = false; // prep armoury only 
	movs	r3, #0	@ varyByCh,
	mov	fp, r3	@ varyByCh, varyByCh
@ Patches/../C_code.c:6379: 		if ((shopType < 10) || (!unit)) { 
	cmp	r7, #0	@ unit,
	beq	.LCB25290	@
	b	.L3826	@long jump	@
.LCB25290:
	b	.L3825		@
.L3885:
	mov	r3, r9	@ ivtmp.2222, tmp293
.L3840:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, [r3]	@ MEM[(int *)_114], MEM[(int *)_114]
	cmp	r2, #0	@ MEM[(int *)_114],
	beq	.L3886		@,
@ Patches/../C_code.c:1443: 	for (i = 0; i < 4; i++) { 
	adds	r3, r3, #4	@ ivtmp.2222,
	add	r2, sp, #40	@ tmp380,,
	cmp	r2, r3	@ tmp380, ivtmp.2222
	bne	.L3840		@,
.L3839:
@ Patches/../C_code.c:1446: 	return HashByte_Global(number, max, noise, offset);
	movs	r3, r4	@, i
	mov	r2, r9	@, tmp293
	bl	HashByte_Global		@
	b	.L3841		@
.L3881:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, .L3887+20	@ tmp223,
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r3]	@ gCh, *_90
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L3828		@
.L3886:
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	ldr	r2, .L3887+20	@ tmp270,
	ldrb	r2, [r2]	@ gCh, gCh
	str	r2, [r3]	@ gCh, *_114
@ Patches/../C_code.c:1444: 		if (!noise[i]) { noise[i] = gCh; break; } 
	b	.L3839		@
.L3888:
	.align	2
.L3887:
	.word	EndPlayerPhaseSideWindows
	.word	gProcScr_Shop
	.word	Proc_StartBlocking
	.word	RandBitflags
	.word	memset
	.word	gCh
	.word	RareItemTableSize
	.word	ItemExceptions
	.word	RareItemTable
	.word	UpdateShopItemCounts
	.word	RandomizePrepShop
	.word	MakeNewItem
	.word	.LANCHOR11+56
	.word	Proc_Start
	.size	StartShopScreen, .-StartShopScreen
	.align	1
	.p2align 2,,3
	.global	StartBlockingPrepShop
	.syntax unified
	.code	16
	.thumb_func
	.type	StartBlockingPrepShop, %function
StartBlockingPrepShop:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:6414: void StartBlockingPrepShop(struct Unit* unit, ProcPtr parent) { 
	movs	r3, r1	@ parent, tmp117
@ Patches/../C_code.c:6416: } 
	@ sp needed	@
@ Patches/../C_code.c:6415: 	StartShopScreen(unit, 0, 10, parent); 
	movs	r2, #10	@,
	movs	r1, #0	@,
	bl	StartShopScreen		@
@ Patches/../C_code.c:6416: } 
	pop	{r4}
	pop	{r0}
	bx	r0
	.size	StartBlockingPrepShop, .-StartBlockingPrepShop
	.align	1
	.p2align 2,,3
	.global	StartBlockingPrepVendor
	.syntax unified
	.code	16
	.thumb_func
	.type	StartBlockingPrepVendor, %function
StartBlockingPrepVendor:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:6419: void StartBlockingPrepVendor(struct Unit* unit, u16* inventory, ProcPtr parent) { 
	movs	r3, r2	@ parent, tmp119
@ Patches/../C_code.c:6421: } 
	@ sp needed	@
@ Patches/../C_code.c:6420: 	StartShopScreen(unit, inventory, 10, parent); 
	movs	r2, #10	@,
	bl	StartShopScreen		@
@ Patches/../C_code.c:6421: } 
	pop	{r4}
	pop	{r0}
	bx	r0
	.size	StartBlockingPrepVendor, .-StartBlockingPrepVendor
	.align	1
	.p2align 2,,3
	.global	StartBlockingPrepArmory
	.syntax unified
	.code	16
	.thumb_func
	.type	StartBlockingPrepArmory, %function
StartBlockingPrepArmory:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:6424: void StartBlockingPrepArmory(struct Unit* unit, u16* inventory, ProcPtr parent) { 
	movs	r3, r2	@ parent, tmp119
@ Patches/../C_code.c:6426: } 
	@ sp needed	@
@ Patches/../C_code.c:6425: 	StartShopScreen(unit, inventory, 11, parent); 
	movs	r2, #11	@,
	bl	StartShopScreen		@
@ Patches/../C_code.c:6426: } 
	pop	{r4}
	pop	{r0}
	bx	r0
	.size	StartBlockingPrepArmory, .-StartBlockingPrepArmory
	.align	1
	.p2align 2,,3
	.global	GetUnitDefaultMovementCost
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitDefaultMovementCost, %function
GetUnitDefaultMovementCost:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:6647:     if (unit->state & US_IN_BALLISTA) {
	ldr	r3, [r0, #12]	@ unit_6(D)->state, unit_6(D)->state
@ Patches/../C_code.c:6647:     if (unit->state & US_IN_BALLISTA) {
	lsls	r3, r3, #20	@ tmp128, unit_6(D)->state,
	bmi	.L3897		@,
@ Patches/../C_code.c:6653:     switch (weatherId) {
	ldr	r3, .L3899	@ tmp123,
	ldrb	r3, [r3]	@ weatherId.388_8, weatherId
	ldr	r2, [r0, #4]	@ _7, MEM[(const struct ClassData * *)unit_6(D) + 4B]
	cmp	r3, #2	@ weatherId.388_8,
	bls	.L3898		@,
	cmp	r3, #4	@ weatherId.388_8,
	bne	.L3896		@,
@ Patches/../C_code.c:6657: 		return unit->pClassData->pMovCostTable[1]; 
	ldr	r0, [r2, #60]	@ <retval>, _7->pMovCostTable[1]
.L3892:
@ Patches/../C_code.c:6666: }
	@ sp needed	@
	bx	lr
.L3898:
@ Patches/../C_code.c:6653:     switch (weatherId) {
	cmp	r3, #0	@ weatherId.388_8,
	beq	.L3896		@,
@ Patches/../C_code.c:6660: 		return unit->pClassData->pMovCostTable[2]; 
	ldr	r0, [r2, #64]	@ <retval>, _7->pMovCostTable[2]
	b	.L3892		@
.L3897:
@ Patches/../C_code.c:6648: 		return Ballista_TerrainTable; } // fe8 is 80BC18
	ldr	r0, .L3899+4	@ <retval>,
	b	.L3892		@
.L3896:
@ Patches/../C_code.c:6665: 	return unit->pClassData->pMovCostTable[0];
	ldr	r0, [r2, #56]	@ <retval>, _7->pMovCostTable[0]
	b	.L3892		@
.L3900:
	.align	2
.L3899:
	.word	weatherId
	.word	Ballista_TerrainTable
	.size	GetUnitDefaultMovementCost, .-GetUnitDefaultMovementCost
	.align	1
	.p2align 2,,3
	.global	IsUnitTrapped
	.syntax unified
	.code	16
	.thumb_func
	.type	IsUnitTrapped, %function
IsUnitTrapped:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:6676: 	if (UNIT_FACTION(unit) == FACTION_BLUE) { return false; } 
	movs	r3, #11	@ tmp146,
	movs	r2, #192	@ tmp147,
	ldrsb	r3, [r0, r3]	@ tmp146,
@ Patches/../C_code.c:6676: 	if (UNIT_FACTION(unit) == FACTION_BLUE) { return false; } 
	tst	r2, r3	@ tmp147, tmp146
	beq	.L3902		@,
@ Patches/../C_code.c:6647:     if (unit->state & US_IN_BALLISTA) {
	ldr	r3, [r0, #12]	@ unit_30(D)->state, unit_30(D)->state
@ Patches/../C_code.c:6647:     if (unit->state & US_IN_BALLISTA) {
	lsls	r3, r3, #20	@ tmp184, unit_30(D)->state,
	bmi	.L3911		@,
@ Patches/../C_code.c:6653:     switch (weatherId) {
	ldr	r3, .L3922	@ tmp152,
	ldrb	r3, [r3]	@ weatherId.388_41, weatherId
	ldr	r2, [r0, #4]	@ _40, MEM[(const struct ClassData * *)unit_30(D) + 4B]
	cmp	r3, #2	@ weatherId.388_41,
	bhi	.L3904		@,
	cmp	r3, #0	@ weatherId.388_41,
	beq	.L3906		@,
@ Patches/../C_code.c:6660: 		return unit->pClassData->pMovCostTable[2]; 
	ldr	r2, [r2, #64]	@ _39, _40->pMovCostTable[2]
	b	.L3903		@
.L3902:
@ Patches/../C_code.c:6676: 	if (UNIT_FACTION(unit) == FACTION_BLUE) { return false; } 
	movs	r0, #0	@ <retval>,
.L3901:
@ Patches/../C_code.c:6693: } 
	@ sp needed	@
	pop	{r3, r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L3911:
@ Patches/../C_code.c:6648: 		return Ballista_TerrainTable; } // fe8 is 80BC18
	ldr	r2, .L3922+4	@ _39,
.L3903:
@ Patches/../C_code.c:6677: 	int flierCost = GetUnitDefaultMovementCost(unit)[TERRAIN_CLIFF]; 
	movs	r3, #38	@ tmp155,
	ldrsb	r3, [r2, r3]	@ _5, MEM[(const s8 *)_39 + 38B]
@ Patches/../C_code.c:6678: 	if ((flierCost >= 0) && (flierCost < unit->pClassData->baseMov)) { return false; } 
	cmp	r3, #0	@ _5,
	blt	.L3907		@,
@ Patches/../C_code.c:6678: 	if ((flierCost >= 0) && (flierCost < unit->pClassData->baseMov)) { return false; } 
	ldr	r1, [r0, #4]	@ unit_30(D)->pClassData, unit_30(D)->pClassData
@ Patches/../C_code.c:6678: 	if ((flierCost >= 0) && (flierCost < unit->pClassData->baseMov)) { return false; } 
	ldrb	r1, [r1, #18]	@ tmp160,
	lsls	r1, r1, #24	@ tmp160, tmp160,
	asrs	r1, r1, #24	@ tmp160, tmp160,
	cmp	r1, r3	@ tmp160, _5
	bgt	.L3902		@,
.L3907:
@ Patches/../C_code.c:6680: 	GenerateExtendedMovementMap(unit->xPos, unit->yPos, GetUnitDefaultMovementCost(unit));
	movs	r1, #17	@ tmp161,
@ Patches/../C_code.c:6682: 	for (int i = 1; i<0x40; i++) { 
	movs	r4, #1	@ i,
@ Patches/../C_code.c:6680: 	GenerateExtendedMovementMap(unit->xPos, unit->yPos, GetUnitDefaultMovementCost(unit));
	ldrsb	r1, [r0, r1]	@ tmp161,
	ldrb	r0, [r0, #16]	@ tmp162,
	lsls	r0, r0, #24	@ tmp162, tmp162,
@ Patches/../C_code.c:6680: 	GenerateExtendedMovementMap(unit->xPos, unit->yPos, GetUnitDefaultMovementCost(unit));
	ldr	r3, .L3922+8	@ tmp163,
@ Patches/../C_code.c:6680: 	GenerateExtendedMovementMap(unit->xPos, unit->yPos, GetUnitDefaultMovementCost(unit));
	asrs	r0, r0, #24	@ tmp162, tmp162,
@ Patches/../C_code.c:6680: 	GenerateExtendedMovementMap(unit->xPos, unit->yPos, GetUnitDefaultMovementCost(unit));
	bl	.L14		@
@ Patches/../C_code.c:6685: 		if (target->state & (US_DEAD|US_NOT_DEPLOYED|US_BIT16)) { continue; } 
	ldr	r6, .L3922+12	@ tmp180,
	ldr	r5, .L3922+16	@ tmp179,
@ Patches/../C_code.c:6686: 		if (gBmMapMovement[target->yPos][target->xPos] > 120) { continue; } 
	ldr	r7, .L3922+20	@ tmp181,
.L3909:
@ Patches/../C_code.c:6683: 		target = GetUnit(i); 
	movs	r0, r4	@, i
	bl	.L3231		@
@ Patches/../C_code.c:6684: 		if (!UNIT_IS_VALID(target)) { continue; } 
	cmp	r0, #0	@ target,
	beq	.L3908		@,
@ Patches/../C_code.c:6684: 		if (!UNIT_IS_VALID(target)) { continue; } 
	ldr	r3, [r0]	@ target_34->pCharacterData, target_34->pCharacterData
	cmp	r3, #0	@ target_34->pCharacterData,
	beq	.L3908		@,
@ Patches/../C_code.c:6685: 		if (target->state & (US_DEAD|US_NOT_DEPLOYED|US_BIT16)) { continue; } 
	ldr	r3, [r0, #12]	@ target_34->state, target_34->state
@ Patches/../C_code.c:6685: 		if (target->state & (US_DEAD|US_NOT_DEPLOYED|US_BIT16)) { continue; } 
	tst	r3, r6	@ target_34->state, tmp180
	bne	.L3908		@,
@ Patches/../C_code.c:6686: 		if (gBmMapMovement[target->yPos][target->xPos] > 120) { continue; } 
	movs	r3, #17	@ tmp169,
@ Patches/../C_code.c:6686: 		if (gBmMapMovement[target->yPos][target->xPos] > 120) { continue; } 
	movs	r2, #16	@ tmp173,
@ Patches/../C_code.c:6686: 		if (gBmMapMovement[target->yPos][target->xPos] > 120) { continue; } 
	ldrsb	r3, [r0, r3]	@ tmp169,
@ Patches/../C_code.c:6686: 		if (gBmMapMovement[target->yPos][target->xPos] > 120) { continue; } 
	ldr	r1, [r7]	@ gBmMapMovement, gBmMapMovement
	lsls	r3, r3, #2	@ tmp172, tmp169,
@ Patches/../C_code.c:6686: 		if (gBmMapMovement[target->yPos][target->xPos] > 120) { continue; } 
	ldrsb	r2, [r0, r2]	@ tmp173,
@ Patches/../C_code.c:6686: 		if (gBmMapMovement[target->yPos][target->xPos] > 120) { continue; } 
	ldr	r3, [r3, r1]	@ *_19, *_19
@ Patches/../C_code.c:6686: 		if (gBmMapMovement[target->yPos][target->xPos] > 120) { continue; } 
	ldrb	r3, [r3, r2]	@ *_23, *_23
	cmp	r3, #120	@ *_23,
	bls	.L3902		@,
.L3908:
@ Patches/../C_code.c:6682: 	for (int i = 1; i<0x40; i++) { 
	adds	r4, r4, #1	@ i,
@ Patches/../C_code.c:6682: 	for (int i = 1; i<0x40; i++) { 
	cmp	r4, #64	@ i,
	bne	.L3909		@,
@ Patches/../C_code.c:6692: 	return true;  
	movs	r0, #1	@ <retval>,
	b	.L3901		@
.L3904:
@ Patches/../C_code.c:6653:     switch (weatherId) {
	cmp	r3, #4	@ weatherId.388_41,
	bne	.L3906		@,
@ Patches/../C_code.c:6657: 		return unit->pClassData->pMovCostTable[1]; 
	ldr	r2, [r2, #60]	@ _39, _40->pMovCostTable[1]
	b	.L3903		@
.L3906:
@ Patches/../C_code.c:6665: 	return unit->pClassData->pMovCostTable[0];
	ldr	r2, [r2, #56]	@ _39, _40->pMovCostTable[0]
	b	.L3903		@
.L3923:
	.align	2
.L3922:
	.word	weatherId
	.word	Ballista_TerrainTable
	.word	GenerateExtendedMovementMap
	.word	65548
	.word	GetUnit
	.word	gBmMapMovement
	.size	IsUnitTrapped, .-IsUnitTrapped
	.align	1
	.p2align 2,,3
	.global	IsUnitStuck
	.syntax unified
	.code	16
	.thumb_func
	.type	IsUnitStuck, %function
IsUnitStuck:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:6700: 	int terrainType = gBmMapTerrain[unit->yPos][unit->xPos]; 
	movs	r3, #17	@ tmp142,
@ Patches/../C_code.c:6700: 	int terrainType = gBmMapTerrain[unit->yPos][unit->xPos]; 
	ldr	r2, .L3942	@ tmp144,
	ldr	r1, [r2]	@ gBmMapTerrain, gBmMapTerrain
@ Patches/../C_code.c:6700: 	int terrainType = gBmMapTerrain[unit->yPos][unit->xPos]; 
	movs	r2, #16	@ tmp146,
@ Patches/../C_code.c:6699: int IsUnitStuck(struct Unit* unit) { 
	push	{r4, lr}	@
@ Patches/../C_code.c:6700: 	int terrainType = gBmMapTerrain[unit->yPos][unit->xPos]; 
	ldrsb	r3, [r0, r3]	@ tmp142,
@ Patches/../C_code.c:6700: 	int terrainType = gBmMapTerrain[unit->yPos][unit->xPos]; 
	lsls	r3, r3, #2	@ tmp145, tmp142,
@ Patches/../C_code.c:6700: 	int terrainType = gBmMapTerrain[unit->yPos][unit->xPos]; 
	ldr	r3, [r3, r1]	@ *_5, *_5
@ Patches/../C_code.c:6700: 	int terrainType = gBmMapTerrain[unit->yPos][unit->xPos]; 
	ldrsb	r2, [r0, r2]	@ tmp146,
@ Patches/../C_code.c:6700: 	int terrainType = gBmMapTerrain[unit->yPos][unit->xPos]; 
	ldrb	r2, [r3, r2]	@ _10, *_9
@ Patches/../C_code.c:6701: 	if (!(unit->state & US_RESCUED)) { 
	ldr	r3, [r0, #12]	@ _11, unit_23(D)->state
@ Patches/../C_code.c:6702: 		if (terrainType != TERRAIN_VILLAGE_04) { 
	lsls	r1, r3, #26	@ tmp182, _11,
	bmi	.L3925		@,
	cmp	r2, #4	@ _10,
	beq	.L3925		@,
@ Patches/../C_code.c:6647:     if (unit->state & US_IN_BALLISTA) {
	lsls	r3, r3, #20	@ tmp183, _11,
	bmi	.L3931		@,
@ Patches/../C_code.c:6653:     switch (weatherId) {
	ldr	r3, .L3942+4	@ tmp167,
	ldrb	r3, [r3]	@ weatherId.388_30, weatherId
	ldr	r1, [r0, #4]	@ _29, MEM[(const struct ClassData * *)unit_23(D) + 4B]
	cmp	r3, #2	@ weatherId.388_30,
	bls	.L3941		@,
	cmp	r3, #4	@ weatherId.388_30,
	bne	.L3929		@,
@ Patches/../C_code.c:6657: 		return unit->pClassData->pMovCostTable[1]; 
	ldr	r3, [r1, #60]	@ _28, _29->pMovCostTable[1]
.L3926:
@ Patches/../C_code.c:6703: 			int tcost = GetUnitDefaultMovementCost(unit)[terrainType];
	ldrsb	r3, [r3, r2]	@ _16, *_15
@ Patches/../C_code.c:6704: 			if ((tcost < 0) || (tcost > unit->pClassData->baseMov)) { return flierMov; } 
	cmp	r3, #0	@ _16,
	blt	.L3933		@,
@ Patches/../C_code.c:6704: 			if ((tcost < 0) || (tcost > unit->pClassData->baseMov)) { return flierMov; } 
	ldr	r2, [r0, #4]	@ unit_23(D)->pClassData, unit_23(D)->pClassData
@ Patches/../C_code.c:6704: 			if ((tcost < 0) || (tcost > unit->pClassData->baseMov)) { return flierMov; } 
	ldrb	r2, [r2, #18]	@ tmp175,
	lsls	r2, r2, #24	@ tmp175, tmp175,
	asrs	r2, r2, #24	@ tmp175, tmp175,
	cmp	r2, r3	@ tmp175, _16
	blt	.L3933		@,
.L3925:
@ Patches/../C_code.c:6708: 	if (IsUnitTrapped(unit)) { return waterPeakMov; } 
	bl	IsUnitTrapped		@
@ Patches/../C_code.c:6708: 	if (IsUnitTrapped(unit)) { return waterPeakMov; } 
	subs	r3, r0, #1	@ tmp178, tmp181
	sbcs	r0, r0, r3	@ <retval>, tmp181, tmp178
.L3924:
@ Patches/../C_code.c:6711: } 
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L3941:
@ Patches/../C_code.c:6653:     switch (weatherId) {
	cmp	r3, #0	@ weatherId.388_30,
	beq	.L3929		@,
@ Patches/../C_code.c:6660: 		return unit->pClassData->pMovCostTable[2]; 
	ldr	r3, [r1, #64]	@ _28, _29->pMovCostTable[2]
	b	.L3926		@
.L3933:
@ Patches/../C_code.c:6704: 			if ((tcost < 0) || (tcost > unit->pClassData->baseMov)) { return flierMov; } 
	movs	r0, #2	@ <retval>,
	b	.L3924		@
.L3931:
@ Patches/../C_code.c:6648: 		return Ballista_TerrainTable; } // fe8 is 80BC18
	ldr	r3, .L3942+8	@ _28,
	b	.L3926		@
.L3929:
@ Patches/../C_code.c:6665: 	return unit->pClassData->pMovCostTable[0];
	ldr	r3, [r1, #56]	@ _28, _29->pMovCostTable[0]
	b	.L3926		@
.L3943:
	.align	2
.L3942:
	.word	gBmMapTerrain
	.word	weatherId
	.word	Ballista_TerrainTable
	.size	IsUnitStuck, .-IsUnitStuck
	.align	1
	.p2align 2,,3
	.global	GetUnitMovementCost
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitMovementCost, %function
GetUnitMovementCost:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:6716:     if (unit->state & US_IN_BALLISTA) {
	ldr	r3, [r0, #12]	@ unit_14(D)->state, unit_14(D)->state
@ Patches/../C_code.c:6713: const s8* GetUnitMovementCost(struct Unit* unit) { // 80187d4
	push	{r4, lr}	@
@ Patches/../C_code.c:6713: const s8* GetUnitMovementCost(struct Unit* unit) { // 80187d4
	movs	r4, r0	@ unit, tmp173
@ Patches/../C_code.c:6716:     if (unit->state & US_IN_BALLISTA) {
	lsls	r3, r3, #20	@ tmp179, unit_14(D)->state,
	bmi	.L3955		@,
@ Patches/../C_code.c:1174: 	int config = RandBitflags->class; 
	ldr	r3, .L3975	@ tmp144,
	ldr	r3, [r3]	@ RandBitflags, RandBitflags
	ldrb	r3, [r3, #1]	@ *RandBitflags.55_20, *RandBitflags.55_20
	lsls	r3, r3, #29	@ tmp149, *RandBitflags.55_20,
@ Patches/../C_code.c:1174: 	int config = RandBitflags->class; 
	lsrs	r3, r3, #30	@ config, tmp149,
@ Patches/../C_code.c:1175: 	if (!config) { return false; } 
	beq	.L3969		@,
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	cmp	r3, #3	@ config,
	beq	.L3972		@,
@ Patches/../C_code.c:1177: 	if ((config == 2) && (UNIT_FACTION(unit) == FACTION_RED)) {  return false; } 
	cmp	r3, #2	@ config,
	beq	.L3973		@,
.L3948:
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r2, [r4]	@ MEM[(const struct CharacterData * *)unit_14(D)], MEM[(const struct CharacterData * *)unit_14(D)]
	ldrb	r2, [r2, #4]	@ tmp159,
@ Patches/../C_code.c:1166: 	return !CharExceptions[unit->pCharacterData->number].NeverChangeFrom; 
	ldr	r3, .L3975+4	@ tmp157,
	lsls	r2, r2, #1	@ tmp160, tmp159,
@ Patches/../C_code.c:6720: 	if (ShouldRandomizeClass(unit)) { 
	ldrb	r3, [r2, r3]	@ tmp161, CharExceptions
	cmp	r3, #0	@ tmp161,
	bne	.L3969		@,
@ Patches/../C_code.c:6722: 		int stuck = IsUnitStuck(unit);
	movs	r0, r4	@, unit
	bl	IsUnitStuck		@
@ Patches/../C_code.c:6724: 			switch (weatherId) { 
	ldr	r3, .L3975+8	@ tmp162,
@ Patches/../C_code.c:6723: 		if (stuck == flierMov) { 			
	cmp	r0, #2	@ stuck,
	beq	.L3974		@,
@ Patches/../C_code.c:6724: 			switch (weatherId) { 
	ldrb	r2, [r3]	@ pretmp_37, weatherId
@ Patches/../C_code.c:6733: 		if (stuck == waterPeakMov) { 			
	cmp	r0, #1	@ stuck,
	bne	.L3946		@,
@ Patches/../C_code.c:6734: 			switch (weatherId) { 
	cmp	r2, #2	@ pretmp_37,
	bhi	.L3951		@,
	cmp	r2, #0	@ pretmp_37,
	bne	.L3971		@,
.L3959:
	ldr	r0, .L3975+12	@ <retval>,
	b	.L3944		@
.L3972:
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	movs	r2, #11	@ tmp151,
	ldrsb	r2, [r0, r2]	@ tmp151,
	adds	r3, r3, #189	@ tmp152,
	ands	r3, r2	@ tmp153, tmp151
@ Patches/../C_code.c:1176: 	if ((config == 3) && (UNIT_FACTION(unit) != FACTION_RED)) {  return false; } 
	cmp	r3, #128	@ tmp153,
	beq	.L3948		@,
.L3969:
	ldr	r3, .L3975+8	@ tmp172,
.L3946:
@ Patches/../C_code.c:6746:     switch (weatherId) {
	ldrb	r3, [r3]	@ weatherId.394_6, weatherId
@ Patches/../C_code.c:6750: 		return unit->pClassData->pMovCostTable[1]; 
	ldr	r2, [r4, #4]	@ pretmp_36, unit_14(D)->pClassData
@ Patches/../C_code.c:6746:     switch (weatherId) {
	cmp	r3, #2	@ weatherId.394_6,
	bhi	.L3952		@,
	cmp	r3, #0	@ weatherId.394_6,
	beq	.L3954		@,
@ Patches/../C_code.c:6753: 		return unit->pClassData->pMovCostTable[2]; 
	ldr	r0, [r2, #64]	@ <retval>, pretmp_36->pMovCostTable[2]
	b	.L3944		@
.L3955:
@ Patches/../C_code.c:6717: 		return Ballista_TerrainTable; } // fe8 is 80BC18
	ldr	r0, .L3975+16	@ <retval>,
.L3944:
@ Patches/../C_code.c:6758: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L3952:
@ Patches/../C_code.c:6746:     switch (weatherId) {
	cmp	r3, #4	@ weatherId.394_6,
	bne	.L3954		@,
@ Patches/../C_code.c:6750: 		return unit->pClassData->pMovCostTable[1]; 
	ldr	r0, [r2, #60]	@ <retval>, pretmp_36->pMovCostTable[1]
	b	.L3944		@
.L3973:
@ Patches/../C_code.c:1177: 	if ((config == 2) && (UNIT_FACTION(unit) == FACTION_RED)) {  return false; } 
	movs	r2, #11	@ tmp154,
	ldrsb	r2, [r0, r2]	@ tmp154,
	adds	r3, r3, #190	@ tmp155,
	ands	r3, r2	@ tmp156, tmp154
@ Patches/../C_code.c:1177: 	if ((config == 2) && (UNIT_FACTION(unit) == FACTION_RED)) {  return false; } 
	cmp	r3, #128	@ tmp156,
	bne	.L3948		@,
	b	.L3969		@
.L3954:
@ Patches/../C_code.c:6757: 	return unit->pClassData->pMovCostTable[0];
	ldr	r0, [r2, #56]	@ <retval>, pretmp_36->pMovCostTable[0]
	b	.L3944		@
.L3974:
@ Patches/../C_code.c:6724: 			switch (weatherId) { 
	ldrb	r3, [r3]	@ weatherId.392_4, weatherId
	cmp	r3, #2	@ weatherId.392_4,
	bhi	.L3950		@,
	cmp	r3, #0	@ weatherId.392_4,
	bne	.L3970		@,
.L3957:
	ldr	r0, .L3975+20	@ <retval>,
	b	.L3944		@
.L3950:
	cmp	r3, #4	@ weatherId.392_4,
	bne	.L3957		@,
.L3970:
@ Patches/../C_code.c:6728: 				return TerrainTable_MovCost_StuckRainy; 
	ldr	r0, .L3975+24	@ <retval>,
	b	.L3944		@
.L3951:
@ Patches/../C_code.c:6734: 			switch (weatherId) { 
	cmp	r2, #4	@ pretmp_37,
	bne	.L3959		@,
.L3971:
@ Patches/../C_code.c:6738: 				return TerrainTable_MovCost_BerserkerRain; //880B90C
	ldr	r0, .L3975+28	@ <retval>,
	b	.L3944		@
.L3976:
	.align	2
.L3975:
	.word	RandBitflags
	.word	CharExceptions
	.word	weatherId
	.word	TerrainTable_MovCost_BerserkerNormal
	.word	Ballista_TerrainTable
	.word	.LANCHOR12+20
	.word	.LANCHOR11+80
	.word	TerrainTable_MovCost_BerserkerRain
	.size	GetUnitMovementCost, .-GetUnitMovementCost
	.align	1
	.p2align 2,,3
	.global	IsItemADanceRing
	.syntax unified
	.code	16
	.thumb_func
	.type	IsItemADanceRing, %function
IsItemADanceRing:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}	@
@ Patches/../C_code.c:6767:     switch (GetItemIndex(item)) {
	ldr	r3, .L3978	@ tmp120,
@ Patches/../C_code.c:6784: }
	@ sp needed	@
@ Patches/../C_code.c:6767:     switch (GetItemIndex(item)) {
	bl	.L14		@
@ Patches/../C_code.c:6767:     switch (GetItemIndex(item)) {
	movs	r3, #0	@ tmp125,
	movs	r2, #3	@ tmp124,
	subs	r0, r0, #125	@ tmp122,
	cmp	r2, r0	@ tmp124, tmp122
	adcs	r3, r3, r3	@ tmp123, tmp125, tmp125
@ Patches/../C_code.c:6784: }
	movs	r0, r3	@ tmp126, tmp123
	pop	{r4}
	pop	{r1}
	bx	r1
.L3979:
	.align	2
.L3978:
	.word	GetItemIndex
	.size	IsItemADanceRing, .-IsItemADanceRing
	.align	1
	.p2align 2,,3
	.global	CanUnitTypicallyUseLockpickItem
	.syntax unified
	.code	16
	.thumb_func
	.type	CanUnitTypicallyUseLockpickItem, %function
CanUnitTypicallyUseLockpickItem:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	movs	r2, #11	@ tmp127,
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	movs	r1, #192	@ tmp128,
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	ldrsb	r2, [r0, r2]	@ tmp127,
@ Patches/../C_code.c:6788: int CanUnitTypicallyUseLockpickItem(struct Unit* unit) { 
	movs	r3, r0	@ unit, tmp141
@ Patches/../C_code.c:6797: 	return true; 
	movs	r0, #1	@ <retval>,
@ Patches/../C_code.c:6790: 	if (faction == FACTION_BLUE) { 
	tst	r1, r2	@ tmp128, tmp127
	bne	.L3980		@,
@ Patches/../C_code.c:6791: 		if (OnlyThievesCanUseLockpicks) { 
	ldr	r2, .L3985	@ tmp130,
@ Patches/../C_code.c:6791: 		if (OnlyThievesCanUseLockpicks) { 
	ldr	r2, [r2]	@ OnlyThievesCanUseLockpicks, OnlyThievesCanUseLockpicks
	cmp	r2, #0	@ OnlyThievesCanUseLockpicks,
	beq	.L3980		@,
@ Patches/../C_code.c:6792: 			if (!(UNIT_CATTRIBUTES(unit) & CA_THIEF)) { 
	ldmia	r3!, {r1, r2}	@,,
	ldr	r3, [r1, #40]	@ _9->attributes, _9->attributes
	ldr	r2, [r2, #40]	@ _10->attributes, _10->attributes
	orrs	r3, r2	@ tmp134, _10->attributes
@ Patches/../C_code.c:6792: 			if (!(UNIT_CATTRIBUTES(unit) & CA_THIEF)) { 
	lsrs	r3, r3, #3	@ tmp137, tmp134,
	ands	r0, r3	@ <retval>, tmp137
.L3980:
@ Patches/../C_code.c:6798: } 
	@ sp needed	@
	bx	lr
.L3986:
	.align	2
.L3985:
	.word	OnlyThievesCanUseLockpicks
	.size	CanUnitTypicallyUseLockpickItem, .-CanUnitTypicallyUseLockpickItem
	.align	1
	.p2align 2,,3
	.global	CanUnitUseLockpickItem
	.syntax unified
	.code	16
	.thumb_func
	.type	CanUnitUseLockpickItem, %function
CanUnitUseLockpickItem:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	movs	r3, #11	@ tmp130,
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	movs	r2, #192	@ tmp131,
@ Patches/../C_code.c:6802: {
	push	{r4, lr}	@
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	ldrsb	r3, [r0, r3]	@ tmp130,
@ Patches/../C_code.c:6802: {
	movs	r4, r0	@ unit, tmp156
@ Patches/../C_code.c:6790: 	if (faction == FACTION_BLUE) { 
	tst	r2, r3	@ tmp131, tmp130
	bne	.L3988		@,
@ Patches/../C_code.c:6791: 		if (OnlyThievesCanUseLockpicks) { 
	ldr	r3, .L3996	@ tmp133,
@ Patches/../C_code.c:6791: 		if (OnlyThievesCanUseLockpicks) { 
	ldr	r3, [r3]	@ OnlyThievesCanUseLockpicks, OnlyThievesCanUseLockpicks
	cmp	r3, #0	@ OnlyThievesCanUseLockpicks,
	beq	.L3988		@,
@ Patches/../C_code.c:6792: 			if (!(UNIT_CATTRIBUTES(unit) & CA_THIEF)) { 
	ldr	r3, [r0]	@ MEM[(const struct CharacterData * *)unit_9(D)], MEM[(const struct CharacterData * *)unit_9(D)]
	ldr	r2, [r0, #4]	@ MEM[(const struct ClassData * *)unit_9(D) + 4B], MEM[(const struct ClassData * *)unit_9(D) + 4B]
	ldr	r3, [r3, #40]	@ _20->attributes, _20->attributes
	ldr	r2, [r2, #40]	@ _21->attributes, _21->attributes
	orrs	r3, r2	@ tmp137, _21->attributes
@ Patches/../C_code.c:6792: 			if (!(UNIT_CATTRIBUTES(unit) & CA_THIEF)) { 
	lsls	r3, r3, #28	@ tmp160, tmp137,
	bpl	.L3992		@,
.L3988:
@ Patches/../C_code.c:6805:     if (!CanUnitUseChestKeyItem(unit) && !CanUnitUseDoorKeyItem(unit) && !CanUnitOpenBridge(unit))
	movs	r0, r4	@, unit
	ldr	r3, .L3996+4	@ tmp142,
	bl	.L14		@
@ Patches/../C_code.c:6805:     if (!CanUnitUseChestKeyItem(unit) && !CanUnitUseDoorKeyItem(unit) && !CanUnitOpenBridge(unit))
	cmp	r0, #0	@ tmp157,
	beq	.L3990		@,
.L3991:
@ Patches/../C_code.c:6808:     return TRUE;
	movs	r0, #1	@ <retval>,
.L3989:
@ Patches/../C_code.c:6809: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L3990:
@ Patches/../C_code.c:6805:     if (!CanUnitUseChestKeyItem(unit) && !CanUnitUseDoorKeyItem(unit) && !CanUnitOpenBridge(unit))
	movs	r0, r4	@, unit
	ldr	r3, .L3996+8	@ tmp145,
	bl	.L14		@
@ Patches/../C_code.c:6805:     if (!CanUnitUseChestKeyItem(unit) && !CanUnitUseDoorKeyItem(unit) && !CanUnitOpenBridge(unit))
	cmp	r0, #0	@ tmp158,
	bne	.L3991		@,
@ Patches/../C_code.c:6805:     if (!CanUnitUseChestKeyItem(unit) && !CanUnitUseDoorKeyItem(unit) && !CanUnitOpenBridge(unit))
	ldr	r3, .L3996+12	@ tmp148,
	movs	r0, r4	@, unit
	bl	.L14		@
@ Patches/../C_code.c:6805:     if (!CanUnitUseChestKeyItem(unit) && !CanUnitUseDoorKeyItem(unit) && !CanUnitOpenBridge(unit))
	subs	r3, r0, #1	@ tmp153, tmp159
	sbcs	r0, r0, r3	@ <retval>, tmp159, tmp153
	b	.L3989		@
.L3992:
@ Patches/../C_code.c:6803: 	if (!CanUnitTypicallyUseLockpickItem(unit)) { return false; } 
	movs	r0, #0	@ <retval>,
	b	.L3989		@
.L3997:
	.align	2
.L3996:
	.word	OnlyThievesCanUseLockpicks
	.word	CanUnitUseChestKeyItem
	.word	CanUnitUseDoorKeyItem
	.word	CanUnitOpenBridge
	.size	CanUnitUseLockpickItem, .-CanUnitUseLockpickItem
	.align	1
	.p2align 2,,3
	.global	AiGetChestUnlockItemSlot
	.syntax unified
	.code	16
	.thumb_func
	.type	AiGetChestUnlockItemSlot, %function
AiGetChestUnlockItemSlot:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, lr}	@
@ Patches/../C_code.c:6814:     *out = 0;
	movs	r3, #0	@ tmp131,
@ Patches/../C_code.c:6811: s8 AiGetChestUnlockItemSlot(u8* out) { // 8036A8C
	mov	lr, r8	@,
	push	{lr}	@
@ Patches/../C_code.c:6814:     *out = 0;
	strb	r3, [r0]	@ tmp131, *out_20(D)
@ Patches/../C_code.c:6816:     if (GetUnitItemCount(gActiveUnit) == 5) {
	ldr	r3, .L4017	@ tmp158,
@ Patches/../C_code.c:6811: s8 AiGetChestUnlockItemSlot(u8* out) { // 8036A8C
	movs	r7, r0	@ out, tmp160
@ Patches/../C_code.c:6816:     if (GetUnitItemCount(gActiveUnit) == 5) {
	mov	r8, r3	@ tmp158, tmp158
	ldr	r0, [r3]	@ gActiveUnit, gActiveUnit
	ldr	r3, .L4017+4	@ tmp135,
	bl	.L14		@
@ Patches/../C_code.c:6821:     for (i = 0; i < 5; i++) {
	movs	r4, #0	@ i,
@ Patches/../C_code.c:6816:     if (GetUnitItemCount(gActiveUnit) == 5) {
	cmp	r0, #5	@ tmp161,
	beq	.L4016		@,
@ Patches/../C_code.c:6830:         if (GetItemIndex(item) == CHEST_KEY_A) {
	ldr	r6, .L4017+8	@ tmp159,
.L3999:
@ Patches/../C_code.c:6822:         u16 item = gActiveUnit->items[i];
	mov	r3, r8	@ tmp158, tmp158
	movs	r2, r4	@ tmp145, i
	ldr	r3, [r3]	@ gActiveUnit, gActiveUnit
	adds	r2, r2, #12	@ tmp145,
	lsls	r2, r2, #1	@ tmp146, tmp145,
	adds	r3, r3, r2	@ tmp147, gActiveUnit, tmp146
	ldrh	r5, [r3, #6]	@ item, *gActiveUnit.399_6
@ Patches/../C_code.c:6824:         if (item == 0) {
	cmp	r5, #0	@ item,
	beq	.L4000		@,
@ Patches/../C_code.c:6830:         if (GetItemIndex(item) == CHEST_KEY_A) {
	movs	r0, r5	@, item
@ Patches/../C_code.c:6828:         *out = i;
	strb	r4, [r7]	@ i, *out_20(D)
@ Patches/../C_code.c:6830:         if (GetItemIndex(item) == CHEST_KEY_A) {
	bl	.L341		@
@ Patches/../C_code.c:6830:         if (GetItemIndex(item) == CHEST_KEY_A) {
	cmp	r0, #105	@ tmp162,
	beq	.L4004		@,
@ Patches/../C_code.c:6833:         if (GetItemIndex(item) == CHEST_KEY_B) {
	movs	r0, r5	@, item
	bl	.L341		@
@ Patches/../C_code.c:6833:         if (GetItemIndex(item) == CHEST_KEY_B) {
	cmp	r0, #121	@ tmp163,
	beq	.L4004		@,
@ Patches/../C_code.c:6837:         if (GetItemIndex(item) == LOCKPICK) { //ITEM_LOCKPICK) { // 3bb40 
	movs	r0, r5	@, item
	bl	.L341		@
@ Patches/../C_code.c:6837:         if (GetItemIndex(item) == LOCKPICK) { //ITEM_LOCKPICK) { // 3bb40 
	cmp	r0, #107	@ tmp164,
	beq	.L4005		@,
.L4006:
@ Patches/../C_code.c:6821:     for (i = 0; i < 5; i++) {
	adds	r4, r4, #1	@ i,
@ Patches/../C_code.c:6821:     for (i = 0; i < 5; i++) {
	cmp	r4, #5	@ i,
	bne	.L3999		@,
.L4000:
@ Patches/../C_code.c:6818:         return 0;
	movs	r0, #0	@ <retval>,
.L4003:
@ Patches/../C_code.c:6846: }
	@ sp needed	@
	pop	{r7}
	mov	r8, r7
	pop	{r4, r5, r6, r7}
	pop	{r1}
	bx	r1
.L4005:
@ Patches/../C_code.c:6839:             if (CanUnitUseLockpickItem(gActiveUnit)) {
	mov	r3, r8	@ tmp158, tmp158
	ldr	r0, [r3]	@ gActiveUnit, gActiveUnit
	bl	CanUnitUseLockpickItem		@
@ Patches/../C_code.c:6839:             if (CanUnitUseLockpickItem(gActiveUnit)) {
	cmp	r0, #0	@ tmp165,
	beq	.L4006		@,
.L4004:
@ Patches/../C_code.c:6831:             return 1;
	movs	r0, #1	@ <retval>,
	b	.L4003		@
.L4016:
@ Patches/../C_code.c:6817:         gActiveUnit->aiFlags |= 1<<3; // AI_UNIT_FLAG_3
	mov	r3, r8	@ tmp158, tmp158
@ Patches/../C_code.c:6817:         gActiveUnit->aiFlags |= 1<<3; // AI_UNIT_FLAG_3
	movs	r1, #8	@ tmp137,
@ Patches/../C_code.c:6817:         gActiveUnit->aiFlags |= 1<<3; // AI_UNIT_FLAG_3
	ldr	r2, [r3]	@ gActiveUnit.397_3, gActiveUnit
@ Patches/../C_code.c:6817:         gActiveUnit->aiFlags |= 1<<3; // AI_UNIT_FLAG_3
	ldrb	r3, [r2, #10]	@ tmp140,
	orrs	r3, r1	@ tmp141, tmp137
	strb	r3, [r2, #10]	@ tmp141, gActiveUnit.397_3->aiFlags
@ Patches/../C_code.c:6818:         return 0;
	b	.L4000		@
.L4018:
	.align	2
.L4017:
	.word	gActiveUnit
	.word	GetUnitItemCount
	.word	GetItemIndex
	.size	AiGetChestUnlockItemSlot, .-AiGetChestUnlockItemSlot
	.align	1
	.p2align 2,,3
	.global	GetUnitKeyItemSlotForTerrain
	.syntax unified
	.code	16
	.thumb_func
	.type	GetUnitKeyItemSlotForTerrain, %function
GetUnitKeyItemSlotForTerrain:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:6848: int GetUnitKeyItemSlotForTerrain(struct Unit* unit, int terrain) { // 8018524
	movs	r4, r0	@ unit, tmp127
	movs	r5, r1	@ terrain, tmp128
@ Patches/../C_code.c:6851:     if (CanUnitUseLockpickItem(unit)) {
	bl	CanUnitUseLockpickItem		@
@ Patches/../C_code.c:6851:     if (CanUnitUseLockpickItem(unit)) {
	cmp	r0, #0	@ tmp129,
	bne	.L4020		@,
	ldr	r6, .L4029	@ tmp126,
@ Patches/../C_code.c:6858:     switch (terrain) {
	cmp	r5, #30	@ terrain,
	beq	.L4025		@,
.L4028:
@ Patches/../C_code.c:6849:     int slot, item = 0;
	movs	r1, #0	@ item,
@ Patches/../C_code.c:6858:     switch (terrain) {
	cmp	r5, #33	@ terrain,
	beq	.L4027		@,
.L4021:
@ Patches/../C_code.c:6874:     return GetUnitItemSlot(unit, item);
	movs	r0, r4	@, unit
	bl	.L341		@
.L4019:
@ Patches/../C_code.c:6875: }
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L4027:
@ Patches/../C_code.c:6861:         slot = GetUnitItemSlot(unit, CHEST_KEY_A);
	movs	r1, #105	@,
	movs	r0, r4	@, unit
	bl	.L341		@
@ Patches/../C_code.c:6863:         if (slot < 0)
	cmp	r0, #0	@ <retval>,
	bge	.L4019		@,
@ Patches/../C_code.c:6864:             slot = GetUnitItemSlot(unit, CHEST_KEY_B);
	movs	r1, #121	@,
	movs	r0, r4	@, unit
	bl	.L341		@
	b	.L4019		@
.L4020:
@ Patches/../C_code.c:6852:         int slot = GetUnitItemSlot(unit, LOCKPICK);
	movs	r1, #107	@,
	movs	r0, r4	@, unit
	ldr	r6, .L4029	@ tmp126,
	bl	.L341		@
@ Patches/../C_code.c:6854:         if (slot >= 0)
	cmp	r0, #0	@ <retval>,
	bge	.L4019		@,
@ Patches/../C_code.c:6858:     switch (terrain) {
	cmp	r5, #30	@ terrain,
	bne	.L4028		@,
.L4025:
	movs	r1, #106	@ item,
	b	.L4021		@
.L4030:
	.align	2
.L4029:
	.word	GetUnitItemSlot
	.size	GetUnitKeyItemSlotForTerrain, .-GetUnitKeyItemSlotForTerrain
	.align	1
	.p2align 2,,3
	.global	IsItemDisplayUsable
	.syntax unified
	.code	16
	.thumb_func
	.type	IsItemDisplayUsable, %function
IsItemDisplayUsable:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}	@
@ Patches/../C_code.c:6877: s8 IsItemDisplayUsable(struct Unit* unit, int item) { // 8016AB0
	movs	r5, r0	@ unit, tmp202
@ Patches/../C_code.c:6878:     if (GetItemAttributes(item) & 1 ) // wep 
	movs	r0, r1	@, item
@ Patches/../C_code.c:6877: s8 IsItemDisplayUsable(struct Unit* unit, int item) { // 8016AB0
	movs	r4, r1	@ item, tmp203
@ Patches/../C_code.c:6878:     if (GetItemAttributes(item) & 1 ) // wep 
	bl	GetItemAttributes		@
@ Patches/../C_code.c:6878:     if (GetItemAttributes(item) & 1 ) // wep 
	lsls	r0, r0, #31	@ tmp212, tmp204,
	bmi	.L4047		@,
@ Patches/../C_code.c:6881:     if (GetItemAttributes(item) & 4) // staff 
	movs	r0, r4	@, item
	bl	GetItemAttributes		@
@ Patches/../C_code.c:6881:     if (GetItemAttributes(item) & 4) // staff 
	lsls	r0, r0, #29	@ tmp213, tmp206,
	bmi	.L4048		@,
@ Patches/../C_code.c:6884:     if (GetItemUseEffect(item)) {
	movs	r0, r4	@, item
	ldr	r3, .L4050	@ tmp158,
	bl	.L14		@
@ Patches/../C_code.c:6884:     if (GetItemUseEffect(item)) {
	cmp	r0, #0	@ tmp208,
	beq	.L4040		@,
@ Patches/../C_code.c:6885:         if (unit->statusIndex == UNIT_STATUS_SLEEP)
	movs	r3, #48	@ tmp159,
	ldrb	r2, [r5, r3]	@ *unit_25(D), *unit_25(D)
	subs	r3, r3, #33	@ tmp165,
	ands	r3, r2	@ tmp164, *unit_25(D)
@ Patches/../C_code.c:6888:         if (unit->statusIndex == UNIT_STATUS_BERSERK)
	movs	r2, #253	@ tmp173,
@ Patches/../C_code.c:6885:         if (unit->statusIndex == UNIT_STATUS_SLEEP)
	subs	r3, r3, #2	@ tmp167,
@ Patches/../C_code.c:6888:         if (unit->statusIndex == UNIT_STATUS_BERSERK)
	tst	r3, r2	@ tmp167, tmp173
	beq	.L4039		@,
@ Patches/../C_code.c:6891:         if (GetItemIndex(item) == LOCKPICK) {// lockpick 
	movs	r0, r4	@, item
	ldr	r6, .L4050+4	@ tmp201,
	bl	.L341		@
@ Patches/../C_code.c:6792: 			if (!(UNIT_CATTRIBUTES(unit) & CA_THIEF)) { 
	ldr	r3, [r5]	@ MEM[(const struct CharacterData * *)unit_25(D)], MEM[(const struct CharacterData * *)unit_25(D)]
	ldr	r2, [r5, #4]	@ MEM[(const struct ClassData * *)unit_25(D) + 4B], MEM[(const struct ClassData * *)unit_25(D) + 4B]
	ldr	r3, [r3, #40]	@ pretmp_72->attributes,
	ldr	r2, [r2, #40]	@ pretmp_73->attributes,
	orrs	r3, r2	@ _63, pretmp_73->attributes
@ Patches/../C_code.c:6891:         if (GetItemIndex(item) == LOCKPICK) {// lockpick 
	cmp	r0, #107	@ tmp209,
	beq	.L4037		@,
.L4038:
@ Patches/../C_code.c:6897:         if (!(UNIT_CATTRIBUTES(unit) & CA_REFRESHER) && IsItemADanceRing(item))
	movs	r2, #48	@ tmp191,
@ Patches/../C_code.c:6897:         if (!(UNIT_CATTRIBUTES(unit) & CA_REFRESHER) && IsItemADanceRing(item))
	tst	r2, r3	@ tmp191, _63
	beq	.L4049		@,
.L4040:
@ Patches/../C_code.c:6901:     return TRUE;
	movs	r0, #1	@ <retval>,
	b	.L4033		@
.L4048:
@ Patches/../C_code.c:6882:         return CanUnitUseStaff(unit, item);
	movs	r1, r4	@, item
	movs	r0, r5	@, unit
	ldr	r3, .L4050+8	@ tmp155,
	bl	.L14		@
.L4033:
@ Patches/../C_code.c:6902: }
	@ sp needed	@
	pop	{r4, r5, r6}
	pop	{r1}
	bx	r1
.L4047:
@ Patches/../C_code.c:6879:         return CanUnitUseWeapon(unit, item);
	movs	r1, r4	@, item
	movs	r0, r5	@, unit
	ldr	r3, .L4050+12	@ tmp150,
	bl	.L14		@
	b	.L4033		@
.L4037:
@ Patches/../C_code.c:6791: 		if (OnlyThievesCanUseLockpicks) { 
	ldr	r2, .L4050+16	@ tmp183,
@ Patches/../C_code.c:6791: 		if (OnlyThievesCanUseLockpicks) { 
	ldr	r2, [r2]	@ OnlyThievesCanUseLockpicks, OnlyThievesCanUseLockpicks
	cmp	r2, #0	@ OnlyThievesCanUseLockpicks,
	beq	.L4038		@,
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	movs	r1, #11	@ tmp185,
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	movs	r2, #192	@ tmp186,
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	ldrsb	r1, [r5, r1]	@ tmp185,
@ Patches/../C_code.c:6789: 	int faction = UNIT_FACTION(unit); 
	ands	r2, r1	@ faction, tmp185
@ Patches/../C_code.c:6792: 			if (!(UNIT_CATTRIBUTES(unit) & CA_THIEF)) { 
	movs	r1, #8	@ tmp188,
	ands	r1, r3	@ tmp189, _63
@ Patches/../C_code.c:6792: 			if (!(UNIT_CATTRIBUTES(unit) & CA_THIEF)) { 
	orrs	r2, r1	@ tmp190, tmp189
	bne	.L4038		@,
.L4039:
@ Patches/../C_code.c:6886:             return FALSE;
	movs	r0, #0	@ <retval>,
	b	.L4033		@
.L4049:
@ Patches/../C_code.c:6767:     switch (GetItemIndex(item)) {
	movs	r0, r4	@, item
	bl	.L341		@
@ Patches/../C_code.c:6767:     switch (GetItemIndex(item)) {
	movs	r3, #3	@ tmp197,
	subs	r0, r0, #125	@ tmp194,
	cmp	r3, r0	@ tmp197, tmp194
	sbcs	r0, r0, r0	@ tmp211
	rsbs	r0, r0, #0	@ <retval>, tmp211
	b	.L4033		@
.L4051:
	.align	2
.L4050:
	.word	GetItemUseEffect
	.word	GetItemIndex
	.word	CanUnitUseStaff
	.word	CanUnitUseWeapon
	.word	OnlyThievesCanUseLockpicks
	.size	IsItemDisplayUsable, .-IsItemDisplayUsable
	.align	1
	.p2align 2,,3
	.global	ArenaIsUnitAllowed
	.syntax unified
	.code	16
	.thumb_func
	.type	ArenaIsUnitAllowed, %function
ArenaIsUnitAllowed:
	@ Function supports interworking.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
@ Patches/../C_code.c:6907:     if (unit->statusIndex == UNIT_STATUS_SILENCED) {
	movs	r3, #48	@ tmp126,
	ldrb	r2, [r0, r3]	@ *unit_13(D), *unit_13(D)
@ Patches/../C_code.c:6907:     if (unit->statusIndex == UNIT_STATUS_SILENCED) {
	subs	r3, r3, #33	@ tmp132,
@ Patches/../C_code.c:6906: s8 ArenaIsUnitAllowed(struct Unit* unit) {
	push	{r4, lr}	@
@ Patches/../C_code.c:6907:     if (unit->statusIndex == UNIT_STATUS_SILENCED) {
	ands	r3, r2	@ tmp133, *unit_13(D)
@ Patches/../C_code.c:6906: s8 ArenaIsUnitAllowed(struct Unit* unit) {
	movs	r4, r0	@ unit, tmp151
@ Patches/../C_code.c:6907:     if (unit->statusIndex == UNIT_STATUS_SILENCED) {
	cmp	r3, #3	@ tmp133,
	beq	.L4055		@,
@ Patches/../C_code.c:6911:     if (GetUnitBestWRankType(unit) < 0) { // fe6 8029964
	ldr	r3, .L4056	@ tmp135,
	bl	.L14		@
@ Patches/../C_code.c:6911:     if (GetUnitBestWRankType(unit) < 0) { // fe6 8029964
	cmp	r0, #0	@ tmp152,
	blt	.L4055		@,
@ Patches/../C_code.c:6914: 	if (UNIT_CATTRIBUTES(unit) & CA_LOCK_3) { return 0; } // no monsters 
	movs	r0, #1	@ tmp142,
@ Patches/../C_code.c:6914: 	if (UNIT_CATTRIBUTES(unit) & CA_LOCK_3) { return 0; } // no monsters 
	ldr	r3, [r4]	@ unit_13(D)->pCharacterData, unit_13(D)->pCharacterData
	ldr	r2, [r4, #4]	@ unit_13(D)->pClassData, unit_13(D)->pClassData
	ldr	r3, [r3, #40]	@ _4->attributes, _4->attributes
	ldr	r2, [r2, #40]	@ _6->attributes, _6->attributes
	orrs	r3, r2	@ tmp138, _6->attributes
@ Patches/../C_code.c:6914: 	if (UNIT_CATTRIBUTES(unit) & CA_LOCK_3) { return 0; } // no monsters 
	lsrs	r3, r3, #18	@ tmp141, tmp138,
	bics	r0, r3	@ <retval>, tmp141
	b	.L4054		@
.L4055:
@ Patches/../C_code.c:6908:         return 0;
	movs	r0, #0	@ <retval>,
.L4054:
@ Patches/../C_code.c:6917: }
	@ sp needed	@
	pop	{r4}
	pop	{r1}
	bx	r1
.L4057:
	.align	2
.L4056:
	.word	GetUnitBestWRankType
	.size	ArenaIsUnitAllowed, .-ArenaIsUnitAllowed
	.global	TerrainTable_MovCost_StuckRainy
	.global	TerrainTable_MovCost_Stuck
	.global	gDefaultShopInventory
	.global	RandomizerText
	.global	TimedHitsText
	.global	SkillsText
	.global	SkipChapterText
	.global	FogText
	.global	EnemyDiffBonusText
	.global	PlayerBonusText
	.global	ItemDurabilityText
	.global	ColoursText
	.global	MusicText
	.global	ModeText
	.global	ItemsText
	.global	ClassText
	.global	StatCapsText
	.global	LevelupsText
	.global	GrowthsText
	.global	BaseStatsText
	.global	CharactersText
	.global	VarianceText
	.global	SeedText
	.global	sHandVOffsetLookup
	.global	sSprite_VertHand
	.global	DigitDecimalTable
	.global	CursorLocationTable
	.global	RtWidths
	.global	tWidths
	.global	SRR_MAXDISP
	.global	OptionAmounts
	.global	Option17
	.global	Option16
	.global	Option15
	.global	Option14
	.global	Option13
	.global	Option12
	.global	Option11
	.global	Option10
	.global	Option9
	.global	Option8
	.global	Option7
	.global	Option6
	.global	Option5
	.global	Option4
	.global	Option3
	.global	Option2
	.global	Option1
	.global	Option0
	.global	ConfigMenuProcCmd
	.global	ConModifiers
	.global	MovModifiers
	.global	RecruitmentProcCmd4
	.section	.rodata.str1.4
	.align	2
.LC829:
	.ascii	"ReorderedRecruitment_Four\000"
	.global	RecruitmentProcCmd3
	.align	2
.LC830:
	.ascii	"ReorderedRecruitment_Three\000"
	.global	RecruitmentProcCmd2
	.align	2
.LC831:
	.ascii	"ReorderedRecruitment_Two\000"
	.global	RecruitmentProcCmd1
	.align	2
.LC832:
	.ascii	"ReorderedRecruitment_One\000"
	.global	sSpecialCharStList
	.global	gBattleTarget
	.global	gBattleActor
	.global	BITPACKED
	.bss
	.align	2
	.type	sSpecialCharStList, %object
	.size	sSpecialCharStList, 256
sSpecialCharStList:
	.space	256
	.type	gBattleTarget, %object
	.size	gBattleTarget, 128
gBattleTarget:
	.space	128
	.type	gBattleActor, %object
	.size	gBattleActor, 128
gBattleActor:
	.space	128
	.type	BITPACKED, %object
	.size	BITPACKED, 20
BITPACKED:
	.space	20
	.section	.rodata
	.align	2
	.set	.LANCHOR0,. + 0
	.set	.LANCHOR1,. + 128
	.set	.LANCHOR2,. + 256
	.set	.LANCHOR3,. + 384
	.set	.LANCHOR4,. + 512
	.set	.LANCHOR5,. + 640
	.set	.LANCHOR6,. + 768
	.set	.LANCHOR7,. + 896
	.set	.LANCHOR8,. + 1024
	.set	.LANCHOR9,. + 1152
	.set	.LANCHOR10,. + 1280
	.set	.LANCHOR11,. + 1408
	.set	.LANCHOR12,. + 1536
.LC0:
	.short	-23698
	.short	-28082
	.short	-18556
	.short	20327
	.short	-32622
	.short	22829
	.short	-29072
	.short	-22636
	.type	RecruitmentProcCmd1, %object
	.size	RecruitmentProcCmd1, 32
RecruitmentProcCmd1:
@ opcode:
	.short	1
@ dataImm:
	.short	0
@ dataPtr:
	.word	.LC832
@ opcode:
	.short	14
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
@ opcode:
	.short	3
@ dataImm:
	.short	0
@ dataPtr:
	.word	LoopRandomRecruitmentProc
@ opcode:
	.short	0
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
	.type	RecruitmentProcCmd2, %object
	.size	RecruitmentProcCmd2, 32
RecruitmentProcCmd2:
@ opcode:
	.short	1
@ dataImm:
	.short	0
@ dataPtr:
	.word	.LC831
@ opcode:
	.short	14
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
@ opcode:
	.short	3
@ dataImm:
	.short	0
@ dataPtr:
	.word	LoopRandomRecruitmentProc
@ opcode:
	.short	0
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
	.type	RecruitmentProcCmd3, %object
	.size	RecruitmentProcCmd3, 32
RecruitmentProcCmd3:
@ opcode:
	.short	1
@ dataImm:
	.short	0
@ dataPtr:
	.word	.LC830
@ opcode:
	.short	14
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
@ opcode:
	.short	3
@ dataImm:
	.short	0
@ dataPtr:
	.word	LoopRandomRecruitmentProc
@ opcode:
	.short	0
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
	.type	RecruitmentProcCmd4, %object
	.size	RecruitmentProcCmd4, 32
RecruitmentProcCmd4:
@ opcode:
	.short	1
@ dataImm:
	.short	0
@ dataPtr:
	.word	.LC829
@ opcode:
	.short	14
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
@ opcode:
	.short	3
@ dataImm:
	.short	0
@ dataPtr:
	.word	LoopRandomRecruitmentProc
@ opcode:
	.short	0
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
	.type	MapMusicList, %object
	.size	MapMusicList, 29
MapMusicList:
	.ascii	"\004\005\006\007\010\011\012\013\014\015\016\017\020"
	.ascii	"\021\022\023\024\025\026\027\030$%&127ET"
	.space	3
	.type	ConModifiers, %object
	.size	ConModifiers, 12
ConModifiers:
	.ascii	"\000\000\000\000\000\000\000\001\002\003\004\000"
	.type	MovModifiers, %object
	.size	MovModifiers, 9
MovModifiers:
	.ascii	"\000\000\000\000\000\001\001\002\000"
	.space	3
	.type	Option0, %object
	.size	Option0, 105
Option0:
	.ascii	"0%\000"
	.space	2
	.ascii	"5%\000"
	.space	2
	.ascii	"10%\000"
	.space	1
	.ascii	"15%\000"
	.space	1
	.ascii	"20%\000"
	.space	1
	.ascii	"25%\000"
	.space	1
	.ascii	"30%\000"
	.space	1
	.ascii	"35%\000"
	.space	1
	.ascii	"40%\000"
	.space	1
	.ascii	"45%\000"
	.space	1
	.ascii	"50%\000"
	.space	1
	.ascii	"55%\000"
	.space	1
	.ascii	"60%\000"
	.space	1
	.ascii	"65%\000"
	.space	1
	.ascii	"70%\000"
	.space	1
	.ascii	"75%\000"
	.space	1
	.ascii	"80%\000"
	.space	1
	.ascii	"85%\000"
	.space	1
	.ascii	"90%\000"
	.space	1
	.ascii	"95%\000"
	.space	1
	.ascii	"100%\000"
	.space	3
	.type	RtWidths, %object
	.size	RtWidths, 19
RtWidths:
	.ascii	"\000\004\017\005\005\010\006\016\015\004\007\010\011"
	.ascii	"\012\012\006\005\005\021"
	.space	1
	.type	Option2, %object
	.size	Option2, 16
Option2:
	.ascii	"Vanilla\000"
	.ascii	"Random\000"
	.space	1
	.type	Option3, %object
	.size	Option3, 75
Option3:
	.ascii	"Vanilla\000"
	.space	7
	.ascii	"Random\000"
	.space	8
	.ascii	"0%\000"
	.space	12
	.ascii	"100%\000"
	.space	10
	.ascii	"50%\000"
	.space	11
	.space	1
	.type	Option4, %object
	.size	Option4, 45
Option4:
	.ascii	"Vanilla\000"
	.space	7
	.ascii	"Based on seed\000"
	.space	1
	.ascii	"Fixed\000"
	.space	9
	.space	3
	.type	Option5, %object
	.size	Option5, 70
Option5:
	.ascii	"Vanilla\000"
	.space	2
	.ascii	"Random\000"
	.space	3
	.ascii	"0\000"
	.space	8
	.ascii	"15\000"
	.space	7
	.ascii	"30\000"
	.space	7
	.ascii	"45\000"
	.space	7
	.ascii	"60\000"
	.space	7
	.space	2
	.type	Option7, %object
	.size	Option7, 100
Option7:
	.ascii	"Vanilla\000"
	.space	17
	.ascii	"Random\000"
	.space	18
	.ascii	"Random found items only\000"
	.space	1
	.ascii	"Random item stats only\000"
	.space	2
	.type	Option8, %object
	.size	Option8, 20
Option8:
	.ascii	"Classic\000"
	.space	2
	.ascii	"Casual\000"
	.space	3
	.type	Option9, %object
	.size	Option9, 44
Option9:
	.ascii	"Vanilla BGM\000"
	.space	10
	.ascii	"Random BGM\000"
	.space	11
	.type	Option10, %object
	.size	Option10, 88
Option10:
	.ascii	"Vanilla Colours\000"
	.space	6
	.ascii	"Random\000"
	.space	15
	.ascii	"Janky\000"
	.space	16
	.ascii	"Portraits only\000"
	.space	7
	.type	Option11, %object
	.size	Option11, 60
Option11:
	.ascii	"Vanilla\000"
	.space	12
	.ascii	"Infinite weapons\000"
	.space	3
	.ascii	"Infinite items\000"
	.space	5
	.type	Option14, %object
	.size	Option14, 33
Option14:
	.ascii	"Vanilla\000"
	.space	3
	.ascii	"Always off\000"
	.ascii	"Always on\000"
	.space	1
	.space	3
	.type	Option15, %object
	.size	Option15, 28
Option15:
	.ascii	"Vanilla\000"
	.space	6
	.ascii	"Press A\000"
	.space	6
	.type	Option16, %object
	.size	Option16, 40
Option16:
	.ascii	"Off\000"
	.space	6
	.ascii	"Easy\000"
	.space	5
	.ascii	"Normal\000"
	.space	3
	.ascii	"Hard\000"
	.space	5
	.type	Option17, %object
	.size	Option17, 40
Option17:
	.ascii	"Vanilla\000"
	.space	2
	.ascii	"Random\000"
	.space	3
	.ascii	"Fixed\000"
	.space	4
	.ascii	"Random &\000"
	.space	1
	.type	sSprite_VertHand, %object
	.size	sSprite_VertHand, 8
sSprite_VertHand:
	.short	1
	.short	2
	.short	16384
	.short	6
	.type	sHandVOffsetLookup, %object
	.size	sHandVOffsetLookup, 32
sHandVOffsetLookup:
	.ascii	"\000\000\000\000\000\000\000\001\001\002\002\002\003"
	.ascii	"\003\003\003\004\004\004\004\004\004\004\003\003\002"
	.ascii	"\002\002\001\001\001\001"
	.type	SeedText, %object
	.size	SeedText, 5
SeedText:
	.ascii	"Seed\000"
	.space	3
	.type	VarianceText, %object
	.size	VarianceText, 9
VarianceText:
	.ascii	"Variance\000"
	.space	3
	.type	CharactersText, %object
	.size	CharactersText, 11
CharactersText:
	.ascii	"Characters\000"
	.space	1
	.type	tWidths, %object
	.size	tWidths, 19
tWidths:
	.ascii	"\003\005\007\006\005\006\006\003\003\003\003\004\010"
	.ascii	"\007\012\002\007\006\004"
	.space	1
	.type	BaseStatsText, %object
	.size	BaseStatsText, 11
BaseStatsText:
	.ascii	"Base Stats\000"
	.space	1
	.type	GrowthsText, %object
	.size	GrowthsText, 8
GrowthsText:
	.ascii	"Growths\000"
	.type	LevelupsText, %object
	.size	LevelupsText, 9
LevelupsText:
	.ascii	"Levelups\000"
	.space	3
	.type	StatCapsText, %object
	.size	StatCapsText, 10
StatCapsText:
	.ascii	"Stat Caps\000"
	.space	2
	.type	ClassText, %object
	.size	ClassText, 6
ClassText:
	.ascii	"Class\000"
	.space	2
	.type	ItemsText, %object
	.size	ItemsText, 6
ItemsText:
	.ascii	"Items\000"
	.space	2
	.type	ModeText, %object
	.size	ModeText, 5
ModeText:
	.ascii	"Mode\000"
	.space	3
	.type	MusicText, %object
	.size	MusicText, 6
MusicText:
	.ascii	"Music\000"
	.space	2
	.type	ColoursText, %object
	.size	ColoursText, 8
ColoursText:
	.ascii	"Colours\000"
	.type	ItemDurabilityText, %object
	.size	ItemDurabilityText, 16
ItemDurabilityText:
	.ascii	"Item Durability\000"
	.type	PlayerBonusText, %object
	.size	PlayerBonusText, 13
PlayerBonusText:
	.ascii	"Player Bonus\000"
	.space	3
	.type	EnemyDiffBonusText, %object
	.size	EnemyDiffBonusText, 18
EnemyDiffBonusText:
	.ascii	"Enemy Diff. Bonus\000"
	.space	2
	.type	FogText, %object
	.size	FogText, 4
FogText:
	.ascii	"Fog\000"
	.type	SkipChapterText, %object
	.size	SkipChapterText, 13
SkipChapterText:
	.ascii	"Skip chapter\000"
	.space	3
	.type	TimedHitsText, %object
	.size	TimedHitsText, 11
TimedHitsText:
	.ascii	"Timed Hits\000"
	.space	1
	.type	SkillsText, %object
	.size	SkillsText, 7
SkillsText:
	.ascii	"Skills\000"
	.space	1
	.type	RandomizerText, %object
	.size	RandomizerText, 11
RandomizerText:
	.ascii	"Randomizer\000"
	.space	1
	.type	DigitDecimalTable, %object
	.size	DigitDecimalTable, 32
DigitDecimalTable:
	.word	0
	.word	1
	.word	10
	.word	100
	.word	1000
	.word	10000
	.word	100000
	.word	1000000
	.type	CursorLocationTable, %object
	.size	CursorLocationTable, 72
CursorLocationTable:
@ x:
	.word	156
@ y:
	.word	16
@ x:
	.word	148
@ y:
	.word	16
@ x:
	.word	140
@ y:
	.word	16
@ x:
	.word	132
@ y:
	.word	16
@ x:
	.word	124
@ y:
	.word	16
@ x:
	.word	116
@ y:
	.word	16
@ x:
	.word	108
@ y:
	.word	16
@ x:
	.word	100
@ y:
	.word	16
@ x:
	.word	92
@ y:
	.word	16
	.type	SRR_CursorLocationTable, %object
	.size	SRR_CursorLocationTable, 64
SRR_CursorLocationTable:
@ x:
	.word	18
@ y:
	.word	24
@ x:
	.word	18
@ y:
	.word	40
@ x:
	.word	18
@ y:
	.word	56
@ x:
	.word	18
@ y:
	.word	72
@ x:
	.word	18
@ y:
	.word	88
@ x:
	.word	18
@ y:
	.word	104
@ x:
	.word	18
@ y:
	.word	120
@ x:
	.word	18
@ y:
	.word	136
	.type	OptionAmounts, %object
	.size	OptionAmounts, 19
OptionAmounts:
	.ascii	"\025\006\002\005\003\007\004\004\002\002\004\003\037"
	.ascii	"\037\003\002\004\004\000"
	.space	1
	.type	gDefaultShopInventory, %object
	.size	gDefaultShopInventory, 22
gDefaultShopInventory:
	.short	108
	.short	1
	.short	20
	.short	31
	.short	45
	.short	56
	.short	63
	.short	69
	.short	75
	.short	0
	.short	0
	.space	2
	.type	TerrainTable_MovCost_StuckRainy, %object
	.size	TerrainTable_MovCost_StuckRainy, 65
TerrainTable_MovCost_StuckRainy:
	.ascii	"\377\002\002\002\377\002\002\002\002\002\002\002\003"
	.ascii	"\004\002\002\004\004\004\002\004\004\004\002\002\004"
	.ascii	"\377\377\002\002\377\002\002\002\377\002\002\002\004"
	.ascii	"\002\002\002\002\002\377\002\004\001\002\377\004\377"
	.ascii	"\002\004\004\004\004\004\004\004\004\004\002\377\377"
	.space	3
	.type	TerrainTable_MovCost_Stuck, %object
	.size	TerrainTable_MovCost_Stuck, 65
TerrainTable_MovCost_Stuck:
	.ascii	"\377\001\001\001\377\001\001\001\001\001\002\001\002"
	.ascii	"\004\001\002\004\004\004\001\004\004\004\001\001\004"
	.ascii	"\377\377\001\002\377\001\001\001\377\001\001\002\004"
	.ascii	"\002\002\002\001\001\377\001\004\001\001\377\004\377"
	.ascii	"\001\004\004\004\004\004\004\004\004\004\001\377\377"
	.space	3
	.type	SRR_MAXDISP, %object
	.size	SRR_MAXDISP, 4
SRR_MAXDISP:
	.word	7
	.type	Option13, %object
	.size	Option13, 620
Option13:
	.ascii	"Vanilla\000"
	.space	12
	.ascii	"+1 hidden level\000"
	.space	4
	.ascii	"+2 hidden levels\000"
	.space	3
	.ascii	"+3 hidden levels\000"
	.space	3
	.ascii	"+4 hidden levels\000"
	.space	3
	.ascii	"+5 hidden levels\000"
	.space	3
	.ascii	"+6 hidden levels\000"
	.space	3
	.ascii	"+7 hidden levels\000"
	.space	3
	.ascii	"+8 hidden levels\000"
	.space	3
	.ascii	"+9 hidden levels\000"
	.space	3
	.ascii	"+10 hidden levels\000"
	.space	2
	.ascii	"+11 hidden levels\000"
	.space	2
	.ascii	"+12 hidden levels\000"
	.space	2
	.ascii	"+13 hidden levels\000"
	.space	2
	.ascii	"+14 hidden levels\000"
	.space	2
	.ascii	"+15 hidden levels\000"
	.space	2
	.ascii	"+16 hidden levels\000"
	.space	2
	.ascii	"+17 hidden levels\000"
	.space	2
	.ascii	"+18 hidden levels\000"
	.space	2
	.ascii	"+19 hidden levels\000"
	.space	2
	.ascii	"+20 hidden levels\000"
	.space	2
	.ascii	"-10 hidden levels\000"
	.space	2
	.ascii	"-9 hidden levels\000"
	.space	3
	.ascii	"-8 hidden levels\000"
	.space	3
	.ascii	"-7 hidden levels\000"
	.space	3
	.ascii	"-6 hidden levels\000"
	.space	3
	.ascii	"-5 hidden levels\000"
	.space	3
	.ascii	"-4 hidden levels\000"
	.space	3
	.ascii	"-3 hidden levels\000"
	.space	3
	.ascii	"-2 hidden levels\000"
	.space	3
	.ascii	"-1 hidden level\000"
	.space	4
	.type	Option12, %object
	.size	Option12, 620
Option12:
	.ascii	"Vanilla\000"
	.space	12
	.ascii	"+1 hidden level\000"
	.space	4
	.ascii	"+2 hidden levels\000"
	.space	3
	.ascii	"+3 hidden levels\000"
	.space	3
	.ascii	"+4 hidden levels\000"
	.space	3
	.ascii	"+5 hidden levels\000"
	.space	3
	.ascii	"+6 hidden levels\000"
	.space	3
	.ascii	"+7 hidden levels\000"
	.space	3
	.ascii	"+8 hidden levels\000"
	.space	3
	.ascii	"+9 hidden levels\000"
	.space	3
	.ascii	"+10 hidden levels\000"
	.space	2
	.ascii	"+11 hidden levels\000"
	.space	2
	.ascii	"+12 hidden levels\000"
	.space	2
	.ascii	"+13 hidden levels\000"
	.space	2
	.ascii	"+14 hidden levels\000"
	.space	2
	.ascii	"+15 hidden levels\000"
	.space	2
	.ascii	"+16 hidden levels\000"
	.space	2
	.ascii	"+17 hidden levels\000"
	.space	2
	.ascii	"+18 hidden levels\000"
	.space	2
	.ascii	"+19 hidden levels\000"
	.space	2
	.ascii	"+20 hidden levels\000"
	.space	2
	.ascii	"-10 hidden levels\000"
	.space	2
	.ascii	"-9 hidden levels\000"
	.space	3
	.ascii	"-8 hidden levels\000"
	.space	3
	.ascii	"-7 hidden levels\000"
	.space	3
	.ascii	"-6 hidden levels\000"
	.space	3
	.ascii	"-5 hidden levels\000"
	.space	3
	.ascii	"-4 hidden levels\000"
	.space	3
	.ascii	"-3 hidden levels\000"
	.space	3
	.ascii	"-2 hidden levels\000"
	.space	3
	.ascii	"-1 hidden level\000"
	.space	4
	.type	Option6, %object
	.size	Option6, 130
Option6:
	.ascii	"Vanilla\000"
	.space	18
	.ascii	"Random vanilla classes\000"
	.space	3
	.ascii	"Random for players\000"
	.space	7
	.ascii	"Random for enemies\000"
	.space	7
	.ascii	"Random with new classes\000"
	.space	2
	.space	2
	.type	Option1, %object
	.size	Option1, 192
Option1:
	.ascii	"Vanilla\000"
	.space	24
	.ascii	"Players reordered\000"
	.space	14
	.ascii	"Bosses reordered\000"
	.space	15
	.ascii	"Players & Bosses reordered\000"
	.space	5
	.ascii	"Players and Bosses swap\000"
	.space	8
	.ascii	"Random\000"
	.space	25
	.type	ConfigMenuProcCmd, %object
	.size	ConfigMenuProcCmd, 152
ConfigMenuProcCmd:
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	LockGame
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	BMapDispSuspend
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	StartFastFadeToBlack
@ opcode:
	.short	3
@ dataImm:
	.short	0
@ dataPtr:
	.word	WaitForFade
@ opcode:
	.short	14
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	StartFastFadeFromBlack
@ opcode:
	.short	3
@ dataImm:
	.short	0
@ dataPtr:
	.word	WaitForFade
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	InitDraw
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	EnableBG0Display
@ opcode:
	.short	3
@ dataImm:
	.short	0
@ dataPtr:
	.word	ConfigMenuLoop
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	StartFastFadeToBlack
@ opcode:
	.short	3
@ dataImm:
	.short	0
@ dataPtr:
	.word	WaitForFade
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	ReloadAllUnits
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	RestoreBackgrounds
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	UnlockGame
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	BMapDispResume
@ opcode:
	.short	2
@ dataImm:
	.short	0
@ dataPtr:
	.word	EndAllMenus
@ opcode:
	.short	14
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
@ opcode:
	.short	0
@ dataImm:
	.short	0
@ dataPtr:
	.word	0
	.ident	"GCC: (devkitARM release 63) 13.2.0"
	.text
	.code 16
	.align	1
.L14:
	bx	r3
.L240:
	bx	r4
.L3231:
	bx	r5
.L341:
	bx	r6
.L223:
	bx	r7
.L179:
	bx	r8
.L557:
	bx	r9
.L785:
	bx	r10
.L434:
	bx	fp
